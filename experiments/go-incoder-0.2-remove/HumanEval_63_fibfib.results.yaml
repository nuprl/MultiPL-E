language: go_test.go
name: HumanEval_63_fibfib
results:
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n < 0 {\n        fmt.Println(\"fibfib: n must\
    \ be non-negative\")\n        return -1\n    }\n    if n == 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return fibfib(n-1) +\
    \ fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate\
    \ := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     {\
    \ actual: candidate(1), expected: 0 },\n     { actual: candidate(5), expected:\
    \ 4 },\n     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10),\
    \ expected: 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual:\
    \ candidate(14), expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: 'fibfib: n must be non-negative

    fibfib: n must be non-negative

    fibfib: n must be non-negative

    fibfib: n must be non-negative

    fibfib: n must be non-negative

    fibfib: n must be non-negative

    fibfib: n must be non-negative

    fibfib: n must be non-negative

    fibfib: n must be non-negative

    fibfib: n must be non-negative

    fibfib: n must be non-negative

    fibfib: n must be non-negative

    fibfib: n must be non-negative

    fibfib: n must be non-negative

    fibfib: n must be non-negative

    fibfib: n must be non-negative

    fibfib: n must be non-negative

    fibfib: n must be non-negative

    fibfib: n must be non-negative

    fibfib: n must be non-negative

    fibfib: n must be non-negative

    fibfib: n must be non-negative

    fibfib: n must be non-negative

    fibfib: n must be non-negative

    fibfib: n must be non-negative

    fibfib: n must be non-negative

    fibfib: n must be non-negative

    fibfib: n must be non-negative

    fibfib: n must be non-negative

    fibfib: n must be non-negative

    fibfib: n must be non-negative

    fibfib: n must be non-negative

    fibfib: n must be non-negative

    fibfib: n must be non-negative

    fibfib: n must be non-negative

    fibfib: n must be non-negative

    fibfib: n must be non-negative

    fibfib: n must be non-negative

    fibfib: n must be non-negative

    fibfib: n must be non-negative

    fibfib: n must be non-negative

    fibfib: n must be non-negative

    fibfib: n must be non-negative

    fibfib: n must be non-negative

    fibfib: n must be non-negative

    fibfib: n must be non-negative

    fibfib: n must be non-negative

    fibfib: n must be non-negative

    fibfib: n must be non-negative

    fibfib: n must be non-negative

    fibfib: n must be non-negative

    fibfib: n must be non-negative

    fibfib: n must be non-negative

    fibfib: n must be non-negative

    fibfib: n must be non-negative

    fibfib: n must be non-negative

    fibfib: n must be non-negative

    fibfib: n must be non-negative

    fibfib: n must be non-negative

    fibfib: n must be non-negative

    fibfib: n must be non-negative

    fibfib: n must be non-negative

    fibfib: n must be non-negative

    fibfib: n must be non-negative

    fibfib: n must be non-negative

    fibfib: n must be non-negative

    fi'
  timestamp: 1660074961
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n <= 0 {\n        return 0\n    }\n    if n ==\
    \ 1 {\n        return 0\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2), expected: 1 },\n     { actual: candidate(1), expected:\
    \ 0 },\n     { actual: candidate(5), expected: 4 },\n     { actual: candidate(8),\
    \ expected: 24 },\n     { actual: candidate(10), expected: 81 },\n     { actual:\
    \ candidate(12), expected: 274 },\n     { actual: candidate(14), expected: 927\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmpd9vw3dy0_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmpd9vw3dy0_test.go:43: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmpd9vw3dy0_test.go:43: expected '%!s(int=24)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmpd9vw3dy0_test.go:43: expected\
    \ '%!s(int=81)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__5 (0.00s)\n\
    \        tmpd9vw3dy0_test.go:43: expected '%!s(int=274)', got '%!s(int=0)'\n \
    \   --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmpd9vw3dy0_test.go:43:\
    \ expected '%!s(int=927)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074961
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n <= 0 {\n        return 0\n    }\n    if n ==\
    \ 1 {\n        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2), expected: 1 },\n     { actual: candidate(1), expected:\
    \ 0 },\n     { actual: candidate(5), expected: 4 },\n     { actual: candidate(8),\
    \ expected: 24 },\n     { actual: candidate(10), expected: 81 },\n     { actual:\
    \ candidate(12), expected: 274 },\n     { actual: candidate(14), expected: 927\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__1 (0.00s)\n\
    \        tmp3otr6pj0_test.go:43: expected '%!s(int=0)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmp3otr6pj0_test.go:43: expected\
    \ '%!s(int=4)', got '%!s(int=7)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmp3otr6pj0_test.go:43: expected '%!s(int=24)', got '%!s(int=44)'\n \
    \   --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmp3otr6pj0_test.go:43:\
    \ expected '%!s(int=81)', got '%!s(int=149)'\n    --- FAIL: TestFibfib/test_num__5\
    \ (0.00s)\n        tmp3otr6pj0_test.go:43: expected '%!s(int=274)', got '%!s(int=504)'\n\
    \    --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmp3otr6pj0_test.go:43:\
    \ expected '%!s(int=927)', got '%!s(int=1705)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074961
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n < 2 {\n        return n\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmpj17yvq_u_test.go:40: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestFibfib/test_num__1 (0.00s)\n        tmpj17yvq_u_test.go:40: expected\
    \ '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestFibfib/test_num__2 (0.00s)\n\
    \        tmpj17yvq_u_test.go:40: expected '%!s(int=4)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestFibfib/test_num__3 (0.00s)\n        tmpj17yvq_u_test.go:40: expected\
    \ '%!s(int=24)', got '%!s(int=20)'\n    --- FAIL: TestFibfib/test_num__4 (0.00s)\n\
    \        tmpj17yvq_u_test.go:40: expected '%!s(int=81)', got '%!s(int=68)'\n \
    \   --- FAIL: TestFibfib/test_num__5 (0.00s)\n        tmpj17yvq_u_test.go:40:\
    \ expected '%!s(int=274)', got '%!s(int=230)'\n    --- FAIL: TestFibfib/test_num__6\
    \ (0.00s)\n        tmpj17yvq_u_test.go:40: expected '%!s(int=927)', got '%!s(int=778)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074961
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n < 0 {\n        fmt.Println(\"fibfib: negative\
    \ number\")\n        return -1\n    }\n    if n == 0 {\n        return 0\n   \
    \ }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return\
    \ 1\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t\
    \ *testing.T) {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__1 (0.00s)\n\
    \        tmpcn65hvpy_test.go:50: expected '%!s(int=0)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmpcn65hvpy_test.go:50: expected\
    \ '%!s(int=4)', got '%!s(int=7)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmpcn65hvpy_test.go:50: expected '%!s(int=24)', got '%!s(int=44)'\n \
    \   --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmpcn65hvpy_test.go:50:\
    \ expected '%!s(int=81)', got '%!s(int=149)'\n    --- FAIL: TestFibfib/test_num__5\
    \ (0.00s)\n        tmpcn65hvpy_test.go:50: expected '%!s(int=274)', got '%!s(int=504)'\n\
    \    --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmpcn65hvpy_test.go:50:\
    \ expected '%!s(int=927)', got '%!s(int=1705)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074961
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n ==\
    \ 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n   \
    \ return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmp2nhnes_4_test.go:46: expected '%!s(int=1)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestFibfib/test_num__1 (0.00s)\n        tmp2nhnes_4_test.go:46: expected\
    \ '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestFibfib/test_num__2 (0.00s)\n\
    \        tmp2nhnes_4_test.go:46: expected '%!s(int=4)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestFibfib/test_num__3 (0.00s)\n        tmp2nhnes_4_test.go:46: expected\
    \ '%!s(int=24)', got '%!s(int=68)'\n    --- FAIL: TestFibfib/test_num__4 (0.00s)\n\
    \        tmp2nhnes_4_test.go:46: expected '%!s(int=81)', got '%!s(int=230)'\n\
    \    --- FAIL: TestFibfib/test_num__5 (0.00s)\n        tmp2nhnes_4_test.go:46:\
    \ expected '%!s(int=274)', got '%!s(int=778)'\n    --- FAIL: TestFibfib/test_num__6\
    \ (0.00s)\n        tmp2nhnes_4_test.go:46: expected '%!s(int=927)', got '%!s(int=2632)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074961
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n == 0 || n == 1 {\n        return 0\n    }\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160398\
    \ stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f352?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 18 [running]:\ncommand-line-arguments_test.fibfib(0xffffffffff333358)\n\
    \t/tmp/tmp7hyqvkw2_test.go:14 +0x8c fp=0xc0201603a8 sp=0xc0201603a0 pc=0x4ef6ec\n\
    command-line-arguments_test.fibfib(0xffffffffff333359)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc0201603d0 sp=0xc0201603a8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335a)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc0201603f8 sp=0xc0201603d0 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335b)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc020160420 sp=0xc0201603f8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335c)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc020160448 sp=0xc020160420 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335d)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc020160470 sp=0xc020160448 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335e)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc020160498 sp=0xc020160470 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335f)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc0201604c0 sp=0xc020160498 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff333360)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc0201604e8 sp=0xc0201604c0 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff333361)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc020160510 sp=0xc0201604e8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff333362)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc020160538 sp=0xc020160510 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff333363)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc02016"
  timestamp: 1660074962
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n == 0 || n == 1 {\n        return 0\n    }\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160398\
    \ stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f352?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 18 [running]:\ncommand-line-arguments_test.fibfib(0xffffffffff333358)\n\
    \t/tmp/tmp7hyqvkw2_test.go:14 +0x8c fp=0xc0201603a8 sp=0xc0201603a0 pc=0x4ef6ec\n\
    command-line-arguments_test.fibfib(0xffffffffff333359)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc0201603d0 sp=0xc0201603a8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335a)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc0201603f8 sp=0xc0201603d0 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335b)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc020160420 sp=0xc0201603f8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335c)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc020160448 sp=0xc020160420 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335d)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc020160470 sp=0xc020160448 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335e)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc020160498 sp=0xc020160470 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335f)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc0201604c0 sp=0xc020160498 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff333360)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc0201604e8 sp=0xc0201604c0 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff333361)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc020160510 sp=0xc0201604e8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff333362)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc020160538 sp=0xc020160510 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff333363)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc02016"
  timestamp: 1660074962
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n <= 0 {\n        return 0\n    }\n    if n ==\
    \ 1 {\n        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2), expected: 1 },\n     { actual: candidate(1), expected:\
    \ 0 },\n     { actual: candidate(5), expected: 4 },\n     { actual: candidate(8),\
    \ expected: 24 },\n     { actual: candidate(10), expected: 81 },\n     { actual:\
    \ candidate(12), expected: 274 },\n     { actual: candidate(14), expected: 927\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__1 (0.00s)\n\
    \        tmp3otr6pj0_test.go:43: expected '%!s(int=0)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmp3otr6pj0_test.go:43: expected\
    \ '%!s(int=4)', got '%!s(int=7)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmp3otr6pj0_test.go:43: expected '%!s(int=24)', got '%!s(int=44)'\n \
    \   --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmp3otr6pj0_test.go:43:\
    \ expected '%!s(int=81)', got '%!s(int=149)'\n    --- FAIL: TestFibfib/test_num__5\
    \ (0.00s)\n        tmp3otr6pj0_test.go:43: expected '%!s(int=274)', got '%!s(int=504)'\n\
    \    --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmp3otr6pj0_test.go:43:\
    \ expected '%!s(int=927)', got '%!s(int=1705)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074961
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n < 0 {\n        fmt.Println(\"fibfib: negative\
    \ number\")\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n\
    \    if n == 1 {\n        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     { actual:\
    \ candidate(1), expected: 0 },\n     { actual: candidate(5), expected: 4 },\n\
    \     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10), expected:\
    \ 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual: candidate(14),\
    \ expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: 'fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: '
  timestamp: 1660074961
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n < 0 {\n        fmt.Println(\"fibfib: negative\
    \ number\")\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n\
    \    if n == 1 {\n        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     { actual:\
    \ candidate(1), expected: 0 },\n     { actual: candidate(5), expected: 4 },\n\
    \     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10), expected:\
    \ 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual: candidate(14),\
    \ expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: 'fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: '
  timestamp: 1660074961
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n == 0 || n == 1 {\n        return 0\n    }\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160398\
    \ stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f352?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 18 [running]:\ncommand-line-arguments_test.fibfib(0xffffffffff333358)\n\
    \t/tmp/tmp7hyqvkw2_test.go:14 +0x8c fp=0xc0201603a8 sp=0xc0201603a0 pc=0x4ef6ec\n\
    command-line-arguments_test.fibfib(0xffffffffff333359)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc0201603d0 sp=0xc0201603a8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335a)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc0201603f8 sp=0xc0201603d0 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335b)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc020160420 sp=0xc0201603f8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335c)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc020160448 sp=0xc020160420 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335d)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc020160470 sp=0xc020160448 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335e)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc020160498 sp=0xc020160470 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335f)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc0201604c0 sp=0xc020160498 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff333360)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc0201604e8 sp=0xc0201604c0 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff333361)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc020160510 sp=0xc0201604e8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff333362)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc020160538 sp=0xc020160510 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff333363)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc02016"
  timestamp: 1660074962
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n == 0 || n == 1 {\n        return 0\n    }\n\
    \    if n == 2 {\n        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     { actual:\
    \ candidate(1), expected: 0 },\n     { actual: candidate(5), expected: 4 },\n\
    \     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10), expected:\
    \ 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual: candidate(14),\
    \ expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074961
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n <= 0 {\n        return 0\n    }\n    if n ==\
    \ 1 {\n        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n   \
    \ return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074961
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n < 0 {\n        return -1\n    }\n    if n ==\
    \ 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n   \
    \ return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmp5_6zwxxs_test.go:46: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestFibfib/test_num__1 (0.00s)\n        tmp5_6zwxxs_test.go:46: expected\
    \ '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestFibfib/test_num__2 (0.00s)\n\
    \        tmp5_6zwxxs_test.go:46: expected '%!s(int=4)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestFibfib/test_num__3 (0.00s)\n        tmp5_6zwxxs_test.go:46: expected\
    \ '%!s(int=24)', got '%!s(int=20)'\n    --- FAIL: TestFibfib/test_num__4 (0.00s)\n\
    \        tmp5_6zwxxs_test.go:46: expected '%!s(int=81)', got '%!s(int=68)'\n \
    \   --- FAIL: TestFibfib/test_num__5 (0.00s)\n        tmp5_6zwxxs_test.go:46:\
    \ expected '%!s(int=274)', got '%!s(int=230)'\n    --- FAIL: TestFibfib/test_num__6\
    \ (0.00s)\n        tmp5_6zwxxs_test.go:46: expected '%!s(int=927)', got '%!s(int=778)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074961
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n == 0 || n == 1 {\n        return 0\n    }\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160398\
    \ stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f352?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 18 [running]:\ncommand-line-arguments_test.fibfib(0xffffffffff333358)\n\
    \t/tmp/tmp7hyqvkw2_test.go:14 +0x8c fp=0xc0201603a8 sp=0xc0201603a0 pc=0x4ef6ec\n\
    command-line-arguments_test.fibfib(0xffffffffff333359)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc0201603d0 sp=0xc0201603a8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335a)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc0201603f8 sp=0xc0201603d0 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335b)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc020160420 sp=0xc0201603f8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335c)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc020160448 sp=0xc020160420 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335d)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc020160470 sp=0xc020160448 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335e)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc020160498 sp=0xc020160470 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335f)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc0201604c0 sp=0xc020160498 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff333360)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc0201604e8 sp=0xc0201604c0 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff333361)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc020160510 sp=0xc0201604e8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff333362)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc020160538 sp=0xc020160510 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff333363)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc02016"
  timestamp: 1660074962
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n ==\
    \ 1 {\n        return 1\n    }\n    if n == 2 {\n        return 1\n    }\n   \
    \ return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__1 (0.00s)\n\
    \        tmpy8aslpxq_test.go:46: expected '%!s(int=0)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmpy8aslpxq_test.go:46: expected\
    \ '%!s(int=4)', got '%!s(int=7)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmpy8aslpxq_test.go:46: expected '%!s(int=24)', got '%!s(int=44)'\n \
    \   --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmpy8aslpxq_test.go:46:\
    \ expected '%!s(int=81)', got '%!s(int=149)'\n    --- FAIL: TestFibfib/test_num__5\
    \ (0.00s)\n        tmpy8aslpxq_test.go:46: expected '%!s(int=274)', got '%!s(int=504)'\n\
    \    --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmpy8aslpxq_test.go:46:\
    \ expected '%!s(int=927)', got '%!s(int=1705)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074961
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n ==\
    \ 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n   \
    \ return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmp2nhnes_4_test.go:46: expected '%!s(int=1)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestFibfib/test_num__1 (0.00s)\n        tmp2nhnes_4_test.go:46: expected\
    \ '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestFibfib/test_num__2 (0.00s)\n\
    \        tmp2nhnes_4_test.go:46: expected '%!s(int=4)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestFibfib/test_num__3 (0.00s)\n        tmp2nhnes_4_test.go:46: expected\
    \ '%!s(int=24)', got '%!s(int=68)'\n    --- FAIL: TestFibfib/test_num__4 (0.00s)\n\
    \        tmp2nhnes_4_test.go:46: expected '%!s(int=81)', got '%!s(int=230)'\n\
    \    --- FAIL: TestFibfib/test_num__5 (0.00s)\n        tmp2nhnes_4_test.go:46:\
    \ expected '%!s(int=274)', got '%!s(int=778)'\n    --- FAIL: TestFibfib/test_num__6\
    \ (0.00s)\n        tmp2nhnes_4_test.go:46: expected '%!s(int=927)', got '%!s(int=2632)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074961
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n == 0 || n == 1 {\n        return 0\n    }\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160398\
    \ stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f352?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 18 [running]:\ncommand-line-arguments_test.fibfib(0xffffffffff333358)\n\
    \t/tmp/tmp7hyqvkw2_test.go:14 +0x8c fp=0xc0201603a8 sp=0xc0201603a0 pc=0x4ef6ec\n\
    command-line-arguments_test.fibfib(0xffffffffff333359)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc0201603d0 sp=0xc0201603a8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335a)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc0201603f8 sp=0xc0201603d0 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335b)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc020160420 sp=0xc0201603f8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335c)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc020160448 sp=0xc020160420 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335d)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc020160470 sp=0xc020160448 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335e)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc020160498 sp=0xc020160470 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335f)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc0201604c0 sp=0xc020160498 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff333360)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc0201604e8 sp=0xc0201604c0 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff333361)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc020160510 sp=0xc0201604e8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff333362)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc020160538 sp=0xc020160510 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff333363)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc02016"
  timestamp: 1660074962
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n <= 0 {\n        return 0\n    }\n    if n ==\
    \ 1 {\n        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n   \
    \ return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074961
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n < 0 {\n        fmt.Println(\"fibfib: negative\
    \ number\")\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n\
    \    if n == 1 {\n        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     { actual:\
    \ candidate(1), expected: 0 },\n     { actual: candidate(5), expected: 4 },\n\
    \     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10), expected:\
    \ 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual: candidate(14),\
    \ expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: 'fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: '
  timestamp: 1660074961
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n ==\
    \ 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n   \
    \ return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmp2nhnes_4_test.go:46: expected '%!s(int=1)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestFibfib/test_num__1 (0.00s)\n        tmp2nhnes_4_test.go:46: expected\
    \ '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestFibfib/test_num__2 (0.00s)\n\
    \        tmp2nhnes_4_test.go:46: expected '%!s(int=4)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestFibfib/test_num__3 (0.00s)\n        tmp2nhnes_4_test.go:46: expected\
    \ '%!s(int=24)', got '%!s(int=68)'\n    --- FAIL: TestFibfib/test_num__4 (0.00s)\n\
    \        tmp2nhnes_4_test.go:46: expected '%!s(int=81)', got '%!s(int=230)'\n\
    \    --- FAIL: TestFibfib/test_num__5 (0.00s)\n        tmp2nhnes_4_test.go:46:\
    \ expected '%!s(int=274)', got '%!s(int=778)'\n    --- FAIL: TestFibfib/test_num__6\
    \ (0.00s)\n        tmp2nhnes_4_test.go:46: expected '%!s(int=927)', got '%!s(int=2632)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074961
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n <= 0 {\n        return 0\n    }\n    if n ==\
    \ 1 {\n        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n   \
    \ return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074961
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n < 2 {\n        return 0\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmpfso82c6i_test.go:40: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmpfso82c6i_test.go:40: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmpfso82c6i_test.go:40: expected '%!s(int=24)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmpfso82c6i_test.go:40: expected\
    \ '%!s(int=81)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__5 (0.00s)\n\
    \        tmpfso82c6i_test.go:40: expected '%!s(int=274)', got '%!s(int=0)'\n \
    \   --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmpfso82c6i_test.go:40:\
    \ expected '%!s(int=927)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074961
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n <= 0 {\n        return 0\n    }\n    if n ==\
    \ 1 {\n        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2), expected: 1 },\n     { actual: candidate(1), expected:\
    \ 0 },\n     { actual: candidate(5), expected: 4 },\n     { actual: candidate(8),\
    \ expected: 24 },\n     { actual: candidate(10), expected: 81 },\n     { actual:\
    \ candidate(12), expected: 274 },\n     { actual: candidate(14), expected: 927\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__1 (0.00s)\n\
    \        tmp3otr6pj0_test.go:43: expected '%!s(int=0)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmp3otr6pj0_test.go:43: expected\
    \ '%!s(int=4)', got '%!s(int=7)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmp3otr6pj0_test.go:43: expected '%!s(int=24)', got '%!s(int=44)'\n \
    \   --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmp3otr6pj0_test.go:43:\
    \ expected '%!s(int=81)', got '%!s(int=149)'\n    --- FAIL: TestFibfib/test_num__5\
    \ (0.00s)\n        tmp3otr6pj0_test.go:43: expected '%!s(int=274)', got '%!s(int=504)'\n\
    \    --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmp3otr6pj0_test.go:43:\
    \ expected '%!s(int=927)', got '%!s(int=1705)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074961
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n < 0 {\n        fmt.Println(\"fibfib: negative\
    \ number\")\n        return -1\n    }\n    if n == 0 {\n        return 0\n   \
    \ }\n    if n == 1 {\n        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     { actual:\
    \ candidate(1), expected: 0 },\n     { actual: candidate(5), expected: 4 },\n\
    \     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10), expected:\
    \ 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual: candidate(14),\
    \ expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: 'fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: '
  timestamp: 1660074961
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n < 2 {\n        return n\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmpj17yvq_u_test.go:40: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestFibfib/test_num__1 (0.00s)\n        tmpj17yvq_u_test.go:40: expected\
    \ '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestFibfib/test_num__2 (0.00s)\n\
    \        tmpj17yvq_u_test.go:40: expected '%!s(int=4)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestFibfib/test_num__3 (0.00s)\n        tmpj17yvq_u_test.go:40: expected\
    \ '%!s(int=24)', got '%!s(int=20)'\n    --- FAIL: TestFibfib/test_num__4 (0.00s)\n\
    \        tmpj17yvq_u_test.go:40: expected '%!s(int=81)', got '%!s(int=68)'\n \
    \   --- FAIL: TestFibfib/test_num__5 (0.00s)\n        tmpj17yvq_u_test.go:40:\
    \ expected '%!s(int=274)', got '%!s(int=230)'\n    --- FAIL: TestFibfib/test_num__6\
    \ (0.00s)\n        tmpj17yvq_u_test.go:40: expected '%!s(int=927)', got '%!s(int=778)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074961
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n ==\
    \ 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n   \
    \ return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmp2nhnes_4_test.go:46: expected '%!s(int=1)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestFibfib/test_num__1 (0.00s)\n        tmp2nhnes_4_test.go:46: expected\
    \ '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestFibfib/test_num__2 (0.00s)\n\
    \        tmp2nhnes_4_test.go:46: expected '%!s(int=4)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestFibfib/test_num__3 (0.00s)\n        tmp2nhnes_4_test.go:46: expected\
    \ '%!s(int=24)', got '%!s(int=68)'\n    --- FAIL: TestFibfib/test_num__4 (0.00s)\n\
    \        tmp2nhnes_4_test.go:46: expected '%!s(int=81)', got '%!s(int=230)'\n\
    \    --- FAIL: TestFibfib/test_num__5 (0.00s)\n        tmp2nhnes_4_test.go:46:\
    \ expected '%!s(int=274)', got '%!s(int=778)'\n    --- FAIL: TestFibfib/test_num__6\
    \ (0.00s)\n        tmp2nhnes_4_test.go:46: expected '%!s(int=927)', got '%!s(int=2632)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074961
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n <= 0 {\n        return 0\n    }\n    if n ==\
    \ 1 {\n        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n   \
    \ return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074961
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n <= 0 {\n        return 0\n    }\n    if n ==\
    \ 1 {\n        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n   \
    \ return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074961
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n ==\
    \ 1 {\n        return 1\n    }\n    if n == 2 {\n        return 1\n    }\n   \
    \ return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__1 (0.00s)\n\
    \        tmpy8aslpxq_test.go:46: expected '%!s(int=0)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmpy8aslpxq_test.go:46: expected\
    \ '%!s(int=4)', got '%!s(int=7)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmpy8aslpxq_test.go:46: expected '%!s(int=24)', got '%!s(int=44)'\n \
    \   --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmpy8aslpxq_test.go:46:\
    \ expected '%!s(int=81)', got '%!s(int=149)'\n    --- FAIL: TestFibfib/test_num__5\
    \ (0.00s)\n        tmpy8aslpxq_test.go:46: expected '%!s(int=274)', got '%!s(int=504)'\n\
    \    --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmpy8aslpxq_test.go:46:\
    \ expected '%!s(int=927)', got '%!s(int=1705)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074961
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n <= 1 {\n        return 0\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmpnecctlvm_test.go:40: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmpnecctlvm_test.go:40: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmpnecctlvm_test.go:40: expected '%!s(int=24)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmpnecctlvm_test.go:40: expected\
    \ '%!s(int=81)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__5 (0.00s)\n\
    \        tmpnecctlvm_test.go:40: expected '%!s(int=274)', got '%!s(int=0)'\n \
    \   --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmpnecctlvm_test.go:40:\
    \ expected '%!s(int=927)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074961
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n == 0 || n == 1 {\n        return 0\n    }\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160398\
    \ stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f352?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 18 [running]:\ncommand-line-arguments_test.fibfib(0xffffffffff333358)\n\
    \t/tmp/tmp7hyqvkw2_test.go:14 +0x8c fp=0xc0201603a8 sp=0xc0201603a0 pc=0x4ef6ec\n\
    command-line-arguments_test.fibfib(0xffffffffff333359)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc0201603d0 sp=0xc0201603a8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335a)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc0201603f8 sp=0xc0201603d0 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335b)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc020160420 sp=0xc0201603f8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335c)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc020160448 sp=0xc020160420 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335d)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc020160470 sp=0xc020160448 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335e)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc020160498 sp=0xc020160470 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335f)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc0201604c0 sp=0xc020160498 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff333360)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc0201604e8 sp=0xc0201604c0 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff333361)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc020160510 sp=0xc0201604e8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff333362)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc020160538 sp=0xc020160510 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff333363)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc02016"
  timestamp: 1660074962
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n == 0 || n == 1 {\n        return 0\n    }\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160398\
    \ stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f352?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 18 [running]:\ncommand-line-arguments_test.fibfib(0xffffffffff333358)\n\
    \t/tmp/tmp7hyqvkw2_test.go:14 +0x8c fp=0xc0201603a8 sp=0xc0201603a0 pc=0x4ef6ec\n\
    command-line-arguments_test.fibfib(0xffffffffff333359)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc0201603d0 sp=0xc0201603a8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335a)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc0201603f8 sp=0xc0201603d0 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335b)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc020160420 sp=0xc0201603f8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335c)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc020160448 sp=0xc020160420 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335d)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc020160470 sp=0xc020160448 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335e)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc020160498 sp=0xc020160470 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335f)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc0201604c0 sp=0xc020160498 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff333360)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc0201604e8 sp=0xc0201604c0 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff333361)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc020160510 sp=0xc0201604e8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff333362)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc020160538 sp=0xc020160510 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff333363)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc02016"
  timestamp: 1660074962
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n == 0 || n == 1 {\n        return 0\n    }\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160398\
    \ stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f352?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 18 [running]:\ncommand-line-arguments_test.fibfib(0xffffffffff333358)\n\
    \t/tmp/tmp7hyqvkw2_test.go:14 +0x8c fp=0xc0201603a8 sp=0xc0201603a0 pc=0x4ef6ec\n\
    command-line-arguments_test.fibfib(0xffffffffff333359)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc0201603d0 sp=0xc0201603a8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335a)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc0201603f8 sp=0xc0201603d0 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335b)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc020160420 sp=0xc0201603f8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335c)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc020160448 sp=0xc020160420 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335d)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc020160470 sp=0xc020160448 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335e)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc020160498 sp=0xc020160470 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335f)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc0201604c0 sp=0xc020160498 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff333360)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc0201604e8 sp=0xc0201604c0 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff333361)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc020160510 sp=0xc0201604e8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff333362)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc020160538 sp=0xc020160510 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff333363)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc02016"
  timestamp: 1660074962
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n <= 0 {\n        return 0\n    }\n    if n ==\
    \ 1 {\n        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n   \
    \ return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074961
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n < 0 {\n        fmt.Println(\"fibfib: negative\
    \ number\")\n        return -1\n    }\n    if n == 0 {\n        return 0\n   \
    \ }\n    if n == 1 {\n        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     { actual:\
    \ candidate(1), expected: 0 },\n     { actual: candidate(5), expected: 4 },\n\
    \     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10), expected:\
    \ 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual: candidate(14),\
    \ expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: 'fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: '
  timestamp: 1660074961
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n == 0 || n == 1 {\n        return 0\n    }\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160398\
    \ stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f352?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 18 [running]:\ncommand-line-arguments_test.fibfib(0xffffffffff333358)\n\
    \t/tmp/tmp7hyqvkw2_test.go:14 +0x8c fp=0xc0201603a8 sp=0xc0201603a0 pc=0x4ef6ec\n\
    command-line-arguments_test.fibfib(0xffffffffff333359)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc0201603d0 sp=0xc0201603a8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335a)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc0201603f8 sp=0xc0201603d0 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335b)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc020160420 sp=0xc0201603f8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335c)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc020160448 sp=0xc020160420 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335d)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc020160470 sp=0xc020160448 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335e)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc020160498 sp=0xc020160470 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335f)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc0201604c0 sp=0xc020160498 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff333360)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc0201604e8 sp=0xc0201604c0 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff333361)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc020160510 sp=0xc0201604e8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff333362)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc020160538 sp=0xc020160510 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff333363)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc02016"
  timestamp: 1660074962
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n ==\
    \ 1 {\n        return 1\n    }\n    if n == 2 {\n        return 1\n    }\n   \
    \ return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__1 (0.00s)\n\
    \        tmpy8aslpxq_test.go:46: expected '%!s(int=0)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmpy8aslpxq_test.go:46: expected\
    \ '%!s(int=4)', got '%!s(int=7)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmpy8aslpxq_test.go:46: expected '%!s(int=24)', got '%!s(int=44)'\n \
    \   --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmpy8aslpxq_test.go:46:\
    \ expected '%!s(int=81)', got '%!s(int=149)'\n    --- FAIL: TestFibfib/test_num__5\
    \ (0.00s)\n        tmpy8aslpxq_test.go:46: expected '%!s(int=274)', got '%!s(int=504)'\n\
    \    --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmpy8aslpxq_test.go:46:\
    \ expected '%!s(int=927)', got '%!s(int=1705)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074961
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n == 0 || n == 1 {\n        return 0\n    }\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160398\
    \ stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f352?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 18 [running]:\ncommand-line-arguments_test.fibfib(0xffffffffff333358)\n\
    \t/tmp/tmp7hyqvkw2_test.go:14 +0x8c fp=0xc0201603a8 sp=0xc0201603a0 pc=0x4ef6ec\n\
    command-line-arguments_test.fibfib(0xffffffffff333359)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc0201603d0 sp=0xc0201603a8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335a)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc0201603f8 sp=0xc0201603d0 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335b)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc020160420 sp=0xc0201603f8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335c)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc020160448 sp=0xc020160420 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335d)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc020160470 sp=0xc020160448 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335e)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc020160498 sp=0xc020160470 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335f)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc0201604c0 sp=0xc020160498 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff333360)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc0201604e8 sp=0xc0201604c0 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff333361)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc020160510 sp=0xc0201604e8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff333362)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc020160538 sp=0xc020160510 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff333363)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc02016"
  timestamp: 1660074962
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n < 0 {\n        fmt.Println(\"fibfib: negative\
    \ number\")\n        return -1\n    }\n    if n == 0 {\n        return 0\n   \
    \ }\n    if n == 1 {\n        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     { actual:\
    \ candidate(1), expected: 0 },\n     { actual: candidate(5), expected: 4 },\n\
    \     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10), expected:\
    \ 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual: candidate(14),\
    \ expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: 'fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: '
  timestamp: 1660074961
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n <= 0 {\n        return 0\n    }\n    if n ==\
    \ 1 {\n        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n   \
    \ return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074961
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n ==\
    \ 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n   \
    \ return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmp2nhnes_4_test.go:46: expected '%!s(int=1)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestFibfib/test_num__1 (0.00s)\n        tmp2nhnes_4_test.go:46: expected\
    \ '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestFibfib/test_num__2 (0.00s)\n\
    \        tmp2nhnes_4_test.go:46: expected '%!s(int=4)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestFibfib/test_num__3 (0.00s)\n        tmp2nhnes_4_test.go:46: expected\
    \ '%!s(int=24)', got '%!s(int=68)'\n    --- FAIL: TestFibfib/test_num__4 (0.00s)\n\
    \        tmp2nhnes_4_test.go:46: expected '%!s(int=81)', got '%!s(int=230)'\n\
    \    --- FAIL: TestFibfib/test_num__5 (0.00s)\n        tmp2nhnes_4_test.go:46:\
    \ expected '%!s(int=274)', got '%!s(int=778)'\n    --- FAIL: TestFibfib/test_num__6\
    \ (0.00s)\n        tmp2nhnes_4_test.go:46: expected '%!s(int=927)', got '%!s(int=2632)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074961
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n < 0 {\n        fmt.Println(\"fibfib: negative\
    \ number\")\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n\
    \    if n == 1 {\n        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     { actual:\
    \ candidate(1), expected: 0 },\n     { actual: candidate(5), expected: 4 },\n\
    \     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10), expected:\
    \ 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual: candidate(14),\
    \ expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: 'fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: '
  timestamp: 1660074961
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n <= 0 {\n        return 0\n    }\n    if n ==\
    \ 1 {\n        return 0\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2), expected: 1 },\n     { actual: candidate(1), expected:\
    \ 0 },\n     { actual: candidate(5), expected: 4 },\n     { actual: candidate(8),\
    \ expected: 24 },\n     { actual: candidate(10), expected: 81 },\n     { actual:\
    \ candidate(12), expected: 274 },\n     { actual: candidate(14), expected: 927\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmpd9vw3dy0_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmpd9vw3dy0_test.go:43: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmpd9vw3dy0_test.go:43: expected '%!s(int=24)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmpd9vw3dy0_test.go:43: expected\
    \ '%!s(int=81)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__5 (0.00s)\n\
    \        tmpd9vw3dy0_test.go:43: expected '%!s(int=274)', got '%!s(int=0)'\n \
    \   --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmpd9vw3dy0_test.go:43:\
    \ expected '%!s(int=927)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074961
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n < 0 {\n        fmt.Println(\"fibfib: n must\
    \ be >= 0.\")\n        return -1\n    }\n    if n == 0 {\n        return 0\n \
    \   }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return\
    \ 1\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t\
    \ *testing.T) {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__1 (0.00s)\n\
    \        tmpewjcloq9_test.go:50: expected '%!s(int=0)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmpewjcloq9_test.go:50: expected\
    \ '%!s(int=4)', got '%!s(int=7)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmpewjcloq9_test.go:50: expected '%!s(int=24)', got '%!s(int=44)'\n \
    \   --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmpewjcloq9_test.go:50:\
    \ expected '%!s(int=81)', got '%!s(int=149)'\n    --- FAIL: TestFibfib/test_num__5\
    \ (0.00s)\n        tmpewjcloq9_test.go:50: expected '%!s(int=274)', got '%!s(int=504)'\n\
    \    --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmpewjcloq9_test.go:50:\
    \ expected '%!s(int=927)', got '%!s(int=1705)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074961
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n == 0 || n == 1 {\n        return 0\n    }\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160398\
    \ stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f352?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 18 [running]:\ncommand-line-arguments_test.fibfib(0xffffffffff333358)\n\
    \t/tmp/tmp7hyqvkw2_test.go:14 +0x8c fp=0xc0201603a8 sp=0xc0201603a0 pc=0x4ef6ec\n\
    command-line-arguments_test.fibfib(0xffffffffff333359)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc0201603d0 sp=0xc0201603a8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335a)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc0201603f8 sp=0xc0201603d0 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335b)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc020160420 sp=0xc0201603f8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335c)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc020160448 sp=0xc020160420 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335d)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc020160470 sp=0xc020160448 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335e)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc020160498 sp=0xc020160470 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335f)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc0201604c0 sp=0xc020160498 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff333360)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc0201604e8 sp=0xc0201604c0 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff333361)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc020160510 sp=0xc0201604e8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff333362)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc020160538 sp=0xc020160510 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff333363)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc02016"
  timestamp: 1660074962
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n == 0 || n == 1 {\n        return 0\n    }\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160398\
    \ stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f352?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 18 [running]:\ncommand-line-arguments_test.fibfib(0xffffffffff333358)\n\
    \t/tmp/tmp7hyqvkw2_test.go:14 +0x8c fp=0xc0201603a8 sp=0xc0201603a0 pc=0x4ef6ec\n\
    command-line-arguments_test.fibfib(0xffffffffff333359)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc0201603d0 sp=0xc0201603a8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335a)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc0201603f8 sp=0xc0201603d0 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335b)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc020160420 sp=0xc0201603f8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335c)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc020160448 sp=0xc020160420 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335d)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc020160470 sp=0xc020160448 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335e)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc020160498 sp=0xc020160470 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335f)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc0201604c0 sp=0xc020160498 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff333360)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc0201604e8 sp=0xc0201604c0 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff333361)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc020160510 sp=0xc0201604e8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff333362)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc020160538 sp=0xc020160510 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff333363)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc02016"
  timestamp: 1660074962
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n <= 0 {\n        return 0\n    }\n    if n ==\
    \ 1 {\n        return 0\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2), expected: 1 },\n     { actual: candidate(1), expected:\
    \ 0 },\n     { actual: candidate(5), expected: 4 },\n     { actual: candidate(8),\
    \ expected: 24 },\n     { actual: candidate(10), expected: 81 },\n     { actual:\
    \ candidate(12), expected: 274 },\n     { actual: candidate(14), expected: 927\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmpd9vw3dy0_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmpd9vw3dy0_test.go:43: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmpd9vw3dy0_test.go:43: expected '%!s(int=24)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmpd9vw3dy0_test.go:43: expected\
    \ '%!s(int=81)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__5 (0.00s)\n\
    \        tmpd9vw3dy0_test.go:43: expected '%!s(int=274)', got '%!s(int=0)'\n \
    \   --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmpd9vw3dy0_test.go:43:\
    \ expected '%!s(int=927)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074961
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n ==\
    \ 1 {\n        return 1\n    }\n    if n == 2 {\n        return 1\n    }\n   \
    \ return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__1 (0.00s)\n\
    \        tmpy8aslpxq_test.go:46: expected '%!s(int=0)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmpy8aslpxq_test.go:46: expected\
    \ '%!s(int=4)', got '%!s(int=7)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmpy8aslpxq_test.go:46: expected '%!s(int=24)', got '%!s(int=44)'\n \
    \   --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmpy8aslpxq_test.go:46:\
    \ expected '%!s(int=81)', got '%!s(int=149)'\n    --- FAIL: TestFibfib/test_num__5\
    \ (0.00s)\n        tmpy8aslpxq_test.go:46: expected '%!s(int=274)', got '%!s(int=504)'\n\
    \    --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmpy8aslpxq_test.go:46:\
    \ expected '%!s(int=927)', got '%!s(int=1705)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074961
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n <= 0 {\n        return 0\n    }\n    if n ==\
    \ 1 {\n        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n   \
    \ return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074961
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n < 2 {\n        return n\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmpj17yvq_u_test.go:40: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestFibfib/test_num__1 (0.00s)\n        tmpj17yvq_u_test.go:40: expected\
    \ '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestFibfib/test_num__2 (0.00s)\n\
    \        tmpj17yvq_u_test.go:40: expected '%!s(int=4)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestFibfib/test_num__3 (0.00s)\n        tmpj17yvq_u_test.go:40: expected\
    \ '%!s(int=24)', got '%!s(int=20)'\n    --- FAIL: TestFibfib/test_num__4 (0.00s)\n\
    \        tmpj17yvq_u_test.go:40: expected '%!s(int=81)', got '%!s(int=68)'\n \
    \   --- FAIL: TestFibfib/test_num__5 (0.00s)\n        tmpj17yvq_u_test.go:40:\
    \ expected '%!s(int=274)', got '%!s(int=230)'\n    --- FAIL: TestFibfib/test_num__6\
    \ (0.00s)\n        tmpj17yvq_u_test.go:40: expected '%!s(int=927)', got '%!s(int=778)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074961
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n <= 0 {\n        return 0\n    }\n    if n ==\
    \ 1 {\n        return 1\n    }\n    if n == 2 {\n        return 1\n    }\n   \
    \ return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__1 (0.00s)\n\
    \        tmpe_u4o92b_test.go:46: expected '%!s(int=0)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmpe_u4o92b_test.go:46: expected\
    \ '%!s(int=4)', got '%!s(int=7)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmpe_u4o92b_test.go:46: expected '%!s(int=24)', got '%!s(int=44)'\n \
    \   --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmpe_u4o92b_test.go:46:\
    \ expected '%!s(int=81)', got '%!s(int=149)'\n    --- FAIL: TestFibfib/test_num__5\
    \ (0.00s)\n        tmpe_u4o92b_test.go:46: expected '%!s(int=274)', got '%!s(int=504)'\n\
    \    --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmpe_u4o92b_test.go:46:\
    \ expected '%!s(int=927)', got '%!s(int=1705)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074961
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n == 0 || n == 1 {\n        return 0\n    }\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160398\
    \ stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f352?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 18 [running]:\ncommand-line-arguments_test.fibfib(0xffffffffff333358)\n\
    \t/tmp/tmp7hyqvkw2_test.go:14 +0x8c fp=0xc0201603a8 sp=0xc0201603a0 pc=0x4ef6ec\n\
    command-line-arguments_test.fibfib(0xffffffffff333359)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc0201603d0 sp=0xc0201603a8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335a)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc0201603f8 sp=0xc0201603d0 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335b)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc020160420 sp=0xc0201603f8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335c)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc020160448 sp=0xc020160420 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335d)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc020160470 sp=0xc020160448 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335e)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc020160498 sp=0xc020160470 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335f)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc0201604c0 sp=0xc020160498 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff333360)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc0201604e8 sp=0xc0201604c0 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff333361)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc020160510 sp=0xc0201604e8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff333362)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc020160538 sp=0xc020160510 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff333363)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc02016"
  timestamp: 1660074962
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n <= 0 {\n        return 0\n    }\n    if n ==\
    \ 1 {\n        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2), expected: 1 },\n     { actual: candidate(1), expected:\
    \ 0 },\n     { actual: candidate(5), expected: 4 },\n     { actual: candidate(8),\
    \ expected: 24 },\n     { actual: candidate(10), expected: 81 },\n     { actual:\
    \ candidate(12), expected: 274 },\n     { actual: candidate(14), expected: 927\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__1 (0.00s)\n\
    \        tmp3otr6pj0_test.go:43: expected '%!s(int=0)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmp3otr6pj0_test.go:43: expected\
    \ '%!s(int=4)', got '%!s(int=7)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmp3otr6pj0_test.go:43: expected '%!s(int=24)', got '%!s(int=44)'\n \
    \   --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmp3otr6pj0_test.go:43:\
    \ expected '%!s(int=81)', got '%!s(int=149)'\n    --- FAIL: TestFibfib/test_num__5\
    \ (0.00s)\n        tmp3otr6pj0_test.go:43: expected '%!s(int=274)', got '%!s(int=504)'\n\
    \    --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmp3otr6pj0_test.go:43:\
    \ expected '%!s(int=927)', got '%!s(int=1705)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074961
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n == 0 || n == 1 {\n        return 0\n    }\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160398\
    \ stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f352?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 18 [running]:\ncommand-line-arguments_test.fibfib(0xffffffffff333358)\n\
    \t/tmp/tmp7hyqvkw2_test.go:14 +0x8c fp=0xc0201603a8 sp=0xc0201603a0 pc=0x4ef6ec\n\
    command-line-arguments_test.fibfib(0xffffffffff333359)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc0201603d0 sp=0xc0201603a8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335a)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc0201603f8 sp=0xc0201603d0 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335b)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc020160420 sp=0xc0201603f8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335c)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc020160448 sp=0xc020160420 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335d)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc020160470 sp=0xc020160448 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335e)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc020160498 sp=0xc020160470 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335f)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc0201604c0 sp=0xc020160498 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff333360)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc0201604e8 sp=0xc0201604c0 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff333361)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc020160510 sp=0xc0201604e8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff333362)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc020160538 sp=0xc020160510 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff333363)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc02016"
  timestamp: 1660074962
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n ==\
    \ 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n   \
    \ return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmp2nhnes_4_test.go:46: expected '%!s(int=1)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestFibfib/test_num__1 (0.00s)\n        tmp2nhnes_4_test.go:46: expected\
    \ '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestFibfib/test_num__2 (0.00s)\n\
    \        tmp2nhnes_4_test.go:46: expected '%!s(int=4)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestFibfib/test_num__3 (0.00s)\n        tmp2nhnes_4_test.go:46: expected\
    \ '%!s(int=24)', got '%!s(int=68)'\n    --- FAIL: TestFibfib/test_num__4 (0.00s)\n\
    \        tmp2nhnes_4_test.go:46: expected '%!s(int=81)', got '%!s(int=230)'\n\
    \    --- FAIL: TestFibfib/test_num__5 (0.00s)\n        tmp2nhnes_4_test.go:46:\
    \ expected '%!s(int=274)', got '%!s(int=778)'\n    --- FAIL: TestFibfib/test_num__6\
    \ (0.00s)\n        tmp2nhnes_4_test.go:46: expected '%!s(int=927)', got '%!s(int=2632)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074961
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n == 0 || n == 1 {\n        return 0\n    }\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160398\
    \ stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f352?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 18 [running]:\ncommand-line-arguments_test.fibfib(0xffffffffff333358)\n\
    \t/tmp/tmp7hyqvkw2_test.go:14 +0x8c fp=0xc0201603a8 sp=0xc0201603a0 pc=0x4ef6ec\n\
    command-line-arguments_test.fibfib(0xffffffffff333359)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc0201603d0 sp=0xc0201603a8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335a)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc0201603f8 sp=0xc0201603d0 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335b)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc020160420 sp=0xc0201603f8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335c)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc020160448 sp=0xc020160420 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335d)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc020160470 sp=0xc020160448 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335e)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc020160498 sp=0xc020160470 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335f)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc0201604c0 sp=0xc020160498 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff333360)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc0201604e8 sp=0xc0201604c0 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff333361)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc020160510 sp=0xc0201604e8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff333362)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc020160538 sp=0xc020160510 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff333363)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc02016"
  timestamp: 1660074962
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n < 0 {\n        fmt.Println(\"fibfib: negative\
    \ number\")\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n\
    \    if n == 1 {\n        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     { actual:\
    \ candidate(1), expected: 0 },\n     { actual: candidate(5), expected: 4 },\n\
    \     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10), expected:\
    \ 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual: candidate(14),\
    \ expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: 'fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: '
  timestamp: 1660074961
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n <= 0 {\n        return 0\n    }\n    if n ==\
    \ 1 {\n        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n   \
    \ return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074961
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n ==\
    \ 1 {\n        return 1\n    }\n    if n == 2 {\n        return 1\n    }\n   \
    \ return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__1 (0.00s)\n\
    \        tmpy8aslpxq_test.go:46: expected '%!s(int=0)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmpy8aslpxq_test.go:46: expected\
    \ '%!s(int=4)', got '%!s(int=7)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmpy8aslpxq_test.go:46: expected '%!s(int=24)', got '%!s(int=44)'\n \
    \   --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmpy8aslpxq_test.go:46:\
    \ expected '%!s(int=81)', got '%!s(int=149)'\n    --- FAIL: TestFibfib/test_num__5\
    \ (0.00s)\n        tmpy8aslpxq_test.go:46: expected '%!s(int=274)', got '%!s(int=504)'\n\
    \    --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmpy8aslpxq_test.go:46:\
    \ expected '%!s(int=927)', got '%!s(int=1705)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074961
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n == 0 || n == 1 {\n        return 0\n    }\n\
    \    if n == 2 {\n        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     { actual:\
    \ candidate(1), expected: 0 },\n     { actual: candidate(5), expected: 4 },\n\
    \     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10), expected:\
    \ 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual: candidate(14),\
    \ expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074961
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n < 0 {\n        fmt.Println(\"fibfib: negative\
    \ number\")\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n\
    \    if n == 1 {\n        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     { actual:\
    \ candidate(1), expected: 0 },\n     { actual: candidate(5), expected: 4 },\n\
    \     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10), expected:\
    \ 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual: candidate(14),\
    \ expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: 'fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: '
  timestamp: 1660074961
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n == 0 || n == 1 {\n        return 0\n    }\n\
    \    if n == 2 {\n        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     { actual:\
    \ candidate(1), expected: 0 },\n     { actual: candidate(5), expected: 4 },\n\
    \     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10), expected:\
    \ 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual: candidate(14),\
    \ expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074961
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n <= 0 {\n        return 0\n    }\n    if n ==\
    \ 1 {\n        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n   \
    \ return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074961
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n ==\
    \ 1 {\n        return 1\n    }\n    if n == 2 {\n        return 1\n    }\n   \
    \ return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__1 (0.00s)\n\
    \        tmpy8aslpxq_test.go:46: expected '%!s(int=0)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmpy8aslpxq_test.go:46: expected\
    \ '%!s(int=4)', got '%!s(int=7)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmpy8aslpxq_test.go:46: expected '%!s(int=24)', got '%!s(int=44)'\n \
    \   --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmpy8aslpxq_test.go:46:\
    \ expected '%!s(int=81)', got '%!s(int=149)'\n    --- FAIL: TestFibfib/test_num__5\
    \ (0.00s)\n        tmpy8aslpxq_test.go:46: expected '%!s(int=274)', got '%!s(int=504)'\n\
    \    --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmpy8aslpxq_test.go:46:\
    \ expected '%!s(int=927)', got '%!s(int=1705)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074961
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n <= 0 {\n        return 0\n    }\n    if n ==\
    \ 1 {\n        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n   \
    \ return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074961
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n < 0 {\n        fmt.Println(\"fibfib: negative\
    \ number\")\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n\
    \    if n == 1 {\n        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     { actual:\
    \ candidate(1), expected: 0 },\n     { actual: candidate(5), expected: 4 },\n\
    \     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10), expected:\
    \ 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual: candidate(14),\
    \ expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: 'fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: '
  timestamp: 1660074961
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n <= 0 {\n        return 0\n    }\n    if n ==\
    \ 1 {\n        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n   \
    \ return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074961
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n ==\
    \ 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n   \
    \ return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmp2nhnes_4_test.go:46: expected '%!s(int=1)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestFibfib/test_num__1 (0.00s)\n        tmp2nhnes_4_test.go:46: expected\
    \ '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestFibfib/test_num__2 (0.00s)\n\
    \        tmp2nhnes_4_test.go:46: expected '%!s(int=4)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestFibfib/test_num__3 (0.00s)\n        tmp2nhnes_4_test.go:46: expected\
    \ '%!s(int=24)', got '%!s(int=68)'\n    --- FAIL: TestFibfib/test_num__4 (0.00s)\n\
    \        tmp2nhnes_4_test.go:46: expected '%!s(int=81)', got '%!s(int=230)'\n\
    \    --- FAIL: TestFibfib/test_num__5 (0.00s)\n        tmp2nhnes_4_test.go:46:\
    \ expected '%!s(int=274)', got '%!s(int=778)'\n    --- FAIL: TestFibfib/test_num__6\
    \ (0.00s)\n        tmp2nhnes_4_test.go:46: expected '%!s(int=927)', got '%!s(int=2632)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074961
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n < 0 {\n        fmt.Println(\"fibfib: negative\
    \ number\")\n        return -1\n    }\n    if n == 0 {\n        return 0\n   \
    \ }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return\
    \ 1\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t\
    \ *testing.T) {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__1 (0.00s)\n\
    \        tmpcn65hvpy_test.go:50: expected '%!s(int=0)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmpcn65hvpy_test.go:50: expected\
    \ '%!s(int=4)', got '%!s(int=7)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmpcn65hvpy_test.go:50: expected '%!s(int=24)', got '%!s(int=44)'\n \
    \   --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmpcn65hvpy_test.go:50:\
    \ expected '%!s(int=81)', got '%!s(int=149)'\n    --- FAIL: TestFibfib/test_num__5\
    \ (0.00s)\n        tmpcn65hvpy_test.go:50: expected '%!s(int=274)', got '%!s(int=504)'\n\
    \    --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmpcn65hvpy_test.go:50:\
    \ expected '%!s(int=927)', got '%!s(int=1705)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074961
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n == 0 || n == 1 {\n        return 0\n    }\n\
    \    if n == 2 {\n        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     { actual:\
    \ candidate(1), expected: 0 },\n     { actual: candidate(5), expected: 4 },\n\
    \     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10), expected:\
    \ 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual: candidate(14),\
    \ expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074961
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n ==\
    \ 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n   \
    \ return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmp2nhnes_4_test.go:46: expected '%!s(int=1)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestFibfib/test_num__1 (0.00s)\n        tmp2nhnes_4_test.go:46: expected\
    \ '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestFibfib/test_num__2 (0.00s)\n\
    \        tmp2nhnes_4_test.go:46: expected '%!s(int=4)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestFibfib/test_num__3 (0.00s)\n        tmp2nhnes_4_test.go:46: expected\
    \ '%!s(int=24)', got '%!s(int=68)'\n    --- FAIL: TestFibfib/test_num__4 (0.00s)\n\
    \        tmp2nhnes_4_test.go:46: expected '%!s(int=81)', got '%!s(int=230)'\n\
    \    --- FAIL: TestFibfib/test_num__5 (0.00s)\n        tmp2nhnes_4_test.go:46:\
    \ expected '%!s(int=274)', got '%!s(int=778)'\n    --- FAIL: TestFibfib/test_num__6\
    \ (0.00s)\n        tmp2nhnes_4_test.go:46: expected '%!s(int=927)', got '%!s(int=2632)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074961
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n == 0 || n == 1 {\n        return 0\n    }\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160398\
    \ stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f352?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 18 [running]:\ncommand-line-arguments_test.fibfib(0xffffffffff333358)\n\
    \t/tmp/tmp7hyqvkw2_test.go:14 +0x8c fp=0xc0201603a8 sp=0xc0201603a0 pc=0x4ef6ec\n\
    command-line-arguments_test.fibfib(0xffffffffff333359)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc0201603d0 sp=0xc0201603a8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335a)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc0201603f8 sp=0xc0201603d0 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335b)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc020160420 sp=0xc0201603f8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335c)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc020160448 sp=0xc020160420 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335d)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc020160470 sp=0xc020160448 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335e)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc020160498 sp=0xc020160470 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335f)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc0201604c0 sp=0xc020160498 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff333360)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc0201604e8 sp=0xc0201604c0 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff333361)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc020160510 sp=0xc0201604e8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff333362)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc020160538 sp=0xc020160510 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff333363)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc02016"
  timestamp: 1660074962
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n <= 0 {\n        return 0\n    }\n    if n ==\
    \ 1 {\n        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n   \
    \ return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074961
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n == 0 || n == 1 {\n        return 0\n    }\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160398\
    \ stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f352?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 18 [running]:\ncommand-line-arguments_test.fibfib(0xffffffffff333358)\n\
    \t/tmp/tmp7hyqvkw2_test.go:14 +0x8c fp=0xc0201603a8 sp=0xc0201603a0 pc=0x4ef6ec\n\
    command-line-arguments_test.fibfib(0xffffffffff333359)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc0201603d0 sp=0xc0201603a8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335a)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc0201603f8 sp=0xc0201603d0 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335b)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc020160420 sp=0xc0201603f8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335c)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc020160448 sp=0xc020160420 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335d)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc020160470 sp=0xc020160448 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335e)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc020160498 sp=0xc020160470 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335f)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc0201604c0 sp=0xc020160498 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff333360)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc0201604e8 sp=0xc0201604c0 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff333361)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc020160510 sp=0xc0201604e8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff333362)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc020160538 sp=0xc020160510 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff333363)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc02016"
  timestamp: 1660074962
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n < 0 {\n        fmt.Println(\"fibfib: negative\
    \ number\")\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n\
    \    if n == 1 {\n        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     { actual:\
    \ candidate(1), expected: 0 },\n     { actual: candidate(5), expected: 4 },\n\
    \     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10), expected:\
    \ 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual: candidate(14),\
    \ expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: 'fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: '
  timestamp: 1660074961
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n ==\
    \ 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n   \
    \ return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmp2nhnes_4_test.go:46: expected '%!s(int=1)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestFibfib/test_num__1 (0.00s)\n        tmp2nhnes_4_test.go:46: expected\
    \ '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestFibfib/test_num__2 (0.00s)\n\
    \        tmp2nhnes_4_test.go:46: expected '%!s(int=4)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestFibfib/test_num__3 (0.00s)\n        tmp2nhnes_4_test.go:46: expected\
    \ '%!s(int=24)', got '%!s(int=68)'\n    --- FAIL: TestFibfib/test_num__4 (0.00s)\n\
    \        tmp2nhnes_4_test.go:46: expected '%!s(int=81)', got '%!s(int=230)'\n\
    \    --- FAIL: TestFibfib/test_num__5 (0.00s)\n        tmp2nhnes_4_test.go:46:\
    \ expected '%!s(int=274)', got '%!s(int=778)'\n    --- FAIL: TestFibfib/test_num__6\
    \ (0.00s)\n        tmp2nhnes_4_test.go:46: expected '%!s(int=927)', got '%!s(int=2632)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074961
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n ==\
    \ 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n   \
    \ return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmp2nhnes_4_test.go:46: expected '%!s(int=1)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestFibfib/test_num__1 (0.00s)\n        tmp2nhnes_4_test.go:46: expected\
    \ '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestFibfib/test_num__2 (0.00s)\n\
    \        tmp2nhnes_4_test.go:46: expected '%!s(int=4)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestFibfib/test_num__3 (0.00s)\n        tmp2nhnes_4_test.go:46: expected\
    \ '%!s(int=24)', got '%!s(int=68)'\n    --- FAIL: TestFibfib/test_num__4 (0.00s)\n\
    \        tmp2nhnes_4_test.go:46: expected '%!s(int=81)', got '%!s(int=230)'\n\
    \    --- FAIL: TestFibfib/test_num__5 (0.00s)\n        tmp2nhnes_4_test.go:46:\
    \ expected '%!s(int=274)', got '%!s(int=778)'\n    --- FAIL: TestFibfib/test_num__6\
    \ (0.00s)\n        tmp2nhnes_4_test.go:46: expected '%!s(int=927)', got '%!s(int=2632)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074961
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n < 0 {\n        fmt.Println(\"fibfib: negative\
    \ number\")\n        return -1\n    }\n    if n == 0 {\n        return 0\n   \
    \ }\n    if n == 1 {\n        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     { actual:\
    \ candidate(1), expected: 0 },\n     { actual: candidate(5), expected: 4 },\n\
    \     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10), expected:\
    \ 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual: candidate(14),\
    \ expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: 'fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: '
  timestamp: 1660074961
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n ==\
    \ 1 {\n        return 1\n    }\n    if n == 2 {\n        return 1\n    }\n   \
    \ return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__1 (0.00s)\n\
    \        tmpy8aslpxq_test.go:46: expected '%!s(int=0)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmpy8aslpxq_test.go:46: expected\
    \ '%!s(int=4)', got '%!s(int=7)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmpy8aslpxq_test.go:46: expected '%!s(int=24)', got '%!s(int=44)'\n \
    \   --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmpy8aslpxq_test.go:46:\
    \ expected '%!s(int=81)', got '%!s(int=149)'\n    --- FAIL: TestFibfib/test_num__5\
    \ (0.00s)\n        tmpy8aslpxq_test.go:46: expected '%!s(int=274)', got '%!s(int=504)'\n\
    \    --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmpy8aslpxq_test.go:46:\
    \ expected '%!s(int=927)', got '%!s(int=1705)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074961
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n <= 0 {\n        return 0\n    }\n    if n ==\
    \ 1 {\n        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n   \
    \ return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074961
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n ==\
    \ 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n   \
    \ return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmp2nhnes_4_test.go:46: expected '%!s(int=1)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestFibfib/test_num__1 (0.00s)\n        tmp2nhnes_4_test.go:46: expected\
    \ '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestFibfib/test_num__2 (0.00s)\n\
    \        tmp2nhnes_4_test.go:46: expected '%!s(int=4)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestFibfib/test_num__3 (0.00s)\n        tmp2nhnes_4_test.go:46: expected\
    \ '%!s(int=24)', got '%!s(int=68)'\n    --- FAIL: TestFibfib/test_num__4 (0.00s)\n\
    \        tmp2nhnes_4_test.go:46: expected '%!s(int=81)', got '%!s(int=230)'\n\
    \    --- FAIL: TestFibfib/test_num__5 (0.00s)\n        tmp2nhnes_4_test.go:46:\
    \ expected '%!s(int=274)', got '%!s(int=778)'\n    --- FAIL: TestFibfib/test_num__6\
    \ (0.00s)\n        tmp2nhnes_4_test.go:46: expected '%!s(int=927)', got '%!s(int=2632)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074961
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n < 0 {\n        fmt.Println(\"fibfib: n must\
    \ be non-negative\")\n        return -1\n    }\n    if n == 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n      \
    \  return 1\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\n\
    func TestFibfib(t *testing.T) {\n  candidate := fibfib\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2), expected: 1 },\n     { actual: candidate(1), expected:\
    \ 0 },\n     { actual: candidate(5), expected: 4 },\n     { actual: candidate(8),\
    \ expected: 24 },\n     { actual: candidate(10), expected: 81 },\n     { actual:\
    \ candidate(12), expected: 274 },\n     { actual: candidate(14), expected: 927\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__1 (0.00s)\n\
    \        tmp4c_8armg_test.go:50: expected '%!s(int=0)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmp4c_8armg_test.go:50: expected\
    \ '%!s(int=4)', got '%!s(int=7)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmp4c_8armg_test.go:50: expected '%!s(int=24)', got '%!s(int=44)'\n \
    \   --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmp4c_8armg_test.go:50:\
    \ expected '%!s(int=81)', got '%!s(int=149)'\n    --- FAIL: TestFibfib/test_num__5\
    \ (0.00s)\n        tmp4c_8armg_test.go:50: expected '%!s(int=274)', got '%!s(int=504)'\n\
    \    --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmp4c_8armg_test.go:50:\
    \ expected '%!s(int=927)', got '%!s(int=1705)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074961
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n <= 0 {\n        return 0\n    }\n    if n ==\
    \ 1 {\n        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2), expected: 1 },\n     { actual: candidate(1), expected:\
    \ 0 },\n     { actual: candidate(5), expected: 4 },\n     { actual: candidate(8),\
    \ expected: 24 },\n     { actual: candidate(10), expected: 81 },\n     { actual:\
    \ candidate(12), expected: 274 },\n     { actual: candidate(14), expected: 927\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__1 (0.00s)\n\
    \        tmp3otr6pj0_test.go:43: expected '%!s(int=0)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmp3otr6pj0_test.go:43: expected\
    \ '%!s(int=4)', got '%!s(int=7)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmp3otr6pj0_test.go:43: expected '%!s(int=24)', got '%!s(int=44)'\n \
    \   --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmp3otr6pj0_test.go:43:\
    \ expected '%!s(int=81)', got '%!s(int=149)'\n    --- FAIL: TestFibfib/test_num__5\
    \ (0.00s)\n        tmp3otr6pj0_test.go:43: expected '%!s(int=274)', got '%!s(int=504)'\n\
    \    --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmp3otr6pj0_test.go:43:\
    \ expected '%!s(int=927)', got '%!s(int=1705)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074961
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n < 0 {\n        fmt.Println(\"fibfib: negative\
    \ number\")\n        return -1\n    }\n    if n == 0 {\n        return 0\n   \
    \ }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return\
    \ 1\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t\
    \ *testing.T) {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__1 (0.00s)\n\
    \        tmpcn65hvpy_test.go:50: expected '%!s(int=0)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmpcn65hvpy_test.go:50: expected\
    \ '%!s(int=4)', got '%!s(int=7)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmpcn65hvpy_test.go:50: expected '%!s(int=24)', got '%!s(int=44)'\n \
    \   --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmpcn65hvpy_test.go:50:\
    \ expected '%!s(int=81)', got '%!s(int=149)'\n    --- FAIL: TestFibfib/test_num__5\
    \ (0.00s)\n        tmpcn65hvpy_test.go:50: expected '%!s(int=274)', got '%!s(int=504)'\n\
    \    --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmpcn65hvpy_test.go:50:\
    \ expected '%!s(int=927)', got '%!s(int=1705)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074961
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n ==\
    \ 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n   \
    \ return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmp2nhnes_4_test.go:46: expected '%!s(int=1)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestFibfib/test_num__1 (0.00s)\n        tmp2nhnes_4_test.go:46: expected\
    \ '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestFibfib/test_num__2 (0.00s)\n\
    \        tmp2nhnes_4_test.go:46: expected '%!s(int=4)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestFibfib/test_num__3 (0.00s)\n        tmp2nhnes_4_test.go:46: expected\
    \ '%!s(int=24)', got '%!s(int=68)'\n    --- FAIL: TestFibfib/test_num__4 (0.00s)\n\
    \        tmp2nhnes_4_test.go:46: expected '%!s(int=81)', got '%!s(int=230)'\n\
    \    --- FAIL: TestFibfib/test_num__5 (0.00s)\n        tmp2nhnes_4_test.go:46:\
    \ expected '%!s(int=274)', got '%!s(int=778)'\n    --- FAIL: TestFibfib/test_num__6\
    \ (0.00s)\n        tmp2nhnes_4_test.go:46: expected '%!s(int=927)', got '%!s(int=2632)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074961
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n <= 0 {\n        return 0\n    }\n    if n ==\
    \ 1 {\n        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n   \
    \ return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074961
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n <= 0 {\n        return 0\n    }\n    if n ==\
    \ 1 {\n        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n   \
    \ return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074961
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n <= 0 {\n        return 0\n    }\n    if n ==\
    \ 1 {\n        return 1\n    }\n    if n == 2 {\n        return 1\n    }\n   \
    \ return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__1 (0.00s)\n\
    \        tmpe_u4o92b_test.go:46: expected '%!s(int=0)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmpe_u4o92b_test.go:46: expected\
    \ '%!s(int=4)', got '%!s(int=7)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmpe_u4o92b_test.go:46: expected '%!s(int=24)', got '%!s(int=44)'\n \
    \   --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmpe_u4o92b_test.go:46:\
    \ expected '%!s(int=81)', got '%!s(int=149)'\n    --- FAIL: TestFibfib/test_num__5\
    \ (0.00s)\n        tmpe_u4o92b_test.go:46: expected '%!s(int=274)', got '%!s(int=504)'\n\
    \    --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmpe_u4o92b_test.go:46:\
    \ expected '%!s(int=927)', got '%!s(int=1705)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074961
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n == 0 || n == 1 {\n        return 0\n    }\n\
    \    if n == 2 {\n        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     { actual:\
    \ candidate(1), expected: 0 },\n     { actual: candidate(5), expected: 4 },\n\
    \     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10), expected:\
    \ 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual: candidate(14),\
    \ expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074961
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n <= 0 {\n        return 0\n    }\n    if n ==\
    \ 1 {\n        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n   \
    \ return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074961
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n ==\
    \ 1 {\n        return 1\n    }\n    if n == 2 {\n        return 1\n    }\n   \
    \ return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__1 (0.00s)\n\
    \        tmpy8aslpxq_test.go:46: expected '%!s(int=0)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmpy8aslpxq_test.go:46: expected\
    \ '%!s(int=4)', got '%!s(int=7)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmpy8aslpxq_test.go:46: expected '%!s(int=24)', got '%!s(int=44)'\n \
    \   --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmpy8aslpxq_test.go:46:\
    \ expected '%!s(int=81)', got '%!s(int=149)'\n    --- FAIL: TestFibfib/test_num__5\
    \ (0.00s)\n        tmpy8aslpxq_test.go:46: expected '%!s(int=274)', got '%!s(int=504)'\n\
    \    --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmpy8aslpxq_test.go:46:\
    \ expected '%!s(int=927)', got '%!s(int=1705)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074961
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n <= 0 {\n        return 0\n    }\n    if n ==\
    \ 1 {\n        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n   \
    \ return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074961
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n < 0 {\n        fmt.Println(\"fibfib: negative\
    \ number\")\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n\
    \    if n == 1 {\n        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     { actual:\
    \ candidate(1), expected: 0 },\n     { actual: candidate(5), expected: 4 },\n\
    \     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10), expected:\
    \ 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual: candidate(14),\
    \ expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: 'fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: '
  timestamp: 1660074961
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n < 2 {\n        return n\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmpj17yvq_u_test.go:40: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestFibfib/test_num__1 (0.00s)\n        tmpj17yvq_u_test.go:40: expected\
    \ '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestFibfib/test_num__2 (0.00s)\n\
    \        tmpj17yvq_u_test.go:40: expected '%!s(int=4)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestFibfib/test_num__3 (0.00s)\n        tmpj17yvq_u_test.go:40: expected\
    \ '%!s(int=24)', got '%!s(int=20)'\n    --- FAIL: TestFibfib/test_num__4 (0.00s)\n\
    \        tmpj17yvq_u_test.go:40: expected '%!s(int=81)', got '%!s(int=68)'\n \
    \   --- FAIL: TestFibfib/test_num__5 (0.00s)\n        tmpj17yvq_u_test.go:40:\
    \ expected '%!s(int=274)', got '%!s(int=230)'\n    --- FAIL: TestFibfib/test_num__6\
    \ (0.00s)\n        tmpj17yvq_u_test.go:40: expected '%!s(int=927)', got '%!s(int=778)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074961
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n == 0 || n == 1 {\n        return 0\n    }\n\
    \    if n == 2 {\n        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     { actual:\
    \ candidate(1), expected: 0 },\n     { actual: candidate(5), expected: 4 },\n\
    \     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10), expected:\
    \ 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual: candidate(14),\
    \ expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074961
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n == 0 || n == 1 {\n        return 0\n    }\n\
    \    if n == 2 {\n        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     { actual:\
    \ candidate(1), expected: 0 },\n     { actual: candidate(5), expected: 4 },\n\
    \     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10), expected:\
    \ 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual: candidate(14),\
    \ expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074961
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n ==\
    \ 1 {\n        return 1\n    }\n    if n == 2 {\n        return 1\n    }\n   \
    \ return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__1 (0.00s)\n\
    \        tmpy8aslpxq_test.go:46: expected '%!s(int=0)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmpy8aslpxq_test.go:46: expected\
    \ '%!s(int=4)', got '%!s(int=7)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmpy8aslpxq_test.go:46: expected '%!s(int=24)', got '%!s(int=44)'\n \
    \   --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmpy8aslpxq_test.go:46:\
    \ expected '%!s(int=81)', got '%!s(int=149)'\n    --- FAIL: TestFibfib/test_num__5\
    \ (0.00s)\n        tmpy8aslpxq_test.go:46: expected '%!s(int=274)', got '%!s(int=504)'\n\
    \    --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmpy8aslpxq_test.go:46:\
    \ expected '%!s(int=927)', got '%!s(int=1705)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074961
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n < 0 {\n        fmt.Println(\"fibfib: n must\
    \ be >= 0\")\n        return -1\n    }\n    if n == 0 {\n        return 0\n  \
    \  }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return\
    \ 2\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t\
    \ *testing.T) {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmptoh8z51c_test.go:50: expected '%!s(int=1)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestFibfib/test_num__1 (0.00s)\n        tmptoh8z51c_test.go:50: expected\
    \ '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestFibfib/test_num__2 (0.00s)\n\
    \        tmptoh8z51c_test.go:50: expected '%!s(int=4)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestFibfib/test_num__3 (0.00s)\n        tmptoh8z51c_test.go:50: expected\
    \ '%!s(int=24)', got '%!s(int=68)'\n    --- FAIL: TestFibfib/test_num__4 (0.00s)\n\
    \        tmptoh8z51c_test.go:50: expected '%!s(int=81)', got '%!s(int=230)'\n\
    \    --- FAIL: TestFibfib/test_num__5 (0.00s)\n        tmptoh8z51c_test.go:50:\
    \ expected '%!s(int=274)', got '%!s(int=778)'\n    --- FAIL: TestFibfib/test_num__6\
    \ (0.00s)\n        tmptoh8z51c_test.go:50: expected '%!s(int=927)', got '%!s(int=2632)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074961
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n <= 0 {\n        return 0\n    }\n    if n ==\
    \ 1 {\n        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n   \
    \ return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074961
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n == 0 || n == 1 {\n        return 0\n    }\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160398\
    \ stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f352?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 18 [running]:\ncommand-line-arguments_test.fibfib(0xffffffffff333358)\n\
    \t/tmp/tmp7hyqvkw2_test.go:14 +0x8c fp=0xc0201603a8 sp=0xc0201603a0 pc=0x4ef6ec\n\
    command-line-arguments_test.fibfib(0xffffffffff333359)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc0201603d0 sp=0xc0201603a8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335a)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc0201603f8 sp=0xc0201603d0 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335b)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc020160420 sp=0xc0201603f8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335c)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc020160448 sp=0xc020160420 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335d)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc020160470 sp=0xc020160448 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335e)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc020160498 sp=0xc020160470 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335f)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc0201604c0 sp=0xc020160498 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff333360)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc0201604e8 sp=0xc0201604c0 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff333361)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc020160510 sp=0xc0201604e8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff333362)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc020160538 sp=0xc020160510 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff333363)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc02016"
  timestamp: 1660074962
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n == 0 || n == 1 {\n        return 0\n    }\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160398\
    \ stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f352?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 18 [running]:\ncommand-line-arguments_test.fibfib(0xffffffffff333358)\n\
    \t/tmp/tmp7hyqvkw2_test.go:14 +0x8c fp=0xc0201603a8 sp=0xc0201603a0 pc=0x4ef6ec\n\
    command-line-arguments_test.fibfib(0xffffffffff333359)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc0201603d0 sp=0xc0201603a8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335a)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc0201603f8 sp=0xc0201603d0 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335b)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc020160420 sp=0xc0201603f8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335c)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc020160448 sp=0xc020160420 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335d)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc020160470 sp=0xc020160448 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335e)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc020160498 sp=0xc020160470 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335f)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc0201604c0 sp=0xc020160498 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff333360)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc0201604e8 sp=0xc0201604c0 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff333361)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc020160510 sp=0xc0201604e8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff333362)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc020160538 sp=0xc020160510 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff333363)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc02016"
  timestamp: 1660074962
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n == 0 || n == 1 {\n        return 0\n    }\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160398\
    \ stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f352?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 18 [running]:\ncommand-line-arguments_test.fibfib(0xffffffffff333358)\n\
    \t/tmp/tmp7hyqvkw2_test.go:14 +0x8c fp=0xc0201603a8 sp=0xc0201603a0 pc=0x4ef6ec\n\
    command-line-arguments_test.fibfib(0xffffffffff333359)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc0201603d0 sp=0xc0201603a8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335a)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc0201603f8 sp=0xc0201603d0 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335b)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc020160420 sp=0xc0201603f8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335c)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc020160448 sp=0xc020160420 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335d)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc020160470 sp=0xc020160448 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335e)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc020160498 sp=0xc020160470 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335f)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc0201604c0 sp=0xc020160498 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff333360)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc0201604e8 sp=0xc0201604c0 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff333361)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc020160510 sp=0xc0201604e8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff333362)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc020160538 sp=0xc020160510 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff333363)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc02016"
  timestamp: 1660074962
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n ==\
    \ 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n   \
    \ return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmp2nhnes_4_test.go:46: expected '%!s(int=1)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestFibfib/test_num__1 (0.00s)\n        tmp2nhnes_4_test.go:46: expected\
    \ '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestFibfib/test_num__2 (0.00s)\n\
    \        tmp2nhnes_4_test.go:46: expected '%!s(int=4)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestFibfib/test_num__3 (0.00s)\n        tmp2nhnes_4_test.go:46: expected\
    \ '%!s(int=24)', got '%!s(int=68)'\n    --- FAIL: TestFibfib/test_num__4 (0.00s)\n\
    \        tmp2nhnes_4_test.go:46: expected '%!s(int=81)', got '%!s(int=230)'\n\
    \    --- FAIL: TestFibfib/test_num__5 (0.00s)\n        tmp2nhnes_4_test.go:46:\
    \ expected '%!s(int=274)', got '%!s(int=778)'\n    --- FAIL: TestFibfib/test_num__6\
    \ (0.00s)\n        tmp2nhnes_4_test.go:46: expected '%!s(int=927)', got '%!s(int=2632)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074961
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n < 0 {\n        return -1\n    }\n    if n ==\
    \ 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n   \
    \ return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmp5_6zwxxs_test.go:46: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestFibfib/test_num__1 (0.00s)\n        tmp5_6zwxxs_test.go:46: expected\
    \ '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestFibfib/test_num__2 (0.00s)\n\
    \        tmp5_6zwxxs_test.go:46: expected '%!s(int=4)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestFibfib/test_num__3 (0.00s)\n        tmp5_6zwxxs_test.go:46: expected\
    \ '%!s(int=24)', got '%!s(int=20)'\n    --- FAIL: TestFibfib/test_num__4 (0.00s)\n\
    \        tmp5_6zwxxs_test.go:46: expected '%!s(int=81)', got '%!s(int=68)'\n \
    \   --- FAIL: TestFibfib/test_num__5 (0.00s)\n        tmp5_6zwxxs_test.go:46:\
    \ expected '%!s(int=274)', got '%!s(int=230)'\n    --- FAIL: TestFibfib/test_num__6\
    \ (0.00s)\n        tmp5_6zwxxs_test.go:46: expected '%!s(int=927)', got '%!s(int=778)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074961
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n < 0 {\n        fmt.Println(\"fibfib: negative\
    \ number\")\n        return -1\n    }\n    if n == 0 {\n        return 0\n   \
    \ }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return\
    \ 1\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t\
    \ *testing.T) {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__1 (0.00s)\n\
    \        tmpcn65hvpy_test.go:50: expected '%!s(int=0)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmpcn65hvpy_test.go:50: expected\
    \ '%!s(int=4)', got '%!s(int=7)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmpcn65hvpy_test.go:50: expected '%!s(int=24)', got '%!s(int=44)'\n \
    \   --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmpcn65hvpy_test.go:50:\
    \ expected '%!s(int=81)', got '%!s(int=149)'\n    --- FAIL: TestFibfib/test_num__5\
    \ (0.00s)\n        tmpcn65hvpy_test.go:50: expected '%!s(int=274)', got '%!s(int=504)'\n\
    \    --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmpcn65hvpy_test.go:50:\
    \ expected '%!s(int=927)', got '%!s(int=1705)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074961
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n == 0 || n == 1 {\n        return 0\n    }\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160398\
    \ stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f352?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 18 [running]:\ncommand-line-arguments_test.fibfib(0xffffffffff333358)\n\
    \t/tmp/tmp7hyqvkw2_test.go:14 +0x8c fp=0xc0201603a8 sp=0xc0201603a0 pc=0x4ef6ec\n\
    command-line-arguments_test.fibfib(0xffffffffff333359)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc0201603d0 sp=0xc0201603a8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335a)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc0201603f8 sp=0xc0201603d0 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335b)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc020160420 sp=0xc0201603f8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335c)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc020160448 sp=0xc020160420 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335d)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc020160470 sp=0xc020160448 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335e)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc020160498 sp=0xc020160470 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335f)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc0201604c0 sp=0xc020160498 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff333360)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc0201604e8 sp=0xc0201604c0 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff333361)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc020160510 sp=0xc0201604e8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff333362)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc020160538 sp=0xc020160510 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff333363)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc02016"
  timestamp: 1660074962
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n ==\
    \ 1 {\n        return 1\n    }\n    if n == 2 {\n        return 1\n    }\n   \
    \ return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__1 (0.00s)\n\
    \        tmpy8aslpxq_test.go:46: expected '%!s(int=0)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmpy8aslpxq_test.go:46: expected\
    \ '%!s(int=4)', got '%!s(int=7)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmpy8aslpxq_test.go:46: expected '%!s(int=24)', got '%!s(int=44)'\n \
    \   --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmpy8aslpxq_test.go:46:\
    \ expected '%!s(int=81)', got '%!s(int=149)'\n    --- FAIL: TestFibfib/test_num__5\
    \ (0.00s)\n        tmpy8aslpxq_test.go:46: expected '%!s(int=274)', got '%!s(int=504)'\n\
    \    --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmpy8aslpxq_test.go:46:\
    \ expected '%!s(int=927)', got '%!s(int=1705)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074961
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n ==\
    \ 1 {\n        return 1\n    }\n    if n == 2 {\n        return 1\n    }\n   \
    \ return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__1 (0.00s)\n\
    \        tmpy8aslpxq_test.go:46: expected '%!s(int=0)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmpy8aslpxq_test.go:46: expected\
    \ '%!s(int=4)', got '%!s(int=7)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmpy8aslpxq_test.go:46: expected '%!s(int=24)', got '%!s(int=44)'\n \
    \   --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmpy8aslpxq_test.go:46:\
    \ expected '%!s(int=81)', got '%!s(int=149)'\n    --- FAIL: TestFibfib/test_num__5\
    \ (0.00s)\n        tmpy8aslpxq_test.go:46: expected '%!s(int=274)', got '%!s(int=504)'\n\
    \    --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmpy8aslpxq_test.go:46:\
    \ expected '%!s(int=927)', got '%!s(int=1705)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074961
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n < 0 {\n        fmt.Println(\"fibfib: negative\
    \ number\")\n        return -1\n    }\n    if n == 0 {\n        return 0\n   \
    \ }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return\
    \ 1\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t\
    \ *testing.T) {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__1 (0.00s)\n\
    \        tmpcn65hvpy_test.go:50: expected '%!s(int=0)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmpcn65hvpy_test.go:50: expected\
    \ '%!s(int=4)', got '%!s(int=7)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmpcn65hvpy_test.go:50: expected '%!s(int=24)', got '%!s(int=44)'\n \
    \   --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmpcn65hvpy_test.go:50:\
    \ expected '%!s(int=81)', got '%!s(int=149)'\n    --- FAIL: TestFibfib/test_num__5\
    \ (0.00s)\n        tmpcn65hvpy_test.go:50: expected '%!s(int=274)', got '%!s(int=504)'\n\
    \    --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmpcn65hvpy_test.go:50:\
    \ expected '%!s(int=927)', got '%!s(int=1705)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074961
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n ==\
    \ 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n   \
    \ return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmp2nhnes_4_test.go:46: expected '%!s(int=1)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestFibfib/test_num__1 (0.00s)\n        tmp2nhnes_4_test.go:46: expected\
    \ '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestFibfib/test_num__2 (0.00s)\n\
    \        tmp2nhnes_4_test.go:46: expected '%!s(int=4)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestFibfib/test_num__3 (0.00s)\n        tmp2nhnes_4_test.go:46: expected\
    \ '%!s(int=24)', got '%!s(int=68)'\n    --- FAIL: TestFibfib/test_num__4 (0.00s)\n\
    \        tmp2nhnes_4_test.go:46: expected '%!s(int=81)', got '%!s(int=230)'\n\
    \    --- FAIL: TestFibfib/test_num__5 (0.00s)\n        tmp2nhnes_4_test.go:46:\
    \ expected '%!s(int=274)', got '%!s(int=778)'\n    --- FAIL: TestFibfib/test_num__6\
    \ (0.00s)\n        tmp2nhnes_4_test.go:46: expected '%!s(int=927)', got '%!s(int=2632)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074961
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n < 0 {\n        fmt.Println(\"fibfib: negative\
    \ number\")\n        return -1\n    }\n    if n == 0 {\n        return 0\n   \
    \ }\n    if n == 1 {\n        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     { actual:\
    \ candidate(1), expected: 0 },\n     { actual: candidate(5), expected: 4 },\n\
    \     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10), expected:\
    \ 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual: candidate(14),\
    \ expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: 'fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: '
  timestamp: 1660074961
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n <= 0 {\n        return 0\n    }\n    if n ==\
    \ 1 {\n        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2), expected: 1 },\n     { actual: candidate(1), expected:\
    \ 0 },\n     { actual: candidate(5), expected: 4 },\n     { actual: candidate(8),\
    \ expected: 24 },\n     { actual: candidate(10), expected: 81 },\n     { actual:\
    \ candidate(12), expected: 274 },\n     { actual: candidate(14), expected: 927\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__1 (0.00s)\n\
    \        tmp3otr6pj0_test.go:43: expected '%!s(int=0)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmp3otr6pj0_test.go:43: expected\
    \ '%!s(int=4)', got '%!s(int=7)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmp3otr6pj0_test.go:43: expected '%!s(int=24)', got '%!s(int=44)'\n \
    \   --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmp3otr6pj0_test.go:43:\
    \ expected '%!s(int=81)', got '%!s(int=149)'\n    --- FAIL: TestFibfib/test_num__5\
    \ (0.00s)\n        tmp3otr6pj0_test.go:43: expected '%!s(int=274)', got '%!s(int=504)'\n\
    \    --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmp3otr6pj0_test.go:43:\
    \ expected '%!s(int=927)', got '%!s(int=1705)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074961
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n == 0 || n == 1 {\n        return 0\n    }\n\
    \    if n == 2 {\n        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     { actual:\
    \ candidate(1), expected: 0 },\n     { actual: candidate(5), expected: 4 },\n\
    \     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10), expected:\
    \ 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual: candidate(14),\
    \ expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074961
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n == 0 || n == 1 {\n        return 0\n    }\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160398\
    \ stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f352?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 18 [running]:\ncommand-line-arguments_test.fibfib(0xffffffffff333358)\n\
    \t/tmp/tmp7hyqvkw2_test.go:14 +0x8c fp=0xc0201603a8 sp=0xc0201603a0 pc=0x4ef6ec\n\
    command-line-arguments_test.fibfib(0xffffffffff333359)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc0201603d0 sp=0xc0201603a8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335a)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc0201603f8 sp=0xc0201603d0 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335b)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc020160420 sp=0xc0201603f8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335c)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc020160448 sp=0xc020160420 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335d)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc020160470 sp=0xc020160448 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335e)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc020160498 sp=0xc020160470 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335f)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc0201604c0 sp=0xc020160498 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff333360)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc0201604e8 sp=0xc0201604c0 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff333361)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc020160510 sp=0xc0201604e8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff333362)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc020160538 sp=0xc020160510 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff333363)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc02016"
  timestamp: 1660074962
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n == 0 || n == 1 {\n        return 0\n    }\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160398\
    \ stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f352?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 18 [running]:\ncommand-line-arguments_test.fibfib(0xffffffffff333358)\n\
    \t/tmp/tmp7hyqvkw2_test.go:14 +0x8c fp=0xc0201603a8 sp=0xc0201603a0 pc=0x4ef6ec\n\
    command-line-arguments_test.fibfib(0xffffffffff333359)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc0201603d0 sp=0xc0201603a8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335a)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc0201603f8 sp=0xc0201603d0 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335b)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc020160420 sp=0xc0201603f8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335c)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc020160448 sp=0xc020160420 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335d)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc020160470 sp=0xc020160448 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335e)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc020160498 sp=0xc020160470 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335f)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc0201604c0 sp=0xc020160498 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff333360)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc0201604e8 sp=0xc0201604c0 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff333361)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc020160510 sp=0xc0201604e8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff333362)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc020160538 sp=0xc020160510 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff333363)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc02016"
  timestamp: 1660074962
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n == 0 || n == 1 {\n        return 0\n    }\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160398\
    \ stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f352?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 18 [running]:\ncommand-line-arguments_test.fibfib(0xffffffffff333358)\n\
    \t/tmp/tmp7hyqvkw2_test.go:14 +0x8c fp=0xc0201603a8 sp=0xc0201603a0 pc=0x4ef6ec\n\
    command-line-arguments_test.fibfib(0xffffffffff333359)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc0201603d0 sp=0xc0201603a8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335a)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc0201603f8 sp=0xc0201603d0 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335b)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc020160420 sp=0xc0201603f8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335c)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc020160448 sp=0xc020160420 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335d)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc020160470 sp=0xc020160448 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335e)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc020160498 sp=0xc020160470 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335f)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc0201604c0 sp=0xc020160498 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff333360)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc0201604e8 sp=0xc0201604c0 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff333361)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc020160510 sp=0xc0201604e8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff333362)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc020160538 sp=0xc020160510 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff333363)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc02016"
  timestamp: 1660074962
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n ==\
    \ 1 {\n        return 1\n    }\n    if n == 2 {\n        return 1\n    }\n   \
    \ return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__1 (0.00s)\n\
    \        tmpy8aslpxq_test.go:46: expected '%!s(int=0)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmpy8aslpxq_test.go:46: expected\
    \ '%!s(int=4)', got '%!s(int=7)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmpy8aslpxq_test.go:46: expected '%!s(int=24)', got '%!s(int=44)'\n \
    \   --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmpy8aslpxq_test.go:46:\
    \ expected '%!s(int=81)', got '%!s(int=149)'\n    --- FAIL: TestFibfib/test_num__5\
    \ (0.00s)\n        tmpy8aslpxq_test.go:46: expected '%!s(int=274)', got '%!s(int=504)'\n\
    \    --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmpy8aslpxq_test.go:46:\
    \ expected '%!s(int=927)', got '%!s(int=1705)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074961
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n ==\
    \ 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n   \
    \ return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmp2nhnes_4_test.go:46: expected '%!s(int=1)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestFibfib/test_num__1 (0.00s)\n        tmp2nhnes_4_test.go:46: expected\
    \ '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestFibfib/test_num__2 (0.00s)\n\
    \        tmp2nhnes_4_test.go:46: expected '%!s(int=4)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestFibfib/test_num__3 (0.00s)\n        tmp2nhnes_4_test.go:46: expected\
    \ '%!s(int=24)', got '%!s(int=68)'\n    --- FAIL: TestFibfib/test_num__4 (0.00s)\n\
    \        tmp2nhnes_4_test.go:46: expected '%!s(int=81)', got '%!s(int=230)'\n\
    \    --- FAIL: TestFibfib/test_num__5 (0.00s)\n        tmp2nhnes_4_test.go:46:\
    \ expected '%!s(int=274)', got '%!s(int=778)'\n    --- FAIL: TestFibfib/test_num__6\
    \ (0.00s)\n        tmp2nhnes_4_test.go:46: expected '%!s(int=927)', got '%!s(int=2632)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074961
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n == 0 || n == 1 {\n        return 0\n    }\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160398\
    \ stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f352?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 18 [running]:\ncommand-line-arguments_test.fibfib(0xffffffffff333358)\n\
    \t/tmp/tmp7hyqvkw2_test.go:14 +0x8c fp=0xc0201603a8 sp=0xc0201603a0 pc=0x4ef6ec\n\
    command-line-arguments_test.fibfib(0xffffffffff333359)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc0201603d0 sp=0xc0201603a8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335a)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc0201603f8 sp=0xc0201603d0 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335b)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc020160420 sp=0xc0201603f8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335c)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc020160448 sp=0xc020160420 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335d)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc020160470 sp=0xc020160448 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335e)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc020160498 sp=0xc020160470 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335f)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc0201604c0 sp=0xc020160498 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff333360)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc0201604e8 sp=0xc0201604c0 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff333361)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc020160510 sp=0xc0201604e8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff333362)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc020160538 sp=0xc020160510 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff333363)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc02016"
  timestamp: 1660074962
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n == 0 || n == 1 {\n        return 0\n    }\n\
    \    if n == 2 {\n        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     { actual:\
    \ candidate(1), expected: 0 },\n     { actual: candidate(5), expected: 4 },\n\
    \     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10), expected:\
    \ 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual: candidate(14),\
    \ expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074961
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n <= 0 {\n        return 0\n    }\n    if n ==\
    \ 1 {\n        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2), expected: 1 },\n     { actual: candidate(1), expected:\
    \ 0 },\n     { actual: candidate(5), expected: 4 },\n     { actual: candidate(8),\
    \ expected: 24 },\n     { actual: candidate(10), expected: 81 },\n     { actual:\
    \ candidate(12), expected: 274 },\n     { actual: candidate(14), expected: 927\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__1 (0.00s)\n\
    \        tmp3otr6pj0_test.go:43: expected '%!s(int=0)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmp3otr6pj0_test.go:43: expected\
    \ '%!s(int=4)', got '%!s(int=7)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmp3otr6pj0_test.go:43: expected '%!s(int=24)', got '%!s(int=44)'\n \
    \   --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmp3otr6pj0_test.go:43:\
    \ expected '%!s(int=81)', got '%!s(int=149)'\n    --- FAIL: TestFibfib/test_num__5\
    \ (0.00s)\n        tmp3otr6pj0_test.go:43: expected '%!s(int=274)', got '%!s(int=504)'\n\
    \    --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmp3otr6pj0_test.go:43:\
    \ expected '%!s(int=927)', got '%!s(int=1705)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074961
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n <= 0 {\n        return 0\n    }\n    if n ==\
    \ 1 {\n        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n   \
    \ return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074961
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n < 0 {\n        fmt.Println(\"fibfib: negative\
    \ number\")\n        return -1\n    }\n    if n == 0 {\n        return 0\n   \
    \ }\n    if n == 1 {\n        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     { actual:\
    \ candidate(1), expected: 0 },\n     { actual: candidate(5), expected: 4 },\n\
    \     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10), expected:\
    \ 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual: candidate(14),\
    \ expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: 'fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: '
  timestamp: 1660074961
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n == 0 || n == 1 {\n        return 0\n    }\n\
    \    if n == 2 {\n        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     { actual:\
    \ candidate(1), expected: 0 },\n     { actual: candidate(5), expected: 4 },\n\
    \     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10), expected:\
    \ 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual: candidate(14),\
    \ expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074961
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n <= 0 {\n        return 0\n    }\n    if n ==\
    \ 1 {\n        return 0\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2), expected: 1 },\n     { actual: candidate(1), expected:\
    \ 0 },\n     { actual: candidate(5), expected: 4 },\n     { actual: candidate(8),\
    \ expected: 24 },\n     { actual: candidate(10), expected: 81 },\n     { actual:\
    \ candidate(12), expected: 274 },\n     { actual: candidate(14), expected: 927\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmpd9vw3dy0_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmpd9vw3dy0_test.go:43: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmpd9vw3dy0_test.go:43: expected '%!s(int=24)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmpd9vw3dy0_test.go:43: expected\
    \ '%!s(int=81)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__5 (0.00s)\n\
    \        tmpd9vw3dy0_test.go:43: expected '%!s(int=274)', got '%!s(int=0)'\n \
    \   --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmpd9vw3dy0_test.go:43:\
    \ expected '%!s(int=927)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074961
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n == 0 || n == 1 {\n        return 0\n    }\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160398\
    \ stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f352?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 18 [running]:\ncommand-line-arguments_test.fibfib(0xffffffffff333358)\n\
    \t/tmp/tmp7hyqvkw2_test.go:14 +0x8c fp=0xc0201603a8 sp=0xc0201603a0 pc=0x4ef6ec\n\
    command-line-arguments_test.fibfib(0xffffffffff333359)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc0201603d0 sp=0xc0201603a8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335a)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc0201603f8 sp=0xc0201603d0 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335b)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc020160420 sp=0xc0201603f8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335c)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc020160448 sp=0xc020160420 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335d)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc020160470 sp=0xc020160448 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335e)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc020160498 sp=0xc020160470 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335f)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc0201604c0 sp=0xc020160498 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff333360)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc0201604e8 sp=0xc0201604c0 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff333361)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc020160510 sp=0xc0201604e8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff333362)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc020160538 sp=0xc020160510 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff333363)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc02016"
  timestamp: 1660074962
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n == 0 || n == 1 {\n        return 0\n    }\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160398\
    \ stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f352?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 18 [running]:\ncommand-line-arguments_test.fibfib(0xffffffffff333358)\n\
    \t/tmp/tmp7hyqvkw2_test.go:14 +0x8c fp=0xc0201603a8 sp=0xc0201603a0 pc=0x4ef6ec\n\
    command-line-arguments_test.fibfib(0xffffffffff333359)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc0201603d0 sp=0xc0201603a8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335a)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc0201603f8 sp=0xc0201603d0 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335b)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc020160420 sp=0xc0201603f8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335c)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc020160448 sp=0xc020160420 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335d)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc020160470 sp=0xc020160448 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335e)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc020160498 sp=0xc020160470 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335f)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc0201604c0 sp=0xc020160498 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff333360)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc0201604e8 sp=0xc0201604c0 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff333361)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc020160510 sp=0xc0201604e8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff333362)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc020160538 sp=0xc020160510 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff333363)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc02016"
  timestamp: 1660074962
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n ==\
    \ 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n   \
    \ return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmp2nhnes_4_test.go:46: expected '%!s(int=1)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestFibfib/test_num__1 (0.00s)\n        tmp2nhnes_4_test.go:46: expected\
    \ '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestFibfib/test_num__2 (0.00s)\n\
    \        tmp2nhnes_4_test.go:46: expected '%!s(int=4)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestFibfib/test_num__3 (0.00s)\n        tmp2nhnes_4_test.go:46: expected\
    \ '%!s(int=24)', got '%!s(int=68)'\n    --- FAIL: TestFibfib/test_num__4 (0.00s)\n\
    \        tmp2nhnes_4_test.go:46: expected '%!s(int=81)', got '%!s(int=230)'\n\
    \    --- FAIL: TestFibfib/test_num__5 (0.00s)\n        tmp2nhnes_4_test.go:46:\
    \ expected '%!s(int=274)', got '%!s(int=778)'\n    --- FAIL: TestFibfib/test_num__6\
    \ (0.00s)\n        tmp2nhnes_4_test.go:46: expected '%!s(int=927)', got '%!s(int=2632)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074961
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n <= 0 {\n        return 0\n    }\n    if n ==\
    \ 1 {\n        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n   \
    \ return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074961
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n <= 0 {\n        return 0\n    }\n    if n ==\
    \ 1 {\n        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2), expected: 1 },\n     { actual: candidate(1), expected:\
    \ 0 },\n     { actual: candidate(5), expected: 4 },\n     { actual: candidate(8),\
    \ expected: 24 },\n     { actual: candidate(10), expected: 81 },\n     { actual:\
    \ candidate(12), expected: 274 },\n     { actual: candidate(14), expected: 927\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__1 (0.00s)\n\
    \        tmp3otr6pj0_test.go:43: expected '%!s(int=0)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmp3otr6pj0_test.go:43: expected\
    \ '%!s(int=4)', got '%!s(int=7)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmp3otr6pj0_test.go:43: expected '%!s(int=24)', got '%!s(int=44)'\n \
    \   --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmp3otr6pj0_test.go:43:\
    \ expected '%!s(int=81)', got '%!s(int=149)'\n    --- FAIL: TestFibfib/test_num__5\
    \ (0.00s)\n        tmp3otr6pj0_test.go:43: expected '%!s(int=274)', got '%!s(int=504)'\n\
    \    --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmp3otr6pj0_test.go:43:\
    \ expected '%!s(int=927)', got '%!s(int=1705)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074961
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n <= 0 {\n        return 0\n    }\n    if n ==\
    \ 1 {\n        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2), expected: 1 },\n     { actual: candidate(1), expected:\
    \ 0 },\n     { actual: candidate(5), expected: 4 },\n     { actual: candidate(8),\
    \ expected: 24 },\n     { actual: candidate(10), expected: 81 },\n     { actual:\
    \ candidate(12), expected: 274 },\n     { actual: candidate(14), expected: 927\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__1 (0.00s)\n\
    \        tmp3otr6pj0_test.go:43: expected '%!s(int=0)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmp3otr6pj0_test.go:43: expected\
    \ '%!s(int=4)', got '%!s(int=7)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmp3otr6pj0_test.go:43: expected '%!s(int=24)', got '%!s(int=44)'\n \
    \   --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmp3otr6pj0_test.go:43:\
    \ expected '%!s(int=81)', got '%!s(int=149)'\n    --- FAIL: TestFibfib/test_num__5\
    \ (0.00s)\n        tmp3otr6pj0_test.go:43: expected '%!s(int=274)', got '%!s(int=504)'\n\
    \    --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmp3otr6pj0_test.go:43:\
    \ expected '%!s(int=927)', got '%!s(int=1705)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074961
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n < 0 {\n        fmt.Println(\"fibfib: negative\
    \ number\")\n        return -1\n    }\n    if n == 0 {\n        return 0\n   \
    \ }\n    if n == 1 {\n        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     { actual:\
    \ candidate(1), expected: 0 },\n     { actual: candidate(5), expected: 4 },\n\
    \     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10), expected:\
    \ 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual: candidate(14),\
    \ expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: 'fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: '
  timestamp: 1660074961
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n < 0 {\n        return -1\n    }\n    if n ==\
    \ 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n   \
    \ return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmp5_6zwxxs_test.go:46: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestFibfib/test_num__1 (0.00s)\n        tmp5_6zwxxs_test.go:46: expected\
    \ '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestFibfib/test_num__2 (0.00s)\n\
    \        tmp5_6zwxxs_test.go:46: expected '%!s(int=4)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestFibfib/test_num__3 (0.00s)\n        tmp5_6zwxxs_test.go:46: expected\
    \ '%!s(int=24)', got '%!s(int=20)'\n    --- FAIL: TestFibfib/test_num__4 (0.00s)\n\
    \        tmp5_6zwxxs_test.go:46: expected '%!s(int=81)', got '%!s(int=68)'\n \
    \   --- FAIL: TestFibfib/test_num__5 (0.00s)\n        tmp5_6zwxxs_test.go:46:\
    \ expected '%!s(int=274)', got '%!s(int=230)'\n    --- FAIL: TestFibfib/test_num__6\
    \ (0.00s)\n        tmp5_6zwxxs_test.go:46: expected '%!s(int=927)', got '%!s(int=778)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074961
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n == 0 || n == 1 {\n        return 0\n    }\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160398\
    \ stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f352?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 18 [running]:\ncommand-line-arguments_test.fibfib(0xffffffffff333358)\n\
    \t/tmp/tmp7hyqvkw2_test.go:14 +0x8c fp=0xc0201603a8 sp=0xc0201603a0 pc=0x4ef6ec\n\
    command-line-arguments_test.fibfib(0xffffffffff333359)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc0201603d0 sp=0xc0201603a8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335a)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc0201603f8 sp=0xc0201603d0 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335b)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc020160420 sp=0xc0201603f8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335c)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc020160448 sp=0xc020160420 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335d)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc020160470 sp=0xc020160448 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335e)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc020160498 sp=0xc020160470 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335f)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc0201604c0 sp=0xc020160498 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff333360)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc0201604e8 sp=0xc0201604c0 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff333361)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc020160510 sp=0xc0201604e8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff333362)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc020160538 sp=0xc020160510 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff333363)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc02016"
  timestamp: 1660074962
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n <= 0 {\n        return 0\n    }\n    if n ==\
    \ 1 {\n        return 0\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2), expected: 1 },\n     { actual: candidate(1), expected:\
    \ 0 },\n     { actual: candidate(5), expected: 4 },\n     { actual: candidate(8),\
    \ expected: 24 },\n     { actual: candidate(10), expected: 81 },\n     { actual:\
    \ candidate(12), expected: 274 },\n     { actual: candidate(14), expected: 927\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmpd9vw3dy0_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmpd9vw3dy0_test.go:43: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmpd9vw3dy0_test.go:43: expected '%!s(int=24)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmpd9vw3dy0_test.go:43: expected\
    \ '%!s(int=81)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__5 (0.00s)\n\
    \        tmpd9vw3dy0_test.go:43: expected '%!s(int=274)', got '%!s(int=0)'\n \
    \   --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmpd9vw3dy0_test.go:43:\
    \ expected '%!s(int=927)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074961
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n ==\
    \ 1 {\n        return 1\n    }\n    if n == 2 {\n        return 1\n    }\n   \
    \ return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__1 (0.00s)\n\
    \        tmpy8aslpxq_test.go:46: expected '%!s(int=0)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmpy8aslpxq_test.go:46: expected\
    \ '%!s(int=4)', got '%!s(int=7)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmpy8aslpxq_test.go:46: expected '%!s(int=24)', got '%!s(int=44)'\n \
    \   --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmpy8aslpxq_test.go:46:\
    \ expected '%!s(int=81)', got '%!s(int=149)'\n    --- FAIL: TestFibfib/test_num__5\
    \ (0.00s)\n        tmpy8aslpxq_test.go:46: expected '%!s(int=274)', got '%!s(int=504)'\n\
    \    --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmpy8aslpxq_test.go:46:\
    \ expected '%!s(int=927)', got '%!s(int=1705)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074961
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n < 0 {\n        return -1\n    }\n    if n ==\
    \ 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n   \
    \ return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmp5_6zwxxs_test.go:46: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestFibfib/test_num__1 (0.00s)\n        tmp5_6zwxxs_test.go:46: expected\
    \ '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestFibfib/test_num__2 (0.00s)\n\
    \        tmp5_6zwxxs_test.go:46: expected '%!s(int=4)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestFibfib/test_num__3 (0.00s)\n        tmp5_6zwxxs_test.go:46: expected\
    \ '%!s(int=24)', got '%!s(int=20)'\n    --- FAIL: TestFibfib/test_num__4 (0.00s)\n\
    \        tmp5_6zwxxs_test.go:46: expected '%!s(int=81)', got '%!s(int=68)'\n \
    \   --- FAIL: TestFibfib/test_num__5 (0.00s)\n        tmp5_6zwxxs_test.go:46:\
    \ expected '%!s(int=274)', got '%!s(int=230)'\n    --- FAIL: TestFibfib/test_num__6\
    \ (0.00s)\n        tmp5_6zwxxs_test.go:46: expected '%!s(int=927)', got '%!s(int=778)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074961
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n < 0 {\n        fmt.Println(\"fibfib: negative\
    \ number\")\n        return -1\n    }\n    if n == 0 {\n        return 0\n   \
    \ }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return\
    \ 1\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t\
    \ *testing.T) {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__1 (0.00s)\n\
    \        tmpcn65hvpy_test.go:50: expected '%!s(int=0)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmpcn65hvpy_test.go:50: expected\
    \ '%!s(int=4)', got '%!s(int=7)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmpcn65hvpy_test.go:50: expected '%!s(int=24)', got '%!s(int=44)'\n \
    \   --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmpcn65hvpy_test.go:50:\
    \ expected '%!s(int=81)', got '%!s(int=149)'\n    --- FAIL: TestFibfib/test_num__5\
    \ (0.00s)\n        tmpcn65hvpy_test.go:50: expected '%!s(int=274)', got '%!s(int=504)'\n\
    \    --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmpcn65hvpy_test.go:50:\
    \ expected '%!s(int=927)', got '%!s(int=1705)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074961
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n < 0 {\n        fmt.Println(\"fibfib: negative\
    \ number\")\n        return -1\n    }\n    if n == 0 {\n        return 0\n   \
    \ }\n    if n == 1 {\n        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     { actual:\
    \ candidate(1), expected: 0 },\n     { actual: candidate(5), expected: 4 },\n\
    \     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10), expected:\
    \ 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual: candidate(14),\
    \ expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: 'fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: '
  timestamp: 1660074961
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n <= 0 {\n        return 0\n    }\n    if n ==\
    \ 1 {\n        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n   \
    \ return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074961
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n < 0 {\n        fmt.Println(\"fibfib: negative\
    \ number\")\n        return -1\n    }\n    if n == 0 {\n        return 0\n   \
    \ }\n    if n == 1 {\n        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     { actual:\
    \ candidate(1), expected: 0 },\n     { actual: candidate(5), expected: 4 },\n\
    \     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10), expected:\
    \ 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual: candidate(14),\
    \ expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: 'fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: '
  timestamp: 1660074961
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n <= 0 {\n        return 0\n    }\n    if n ==\
    \ 1 {\n        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n   \
    \ return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074961
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n ==\
    \ 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n   \
    \ return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmp2nhnes_4_test.go:46: expected '%!s(int=1)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestFibfib/test_num__1 (0.00s)\n        tmp2nhnes_4_test.go:46: expected\
    \ '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestFibfib/test_num__2 (0.00s)\n\
    \        tmp2nhnes_4_test.go:46: expected '%!s(int=4)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestFibfib/test_num__3 (0.00s)\n        tmp2nhnes_4_test.go:46: expected\
    \ '%!s(int=24)', got '%!s(int=68)'\n    --- FAIL: TestFibfib/test_num__4 (0.00s)\n\
    \        tmp2nhnes_4_test.go:46: expected '%!s(int=81)', got '%!s(int=230)'\n\
    \    --- FAIL: TestFibfib/test_num__5 (0.00s)\n        tmp2nhnes_4_test.go:46:\
    \ expected '%!s(int=274)', got '%!s(int=778)'\n    --- FAIL: TestFibfib/test_num__6\
    \ (0.00s)\n        tmp2nhnes_4_test.go:46: expected '%!s(int=927)', got '%!s(int=2632)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074961
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n <= 0 {\n        return 0\n    }\n    if n ==\
    \ 1 {\n        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n   \
    \ return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074961
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n < 2 {\n        return 0\n    }\n    if n ==\
    \ 2 {\n        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2), expected: 1 },\n     { actual: candidate(1), expected:\
    \ 0 },\n     { actual: candidate(5), expected: 4 },\n     { actual: candidate(8),\
    \ expected: 24 },\n     { actual: candidate(10), expected: 81 },\n     { actual:\
    \ candidate(12), expected: 274 },\n     { actual: candidate(14), expected: 927\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074789
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n < 0 {\n        fmt.Println(\"fibfib: negative\
    \ number\")\n        return -1\n    }\n    if n == 0 {\n        return 0\n   \
    \ }\n    if n == 1 {\n        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     { actual:\
    \ candidate(1), expected: 0 },\n     { actual: candidate(5), expected: 4 },\n\
    \     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10), expected:\
    \ 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual: candidate(14),\
    \ expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: 'fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: '
  timestamp: 1660074961
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n ==\
    \ 1 {\n        return 1\n    }\n    if n == 2 {\n        return 1\n    }\n   \
    \ return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__1 (0.00s)\n\
    \        tmpy8aslpxq_test.go:46: expected '%!s(int=0)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmpy8aslpxq_test.go:46: expected\
    \ '%!s(int=4)', got '%!s(int=7)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmpy8aslpxq_test.go:46: expected '%!s(int=24)', got '%!s(int=44)'\n \
    \   --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmpy8aslpxq_test.go:46:\
    \ expected '%!s(int=81)', got '%!s(int=149)'\n    --- FAIL: TestFibfib/test_num__5\
    \ (0.00s)\n        tmpy8aslpxq_test.go:46: expected '%!s(int=274)', got '%!s(int=504)'\n\
    \    --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmpy8aslpxq_test.go:46:\
    \ expected '%!s(int=927)', got '%!s(int=1705)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074961
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n == 0 || n == 1 {\n        return 0\n    }\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160398\
    \ stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f352?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 18 [running]:\ncommand-line-arguments_test.fibfib(0xffffffffff333358)\n\
    \t/tmp/tmp7hyqvkw2_test.go:14 +0x8c fp=0xc0201603a8 sp=0xc0201603a0 pc=0x4ef6ec\n\
    command-line-arguments_test.fibfib(0xffffffffff333359)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc0201603d0 sp=0xc0201603a8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335a)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc0201603f8 sp=0xc0201603d0 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335b)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc020160420 sp=0xc0201603f8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335c)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc020160448 sp=0xc020160420 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335d)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc020160470 sp=0xc020160448 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335e)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc020160498 sp=0xc020160470 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335f)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc0201604c0 sp=0xc020160498 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff333360)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc0201604e8 sp=0xc0201604c0 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff333361)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc020160510 sp=0xc0201604e8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff333362)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc020160538 sp=0xc020160510 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff333363)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc02016"
  timestamp: 1660074962
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n <= 0 {\n        return 0\n    }\n    if n ==\
    \ 1 {\n        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n   \
    \ return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074961
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n <= 0 {\n        return 0\n    }\n    if n ==\
    \ 1 {\n        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2), expected: 1 },\n     { actual: candidate(1), expected:\
    \ 0 },\n     { actual: candidate(5), expected: 4 },\n     { actual: candidate(8),\
    \ expected: 24 },\n     { actual: candidate(10), expected: 81 },\n     { actual:\
    \ candidate(12), expected: 274 },\n     { actual: candidate(14), expected: 927\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__1 (0.00s)\n\
    \        tmp3otr6pj0_test.go:43: expected '%!s(int=0)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmp3otr6pj0_test.go:43: expected\
    \ '%!s(int=4)', got '%!s(int=7)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmp3otr6pj0_test.go:43: expected '%!s(int=24)', got '%!s(int=44)'\n \
    \   --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmp3otr6pj0_test.go:43:\
    \ expected '%!s(int=81)', got '%!s(int=149)'\n    --- FAIL: TestFibfib/test_num__5\
    \ (0.00s)\n        tmp3otr6pj0_test.go:43: expected '%!s(int=274)', got '%!s(int=504)'\n\
    \    --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmp3otr6pj0_test.go:43:\
    \ expected '%!s(int=927)', got '%!s(int=1705)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074961
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n == 0 || n == 1 {\n        return 0\n    }\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160398\
    \ stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f352?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 18 [running]:\ncommand-line-arguments_test.fibfib(0xffffffffff333358)\n\
    \t/tmp/tmp7hyqvkw2_test.go:14 +0x8c fp=0xc0201603a8 sp=0xc0201603a0 pc=0x4ef6ec\n\
    command-line-arguments_test.fibfib(0xffffffffff333359)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc0201603d0 sp=0xc0201603a8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335a)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc0201603f8 sp=0xc0201603d0 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335b)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc020160420 sp=0xc0201603f8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335c)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc020160448 sp=0xc020160420 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335d)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc020160470 sp=0xc020160448 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335e)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc020160498 sp=0xc020160470 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335f)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc0201604c0 sp=0xc020160498 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff333360)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc0201604e8 sp=0xc0201604c0 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff333361)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc020160510 sp=0xc0201604e8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff333362)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc020160538 sp=0xc020160510 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff333363)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc02016"
  timestamp: 1660074962
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n ==\
    \ 1 {\n        return 1\n    }\n    if n == 2 {\n        return 1\n    }\n   \
    \ return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__1 (0.00s)\n\
    \        tmpy8aslpxq_test.go:46: expected '%!s(int=0)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmpy8aslpxq_test.go:46: expected\
    \ '%!s(int=4)', got '%!s(int=7)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmpy8aslpxq_test.go:46: expected '%!s(int=24)', got '%!s(int=44)'\n \
    \   --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmpy8aslpxq_test.go:46:\
    \ expected '%!s(int=81)', got '%!s(int=149)'\n    --- FAIL: TestFibfib/test_num__5\
    \ (0.00s)\n        tmpy8aslpxq_test.go:46: expected '%!s(int=274)', got '%!s(int=504)'\n\
    \    --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmpy8aslpxq_test.go:46:\
    \ expected '%!s(int=927)', got '%!s(int=1705)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074961
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n <= 0 {\n        return 0\n    }\n    if n ==\
    \ 1 {\n        return 0\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2), expected: 1 },\n     { actual: candidate(1), expected:\
    \ 0 },\n     { actual: candidate(5), expected: 4 },\n     { actual: candidate(8),\
    \ expected: 24 },\n     { actual: candidate(10), expected: 81 },\n     { actual:\
    \ candidate(12), expected: 274 },\n     { actual: candidate(14), expected: 927\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmpd9vw3dy0_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmpd9vw3dy0_test.go:43: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmpd9vw3dy0_test.go:43: expected '%!s(int=24)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmpd9vw3dy0_test.go:43: expected\
    \ '%!s(int=81)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__5 (0.00s)\n\
    \        tmpd9vw3dy0_test.go:43: expected '%!s(int=274)', got '%!s(int=0)'\n \
    \   --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmpd9vw3dy0_test.go:43:\
    \ expected '%!s(int=927)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074961
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n < 0 {\n        fmt.Println(\"fibfib: negative\
    \ number\")\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n\
    \    if n == 1 {\n        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     { actual:\
    \ candidate(1), expected: 0 },\n     { actual: candidate(5), expected: 4 },\n\
    \     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10), expected:\
    \ 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual: candidate(14),\
    \ expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: 'fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: '
  timestamp: 1660074961
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n ==\
    \ 1 {\n        return 1\n    }\n    if n == 2 {\n        return 1\n    }\n   \
    \ return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__1 (0.00s)\n\
    \        tmpy8aslpxq_test.go:46: expected '%!s(int=0)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmpy8aslpxq_test.go:46: expected\
    \ '%!s(int=4)', got '%!s(int=7)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmpy8aslpxq_test.go:46: expected '%!s(int=24)', got '%!s(int=44)'\n \
    \   --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmpy8aslpxq_test.go:46:\
    \ expected '%!s(int=81)', got '%!s(int=149)'\n    --- FAIL: TestFibfib/test_num__5\
    \ (0.00s)\n        tmpy8aslpxq_test.go:46: expected '%!s(int=274)', got '%!s(int=504)'\n\
    \    --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmpy8aslpxq_test.go:46:\
    \ expected '%!s(int=927)', got '%!s(int=1705)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074961
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n ==\
    \ 1 {\n        return 1\n    }\n    if n == 2 {\n        return 1\n    }\n   \
    \ return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__1 (0.00s)\n\
    \        tmpy8aslpxq_test.go:46: expected '%!s(int=0)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmpy8aslpxq_test.go:46: expected\
    \ '%!s(int=4)', got '%!s(int=7)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmpy8aslpxq_test.go:46: expected '%!s(int=24)', got '%!s(int=44)'\n \
    \   --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmpy8aslpxq_test.go:46:\
    \ expected '%!s(int=81)', got '%!s(int=149)'\n    --- FAIL: TestFibfib/test_num__5\
    \ (0.00s)\n        tmpy8aslpxq_test.go:46: expected '%!s(int=274)', got '%!s(int=504)'\n\
    \    --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmpy8aslpxq_test.go:46:\
    \ expected '%!s(int=927)', got '%!s(int=1705)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074961
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n <= 0 {\n        return 0\n    }\n    if n ==\
    \ 1 {\n        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n   \
    \ return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074961
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n < 0 {\n        fmt.Println(\"fibfib: negative\
    \ number\")\n        return -1\n    }\n    if n == 0 {\n        return 0\n   \
    \ }\n    if n == 1 {\n        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     { actual:\
    \ candidate(1), expected: 0 },\n     { actual: candidate(5), expected: 4 },\n\
    \     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10), expected:\
    \ 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual: candidate(14),\
    \ expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: 'fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: '
  timestamp: 1660074961
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n < 0 {\n        fmt.Println(\"fibfib: negative\
    \ number\")\n        return -1\n    }\n    if n == 0 {\n        return 0\n   \
    \ }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return\
    \ 1\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t\
    \ *testing.T) {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__1 (0.00s)\n\
    \        tmpcn65hvpy_test.go:50: expected '%!s(int=0)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmpcn65hvpy_test.go:50: expected\
    \ '%!s(int=4)', got '%!s(int=7)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmpcn65hvpy_test.go:50: expected '%!s(int=24)', got '%!s(int=44)'\n \
    \   --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmpcn65hvpy_test.go:50:\
    \ expected '%!s(int=81)', got '%!s(int=149)'\n    --- FAIL: TestFibfib/test_num__5\
    \ (0.00s)\n        tmpcn65hvpy_test.go:50: expected '%!s(int=274)', got '%!s(int=504)'\n\
    \    --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmpcn65hvpy_test.go:50:\
    \ expected '%!s(int=927)', got '%!s(int=1705)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074961
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n <= 0 {\n        return 0\n    }\n    if n ==\
    \ 1 {\n        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n   \
    \ return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074961
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n == 0 || n == 1 {\n        return 0\n    }\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160398\
    \ stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f352?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 18 [running]:\ncommand-line-arguments_test.fibfib(0xffffffffff333358)\n\
    \t/tmp/tmp7hyqvkw2_test.go:14 +0x8c fp=0xc0201603a8 sp=0xc0201603a0 pc=0x4ef6ec\n\
    command-line-arguments_test.fibfib(0xffffffffff333359)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc0201603d0 sp=0xc0201603a8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335a)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc0201603f8 sp=0xc0201603d0 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335b)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc020160420 sp=0xc0201603f8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335c)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc020160448 sp=0xc020160420 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335d)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc020160470 sp=0xc020160448 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335e)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc020160498 sp=0xc020160470 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335f)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc0201604c0 sp=0xc020160498 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff333360)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc0201604e8 sp=0xc0201604c0 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff333361)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc020160510 sp=0xc0201604e8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff333362)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc020160538 sp=0xc020160510 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff333363)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc02016"
  timestamp: 1660074962
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n <= 0 {\n        return 0\n    }\n    if n ==\
    \ 1 {\n        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n   \
    \ return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074961
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n < 2 {\n        return 0\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmpfso82c6i_test.go:40: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmpfso82c6i_test.go:40: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmpfso82c6i_test.go:40: expected '%!s(int=24)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmpfso82c6i_test.go:40: expected\
    \ '%!s(int=81)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__5 (0.00s)\n\
    \        tmpfso82c6i_test.go:40: expected '%!s(int=274)', got '%!s(int=0)'\n \
    \   --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmpfso82c6i_test.go:40:\
    \ expected '%!s(int=927)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074961
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n == 0 || n == 1 {\n        return 0\n    }\n\
    \    if n == 2 {\n        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     { actual:\
    \ candidate(1), expected: 0 },\n     { actual: candidate(5), expected: 4 },\n\
    \     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10), expected:\
    \ 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual: candidate(14),\
    \ expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074961
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n < 0 {\n        fmt.Println(\"fibfib: negative\
    \ number\")\n        return -1\n    }\n    if n == 0 {\n        return 0\n   \
    \ }\n    if n == 1 {\n        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     { actual:\
    \ candidate(1), expected: 0 },\n     { actual: candidate(5), expected: 4 },\n\
    \     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10), expected:\
    \ 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual: candidate(14),\
    \ expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: 'fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: '
  timestamp: 1660074961
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n < 0 {\n        fmt.Println(\"fibfib: negative\
    \ number\")\n        return -1\n    }\n    if n == 0 {\n        return 0\n   \
    \ }\n    if n == 1 {\n        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     { actual:\
    \ candidate(1), expected: 0 },\n     { actual: candidate(5), expected: 4 },\n\
    \     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10), expected:\
    \ 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual: candidate(14),\
    \ expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: 'fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: '
  timestamp: 1660074961
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n == 0 || n == 1 {\n        return 0\n    }\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160398\
    \ stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f352?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 18 [running]:\ncommand-line-arguments_test.fibfib(0xffffffffff333358)\n\
    \t/tmp/tmp7hyqvkw2_test.go:14 +0x8c fp=0xc0201603a8 sp=0xc0201603a0 pc=0x4ef6ec\n\
    command-line-arguments_test.fibfib(0xffffffffff333359)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc0201603d0 sp=0xc0201603a8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335a)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc0201603f8 sp=0xc0201603d0 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335b)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc020160420 sp=0xc0201603f8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335c)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc020160448 sp=0xc020160420 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335d)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc020160470 sp=0xc020160448 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335e)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc020160498 sp=0xc020160470 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335f)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc0201604c0 sp=0xc020160498 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff333360)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc0201604e8 sp=0xc0201604c0 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff333361)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc020160510 sp=0xc0201604e8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff333362)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc020160538 sp=0xc020160510 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff333363)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc02016"
  timestamp: 1660074962
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n ==\
    \ 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n   \
    \ return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmp2nhnes_4_test.go:46: expected '%!s(int=1)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestFibfib/test_num__1 (0.00s)\n        tmp2nhnes_4_test.go:46: expected\
    \ '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestFibfib/test_num__2 (0.00s)\n\
    \        tmp2nhnes_4_test.go:46: expected '%!s(int=4)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestFibfib/test_num__3 (0.00s)\n        tmp2nhnes_4_test.go:46: expected\
    \ '%!s(int=24)', got '%!s(int=68)'\n    --- FAIL: TestFibfib/test_num__4 (0.00s)\n\
    \        tmp2nhnes_4_test.go:46: expected '%!s(int=81)', got '%!s(int=230)'\n\
    \    --- FAIL: TestFibfib/test_num__5 (0.00s)\n        tmp2nhnes_4_test.go:46:\
    \ expected '%!s(int=274)', got '%!s(int=778)'\n    --- FAIL: TestFibfib/test_num__6\
    \ (0.00s)\n        tmp2nhnes_4_test.go:46: expected '%!s(int=927)', got '%!s(int=2632)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074961
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n == 0 || n == 1 {\n        return 0\n    }\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160398\
    \ stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f352?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 18 [running]:\ncommand-line-arguments_test.fibfib(0xffffffffff333358)\n\
    \t/tmp/tmp7hyqvkw2_test.go:14 +0x8c fp=0xc0201603a8 sp=0xc0201603a0 pc=0x4ef6ec\n\
    command-line-arguments_test.fibfib(0xffffffffff333359)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc0201603d0 sp=0xc0201603a8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335a)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc0201603f8 sp=0xc0201603d0 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335b)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc020160420 sp=0xc0201603f8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335c)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc020160448 sp=0xc020160420 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335d)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc020160470 sp=0xc020160448 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335e)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc020160498 sp=0xc020160470 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335f)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc0201604c0 sp=0xc020160498 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff333360)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc0201604e8 sp=0xc0201604c0 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff333361)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc020160510 sp=0xc0201604e8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff333362)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc020160538 sp=0xc020160510 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff333363)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc02016"
  timestamp: 1660074962
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n ==\
    \ 1 {\n        return 1\n    }\n    if n == 2 {\n        return 1\n    }\n   \
    \ return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__1 (0.00s)\n\
    \        tmpy8aslpxq_test.go:46: expected '%!s(int=0)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmpy8aslpxq_test.go:46: expected\
    \ '%!s(int=4)', got '%!s(int=7)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmpy8aslpxq_test.go:46: expected '%!s(int=24)', got '%!s(int=44)'\n \
    \   --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmpy8aslpxq_test.go:46:\
    \ expected '%!s(int=81)', got '%!s(int=149)'\n    --- FAIL: TestFibfib/test_num__5\
    \ (0.00s)\n        tmpy8aslpxq_test.go:46: expected '%!s(int=274)', got '%!s(int=504)'\n\
    \    --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmpy8aslpxq_test.go:46:\
    \ expected '%!s(int=927)', got '%!s(int=1705)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074961
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n <= 0 {\n        return 0\n    }\n    if n ==\
    \ 1 {\n        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n   \
    \ return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074961
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n ==\
    \ 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n   \
    \ return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmp2nhnes_4_test.go:46: expected '%!s(int=1)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestFibfib/test_num__1 (0.00s)\n        tmp2nhnes_4_test.go:46: expected\
    \ '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestFibfib/test_num__2 (0.00s)\n\
    \        tmp2nhnes_4_test.go:46: expected '%!s(int=4)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestFibfib/test_num__3 (0.00s)\n        tmp2nhnes_4_test.go:46: expected\
    \ '%!s(int=24)', got '%!s(int=68)'\n    --- FAIL: TestFibfib/test_num__4 (0.00s)\n\
    \        tmp2nhnes_4_test.go:46: expected '%!s(int=81)', got '%!s(int=230)'\n\
    \    --- FAIL: TestFibfib/test_num__5 (0.00s)\n        tmp2nhnes_4_test.go:46:\
    \ expected '%!s(int=274)', got '%!s(int=778)'\n    --- FAIL: TestFibfib/test_num__6\
    \ (0.00s)\n        tmp2nhnes_4_test.go:46: expected '%!s(int=927)', got '%!s(int=2632)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074961
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n ==\
    \ 1 {\n        return 1\n    }\n    if n == 2 {\n        return 1\n    }\n   \
    \ return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__1 (0.00s)\n\
    \        tmpy8aslpxq_test.go:46: expected '%!s(int=0)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmpy8aslpxq_test.go:46: expected\
    \ '%!s(int=4)', got '%!s(int=7)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmpy8aslpxq_test.go:46: expected '%!s(int=24)', got '%!s(int=44)'\n \
    \   --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmpy8aslpxq_test.go:46:\
    \ expected '%!s(int=81)', got '%!s(int=149)'\n    --- FAIL: TestFibfib/test_num__5\
    \ (0.00s)\n        tmpy8aslpxq_test.go:46: expected '%!s(int=274)', got '%!s(int=504)'\n\
    \    --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmpy8aslpxq_test.go:46:\
    \ expected '%!s(int=927)', got '%!s(int=1705)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074961
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n < 0 {\n        fmt.Println(\"fibfib: negative\
    \ number\")\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n\
    \    if n == 1 {\n        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     { actual:\
    \ candidate(1), expected: 0 },\n     { actual: candidate(5), expected: 4 },\n\
    \     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10), expected:\
    \ 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual: candidate(14),\
    \ expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: 'fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: '
  timestamp: 1660074961
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n <= 0 {\n        return 0\n    }\n    if n ==\
    \ 1 {\n        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n   \
    \ return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074961
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n ==\
    \ 1 {\n        return 1\n    }\n    if n == 2 {\n        return 1\n    }\n   \
    \ return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__1 (0.00s)\n\
    \        tmpy8aslpxq_test.go:46: expected '%!s(int=0)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmpy8aslpxq_test.go:46: expected\
    \ '%!s(int=4)', got '%!s(int=7)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmpy8aslpxq_test.go:46: expected '%!s(int=24)', got '%!s(int=44)'\n \
    \   --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmpy8aslpxq_test.go:46:\
    \ expected '%!s(int=81)', got '%!s(int=149)'\n    --- FAIL: TestFibfib/test_num__5\
    \ (0.00s)\n        tmpy8aslpxq_test.go:46: expected '%!s(int=274)', got '%!s(int=504)'\n\
    \    --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmpy8aslpxq_test.go:46:\
    \ expected '%!s(int=927)', got '%!s(int=1705)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074961
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n < 0 {\n        fmt.Println(\"fibfib: negative\
    \ number\")\n        return -1\n    }\n    if n == 0 {\n        return 0\n   \
    \ }\n    if n == 1 {\n        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     { actual:\
    \ candidate(1), expected: 0 },\n     { actual: candidate(5), expected: 4 },\n\
    \     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10), expected:\
    \ 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual: candidate(14),\
    \ expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: 'fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: negative number

    fibfib: '
  timestamp: 1660074961
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n <= 0 {\n        return 0\n    }\n    if n ==\
    \ 1 {\n        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2), expected: 1 },\n     { actual: candidate(1), expected:\
    \ 0 },\n     { actual: candidate(5), expected: 4 },\n     { actual: candidate(8),\
    \ expected: 24 },\n     { actual: candidate(10), expected: 81 },\n     { actual:\
    \ candidate(12), expected: 274 },\n     { actual: candidate(14), expected: 927\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__1 (0.00s)\n\
    \        tmp3otr6pj0_test.go:43: expected '%!s(int=0)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmp3otr6pj0_test.go:43: expected\
    \ '%!s(int=4)', got '%!s(int=7)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmp3otr6pj0_test.go:43: expected '%!s(int=24)', got '%!s(int=44)'\n \
    \   --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmp3otr6pj0_test.go:43:\
    \ expected '%!s(int=81)', got '%!s(int=149)'\n    --- FAIL: TestFibfib/test_num__5\
    \ (0.00s)\n        tmp3otr6pj0_test.go:43: expected '%!s(int=274)', got '%!s(int=504)'\n\
    \    --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmp3otr6pj0_test.go:43:\
    \ expected '%!s(int=927)', got '%!s(int=1705)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074961
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n ==\
    \ 1 {\n        return 1\n    }\n    if n == 2 {\n        return 1\n    }\n   \
    \ return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__1 (0.00s)\n\
    \        tmpy8aslpxq_test.go:46: expected '%!s(int=0)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmpy8aslpxq_test.go:46: expected\
    \ '%!s(int=4)', got '%!s(int=7)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmpy8aslpxq_test.go:46: expected '%!s(int=24)', got '%!s(int=44)'\n \
    \   --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmpy8aslpxq_test.go:46:\
    \ expected '%!s(int=81)', got '%!s(int=149)'\n    --- FAIL: TestFibfib/test_num__5\
    \ (0.00s)\n        tmpy8aslpxq_test.go:46: expected '%!s(int=274)', got '%!s(int=504)'\n\
    \    --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmpy8aslpxq_test.go:46:\
    \ expected '%!s(int=927)', got '%!s(int=1705)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074961
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n < 0 {\n        return -1\n    }\n    if n ==\
    \ 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n   \
    \ if n == 2 {\n        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     { actual:\
    \ candidate(1), expected: 0 },\n     { actual: candidate(5), expected: 4 },\n\
    \     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10), expected:\
    \ 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual: candidate(14),\
    \ expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__1 (0.00s)\n\
    \        tmpvwa3hpit_test.go:49: expected '%!s(int=0)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmpvwa3hpit_test.go:49: expected\
    \ '%!s(int=4)', got '%!s(int=7)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmpvwa3hpit_test.go:49: expected '%!s(int=24)', got '%!s(int=44)'\n \
    \   --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmpvwa3hpit_test.go:49:\
    \ expected '%!s(int=81)', got '%!s(int=149)'\n    --- FAIL: TestFibfib/test_num__5\
    \ (0.00s)\n        tmpvwa3hpit_test.go:49: expected '%!s(int=274)', got '%!s(int=504)'\n\
    \    --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmpvwa3hpit_test.go:49:\
    \ expected '%!s(int=927)', got '%!s(int=1705)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074961
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n ==\
    \ 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n   \
    \ return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmp2nhnes_4_test.go:46: expected '%!s(int=1)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestFibfib/test_num__1 (0.00s)\n        tmp2nhnes_4_test.go:46: expected\
    \ '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestFibfib/test_num__2 (0.00s)\n\
    \        tmp2nhnes_4_test.go:46: expected '%!s(int=4)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestFibfib/test_num__3 (0.00s)\n        tmp2nhnes_4_test.go:46: expected\
    \ '%!s(int=24)', got '%!s(int=68)'\n    --- FAIL: TestFibfib/test_num__4 (0.00s)\n\
    \        tmp2nhnes_4_test.go:46: expected '%!s(int=81)', got '%!s(int=230)'\n\
    \    --- FAIL: TestFibfib/test_num__5 (0.00s)\n        tmp2nhnes_4_test.go:46:\
    \ expected '%!s(int=274)', got '%!s(int=778)'\n    --- FAIL: TestFibfib/test_num__6\
    \ (0.00s)\n        tmp2nhnes_4_test.go:46: expected '%!s(int=927)', got '%!s(int=2632)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074961
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n < 0 {\n        return -1\n    }\n    if n ==\
    \ 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n   \
    \ return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmp5_6zwxxs_test.go:46: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestFibfib/test_num__1 (0.00s)\n        tmp5_6zwxxs_test.go:46: expected\
    \ '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestFibfib/test_num__2 (0.00s)\n\
    \        tmp5_6zwxxs_test.go:46: expected '%!s(int=4)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestFibfib/test_num__3 (0.00s)\n        tmp5_6zwxxs_test.go:46: expected\
    \ '%!s(int=24)', got '%!s(int=20)'\n    --- FAIL: TestFibfib/test_num__4 (0.00s)\n\
    \        tmp5_6zwxxs_test.go:46: expected '%!s(int=81)', got '%!s(int=68)'\n \
    \   --- FAIL: TestFibfib/test_num__5 (0.00s)\n        tmp5_6zwxxs_test.go:46:\
    \ expected '%!s(int=274)', got '%!s(int=230)'\n    --- FAIL: TestFibfib/test_num__6\
    \ (0.00s)\n        tmp5_6zwxxs_test.go:46: expected '%!s(int=927)', got '%!s(int=778)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074961
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n <= 0 {\n        return 0\n    }\n    if n ==\
    \ 1 {\n        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2), expected: 1 },\n     { actual: candidate(1), expected:\
    \ 0 },\n     { actual: candidate(5), expected: 4 },\n     { actual: candidate(8),\
    \ expected: 24 },\n     { actual: candidate(10), expected: 81 },\n     { actual:\
    \ candidate(12), expected: 274 },\n     { actual: candidate(14), expected: 927\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__1 (0.00s)\n\
    \        tmp3otr6pj0_test.go:43: expected '%!s(int=0)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmp3otr6pj0_test.go:43: expected\
    \ '%!s(int=4)', got '%!s(int=7)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmp3otr6pj0_test.go:43: expected '%!s(int=24)', got '%!s(int=44)'\n \
    \   --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmp3otr6pj0_test.go:43:\
    \ expected '%!s(int=81)', got '%!s(int=149)'\n    --- FAIL: TestFibfib/test_num__5\
    \ (0.00s)\n        tmp3otr6pj0_test.go:43: expected '%!s(int=274)', got '%!s(int=504)'\n\
    \    --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmp3otr6pj0_test.go:43:\
    \ expected '%!s(int=927)', got '%!s(int=1705)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074961
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n ==\
    \ 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n   \
    \ return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmp2nhnes_4_test.go:46: expected '%!s(int=1)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestFibfib/test_num__1 (0.00s)\n        tmp2nhnes_4_test.go:46: expected\
    \ '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestFibfib/test_num__2 (0.00s)\n\
    \        tmp2nhnes_4_test.go:46: expected '%!s(int=4)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestFibfib/test_num__3 (0.00s)\n        tmp2nhnes_4_test.go:46: expected\
    \ '%!s(int=24)', got '%!s(int=68)'\n    --- FAIL: TestFibfib/test_num__4 (0.00s)\n\
    \        tmp2nhnes_4_test.go:46: expected '%!s(int=81)', got '%!s(int=230)'\n\
    \    --- FAIL: TestFibfib/test_num__5 (0.00s)\n        tmp2nhnes_4_test.go:46:\
    \ expected '%!s(int=274)', got '%!s(int=778)'\n    --- FAIL: TestFibfib/test_num__6\
    \ (0.00s)\n        tmp2nhnes_4_test.go:46: expected '%!s(int=927)', got '%!s(int=2632)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074961
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n == 0 || n == 1 {\n        return 0\n    }\n\
    \    if n == 2 {\n        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     { actual:\
    \ candidate(1), expected: 0 },\n     { actual: candidate(5), expected: 4 },\n\
    \     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10), expected:\
    \ 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual: candidate(14),\
    \ expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074961
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n <= 0 {\n        return 0\n    }\n    if n ==\
    \ 1 {\n        return 1\n    }\n    if n == 2 {\n        return 1\n    }\n   \
    \ return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__1 (0.00s)\n\
    \        tmpe_u4o92b_test.go:46: expected '%!s(int=0)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmpe_u4o92b_test.go:46: expected\
    \ '%!s(int=4)', got '%!s(int=7)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmpe_u4o92b_test.go:46: expected '%!s(int=24)', got '%!s(int=44)'\n \
    \   --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmpe_u4o92b_test.go:46:\
    \ expected '%!s(int=81)', got '%!s(int=149)'\n    --- FAIL: TestFibfib/test_num__5\
    \ (0.00s)\n        tmpe_u4o92b_test.go:46: expected '%!s(int=274)', got '%!s(int=504)'\n\
    \    --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmpe_u4o92b_test.go:46:\
    \ expected '%!s(int=927)', got '%!s(int=1705)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074961
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n ==\
    \ 1 {\n        return 1\n    }\n    if n == 2 {\n        return 1\n    }\n   \
    \ return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__1 (0.00s)\n\
    \        tmpy8aslpxq_test.go:46: expected '%!s(int=0)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmpy8aslpxq_test.go:46: expected\
    \ '%!s(int=4)', got '%!s(int=7)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmpy8aslpxq_test.go:46: expected '%!s(int=24)', got '%!s(int=44)'\n \
    \   --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmpy8aslpxq_test.go:46:\
    \ expected '%!s(int=81)', got '%!s(int=149)'\n    --- FAIL: TestFibfib/test_num__5\
    \ (0.00s)\n        tmpy8aslpxq_test.go:46: expected '%!s(int=274)', got '%!s(int=504)'\n\
    \    --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmpy8aslpxq_test.go:46:\
    \ expected '%!s(int=927)', got '%!s(int=1705)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074961
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n <= 0 {\n        return 0\n    }\n    if n ==\
    \ 1 {\n        return 1\n    }\n    if n == 2 {\n        return 1\n    }\n   \
    \ return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__1 (0.00s)\n\
    \        tmpe_u4o92b_test.go:46: expected '%!s(int=0)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmpe_u4o92b_test.go:46: expected\
    \ '%!s(int=4)', got '%!s(int=7)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmpe_u4o92b_test.go:46: expected '%!s(int=24)', got '%!s(int=44)'\n \
    \   --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmpe_u4o92b_test.go:46:\
    \ expected '%!s(int=81)', got '%!s(int=149)'\n    --- FAIL: TestFibfib/test_num__5\
    \ (0.00s)\n        tmpe_u4o92b_test.go:46: expected '%!s(int=274)', got '%!s(int=504)'\n\
    \    --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmpe_u4o92b_test.go:46:\
    \ expected '%!s(int=927)', got '%!s(int=1705)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074961
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n == 0 || n == 1 {\n        return 0\n    }\n\
    \    if n == 2 {\n        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     { actual:\
    \ candidate(1), expected: 0 },\n     { actual: candidate(5), expected: 4 },\n\
    \     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10), expected:\
    \ 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual: candidate(14),\
    \ expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074961
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n ==\
    \ 1 {\n        return 1\n    }\n    if n == 2 {\n        return 1\n    }\n   \
    \ return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__1 (0.00s)\n\
    \        tmpy8aslpxq_test.go:46: expected '%!s(int=0)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmpy8aslpxq_test.go:46: expected\
    \ '%!s(int=4)', got '%!s(int=7)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmpy8aslpxq_test.go:46: expected '%!s(int=24)', got '%!s(int=44)'\n \
    \   --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmpy8aslpxq_test.go:46:\
    \ expected '%!s(int=81)', got '%!s(int=149)'\n    --- FAIL: TestFibfib/test_num__5\
    \ (0.00s)\n        tmpy8aslpxq_test.go:46: expected '%!s(int=274)', got '%!s(int=504)'\n\
    \    --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmpy8aslpxq_test.go:46:\
    \ expected '%!s(int=927)', got '%!s(int=1705)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074961
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n ==\
    \ 1 {\n        return 1\n    }\n    if n == 2 {\n        return 1\n    }\n   \
    \ return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__1 (0.00s)\n\
    \        tmpy8aslpxq_test.go:46: expected '%!s(int=0)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmpy8aslpxq_test.go:46: expected\
    \ '%!s(int=4)', got '%!s(int=7)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmpy8aslpxq_test.go:46: expected '%!s(int=24)', got '%!s(int=44)'\n \
    \   --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmpy8aslpxq_test.go:46:\
    \ expected '%!s(int=81)', got '%!s(int=149)'\n    --- FAIL: TestFibfib/test_num__5\
    \ (0.00s)\n        tmpy8aslpxq_test.go:46: expected '%!s(int=274)', got '%!s(int=504)'\n\
    \    --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmpy8aslpxq_test.go:46:\
    \ expected '%!s(int=927)', got '%!s(int=1705)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074961
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n < 0 {\n        fmt.Println(\"fibfib: negative\
    \ number\")\n        return -1\n    }\n    if n == 0 {\n        return 0\n   \
    \ }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return\
    \ 1\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t\
    \ *testing.T) {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__1 (0.00s)\n\
    \        tmpcn65hvpy_test.go:50: expected '%!s(int=0)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmpcn65hvpy_test.go:50: expected\
    \ '%!s(int=4)', got '%!s(int=7)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmpcn65hvpy_test.go:50: expected '%!s(int=24)', got '%!s(int=44)'\n \
    \   --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmpcn65hvpy_test.go:50:\
    \ expected '%!s(int=81)', got '%!s(int=149)'\n    --- FAIL: TestFibfib/test_num__5\
    \ (0.00s)\n        tmpcn65hvpy_test.go:50: expected '%!s(int=274)', got '%!s(int=504)'\n\
    \    --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmpcn65hvpy_test.go:50:\
    \ expected '%!s(int=927)', got '%!s(int=1705)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074961
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n == 0 || n == 1 {\n        return 0\n    }\n\
    \    if n == 2 {\n        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     { actual:\
    \ candidate(1), expected: 0 },\n     { actual: candidate(5), expected: 4 },\n\
    \     { actual: candidate(8), expected: 24 },\n     { actual: candidate(10), expected:\
    \ 81 },\n     { actual: candidate(12), expected: 274 },\n     { actual: candidate(14),\
    \ expected: 927 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074961
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n <= 0 {\n        return 0\n    }\n    if n ==\
    \ 1 {\n        return 0\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n\nfunc TestFibfib(t *testing.T) {\n  candidate := fibfib\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2), expected: 1 },\n     { actual: candidate(1), expected:\
    \ 0 },\n     { actual: candidate(5), expected: 4 },\n     { actual: candidate(8),\
    \ expected: 24 },\n     { actual: candidate(10), expected: 81 },\n     { actual:\
    \ candidate(12), expected: 274 },\n     { actual: candidate(14), expected: 927\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__0 (0.00s)\n\
    \        tmpd9vw3dy0_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmpd9vw3dy0_test.go:43: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmpd9vw3dy0_test.go:43: expected '%!s(int=24)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmpd9vw3dy0_test.go:43: expected\
    \ '%!s(int=81)', got '%!s(int=0)'\n    --- FAIL: TestFibfib/test_num__5 (0.00s)\n\
    \        tmpd9vw3dy0_test.go:43: expected '%!s(int=274)', got '%!s(int=0)'\n \
    \   --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmpd9vw3dy0_test.go:43:\
    \ expected '%!s(int=927)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074961
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n < 0 {\n        fmt.Println(\"fibfib: n must\
    \ be non-negative\")\n        return -1\n    }\n    if n == 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n      \
    \  return 1\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\n\
    func TestFibfib(t *testing.T) {\n  candidate := fibfib\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(2), expected: 1 },\n     { actual: candidate(1), expected:\
    \ 0 },\n     { actual: candidate(5), expected: 4 },\n     { actual: candidate(8),\
    \ expected: 24 },\n     { actual: candidate(10), expected: 81 },\n     { actual:\
    \ candidate(12), expected: 274 },\n     { actual: candidate(14), expected: 927\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__1 (0.00s)\n\
    \        tmp4c_8armg_test.go:50: expected '%!s(int=0)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmp4c_8armg_test.go:50: expected\
    \ '%!s(int=4)', got '%!s(int=7)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmp4c_8armg_test.go:50: expected '%!s(int=24)', got '%!s(int=44)'\n \
    \   --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmp4c_8armg_test.go:50:\
    \ expected '%!s(int=81)', got '%!s(int=149)'\n    --- FAIL: TestFibfib/test_num__5\
    \ (0.00s)\n        tmp4c_8armg_test.go:50: expected '%!s(int=274)', got '%!s(int=504)'\n\
    \    --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmp4c_8armg_test.go:50:\
    \ expected '%!s(int=927)', got '%!s(int=1705)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074961
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n == 0 || n == 1 {\n        return 0\n    }\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160398\
    \ stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f352?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 18 [running]:\ncommand-line-arguments_test.fibfib(0xffffffffff333358)\n\
    \t/tmp/tmp7hyqvkw2_test.go:14 +0x8c fp=0xc0201603a8 sp=0xc0201603a0 pc=0x4ef6ec\n\
    command-line-arguments_test.fibfib(0xffffffffff333359)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc0201603d0 sp=0xc0201603a8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335a)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc0201603f8 sp=0xc0201603d0 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335b)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc020160420 sp=0xc0201603f8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335c)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc020160448 sp=0xc020160420 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335d)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc020160470 sp=0xc020160448 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff33335e)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc020160498 sp=0xc020160470 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff33335f)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc0201604c0 sp=0xc020160498 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff333360)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc0201604e8 sp=0xc0201604c0 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff333361)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc020160510 sp=0xc0201604e8 pc=0x4ef69c\ncommand-line-arguments_test.fibfib(0xffffffffff333362)\n\
    \t/tmp/tmp7hyqvkw2_test.go:18 +0x3c fp=0xc020160538 sp=0xc020160510 pc=0x4ef69c\n\
    command-line-arguments_test.fibfib(0xffffffffff333363)\n\t/tmp/tmp7hyqvkw2_test.go:18\
    \ +0x3c fp=0xc02016"
  timestamp: 1660074962
- exit_code: 0
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n <= 0 {\n        return 0\n    }\n    if n ==\
    \ 1 {\n        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n   \
    \ return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t *testing.T)\
    \ {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074961
- exit_code: 1
  program: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    func fibfib(n int) int {\n    if n < 0 {\n        fmt.Println(\"fibfib: negative\
    \ number\")\n        return -1\n    }\n    if n == 0 {\n        return 0\n   \
    \ }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return\
    \ 1\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\nfunc TestFibfib(t\
    \ *testing.T) {\n  candidate := fibfib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 1 },\n     { actual: candidate(1), expected: 0 },\n     { actual:\
    \ candidate(5), expected: 4 },\n     { actual: candidate(8), expected: 24 },\n\
    \     { actual: candidate(10), expected: 81 },\n     { actual: candidate(12),\
    \ expected: 274 },\n     { actual: candidate(14), expected: 927 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFibfib (0.00s)\n    --- FAIL: TestFibfib/test_num__1 (0.00s)\n\
    \        tmpcn65hvpy_test.go:50: expected '%!s(int=0)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestFibfib/test_num__2 (0.00s)\n        tmpcn65hvpy_test.go:50: expected\
    \ '%!s(int=4)', got '%!s(int=7)'\n    --- FAIL: TestFibfib/test_num__3 (0.00s)\n\
    \        tmpcn65hvpy_test.go:50: expected '%!s(int=24)', got '%!s(int=44)'\n \
    \   --- FAIL: TestFibfib/test_num__4 (0.00s)\n        tmpcn65hvpy_test.go:50:\
    \ expected '%!s(int=81)', got '%!s(int=149)'\n    --- FAIL: TestFibfib/test_num__5\
    \ (0.00s)\n        tmpcn65hvpy_test.go:50: expected '%!s(int=274)', got '%!s(int=504)'\n\
    \    --- FAIL: TestFibfib/test_num__6 (0.00s)\n        tmpcn65hvpy_test.go:50:\
    \ expected '%!s(int=927)', got '%!s(int=1705)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074961
