language: go_test.go
name: HumanEval_142_sum_squares
results:
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    var sum\
    \ int = 0\n    for _, v := range lst {\n        if v%3 != 0 {\n            sum\
    \ += v*v\n        }\n        if v%4 != 0 {\n            sum += v*v*v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate\
    \ := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14\
    \ },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    var sum\
    \ int = 0\n    for _, v := range lst {\n        if v%3 != 0 {\n            sum\
    \ += v*v\n        }\n        if v%4 != 0 {\n            sum += v*v*v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate\
    \ := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14\
    \ },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    // Write\
    \ your code here\n    sum := 0\n    for _, v := range lst {\n        if v%3 !=\
    \ 0 {\n            sum += v*v\n        }\n        if v%4 != 0 {\n            sum\
    \ += v*v*v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T)\
    \ {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpt26rwkhl_test.go:50: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpt26rwkhl_test.go:50:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpt26rwkhl_test.go:50: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpt26rwkhl_test.go:50:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpt26rwkhl_test.go:50: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpt26rwkhl_test.go:50:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpt26rwkhl_test.go:50: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpt26rwkhl_test.go:50:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    var sum\
    \ int = 0\n    for _, v := range lst {\n        if v%3 != 0 {\n            sum\
    \ += v*v\n        }\n        if v%4 != 0 {\n            sum += v*v*v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate\
    \ := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14\
    \ },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    sum :=\
    \ 0\n    for _, v := range lst {\n        if v%3 != 0 {\n            sum += v*v\n\
    \        }\n        if v%4 != 0 {\n            sum += v*v*v\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpz_c6cmy0_test.go:49: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpz_c6cmy0_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpz_c6cmy0_test.go:49: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpz_c6cmy0_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpz_c6cmy0_test.go:49: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpz_c6cmy0_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpz_c6cmy0_test.go:49: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpz_c6cmy0_test.go:49:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    sum :=\
    \ 0\n    for _, v := range lst {\n        if v%3 != 0 {\n            sum += v\n\
    \        }\n        if v%4 != 0 {\n            sum += v\n        }\n    }\n  \
    \  return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpbamt0mov_test.go:49: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpbamt0mov_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=15)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpbamt0mov_test.go:49: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpbamt0mov_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=-18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpbamt0mov_test.go:49: expected '%!s(int=-126)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpbamt0mov_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=-157)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpbamt0mov_test.go:49: expected '%!s(int=0)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpbamt0mov_test.go:49:\
    \ expected '%!s(int=-14196)', got '%!s(int=121)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpbamt0mov_test.go:49: expected '%!s(int=-1448)', got '%!s(int=136)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    var sum\
    \ int = 0\n    for _, v := range lst {\n        if v%3 != 0 {\n            sum\
    \ += v*v\n        }\n        if v%4 != 0 {\n            sum += v*v*v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate\
    \ := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14\
    \ },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    var sum\
    \ int = 0\n    for _, v := range lst {\n        if v%3 != 0 {\n            sum\
    \ += v\n        }\n        if v%4 != 0 {\n            sum += v\n        }\n  \
    \  }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate :=\
    \ sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1,\
    \ 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1,\
    \ -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpph5ey1vo_test.go:49: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpph5ey1vo_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=15)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpph5ey1vo_test.go:49: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpph5ey1vo_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=-18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpph5ey1vo_test.go:49: expected '%!s(int=-126)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpph5ey1vo_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=-157)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpph5ey1vo_test.go:49: expected '%!s(int=0)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpph5ey1vo_test.go:49:\
    \ expected '%!s(int=-14196)', got '%!s(int=121)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpph5ey1vo_test.go:49: expected '%!s(int=-1448)', got '%!s(int=136)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    // Write\
    \ your code here\n    sum := 0\n    for _, value := range lst {\n        if value%3\
    \ != 0 {\n            sum += value * value\n        }\n        if value%4 != 0\
    \ {\n            sum += value * value * value\n        }\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     {\
    \ actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpmc8gg6o6_test.go:50: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpmc8gg6o6_test.go:50:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpmc8gg6o6_test.go:50: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpmc8gg6o6_test.go:50:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpmc8gg6o6_test.go:50: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpmc8gg6o6_test.go:50:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpmc8gg6o6_test.go:50: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpmc8gg6o6_test.go:50:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    sum :=\
    \ 0\n    for _, v := range lst {\n        if v%3 != 0 {\n            sum += v*v\n\
    \        }\n        if v%4 != 0 {\n            sum += v*v*v\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpz_c6cmy0_test.go:49: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpz_c6cmy0_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpz_c6cmy0_test.go:49: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpz_c6cmy0_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpz_c6cmy0_test.go:49: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpz_c6cmy0_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpz_c6cmy0_test.go:49: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpz_c6cmy0_test.go:49:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    var sum\
    \ int\n    for _, v := range lst {\n        if v%3 != 0 {\n            sum +=\
    \ v\n        }\n        if v%4 != 0 {\n            sum += v\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpth4y_a9q_test.go:49: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpth4y_a9q_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=15)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpth4y_a9q_test.go:49: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpth4y_a9q_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=-18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpth4y_a9q_test.go:49: expected '%!s(int=-126)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpth4y_a9q_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=-157)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpth4y_a9q_test.go:49: expected '%!s(int=0)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpth4y_a9q_test.go:49:\
    \ expected '%!s(int=-14196)', got '%!s(int=121)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpth4y_a9q_test.go:49: expected '%!s(int=-1448)', got '%!s(int=136)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    sum :=\
    \ 0\n    for _, v := range lst {\n        if v%3 != 0 {\n            sum += v\n\
    \        }\n        if v%4 != 0 {\n            sum += v\n        }\n    }\n  \
    \  return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpbamt0mov_test.go:49: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpbamt0mov_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=15)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpbamt0mov_test.go:49: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpbamt0mov_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=-18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpbamt0mov_test.go:49: expected '%!s(int=-126)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpbamt0mov_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=-157)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpbamt0mov_test.go:49: expected '%!s(int=0)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpbamt0mov_test.go:49:\
    \ expected '%!s(int=-14196)', got '%!s(int=121)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpbamt0mov_test.go:49: expected '%!s(int=-1448)', got '%!s(int=136)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    sum :=\
    \ 0\n    for _, v := range lst {\n        if v%3 != 0 {\n            sum += v*v\n\
    \        }\n        if v%4 != 0 {\n            sum += v*v*v\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpz_c6cmy0_test.go:49: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpz_c6cmy0_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpz_c6cmy0_test.go:49: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpz_c6cmy0_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpz_c6cmy0_test.go:49: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpz_c6cmy0_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpz_c6cmy0_test.go:49: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpz_c6cmy0_test.go:49:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    var sum\
    \ int\n    for _, v := range lst {\n        if v%3 != 0 {\n            sum +=\
    \ v*v\n        }\n        if v%4 != 0 {\n            sum += v*v*v\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate\
    \ := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14\
    \ },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpm04ew1dr_test.go:49: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpm04ew1dr_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpm04ew1dr_test.go:49: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpm04ew1dr_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpm04ew1dr_test.go:49: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpm04ew1dr_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpm04ew1dr_test.go:49: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpm04ew1dr_test.go:49:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    var sum\
    \ int = 0\n    for _, v := range lst {\n        if v%3 != 0 {\n            sum\
    \ += v\n        }\n        if v%4 != 0 {\n            sum += v\n        }\n  \
    \  }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate :=\
    \ sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1,\
    \ 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1,\
    \ -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpph5ey1vo_test.go:49: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpph5ey1vo_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=15)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpph5ey1vo_test.go:49: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpph5ey1vo_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=-18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpph5ey1vo_test.go:49: expected '%!s(int=-126)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpph5ey1vo_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=-157)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpph5ey1vo_test.go:49: expected '%!s(int=0)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpph5ey1vo_test.go:49:\
    \ expected '%!s(int=-14196)', got '%!s(int=121)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpph5ey1vo_test.go:49: expected '%!s(int=-1448)', got '%!s(int=136)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    var sum\
    \ int = 0\n    for _, v := range lst {\n        if v%3 != 0 {\n            sum\
    \ += v*v\n        }\n        if v%4 != 0 {\n            sum += v*v*v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate\
    \ := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14\
    \ },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    // Write\
    \ your code here\n    sum := 0\n    for i := 0; i < len(lst); i++ {\n        if\
    \ i % 3 == 0 {\n            sum += lst[i]\n        }\n        if i % 4 == 0 {\n\
    \            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n\
    \     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected:\
    \ -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99,\
    \ 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0,\
    \ 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     {\
    \ actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmp4thfc476_test.go:50: expected '%!s(int=6)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmp4thfc476_test.go:50:\
    \ expected '%!s(int=14)', got '%!s(int=2)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp4thfc476_test.go:50: expected '%!s(int=9)', got '%!s(int=6)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp4thfc476_test.go:50:\
    \ expected '%!s(int=-3)', got '%!s(int=-6)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmp4thfc476_test.go:50: expected '%!s(int=-126)', got '%!s(int=-8)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmp4thfc476_test.go:50:\
    \ expected '%!s(int=3030)', got '%!s(int=-114)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmp4thfc476_test.go:50: expected '%!s(int=0)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmp4thfc476_test.go:50:\
    \ expected '%!s(int=-14196)', got '%!s(int=-52)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmp4thfc476_test.go:50: expected '%!s(int=-1448)', got '%!s(int=-42)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    // Write\
    \ your code here\n    sum := 0\n    for _, i := range lst {\n        if i%3 !=\
    \ 0 {\n            sum += i\n        }\n        if i%4 != 0 {\n            sum\
    \ += i*i\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T)\
    \ {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpzgdi9kue_test.go:50: expected '%!s(int=6)', got '%!s(int=17)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpzgdi9kue_test.go:50:\
    \ expected '%!s(int=14)', got '%!s(int=87)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzgdi9kue_test.go:50: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzgdi9kue_test.go:50:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpzgdi9kue_test.go:50: expected '%!s(int=-126)', got '%!s(int=46)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpzgdi9kue_test.go:50:\
    \ expected '%!s(int=3030)', got '%!s(int=9749)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpzgdi9kue_test.go:50: expected '%!s(int=-14196)', got '%!s(int=4691)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpzgdi9kue_test.go:50:\
    \ expected '%!s(int=-1448)', got '%!s(int=2022)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    var sum\
    \ int = 0\n    for i := 0; i < len(lst); i++ {\n        if i%3 == 0 && i%4 ==\
    \ 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc\
    \ TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n\
    \     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected:\
    \ -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99,\
    \ 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0,\
    \ 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     {\
    \ actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmptapr986j_test.go:46: expected '%!s(int=6)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmptapr986j_test.go:46:\
    \ expected '%!s(int=14)', got '%!s(int=1)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmptapr986j_test.go:46: expected '%!s(int=9)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmptapr986j_test.go:46:\
    \ expected '%!s(int=-3)', got '%!s(int=-1)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmptapr986j_test.go:46: expected '%!s(int=-126)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmptapr986j_test.go:46:\
    \ expected '%!s(int=3030)', got '%!s(int=-56)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmptapr986j_test.go:46: expected '%!s(int=0)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmptapr986j_test.go:46:\
    \ expected '%!s(int=-14196)', got '%!s(int=-42)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmptapr986j_test.go:46: expected '%!s(int=-1448)', got '%!s(int=-15)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    var sum\
    \ = 0\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum +=\
    \ v*v\n        }\n        if v%4 == 0 {\n            sum += v*v*v\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate\
    \ := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14\
    \ },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpsxbvyydo_test.go:49: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpsxbvyydo_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=145)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpsxbvyydo_test.go:49: expected '%!s(int=9)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpsxbvyydo_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpsxbvyydo_test.go:49: expected '%!s(int=-126)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpsxbvyydo_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=-165815)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpsxbvyydo_test.go:49: expected '%!s(int=-14196)', got '%!s(int=29697)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpsxbvyydo_test.go:49:\
    \ expected '%!s(int=-1448)', got '%!s(int=6942)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    var sum\
    \ int = 0\n    for _, val := range lst {\n        if val%3 != 0 {\n          \
    \  sum += val*val\n        }\n        if val%4 != 0 {\n            sum += val*val*val\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n\
    \  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmp7qfcnv69_test.go:49: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmp7qfcnv69_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp7qfcnv69_test.go:49: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp7qfcnv69_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmp7qfcnv69_test.go:49: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmp7qfcnv69_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmp7qfcnv69_test.go:49: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmp7qfcnv69_test.go:49:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    sum :=\
    \ 0\n    for _, v := range lst {\n        if v%3 != 0 {\n            sum += v*v\n\
    \        }\n        if v%4 != 0 {\n            sum += v*v*v\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpz_c6cmy0_test.go:49: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpz_c6cmy0_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpz_c6cmy0_test.go:49: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpz_c6cmy0_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpz_c6cmy0_test.go:49: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpz_c6cmy0_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpz_c6cmy0_test.go:49: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpz_c6cmy0_test.go:49:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    sum :=\
    \ 0\n    for _, v := range lst {\n        if v%3 != 0 {\n            sum += v*v\n\
    \        }\n        if v%4 != 0 {\n            sum += v*v*v\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpz_c6cmy0_test.go:49: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpz_c6cmy0_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpz_c6cmy0_test.go:49: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpz_c6cmy0_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpz_c6cmy0_test.go:49: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpz_c6cmy0_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpz_c6cmy0_test.go:49: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpz_c6cmy0_test.go:49:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    // Write\
    \ your code here\n    sum := 0\n    for _, v := range lst {\n        if v%3 !=\
    \ 0 {\n            sum += v\n        }\n        if v%4 != 0 {\n            sum\
    \ += v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T)\
    \ {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmp2jwn4pil_test.go:50: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmp2jwn4pil_test.go:50:\
    \ expected '%!s(int=14)', got '%!s(int=15)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp2jwn4pil_test.go:50: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp2jwn4pil_test.go:50:\
    \ expected '%!s(int=-3)', got '%!s(int=-18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmp2jwn4pil_test.go:50: expected '%!s(int=-126)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmp2jwn4pil_test.go:50:\
    \ expected '%!s(int=3030)', got '%!s(int=-157)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmp2jwn4pil_test.go:50: expected '%!s(int=0)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmp2jwn4pil_test.go:50:\
    \ expected '%!s(int=-14196)', got '%!s(int=121)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmp2jwn4pil_test.go:50: expected '%!s(int=-1448)', got '%!s(int=136)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    sum :=\
    \ 0\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v*v\n\
    \        }\n        if v%4 == 0 {\n            sum += v*v*v\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmp3ephvgb6_test.go:49: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmp3ephvgb6_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=145)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp3ephvgb6_test.go:49: expected '%!s(int=9)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp3ephvgb6_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmp3ephvgb6_test.go:49: expected '%!s(int=-126)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmp3ephvgb6_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=-165815)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmp3ephvgb6_test.go:49: expected '%!s(int=-14196)', got '%!s(int=29697)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmp3ephvgb6_test.go:49:\
    \ expected '%!s(int=-1448)', got '%!s(int=6942)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    var sum\
    \ int\n    for _, v := range lst {\n        if v%3 != 0 {\n            sum +=\
    \ v\n        }\n        if v%4 != 0 {\n            sum += v\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpth4y_a9q_test.go:49: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpth4y_a9q_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=15)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpth4y_a9q_test.go:49: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpth4y_a9q_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=-18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpth4y_a9q_test.go:49: expected '%!s(int=-126)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpth4y_a9q_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=-157)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpth4y_a9q_test.go:49: expected '%!s(int=0)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpth4y_a9q_test.go:49:\
    \ expected '%!s(int=-14196)', got '%!s(int=121)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpth4y_a9q_test.go:49: expected '%!s(int=-1448)', got '%!s(int=136)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    sum :=\
    \ 0\n    for _, v := range lst {\n        if v%3 != 0 {\n            sum += v*v\n\
    \        }\n        if v%4 != 0 {\n            sum += v*v*v\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpz_c6cmy0_test.go:49: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpz_c6cmy0_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpz_c6cmy0_test.go:49: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpz_c6cmy0_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpz_c6cmy0_test.go:49: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpz_c6cmy0_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpz_c6cmy0_test.go:49: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpz_c6cmy0_test.go:49:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    var sum\
    \ int = 0\n    for i := 0; i < len(lst); i++ {\n        if i%3 == 0 && i%4 ==\
    \ 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc\
    \ TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n\
    \     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected:\
    \ -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99,\
    \ 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0,\
    \ 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     {\
    \ actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmptapr986j_test.go:46: expected '%!s(int=6)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmptapr986j_test.go:46:\
    \ expected '%!s(int=14)', got '%!s(int=1)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmptapr986j_test.go:46: expected '%!s(int=9)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmptapr986j_test.go:46:\
    \ expected '%!s(int=-3)', got '%!s(int=-1)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmptapr986j_test.go:46: expected '%!s(int=-126)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmptapr986j_test.go:46:\
    \ expected '%!s(int=3030)', got '%!s(int=-56)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmptapr986j_test.go:46: expected '%!s(int=0)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmptapr986j_test.go:46:\
    \ expected '%!s(int=-14196)', got '%!s(int=-42)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmptapr986j_test.go:46: expected '%!s(int=-1448)', got '%!s(int=-15)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    // Write\
    \ your code here\n    sum := 0\n    for _, v := range lst {\n        if v%3 !=\
    \ 0 {\n            sum += v*v\n        }\n        if v%4 != 0 {\n            sum\
    \ += v*v*v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T)\
    \ {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpt26rwkhl_test.go:50: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpt26rwkhl_test.go:50:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpt26rwkhl_test.go:50: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpt26rwkhl_test.go:50:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpt26rwkhl_test.go:50: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpt26rwkhl_test.go:50:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpt26rwkhl_test.go:50: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpt26rwkhl_test.go:50:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    sum :=\
    \ 0\n    for _, value := range lst {\n        if value%3 != 0 {\n            sum\
    \ += value * value\n        }\n        if value%4 != 0 {\n            sum += value\
    \ * value\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T)\
    \ {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpc0lpopbn_test.go:49: expected '%!s(int=6)', got '%!s(int=19)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpc0lpopbn_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=99)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpc0lpopbn_test.go:49: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpc0lpopbn_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpc0lpopbn_test.go:49: expected '%!s(int=-126)', got '%!s(int=112)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpc0lpopbn_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=12947)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpc0lpopbn_test.go:49: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpc0lpopbn_test.go:49:\
    \ expected '%!s(int=-14196)', got '%!s(int=11903)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpc0lpopbn_test.go:49: expected '%!s(int=-1448)', got '%!s(int=4118)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    sum :=\
    \ 0\n    for _, v := range lst {\n        if v%3 != 0 {\n            sum += v\n\
    \        }\n        if v%4 != 0 {\n            sum += v\n        }\n    }\n  \
    \  return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpbamt0mov_test.go:49: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpbamt0mov_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=15)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpbamt0mov_test.go:49: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpbamt0mov_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=-18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpbamt0mov_test.go:49: expected '%!s(int=-126)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpbamt0mov_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=-157)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpbamt0mov_test.go:49: expected '%!s(int=0)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpbamt0mov_test.go:49:\
    \ expected '%!s(int=-14196)', got '%!s(int=121)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpbamt0mov_test.go:49: expected '%!s(int=-1448)', got '%!s(int=136)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    sum :=\
    \ 0\n    for _, v := range lst {\n        if v%3 != 0 {\n            sum += v\n\
    \        }\n        if v%4 != 0 {\n            sum += v\n        }\n    }\n  \
    \  return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpbamt0mov_test.go:49: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpbamt0mov_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=15)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpbamt0mov_test.go:49: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpbamt0mov_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=-18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpbamt0mov_test.go:49: expected '%!s(int=-126)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpbamt0mov_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=-157)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpbamt0mov_test.go:49: expected '%!s(int=0)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpbamt0mov_test.go:49:\
    \ expected '%!s(int=-14196)', got '%!s(int=121)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpbamt0mov_test.go:49: expected '%!s(int=-1448)', got '%!s(int=136)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    var sum\
    \ int = 0\n    for _, v := range lst {\n        if v%3 == 0 && v%4 == 0 {\n  \
    \          sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n\
    \     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected:\
    \ -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99,\
    \ 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0,\
    \ 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     {\
    \ actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpgkk9irsu_test.go:46: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpgkk9irsu_test.go:46:\
    \ expected '%!s(int=14)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpgkk9irsu_test.go:46: expected '%!s(int=9)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpgkk9irsu_test.go:46:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpgkk9irsu_test.go:46: expected '%!s(int=-126)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpgkk9irsu_test.go:46:\
    \ expected '%!s(int=3030)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpgkk9irsu_test.go:46: expected '%!s(int=-14196)', got '%!s(int=84)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpgkk9irsu_test.go:46:\
    \ expected '%!s(int=-1448)', got '%!s(int=-12)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    // Write\
    \ your code here\n    var sum int = 0\n    for i := 0; i < len(lst); i++ {\n \
    \       if i % 3 == 0 {\n            sum += lst[i]\n        }\n        if i %\
    \ 4 == 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\n\
    func TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     {\
    \ actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpeb519omz_test.go:50: expected '%!s(int=6)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpeb519omz_test.go:50:\
    \ expected '%!s(int=14)', got '%!s(int=2)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpeb519omz_test.go:50: expected '%!s(int=9)', got '%!s(int=6)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpeb519omz_test.go:50:\
    \ expected '%!s(int=-3)', got '%!s(int=-6)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpeb519omz_test.go:50: expected '%!s(int=-126)', got '%!s(int=-8)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpeb519omz_test.go:50:\
    \ expected '%!s(int=3030)', got '%!s(int=-114)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpeb519omz_test.go:50: expected '%!s(int=0)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpeb519omz_test.go:50:\
    \ expected '%!s(int=-14196)', got '%!s(int=-52)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpeb519omz_test.go:50: expected '%!s(int=-1448)', got '%!s(int=-42)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    var sum\
    \ int = 0\n    for _, v := range lst {\n        if v%3 != 0 {\n            sum\
    \ += v*v\n        }\n        if v%4 != 0 {\n            sum += v*v*v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate\
    \ := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14\
    \ },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    var sum\
    \ int = 0\n    for _, v := range lst {\n        if v%3 != 0 {\n            sum\
    \ += v\n        }\n        if v%4 != 0 {\n            sum += v\n        }\n  \
    \  }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate :=\
    \ sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1,\
    \ 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1,\
    \ -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpph5ey1vo_test.go:49: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpph5ey1vo_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=15)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpph5ey1vo_test.go:49: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpph5ey1vo_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=-18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpph5ey1vo_test.go:49: expected '%!s(int=-126)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpph5ey1vo_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=-157)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpph5ey1vo_test.go:49: expected '%!s(int=0)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpph5ey1vo_test.go:49:\
    \ expected '%!s(int=-14196)', got '%!s(int=121)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpph5ey1vo_test.go:49: expected '%!s(int=-1448)', got '%!s(int=136)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    sum :=\
    \ 0\n    for _, v := range lst {\n        if v%3 != 0 {\n            sum += v*v\n\
    \        }\n        if v%4 != 0 {\n            sum += v*v*v\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpz_c6cmy0_test.go:49: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpz_c6cmy0_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpz_c6cmy0_test.go:49: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpz_c6cmy0_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpz_c6cmy0_test.go:49: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpz_c6cmy0_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpz_c6cmy0_test.go:49: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpz_c6cmy0_test.go:49:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    // Write\
    \ your code here\n    sum := 0\n    for _, v := range lst {\n        if v%3 !=\
    \ 0 {\n            sum += v\n        }\n        if v%4 != 0 {\n            sum\
    \ += v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T)\
    \ {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmp2jwn4pil_test.go:50: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmp2jwn4pil_test.go:50:\
    \ expected '%!s(int=14)', got '%!s(int=15)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp2jwn4pil_test.go:50: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp2jwn4pil_test.go:50:\
    \ expected '%!s(int=-3)', got '%!s(int=-18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmp2jwn4pil_test.go:50: expected '%!s(int=-126)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmp2jwn4pil_test.go:50:\
    \ expected '%!s(int=3030)', got '%!s(int=-157)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmp2jwn4pil_test.go:50: expected '%!s(int=0)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmp2jwn4pil_test.go:50:\
    \ expected '%!s(int=-14196)', got '%!s(int=121)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmp2jwn4pil_test.go:50: expected '%!s(int=-1448)', got '%!s(int=136)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    sum :=\
    \ 0\n    for _, value := range lst {\n        if value%3 != 0 {\n            sum\
    \ += value * value\n        }\n        if value%4 != 0 {\n            sum += value\
    \ * value\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T)\
    \ {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpc0lpopbn_test.go:49: expected '%!s(int=6)', got '%!s(int=19)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpc0lpopbn_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=99)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpc0lpopbn_test.go:49: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpc0lpopbn_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpc0lpopbn_test.go:49: expected '%!s(int=-126)', got '%!s(int=112)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpc0lpopbn_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=12947)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpc0lpopbn_test.go:49: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpc0lpopbn_test.go:49:\
    \ expected '%!s(int=-14196)', got '%!s(int=11903)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpc0lpopbn_test.go:49: expected '%!s(int=-1448)', got '%!s(int=4118)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    sum :=\
    \ 0\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v*v\n\
    \        }\n        if v%4 == 0 {\n            sum += v*v*v\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmp3ephvgb6_test.go:49: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmp3ephvgb6_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=145)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp3ephvgb6_test.go:49: expected '%!s(int=9)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp3ephvgb6_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmp3ephvgb6_test.go:49: expected '%!s(int=-126)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmp3ephvgb6_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=-165815)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmp3ephvgb6_test.go:49: expected '%!s(int=-14196)', got '%!s(int=29697)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmp3ephvgb6_test.go:49:\
    \ expected '%!s(int=-1448)', got '%!s(int=6942)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    var sum\
    \ int\n    for _, v := range lst {\n        if v%3 != 0 {\n            sum +=\
    \ v*v\n        }\n        if v%4 != 0 {\n            sum += v*v*v\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate\
    \ := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14\
    \ },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpm04ew1dr_test.go:49: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpm04ew1dr_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpm04ew1dr_test.go:49: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpm04ew1dr_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpm04ew1dr_test.go:49: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpm04ew1dr_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpm04ew1dr_test.go:49: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpm04ew1dr_test.go:49:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    sum :=\
    \ 0\n    for _, v := range lst {\n        if v%3 != 0 {\n            sum += v\n\
    \        }\n        if v%4 != 0 {\n            sum += v\n        }\n    }\n  \
    \  return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpbamt0mov_test.go:49: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpbamt0mov_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=15)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpbamt0mov_test.go:49: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpbamt0mov_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=-18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpbamt0mov_test.go:49: expected '%!s(int=-126)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpbamt0mov_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=-157)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpbamt0mov_test.go:49: expected '%!s(int=0)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpbamt0mov_test.go:49:\
    \ expected '%!s(int=-14196)', got '%!s(int=121)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpbamt0mov_test.go:49: expected '%!s(int=-1448)', got '%!s(int=136)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    sum :=\
    \ 0\n    for _, entry := range lst {\n        if entry % 3 == 0 {\n          \
    \  entry *= entry\n            sum += entry\n        }\n        if entry % 4 ==\
    \ 0 {\n            entry *= entry\n            sum += entry\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpohsv_u_k_test.go:51: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpohsv_u_k_test.go:51:\
    \ expected '%!s(int=14)', got '%!s(int=97)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpohsv_u_k_test.go:51: expected '%!s(int=9)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpohsv_u_k_test.go:51:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpohsv_u_k_test.go:51: expected '%!s(int=-126)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpohsv_u_k_test.go:51:\
    \ expected '%!s(int=3030)', got '%!s(int=12937)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpohsv_u_k_test.go:51: expected '%!s(int=-14196)', got '%!s(int=3385457)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpohsv_u_k_test.go:51:\
    \ expected '%!s(int=-1448)', got '%!s(int=22974)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    var sum\
    \ int = 0\n    for _, v := range lst {\n        if v%3 != 0 {\n            sum\
    \ += v\n        }\n        if v%4 != 0 {\n            sum += v\n        }\n  \
    \  }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate :=\
    \ sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1,\
    \ 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1,\
    \ -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpph5ey1vo_test.go:49: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpph5ey1vo_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=15)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpph5ey1vo_test.go:49: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpph5ey1vo_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=-18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpph5ey1vo_test.go:49: expected '%!s(int=-126)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpph5ey1vo_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=-157)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpph5ey1vo_test.go:49: expected '%!s(int=0)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpph5ey1vo_test.go:49:\
    \ expected '%!s(int=-14196)', got '%!s(int=121)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpph5ey1vo_test.go:49: expected '%!s(int=-1448)', got '%!s(int=136)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    // Write\
    \ your code here\n    sum := 0\n    for _, value := range lst {\n        if value%3\
    \ != 0 {\n            sum += value * value\n        }\n        if value%4 != 0\
    \ {\n            sum += value * value * value\n        }\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     {\
    \ actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpmc8gg6o6_test.go:50: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpmc8gg6o6_test.go:50:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpmc8gg6o6_test.go:50: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpmc8gg6o6_test.go:50:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpmc8gg6o6_test.go:50: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpmc8gg6o6_test.go:50:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpmc8gg6o6_test.go:50: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpmc8gg6o6_test.go:50:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    var sum\
    \ int = 0\n    for _, v := range lst {\n        if v%3 != 0 {\n            sum\
    \ += v*v\n        }\n        if v%4 != 0 {\n            sum += v*v*v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate\
    \ := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14\
    \ },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    var sum\
    \ int = 0\n    for _, v := range lst {\n        if v%3 != 0 {\n            sum\
    \ += v*v\n        }\n        if v%4 != 0 {\n            sum += v*v*v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate\
    \ := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14\
    \ },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    var sum\
    \ int = 0\n    for i := 0; i < len(lst); i++ {\n        if i % 3 == 0 {\n    \
    \        sum += lst[i]\n        }\n        if i % 4 == 0 {\n            sum +=\
    \ lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T)\
    \ {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpgqilfy5m_test.go:49: expected '%!s(int=6)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpgqilfy5m_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=2)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpgqilfy5m_test.go:49: expected '%!s(int=9)', got '%!s(int=6)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpgqilfy5m_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=-6)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpgqilfy5m_test.go:49: expected '%!s(int=-126)', got '%!s(int=-8)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpgqilfy5m_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=-114)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpgqilfy5m_test.go:49: expected '%!s(int=0)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpgqilfy5m_test.go:49:\
    \ expected '%!s(int=-14196)', got '%!s(int=-52)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpgqilfy5m_test.go:49: expected '%!s(int=-1448)', got '%!s(int=-42)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    sum :=\
    \ 0\n    for _, v := range lst {\n        if v%3 != 0 {\n            sum += v\n\
    \        }\n        if v%4 != 0 {\n            sum += v\n        }\n    }\n  \
    \  return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpbamt0mov_test.go:49: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpbamt0mov_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=15)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpbamt0mov_test.go:49: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpbamt0mov_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=-18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpbamt0mov_test.go:49: expected '%!s(int=-126)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpbamt0mov_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=-157)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpbamt0mov_test.go:49: expected '%!s(int=0)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpbamt0mov_test.go:49:\
    \ expected '%!s(int=-14196)', got '%!s(int=121)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpbamt0mov_test.go:49: expected '%!s(int=-1448)', got '%!s(int=136)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    // Write\
    \ your code here\n    sum := 0\n    for _, v := range lst {\n        if v%3 !=\
    \ 0 {\n            sum += v\n        }\n        if v%4 != 0 {\n            sum\
    \ += v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T)\
    \ {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmp2jwn4pil_test.go:50: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmp2jwn4pil_test.go:50:\
    \ expected '%!s(int=14)', got '%!s(int=15)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp2jwn4pil_test.go:50: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp2jwn4pil_test.go:50:\
    \ expected '%!s(int=-3)', got '%!s(int=-18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmp2jwn4pil_test.go:50: expected '%!s(int=-126)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmp2jwn4pil_test.go:50:\
    \ expected '%!s(int=3030)', got '%!s(int=-157)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmp2jwn4pil_test.go:50: expected '%!s(int=0)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmp2jwn4pil_test.go:50:\
    \ expected '%!s(int=-14196)', got '%!s(int=121)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmp2jwn4pil_test.go:50: expected '%!s(int=-1448)', got '%!s(int=136)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    // Write\
    \ your code here\n    sum := 0\n    for _, i := range lst {\n        if i%3 !=\
    \ 0 {\n            sum += i\n        }\n        if i%4 != 0 {\n            sum\
    \ += i\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T)\
    \ {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmp1iv_go_q_test.go:50: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmp1iv_go_q_test.go:50:\
    \ expected '%!s(int=14)', got '%!s(int=15)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp1iv_go_q_test.go:50: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp1iv_go_q_test.go:50:\
    \ expected '%!s(int=-3)', got '%!s(int=-18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmp1iv_go_q_test.go:50: expected '%!s(int=-126)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmp1iv_go_q_test.go:50:\
    \ expected '%!s(int=3030)', got '%!s(int=-157)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmp1iv_go_q_test.go:50: expected '%!s(int=0)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmp1iv_go_q_test.go:50:\
    \ expected '%!s(int=-14196)', got '%!s(int=121)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmp1iv_go_q_test.go:50: expected '%!s(int=-1448)', got '%!s(int=136)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    var sum\
    \ int\n    for _, v := range lst {\n        if v%3 == 0 && v%4 == 0 {\n      \
    \      sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n\
    \     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected:\
    \ -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99,\
    \ 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0,\
    \ 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     {\
    \ actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmp0gr1unb4_test.go:46: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmp0gr1unb4_test.go:46:\
    \ expected '%!s(int=14)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp0gr1unb4_test.go:46: expected '%!s(int=9)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp0gr1unb4_test.go:46:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmp0gr1unb4_test.go:46: expected '%!s(int=-126)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmp0gr1unb4_test.go:46:\
    \ expected '%!s(int=3030)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmp0gr1unb4_test.go:46: expected '%!s(int=-14196)', got '%!s(int=84)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmp0gr1unb4_test.go:46:\
    \ expected '%!s(int=-1448)', got '%!s(int=-12)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    // Write\
    \ your code here\n    sum := 0\n    for _, v := range lst {\n        if v%3 !=\
    \ 0 {\n            sum += v\n        }\n        if v%4 != 0 {\n            sum\
    \ += v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T)\
    \ {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmp2jwn4pil_test.go:50: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmp2jwn4pil_test.go:50:\
    \ expected '%!s(int=14)', got '%!s(int=15)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp2jwn4pil_test.go:50: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp2jwn4pil_test.go:50:\
    \ expected '%!s(int=-3)', got '%!s(int=-18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmp2jwn4pil_test.go:50: expected '%!s(int=-126)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmp2jwn4pil_test.go:50:\
    \ expected '%!s(int=3030)', got '%!s(int=-157)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmp2jwn4pil_test.go:50: expected '%!s(int=0)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmp2jwn4pil_test.go:50:\
    \ expected '%!s(int=-14196)', got '%!s(int=121)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmp2jwn4pil_test.go:50: expected '%!s(int=-1448)', got '%!s(int=136)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    var sum\
    \ int = 0\n    for _, v := range lst {\n        if v%3 != 0 {\n            sum\
    \ += v*v\n        }\n        if v%4 != 0 {\n            sum += v*v*v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate\
    \ := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14\
    \ },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    sum :=\
    \ 0\n    for _, v := range lst {\n        if v%3 != 0 {\n            sum += v\n\
    \        }\n        if v%4 != 0 {\n            sum += v\n        }\n    }\n  \
    \  return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpbamt0mov_test.go:49: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpbamt0mov_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=15)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpbamt0mov_test.go:49: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpbamt0mov_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=-18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpbamt0mov_test.go:49: expected '%!s(int=-126)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpbamt0mov_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=-157)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpbamt0mov_test.go:49: expected '%!s(int=0)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpbamt0mov_test.go:49:\
    \ expected '%!s(int=-14196)', got '%!s(int=121)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpbamt0mov_test.go:49: expected '%!s(int=-1448)', got '%!s(int=136)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    sum :=\
    \ 0\n    for _, i := range lst {\n        if i%3 != 0 {\n            sum += i\n\
    \        }\n        if i%4 != 0 {\n            sum += i\n        }\n    }\n  \
    \  return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpyz099ik4_test.go:49: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpyz099ik4_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=15)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpyz099ik4_test.go:49: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpyz099ik4_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=-18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpyz099ik4_test.go:49: expected '%!s(int=-126)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpyz099ik4_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=-157)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpyz099ik4_test.go:49: expected '%!s(int=0)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpyz099ik4_test.go:49:\
    \ expected '%!s(int=-14196)', got '%!s(int=121)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpyz099ik4_test.go:49: expected '%!s(int=-1448)', got '%!s(int=136)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    sum :=\
    \ 0\n    for _, v := range lst {\n        if v%3 != 0 {\n            sum += v\n\
    \        }\n        if v%4 != 0 {\n            sum += v\n        }\n    }\n  \
    \  return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpbamt0mov_test.go:49: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpbamt0mov_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=15)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpbamt0mov_test.go:49: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpbamt0mov_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=-18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpbamt0mov_test.go:49: expected '%!s(int=-126)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpbamt0mov_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=-157)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpbamt0mov_test.go:49: expected '%!s(int=0)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpbamt0mov_test.go:49:\
    \ expected '%!s(int=-14196)', got '%!s(int=121)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpbamt0mov_test.go:49: expected '%!s(int=-1448)', got '%!s(int=136)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    sum :=\
    \ 0\n    for _, v := range lst {\n        if v%3 == 0 && v%4 == 0 {\n        \
    \    sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T)\
    \ {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpgqvnx__r_test.go:46: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpgqvnx__r_test.go:46:\
    \ expected '%!s(int=14)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpgqvnx__r_test.go:46: expected '%!s(int=9)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpgqvnx__r_test.go:46:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpgqvnx__r_test.go:46: expected '%!s(int=-126)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpgqvnx__r_test.go:46:\
    \ expected '%!s(int=3030)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpgqvnx__r_test.go:46: expected '%!s(int=-14196)', got '%!s(int=84)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpgqvnx__r_test.go:46:\
    \ expected '%!s(int=-1448)', got '%!s(int=-12)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075008
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    var sum\
    \ int\n    for _, v := range lst {\n        if v%3 != 0 {\n            sum +=\
    \ v*v\n        }\n        if v%4 != 0 {\n            sum += v*v*v\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate\
    \ := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14\
    \ },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpm04ew1dr_test.go:49: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpm04ew1dr_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpm04ew1dr_test.go:49: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpm04ew1dr_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpm04ew1dr_test.go:49: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpm04ew1dr_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpm04ew1dr_test.go:49: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpm04ew1dr_test.go:49:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    var sum\
    \ int = 0\n    for _, v := range lst {\n        if v%3 != 0 {\n            sum\
    \ += v*v\n        }\n        if v%4 != 0 {\n            sum += v*v*v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate\
    \ := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14\
    \ },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    var sum\
    \ int = 0\n    for _, v := range lst {\n        if v%3 == 0 && v%4 == 0 {\n  \
    \          sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n\
    \     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected:\
    \ -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99,\
    \ 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0,\
    \ 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     {\
    \ actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpgkk9irsu_test.go:46: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpgkk9irsu_test.go:46:\
    \ expected '%!s(int=14)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpgkk9irsu_test.go:46: expected '%!s(int=9)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpgkk9irsu_test.go:46:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpgkk9irsu_test.go:46: expected '%!s(int=-126)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpgkk9irsu_test.go:46:\
    \ expected '%!s(int=3030)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpgkk9irsu_test.go:46: expected '%!s(int=-14196)', got '%!s(int=84)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpgkk9irsu_test.go:46:\
    \ expected '%!s(int=-1448)', got '%!s(int=-12)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    var sum\
    \ int = 0\n    for _, i := range lst {\n        if i%3 != 0 {\n            sum\
    \ += i\n        }\n        if i%4 != 0 {\n            sum += i\n        }\n  \
    \  }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate :=\
    \ sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1,\
    \ 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1,\
    \ -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpntik2eeh_test.go:49: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpntik2eeh_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=15)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpntik2eeh_test.go:49: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpntik2eeh_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=-18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpntik2eeh_test.go:49: expected '%!s(int=-126)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpntik2eeh_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=-157)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpntik2eeh_test.go:49: expected '%!s(int=0)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpntik2eeh_test.go:49:\
    \ expected '%!s(int=-14196)', got '%!s(int=121)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpntik2eeh_test.go:49: expected '%!s(int=-1448)', got '%!s(int=136)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075008
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    var sum\
    \ int = 0\n    for _, v := range lst {\n        if v%3 != 0 {\n            sum\
    \ += v*v\n        }\n        if v%4 != 0 {\n            sum += v*v*v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate\
    \ := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14\
    \ },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    sum :=\
    \ 0\n    for _, v := range lst {\n        if v%3 != 0 {\n            sum += v\n\
    \        }\n        if v%4 != 0 {\n            sum += v\n        }\n    }\n  \
    \  return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpbamt0mov_test.go:49: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpbamt0mov_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=15)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpbamt0mov_test.go:49: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpbamt0mov_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=-18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpbamt0mov_test.go:49: expected '%!s(int=-126)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpbamt0mov_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=-157)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpbamt0mov_test.go:49: expected '%!s(int=0)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpbamt0mov_test.go:49:\
    \ expected '%!s(int=-14196)', got '%!s(int=121)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpbamt0mov_test.go:49: expected '%!s(int=-1448)', got '%!s(int=136)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    var sum\
    \ int = 0\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum\
    \ += v*v\n        }\n        if v%4 == 0 {\n            sum += v*v*v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate\
    \ := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14\
    \ },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmp592dn1gk_test.go:49: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmp592dn1gk_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=145)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp592dn1gk_test.go:49: expected '%!s(int=9)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp592dn1gk_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmp592dn1gk_test.go:49: expected '%!s(int=-126)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmp592dn1gk_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=-165815)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmp592dn1gk_test.go:49: expected '%!s(int=-14196)', got '%!s(int=29697)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmp592dn1gk_test.go:49:\
    \ expected '%!s(int=-1448)', got '%!s(int=6942)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075008
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    // Your\
    \ code here\n    sum := 0\n    for _, v := range lst {\n        if v%3 != 0 {\n\
    \            sum += v\n        }\n        if v%4 != 0 {\n            sum += v\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n\
    \  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmp_s51yu08_test.go:50: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmp_s51yu08_test.go:50:\
    \ expected '%!s(int=14)', got '%!s(int=15)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp_s51yu08_test.go:50: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp_s51yu08_test.go:50:\
    \ expected '%!s(int=-3)', got '%!s(int=-18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmp_s51yu08_test.go:50: expected '%!s(int=-126)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmp_s51yu08_test.go:50:\
    \ expected '%!s(int=3030)', got '%!s(int=-157)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmp_s51yu08_test.go:50: expected '%!s(int=0)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmp_s51yu08_test.go:50:\
    \ expected '%!s(int=-14196)', got '%!s(int=121)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmp_s51yu08_test.go:50: expected '%!s(int=-1448)', got '%!s(int=136)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075008
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    var sum\
    \ int = 0\n    for _, v := range lst {\n        if v%3 != 0 {\n            sum\
    \ += v*v\n        }\n        if v%4 != 0 {\n            sum += v*v*v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate\
    \ := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14\
    \ },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    var sum\
    \ int = 0\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum\
    \ += v*v\n        }\n        if v%4 == 0 {\n            sum += v*v*v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate\
    \ := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14\
    \ },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmp592dn1gk_test.go:49: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmp592dn1gk_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=145)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp592dn1gk_test.go:49: expected '%!s(int=9)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp592dn1gk_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmp592dn1gk_test.go:49: expected '%!s(int=-126)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmp592dn1gk_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=-165815)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmp592dn1gk_test.go:49: expected '%!s(int=-14196)', got '%!s(int=29697)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmp592dn1gk_test.go:49:\
    \ expected '%!s(int=-1448)', got '%!s(int=6942)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075008
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    var sum\
    \ int = 0\n    for _, v := range lst {\n        if v%3 == 0 && v%4 == 0 {\n  \
    \          sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n\
    \     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected:\
    \ -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99,\
    \ 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0,\
    \ 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     {\
    \ actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpgkk9irsu_test.go:46: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpgkk9irsu_test.go:46:\
    \ expected '%!s(int=14)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpgkk9irsu_test.go:46: expected '%!s(int=9)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpgkk9irsu_test.go:46:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpgkk9irsu_test.go:46: expected '%!s(int=-126)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpgkk9irsu_test.go:46:\
    \ expected '%!s(int=3030)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpgkk9irsu_test.go:46: expected '%!s(int=-14196)', got '%!s(int=84)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpgkk9irsu_test.go:46:\
    \ expected '%!s(int=-1448)', got '%!s(int=-12)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    // Write\
    \ your code here\n    sum := 0\n    for _, v := range lst {\n        if v%3 ==\
    \ 0 {\n            sum += v*v\n        }\n        if v%4 == 0 {\n            sum\
    \ += v*v*v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T)\
    \ {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpjio391s9_test.go:50: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpjio391s9_test.go:50:\
    \ expected '%!s(int=14)', got '%!s(int=145)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpjio391s9_test.go:50: expected '%!s(int=9)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpjio391s9_test.go:50:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpjio391s9_test.go:50: expected '%!s(int=-126)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpjio391s9_test.go:50:\
    \ expected '%!s(int=3030)', got '%!s(int=-165815)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpjio391s9_test.go:50: expected '%!s(int=-14196)', got '%!s(int=29697)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpjio391s9_test.go:50:\
    \ expected '%!s(int=-1448)', got '%!s(int=6942)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075008
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    sum :=\
    \ 0\n    for _, v := range lst {\n        if v%3 == 0 && v%4 == 0 {\n        \
    \    sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T)\
    \ {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpgqvnx__r_test.go:46: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpgqvnx__r_test.go:46:\
    \ expected '%!s(int=14)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpgqvnx__r_test.go:46: expected '%!s(int=9)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpgqvnx__r_test.go:46:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpgqvnx__r_test.go:46: expected '%!s(int=-126)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpgqvnx__r_test.go:46:\
    \ expected '%!s(int=3030)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpgqvnx__r_test.go:46: expected '%!s(int=-14196)', got '%!s(int=84)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpgqvnx__r_test.go:46:\
    \ expected '%!s(int=-1448)', got '%!s(int=-12)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075008
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    var sum\
    \ int\n    for _, v := range lst {\n        if v%3 != 0 {\n            sum +=\
    \ v\n        }\n        if v%4 != 0 {\n            sum += v\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpth4y_a9q_test.go:49: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpth4y_a9q_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=15)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpth4y_a9q_test.go:49: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpth4y_a9q_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=-18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpth4y_a9q_test.go:49: expected '%!s(int=-126)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpth4y_a9q_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=-157)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpth4y_a9q_test.go:49: expected '%!s(int=0)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpth4y_a9q_test.go:49:\
    \ expected '%!s(int=-14196)', got '%!s(int=121)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpth4y_a9q_test.go:49: expected '%!s(int=-1448)', got '%!s(int=136)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    sum :=\
    \ 0\n    for _, v := range lst {\n        if v%3 != 0 {\n            sum += v*v\n\
    \        }\n        if v%4 != 0 {\n            sum += v*v*v\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpz_c6cmy0_test.go:49: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpz_c6cmy0_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpz_c6cmy0_test.go:49: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpz_c6cmy0_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpz_c6cmy0_test.go:49: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpz_c6cmy0_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpz_c6cmy0_test.go:49: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpz_c6cmy0_test.go:49:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    sum :=\
    \ 0\n    for _, v := range lst {\n        if v%3 == 0 && v%4 == 0 {\n        \
    \    sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T)\
    \ {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpgqvnx__r_test.go:46: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpgqvnx__r_test.go:46:\
    \ expected '%!s(int=14)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpgqvnx__r_test.go:46: expected '%!s(int=9)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpgqvnx__r_test.go:46:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpgqvnx__r_test.go:46: expected '%!s(int=-126)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpgqvnx__r_test.go:46:\
    \ expected '%!s(int=3030)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpgqvnx__r_test.go:46: expected '%!s(int=-14196)', got '%!s(int=84)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpgqvnx__r_test.go:46:\
    \ expected '%!s(int=-1448)', got '%!s(int=-12)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075008
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    var sum\
    \ int = 0\n    for _, v := range lst {\n        if v%3 != 0 {\n            sum\
    \ += v\n        }\n        if v%4 != 0 {\n            sum += v\n        }\n  \
    \  }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate :=\
    \ sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1,\
    \ 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1,\
    \ -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpph5ey1vo_test.go:49: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpph5ey1vo_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=15)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpph5ey1vo_test.go:49: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpph5ey1vo_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=-18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpph5ey1vo_test.go:49: expected '%!s(int=-126)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpph5ey1vo_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=-157)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpph5ey1vo_test.go:49: expected '%!s(int=0)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpph5ey1vo_test.go:49:\
    \ expected '%!s(int=-14196)', got '%!s(int=121)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpph5ey1vo_test.go:49: expected '%!s(int=-1448)', got '%!s(int=136)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    var sum\
    \ int = 0\n    for _, v := range lst {\n        if v%3 != 0 {\n            sum\
    \ += v*v\n        }\n        if v%4 != 0 {\n            sum += v*v*v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate\
    \ := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14\
    \ },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    sum :=\
    \ 0\n    for _, v := range lst {\n        if v%3 != 0 {\n            sum += v*v\n\
    \        }\n        if v%4 != 0 {\n            sum += v*v*v\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpz_c6cmy0_test.go:49: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpz_c6cmy0_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpz_c6cmy0_test.go:49: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpz_c6cmy0_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpz_c6cmy0_test.go:49: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpz_c6cmy0_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpz_c6cmy0_test.go:49: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpz_c6cmy0_test.go:49:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    sum :=\
    \ 0\n    for _, entry := range lst {\n        if entry%3 != 0 {\n            sum\
    \ += entry*entry\n        }\n        if entry%4 != 0 {\n            sum += entry*entry*entry\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n\
    \  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpuqgw59mf_test.go:49: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpuqgw59mf_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpuqgw59mf_test.go:49: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpuqgw59mf_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpuqgw59mf_test.go:49: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpuqgw59mf_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpuqgw59mf_test.go:49: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpuqgw59mf_test.go:49:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075008
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    sum :=\
    \ 0\n    for _, v := range lst {\n        if v%3 != 0 {\n            sum += v*v\n\
    \        }\n        if v%4 != 0 {\n            sum += v*v*v\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpz_c6cmy0_test.go:49: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpz_c6cmy0_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpz_c6cmy0_test.go:49: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpz_c6cmy0_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpz_c6cmy0_test.go:49: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpz_c6cmy0_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpz_c6cmy0_test.go:49: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpz_c6cmy0_test.go:49:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    sum :=\
    \ 0\n    for _, v := range lst {\n        if v%3 != 0 {\n            sum += v\n\
    \        }\n        if v%4 != 0 {\n            sum += v\n        }\n    }\n  \
    \  return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpbamt0mov_test.go:49: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpbamt0mov_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=15)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpbamt0mov_test.go:49: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpbamt0mov_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=-18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpbamt0mov_test.go:49: expected '%!s(int=-126)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpbamt0mov_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=-157)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpbamt0mov_test.go:49: expected '%!s(int=0)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpbamt0mov_test.go:49:\
    \ expected '%!s(int=-14196)', got '%!s(int=121)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpbamt0mov_test.go:49: expected '%!s(int=-1448)', got '%!s(int=136)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    sum :=\
    \ 0\n    for _, v := range lst {\n        if v%3 != 0 {\n            sum += v\n\
    \        }\n        if v%4 != 0 {\n            sum += v\n        }\n    }\n  \
    \  return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpbamt0mov_test.go:49: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpbamt0mov_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=15)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpbamt0mov_test.go:49: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpbamt0mov_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=-18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpbamt0mov_test.go:49: expected '%!s(int=-126)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpbamt0mov_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=-157)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpbamt0mov_test.go:49: expected '%!s(int=0)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpbamt0mov_test.go:49:\
    \ expected '%!s(int=-14196)', got '%!s(int=121)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpbamt0mov_test.go:49: expected '%!s(int=-1448)', got '%!s(int=136)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    var sum\
    \ = 0\n    for _, v := range lst {\n        if v%3 != 0 {\n            sum +=\
    \ v*v\n        }\n        if v%4 != 0 {\n            sum += v*v*v\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate\
    \ := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14\
    \ },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmprj0l6qud_test.go:49: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmprj0l6qud_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmprj0l6qud_test.go:49: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmprj0l6qud_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmprj0l6qud_test.go:49: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmprj0l6qud_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmprj0l6qud_test.go:49: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmprj0l6qud_test.go:49:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075008
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    var sum\
    \ int = 0\n    for _, v := range lst {\n        if v%3 != 0 {\n            sum\
    \ += v*v\n        }\n        if v%4 != 0 {\n            sum += v*v*v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate\
    \ := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14\
    \ },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    var sum\
    \ int = 0\n    for _, v := range lst {\n        if v%3 == 0 && v%4 == 0 {\n  \
    \          sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n\
    \     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected:\
    \ -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99,\
    \ 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0,\
    \ 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     {\
    \ actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpgkk9irsu_test.go:46: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpgkk9irsu_test.go:46:\
    \ expected '%!s(int=14)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpgkk9irsu_test.go:46: expected '%!s(int=9)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpgkk9irsu_test.go:46:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpgkk9irsu_test.go:46: expected '%!s(int=-126)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpgkk9irsu_test.go:46:\
    \ expected '%!s(int=3030)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpgkk9irsu_test.go:46: expected '%!s(int=-14196)', got '%!s(int=84)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpgkk9irsu_test.go:46:\
    \ expected '%!s(int=-1448)', got '%!s(int=-12)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    var sum\
    \ int = 0\n    for _, v := range lst {\n        if v%3 != 0 {\n            sum\
    \ += v*v\n        }\n        if v%4 != 0 {\n            sum += v*v*v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate\
    \ := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14\
    \ },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    sum :=\
    \ 0\n    for _, v := range lst {\n        if v%3 != 0 {\n            sum += v*v\n\
    \        }\n        if v%4 != 0 {\n            sum += v*v*v\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpz_c6cmy0_test.go:49: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpz_c6cmy0_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpz_c6cmy0_test.go:49: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpz_c6cmy0_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpz_c6cmy0_test.go:49: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpz_c6cmy0_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpz_c6cmy0_test.go:49: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpz_c6cmy0_test.go:49:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    var sum\
    \ int = 0\n    for _, v := range lst {\n        if v%3 != 0 {\n            sum\
    \ += v\n        }\n        if v%4 != 0 {\n            sum += v\n        }\n  \
    \  }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate :=\
    \ sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1,\
    \ 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1,\
    \ -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpph5ey1vo_test.go:49: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpph5ey1vo_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=15)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpph5ey1vo_test.go:49: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpph5ey1vo_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=-18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpph5ey1vo_test.go:49: expected '%!s(int=-126)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpph5ey1vo_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=-157)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpph5ey1vo_test.go:49: expected '%!s(int=0)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpph5ey1vo_test.go:49:\
    \ expected '%!s(int=-14196)', got '%!s(int=121)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpph5ey1vo_test.go:49: expected '%!s(int=-1448)', got '%!s(int=136)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    sum :=\
    \ 0\n    for _, v := range lst {\n        if v%3 != 0 {\n            sum += v\n\
    \        }\n        if v%4 != 0 {\n            sum += v\n        }\n    }\n  \
    \  return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpbamt0mov_test.go:49: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpbamt0mov_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=15)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpbamt0mov_test.go:49: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpbamt0mov_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=-18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpbamt0mov_test.go:49: expected '%!s(int=-126)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpbamt0mov_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=-157)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpbamt0mov_test.go:49: expected '%!s(int=0)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpbamt0mov_test.go:49:\
    \ expected '%!s(int=-14196)', got '%!s(int=121)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpbamt0mov_test.go:49: expected '%!s(int=-1448)', got '%!s(int=136)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    var sum\
    \ int = 0\n    for _, v := range lst {\n        if v%3 != 0 {\n            sum\
    \ += v*v\n        }\n        if v%4 != 0 {\n            sum += v*v*v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate\
    \ := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14\
    \ },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    var sum\
    \ int\n    for i := 0; i < len(lst); i++ {\n        if i%3 == 0 && i%4 == 0 {\n\
    \            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n\
    \     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected:\
    \ -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99,\
    \ 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0,\
    \ 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     {\
    \ actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpferfcpek_test.go:46: expected '%!s(int=6)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpferfcpek_test.go:46:\
    \ expected '%!s(int=14)', got '%!s(int=1)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpferfcpek_test.go:46: expected '%!s(int=9)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpferfcpek_test.go:46:\
    \ expected '%!s(int=-3)', got '%!s(int=-1)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpferfcpek_test.go:46: expected '%!s(int=-126)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpferfcpek_test.go:46:\
    \ expected '%!s(int=3030)', got '%!s(int=-56)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpferfcpek_test.go:46: expected '%!s(int=0)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpferfcpek_test.go:46:\
    \ expected '%!s(int=-14196)', got '%!s(int=-42)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpferfcpek_test.go:46: expected '%!s(int=-1448)', got '%!s(int=-15)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075008
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    sum :=\
    \ 0\n    for _, v := range lst {\n        if v%3 != 0 {\n            sum += v\n\
    \        }\n        if v%4 != 0 {\n            sum += v\n        }\n    }\n  \
    \  return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpbamt0mov_test.go:49: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpbamt0mov_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=15)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpbamt0mov_test.go:49: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpbamt0mov_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=-18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpbamt0mov_test.go:49: expected '%!s(int=-126)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpbamt0mov_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=-157)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpbamt0mov_test.go:49: expected '%!s(int=0)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpbamt0mov_test.go:49:\
    \ expected '%!s(int=-14196)', got '%!s(int=121)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpbamt0mov_test.go:49: expected '%!s(int=-1448)', got '%!s(int=136)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    var sum\
    \ int = 0\n    for _, v := range lst {\n        if v%3 != 0 {\n            sum\
    \ += v*v\n        }\n        if v%4 != 0 {\n            sum += v*v*v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate\
    \ := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14\
    \ },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    var sum\
    \ int = 0\n    for _, v := range lst {\n        if v%3 != 0 {\n            sum\
    \ += v\n        }\n        if v%4 != 0 {\n            sum += v\n        }\n  \
    \  }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate :=\
    \ sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1,\
    \ 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1,\
    \ -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpph5ey1vo_test.go:49: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpph5ey1vo_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=15)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpph5ey1vo_test.go:49: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpph5ey1vo_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=-18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpph5ey1vo_test.go:49: expected '%!s(int=-126)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpph5ey1vo_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=-157)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpph5ey1vo_test.go:49: expected '%!s(int=0)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpph5ey1vo_test.go:49:\
    \ expected '%!s(int=-14196)', got '%!s(int=121)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpph5ey1vo_test.go:49: expected '%!s(int=-1448)', got '%!s(int=136)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    var sum\
    \ int = 0\n    for _, val := range lst {\n        if val%3 != 0 {\n          \
    \  sum += val*val\n        }\n        if val%4 != 0 {\n            sum += val*val*val\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n\
    \  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmp7qfcnv69_test.go:49: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmp7qfcnv69_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp7qfcnv69_test.go:49: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp7qfcnv69_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmp7qfcnv69_test.go:49: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmp7qfcnv69_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmp7qfcnv69_test.go:49: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmp7qfcnv69_test.go:49:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    var sum\
    \ = 0\n    for _, v := range lst {\n        if v%3 != 0 {\n            sum +=\
    \ v\n        }\n        if v%4 != 0 {\n            sum += v\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpvy3m5prz_test.go:49: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpvy3m5prz_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=15)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpvy3m5prz_test.go:49: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpvy3m5prz_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=-18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpvy3m5prz_test.go:49: expected '%!s(int=-126)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpvy3m5prz_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=-157)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpvy3m5prz_test.go:49: expected '%!s(int=0)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpvy3m5prz_test.go:49:\
    \ expected '%!s(int=-14196)', got '%!s(int=121)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpvy3m5prz_test.go:49: expected '%!s(int=-1448)', got '%!s(int=136)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075008
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    var sum\
    \ int = 0\n    for _, v := range lst {\n        if v%3 != 0 {\n            sum\
    \ += v*v\n        }\n        if v%4 != 0 {\n            sum += v*v*v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate\
    \ := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14\
    \ },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    sum :=\
    \ 0\n    for _, i := range lst {\n        if i%3 != 0 {\n            sum += i\n\
    \        }\n        if i%4 != 0 {\n            sum += i*i\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpkgdopfop_test.go:49: expected '%!s(int=6)', got '%!s(int=17)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpkgdopfop_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=87)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpkgdopfop_test.go:49: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpkgdopfop_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpkgdopfop_test.go:49: expected '%!s(int=-126)', got '%!s(int=46)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpkgdopfop_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=9749)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpkgdopfop_test.go:49: expected '%!s(int=-14196)', got '%!s(int=4691)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpkgdopfop_test.go:49:\
    \ expected '%!s(int=-1448)', got '%!s(int=2022)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075008
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    sum :=\
    \ 0\n    for _, v := range lst {\n        if v%3 != 0 {\n            sum += v*v\n\
    \        }\n        if v%4 != 0 {\n            sum += v*v*v\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpz_c6cmy0_test.go:49: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpz_c6cmy0_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpz_c6cmy0_test.go:49: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpz_c6cmy0_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpz_c6cmy0_test.go:49: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpz_c6cmy0_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpz_c6cmy0_test.go:49: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpz_c6cmy0_test.go:49:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    var sum\
    \ int = 0\n    for _, v := range lst {\n        if v%3 != 0 {\n            sum\
    \ += v*v\n        }\n        if v%4 != 0 {\n            sum += v*v*v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate\
    \ := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14\
    \ },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    // Write\
    \ your code here\n    sum := 0\n    for _, v := range lst {\n        if v%3 !=\
    \ 0 {\n            sum += v\n        }\n        if v%4 != 0 {\n            sum\
    \ += v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T)\
    \ {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmp2jwn4pil_test.go:50: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmp2jwn4pil_test.go:50:\
    \ expected '%!s(int=14)', got '%!s(int=15)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp2jwn4pil_test.go:50: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp2jwn4pil_test.go:50:\
    \ expected '%!s(int=-3)', got '%!s(int=-18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmp2jwn4pil_test.go:50: expected '%!s(int=-126)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmp2jwn4pil_test.go:50:\
    \ expected '%!s(int=3030)', got '%!s(int=-157)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmp2jwn4pil_test.go:50: expected '%!s(int=0)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmp2jwn4pil_test.go:50:\
    \ expected '%!s(int=-14196)', got '%!s(int=121)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmp2jwn4pil_test.go:50: expected '%!s(int=-1448)', got '%!s(int=136)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    // Write\
    \ your code here\n    sum := 0\n    for _, v := range lst {\n        if v%3 !=\
    \ 0 {\n            sum += v\n        }\n        if v%4 != 0 {\n            sum\
    \ += v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T)\
    \ {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmp2jwn4pil_test.go:50: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmp2jwn4pil_test.go:50:\
    \ expected '%!s(int=14)', got '%!s(int=15)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp2jwn4pil_test.go:50: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp2jwn4pil_test.go:50:\
    \ expected '%!s(int=-3)', got '%!s(int=-18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmp2jwn4pil_test.go:50: expected '%!s(int=-126)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmp2jwn4pil_test.go:50:\
    \ expected '%!s(int=3030)', got '%!s(int=-157)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmp2jwn4pil_test.go:50: expected '%!s(int=0)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmp2jwn4pil_test.go:50:\
    \ expected '%!s(int=-14196)', got '%!s(int=121)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmp2jwn4pil_test.go:50: expected '%!s(int=-1448)', got '%!s(int=136)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    var sum\
    \ int = 0\n    for _, v := range lst {\n        if v%3 == 0 && v%4 == 0 {\n  \
    \          sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n\
    \     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected:\
    \ -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99,\
    \ 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0,\
    \ 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     {\
    \ actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpgkk9irsu_test.go:46: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpgkk9irsu_test.go:46:\
    \ expected '%!s(int=14)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpgkk9irsu_test.go:46: expected '%!s(int=9)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpgkk9irsu_test.go:46:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpgkk9irsu_test.go:46: expected '%!s(int=-126)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpgkk9irsu_test.go:46:\
    \ expected '%!s(int=3030)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpgkk9irsu_test.go:46: expected '%!s(int=-14196)', got '%!s(int=84)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpgkk9irsu_test.go:46:\
    \ expected '%!s(int=-1448)', got '%!s(int=-12)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    // Write\
    \ your code here\n    sum := 0\n    for _, val := range lst {\n        if val%3\
    \ != 0 {\n            sum += val\n        }\n        if val%4 != 0 {\n       \
    \     sum += val\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n\
    \     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected:\
    \ -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99,\
    \ 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0,\
    \ 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     {\
    \ actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmp3x11lq_r_test.go:50: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmp3x11lq_r_test.go:50:\
    \ expected '%!s(int=14)', got '%!s(int=15)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp3x11lq_r_test.go:50: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp3x11lq_r_test.go:50:\
    \ expected '%!s(int=-3)', got '%!s(int=-18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmp3x11lq_r_test.go:50: expected '%!s(int=-126)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmp3x11lq_r_test.go:50:\
    \ expected '%!s(int=3030)', got '%!s(int=-157)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmp3x11lq_r_test.go:50: expected '%!s(int=0)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmp3x11lq_r_test.go:50:\
    \ expected '%!s(int=-14196)', got '%!s(int=121)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmp3x11lq_r_test.go:50: expected '%!s(int=-1448)', got '%!s(int=136)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075008
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    // Write\
    \ your code here\n    sum := 0\n    for i := 0; i < len(lst); i++ {\n        if\
    \ i%3 == 0 && i%4 == 0 {\n            sum += lst[i]\n        }\n    }\n    return\
    \ sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpan971fsv_test.go:47: expected '%!s(int=6)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpan971fsv_test.go:47:\
    \ expected '%!s(int=14)', got '%!s(int=1)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpan971fsv_test.go:47: expected '%!s(int=9)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpan971fsv_test.go:47:\
    \ expected '%!s(int=-3)', got '%!s(int=-1)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpan971fsv_test.go:47: expected '%!s(int=-126)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpan971fsv_test.go:47:\
    \ expected '%!s(int=3030)', got '%!s(int=-56)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpan971fsv_test.go:47: expected '%!s(int=0)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpan971fsv_test.go:47:\
    \ expected '%!s(int=-14196)', got '%!s(int=-42)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpan971fsv_test.go:47: expected '%!s(int=-1448)', got '%!s(int=-15)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075008
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    var sum\
    \ int\n    for _, v := range lst {\n        if v%3 != 0 {\n            sum +=\
    \ v\n        }\n        if v%4 != 0 {\n            sum += v\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpth4y_a9q_test.go:49: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpth4y_a9q_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=15)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpth4y_a9q_test.go:49: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpth4y_a9q_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=-18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpth4y_a9q_test.go:49: expected '%!s(int=-126)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpth4y_a9q_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=-157)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpth4y_a9q_test.go:49: expected '%!s(int=0)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpth4y_a9q_test.go:49:\
    \ expected '%!s(int=-14196)', got '%!s(int=121)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpth4y_a9q_test.go:49: expected '%!s(int=-1448)', got '%!s(int=136)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    var sum\
    \ int = 0\n    for _, v := range lst {\n        if v%3 != 0 {\n            sum\
    \ += v\n        }\n        if v%4 != 0 {\n            sum += v\n        }\n  \
    \  }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate :=\
    \ sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1,\
    \ 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1,\
    \ -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpph5ey1vo_test.go:49: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpph5ey1vo_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=15)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpph5ey1vo_test.go:49: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpph5ey1vo_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=-18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpph5ey1vo_test.go:49: expected '%!s(int=-126)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpph5ey1vo_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=-157)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpph5ey1vo_test.go:49: expected '%!s(int=0)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpph5ey1vo_test.go:49:\
    \ expected '%!s(int=-14196)', got '%!s(int=121)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpph5ey1vo_test.go:49: expected '%!s(int=-1448)', got '%!s(int=136)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    sum :=\
    \ 0\n    for _, i := range lst {\n        if i%3 != 0 {\n            sum += i\n\
    \        }\n        if i%4 != 0 {\n            sum += i*i\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpkgdopfop_test.go:49: expected '%!s(int=6)', got '%!s(int=17)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpkgdopfop_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=87)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpkgdopfop_test.go:49: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpkgdopfop_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpkgdopfop_test.go:49: expected '%!s(int=-126)', got '%!s(int=46)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpkgdopfop_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=9749)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpkgdopfop_test.go:49: expected '%!s(int=-14196)', got '%!s(int=4691)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpkgdopfop_test.go:49:\
    \ expected '%!s(int=-1448)', got '%!s(int=2022)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075008
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    sum :=\
    \ 0\n    for _, v := range lst {\n        if v%3 != 0 {\n            sum += v*v\n\
    \        }\n        if v%4 != 0 {\n            sum += v*v*v\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpz_c6cmy0_test.go:49: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpz_c6cmy0_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpz_c6cmy0_test.go:49: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpz_c6cmy0_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpz_c6cmy0_test.go:49: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpz_c6cmy0_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpz_c6cmy0_test.go:49: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpz_c6cmy0_test.go:49:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    sum :=\
    \ 0\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v*v\n\
    \        }\n        if v%4 == 0 {\n            sum += v*v*v\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmp3ephvgb6_test.go:49: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmp3ephvgb6_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=145)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp3ephvgb6_test.go:49: expected '%!s(int=9)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp3ephvgb6_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmp3ephvgb6_test.go:49: expected '%!s(int=-126)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmp3ephvgb6_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=-165815)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmp3ephvgb6_test.go:49: expected '%!s(int=-14196)', got '%!s(int=29697)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmp3ephvgb6_test.go:49:\
    \ expected '%!s(int=-1448)', got '%!s(int=6942)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    sum :=\
    \ 0\n    for _, v := range lst {\n        if v%3 == 0 && v%4 == 0 {\n        \
    \    sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T)\
    \ {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpgqvnx__r_test.go:46: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpgqvnx__r_test.go:46:\
    \ expected '%!s(int=14)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpgqvnx__r_test.go:46: expected '%!s(int=9)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpgqvnx__r_test.go:46:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpgqvnx__r_test.go:46: expected '%!s(int=-126)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpgqvnx__r_test.go:46:\
    \ expected '%!s(int=3030)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpgqvnx__r_test.go:46: expected '%!s(int=-14196)', got '%!s(int=84)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpgqvnx__r_test.go:46:\
    \ expected '%!s(int=-1448)', got '%!s(int=-12)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075008
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    // Write\
    \ your code here\n    sum := 0\n    for _, v := range lst {\n        if v%3 !=\
    \ 0 {\n            sum += v\n        }\n        if v%4 != 0 {\n            sum\
    \ += v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T)\
    \ {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmp2jwn4pil_test.go:50: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmp2jwn4pil_test.go:50:\
    \ expected '%!s(int=14)', got '%!s(int=15)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp2jwn4pil_test.go:50: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp2jwn4pil_test.go:50:\
    \ expected '%!s(int=-3)', got '%!s(int=-18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmp2jwn4pil_test.go:50: expected '%!s(int=-126)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmp2jwn4pil_test.go:50:\
    \ expected '%!s(int=3030)', got '%!s(int=-157)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmp2jwn4pil_test.go:50: expected '%!s(int=0)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmp2jwn4pil_test.go:50:\
    \ expected '%!s(int=-14196)', got '%!s(int=121)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmp2jwn4pil_test.go:50: expected '%!s(int=-1448)', got '%!s(int=136)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    var sum\
    \ int = 0\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum\
    \ += v*v\n        }\n        if v%4 == 0 {\n            sum += v*v*v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate\
    \ := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14\
    \ },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmp592dn1gk_test.go:49: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmp592dn1gk_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=145)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp592dn1gk_test.go:49: expected '%!s(int=9)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp592dn1gk_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmp592dn1gk_test.go:49: expected '%!s(int=-126)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmp592dn1gk_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=-165815)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmp592dn1gk_test.go:49: expected '%!s(int=-14196)', got '%!s(int=29697)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmp592dn1gk_test.go:49:\
    \ expected '%!s(int=-1448)', got '%!s(int=6942)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075008
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    var sum\
    \ int = 0\n    for _, v := range lst {\n        if v%3 != 0 {\n            sum\
    \ += v*v\n        }\n        if v%4 != 0 {\n            sum += v*v*v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate\
    \ := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14\
    \ },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    sum :=\
    \ 0\n    for _, i := range lst {\n        if i%3 != 0 {\n            sum += i\n\
    \        }\n        if i%4 != 0 {\n            sum += i\n        }\n    }\n  \
    \  return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpyz099ik4_test.go:49: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpyz099ik4_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=15)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpyz099ik4_test.go:49: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpyz099ik4_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=-18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpyz099ik4_test.go:49: expected '%!s(int=-126)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpyz099ik4_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=-157)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpyz099ik4_test.go:49: expected '%!s(int=0)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpyz099ik4_test.go:49:\
    \ expected '%!s(int=-14196)', got '%!s(int=121)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpyz099ik4_test.go:49: expected '%!s(int=-1448)', got '%!s(int=136)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    var sum\
    \ int = 0\n    for _, v := range lst {\n        if v%3 != 0 {\n            sum\
    \ += v*v\n        }\n        if v%4 != 0 {\n            sum += v*v*v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate\
    \ := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14\
    \ },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    // Write\
    \ your code here\n    sum := 0\n    for _, v := range lst {\n        if v%3 !=\
    \ 0 {\n            sum += v*v\n        }\n        if v%4 != 0 {\n            sum\
    \ += v*v*v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T)\
    \ {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpt26rwkhl_test.go:50: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpt26rwkhl_test.go:50:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpt26rwkhl_test.go:50: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpt26rwkhl_test.go:50:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpt26rwkhl_test.go:50: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpt26rwkhl_test.go:50:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpt26rwkhl_test.go:50: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpt26rwkhl_test.go:50:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    sum :=\
    \ 0\n    for _, entry := range lst {\n        if entry%3 != 0 {\n            sum\
    \ += entry*entry\n        }\n        if entry%4 != 0 {\n            sum += entry*entry*entry\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n\
    \  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpuqgw59mf_test.go:49: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpuqgw59mf_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpuqgw59mf_test.go:49: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpuqgw59mf_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpuqgw59mf_test.go:49: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpuqgw59mf_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpuqgw59mf_test.go:49: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpuqgw59mf_test.go:49:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075008
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    var sum\
    \ int = 0\n    for _, v := range lst {\n        if v%3 != 0 {\n            sum\
    \ += v\n        }\n        if v%4 != 0 {\n            sum += v\n        }\n  \
    \  }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate :=\
    \ sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1,\
    \ 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1,\
    \ -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpph5ey1vo_test.go:49: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpph5ey1vo_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=15)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpph5ey1vo_test.go:49: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpph5ey1vo_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=-18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpph5ey1vo_test.go:49: expected '%!s(int=-126)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpph5ey1vo_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=-157)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpph5ey1vo_test.go:49: expected '%!s(int=0)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpph5ey1vo_test.go:49:\
    \ expected '%!s(int=-14196)', got '%!s(int=121)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpph5ey1vo_test.go:49: expected '%!s(int=-1448)', got '%!s(int=136)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    sum :=\
    \ 0\n    for _, v := range lst {\n        if v%3 != 0 {\n            sum += v\n\
    \        }\n        if v%4 != 0 {\n            sum += v\n        }\n    }\n  \
    \  return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpbamt0mov_test.go:49: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpbamt0mov_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=15)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpbamt0mov_test.go:49: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpbamt0mov_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=-18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpbamt0mov_test.go:49: expected '%!s(int=-126)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpbamt0mov_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=-157)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpbamt0mov_test.go:49: expected '%!s(int=0)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpbamt0mov_test.go:49:\
    \ expected '%!s(int=-14196)', got '%!s(int=121)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpbamt0mov_test.go:49: expected '%!s(int=-1448)', got '%!s(int=136)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    var sum\
    \ = 0\n    for i := 0; i < len(lst); i++ {\n        if i%3 == 0 && i%4 == 0 {\n\
    \            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n\
    \     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected:\
    \ -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99,\
    \ 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0,\
    \ 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     {\
    \ actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpzjqpv9a3_test.go:46: expected '%!s(int=6)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpzjqpv9a3_test.go:46:\
    \ expected '%!s(int=14)', got '%!s(int=1)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzjqpv9a3_test.go:46: expected '%!s(int=9)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzjqpv9a3_test.go:46:\
    \ expected '%!s(int=-3)', got '%!s(int=-1)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpzjqpv9a3_test.go:46: expected '%!s(int=-126)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpzjqpv9a3_test.go:46:\
    \ expected '%!s(int=3030)', got '%!s(int=-56)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpzjqpv9a3_test.go:46: expected '%!s(int=0)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpzjqpv9a3_test.go:46:\
    \ expected '%!s(int=-14196)', got '%!s(int=-42)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpzjqpv9a3_test.go:46: expected '%!s(int=-1448)', got '%!s(int=-15)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075008
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    var sum\
    \ int = 0\n    for _, v := range lst {\n        if v%3 != 0 {\n            sum\
    \ += v*v\n        }\n        if v%4 != 0 {\n            sum += v*v*v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate\
    \ := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14\
    \ },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    // Write\
    \ your code here\n    sum := 0\n    for _, value := range lst {\n        if value%3\
    \ != 0 {\n            sum += value * value\n        }\n        if value%4 != 0\
    \ {\n            sum += value * value\n        }\n    }\n    return sum\n}\n\n\
    func TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     {\
    \ actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmphj4nk1uc_test.go:50: expected '%!s(int=6)', got '%!s(int=19)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmphj4nk1uc_test.go:50:\
    \ expected '%!s(int=14)', got '%!s(int=99)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmphj4nk1uc_test.go:50: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmphj4nk1uc_test.go:50:\
    \ expected '%!s(int=-3)', got '%!s(int=18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmphj4nk1uc_test.go:50: expected '%!s(int=-126)', got '%!s(int=112)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmphj4nk1uc_test.go:50:\
    \ expected '%!s(int=3030)', got '%!s(int=12947)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmphj4nk1uc_test.go:50: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmphj4nk1uc_test.go:50:\
    \ expected '%!s(int=-14196)', got '%!s(int=11903)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmphj4nk1uc_test.go:50: expected '%!s(int=-1448)', got '%!s(int=4118)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075008
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    var sum\
    \ int = 0\n    for _, v := range lst {\n        if v%3 != 0 {\n            sum\
    \ += v\n        }\n        if v%4 != 0 {\n            sum += v\n        }\n  \
    \  }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate :=\
    \ sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1,\
    \ 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1,\
    \ -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpph5ey1vo_test.go:49: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpph5ey1vo_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=15)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpph5ey1vo_test.go:49: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpph5ey1vo_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=-18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpph5ey1vo_test.go:49: expected '%!s(int=-126)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpph5ey1vo_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=-157)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpph5ey1vo_test.go:49: expected '%!s(int=0)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpph5ey1vo_test.go:49:\
    \ expected '%!s(int=-14196)', got '%!s(int=121)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpph5ey1vo_test.go:49: expected '%!s(int=-1448)', got '%!s(int=136)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    sum :=\
    \ 0\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v*v\n\
    \        }\n        if v%4 == 0 {\n            sum += v*v*v\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmp3ephvgb6_test.go:49: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmp3ephvgb6_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=145)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp3ephvgb6_test.go:49: expected '%!s(int=9)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp3ephvgb6_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmp3ephvgb6_test.go:49: expected '%!s(int=-126)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmp3ephvgb6_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=-165815)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmp3ephvgb6_test.go:49: expected '%!s(int=-14196)', got '%!s(int=29697)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmp3ephvgb6_test.go:49:\
    \ expected '%!s(int=-1448)', got '%!s(int=6942)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    // Write\
    \ your code here\n    sum := 0\n    for _, v := range lst {\n        if v%3 !=\
    \ 0 {\n            sum += v\n        }\n        if v%4 != 0 {\n            sum\
    \ += v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T)\
    \ {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmp2jwn4pil_test.go:50: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmp2jwn4pil_test.go:50:\
    \ expected '%!s(int=14)', got '%!s(int=15)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp2jwn4pil_test.go:50: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp2jwn4pil_test.go:50:\
    \ expected '%!s(int=-3)', got '%!s(int=-18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmp2jwn4pil_test.go:50: expected '%!s(int=-126)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmp2jwn4pil_test.go:50:\
    \ expected '%!s(int=3030)', got '%!s(int=-157)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmp2jwn4pil_test.go:50: expected '%!s(int=0)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmp2jwn4pil_test.go:50:\
    \ expected '%!s(int=-14196)', got '%!s(int=121)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmp2jwn4pil_test.go:50: expected '%!s(int=-1448)', got '%!s(int=136)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    var sum\
    \ int = 0\n    for _, v := range lst {\n        if v%3 != 0 {\n            sum\
    \ += v*v\n        }\n        if v%4 != 0 {\n            sum += v*v*v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate\
    \ := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14\
    \ },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    sum :=\
    \ 0\n    for _, entry := range lst {\n        if entry % 3 == 0 {\n          \
    \  sum += entry*entry\n        }\n        if entry % 4 == 0 {\n            sum\
    \ += entry*entry\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n\
    \     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected:\
    \ -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99,\
    \ 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0,\
    \ 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     {\
    \ actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpxug7b4v1_test.go:49: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpxug7b4v1_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=97)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpxug7b4v1_test.go:49: expected '%!s(int=9)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpxug7b4v1_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpxug7b4v1_test.go:49: expected '%!s(int=-126)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpxug7b4v1_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=12937)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpxug7b4v1_test.go:49: expected '%!s(int=-14196)', got '%!s(int=8225)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpxug7b4v1_test.go:49:\
    \ expected '%!s(int=-1448)', got '%!s(int=1086)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075008
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    var sum\
    \ = 0\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum +=\
    \ v*v\n        }\n        if v%4 == 0 {\n            sum += v*v*v\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate\
    \ := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14\
    \ },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpsxbvyydo_test.go:49: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpsxbvyydo_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=145)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpsxbvyydo_test.go:49: expected '%!s(int=9)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpsxbvyydo_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpsxbvyydo_test.go:49: expected '%!s(int=-126)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpsxbvyydo_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=-165815)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpsxbvyydo_test.go:49: expected '%!s(int=-14196)', got '%!s(int=29697)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpsxbvyydo_test.go:49:\
    \ expected '%!s(int=-1448)', got '%!s(int=6942)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    var sum\
    \ int = 0\n    for _, v := range lst {\n        if v%3 != 0 {\n            sum\
    \ += v*v\n        }\n        if v%4 != 0 {\n            sum += v*v*v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate\
    \ := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14\
    \ },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    sum :=\
    \ 0\n    for _, v := range lst {\n        if v%3 != 0 {\n            sum += v\n\
    \        }\n        if v%4 != 0 {\n            sum += v\n        }\n    }\n  \
    \  return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpbamt0mov_test.go:49: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpbamt0mov_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=15)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpbamt0mov_test.go:49: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpbamt0mov_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=-18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpbamt0mov_test.go:49: expected '%!s(int=-126)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpbamt0mov_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=-157)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpbamt0mov_test.go:49: expected '%!s(int=0)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpbamt0mov_test.go:49:\
    \ expected '%!s(int=-14196)', got '%!s(int=121)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpbamt0mov_test.go:49: expected '%!s(int=-1448)', got '%!s(int=136)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    var sum\
    \ int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum +=\
    \ v\n        }\n        if v%4 == 0 {\n            sum += v\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpwaeu3ugg_test.go:49: expected '%!s(int=6)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpwaeu3ugg_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=13)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpwaeu3ugg_test.go:49: expected '%!s(int=9)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpwaeu3ugg_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpwaeu3ugg_test.go:49: expected '%!s(int=-126)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpwaeu3ugg_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=-155)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpwaeu3ugg_test.go:49: expected '%!s(int=-14196)', got '%!s(int=99)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpwaeu3ugg_test.go:49:\
    \ expected '%!s(int=-1448)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075008
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    sum :=\
    \ 0\n    for _, v := range lst {\n        if v%3 != 0 {\n            sum += v*v\n\
    \        }\n        if v%4 != 0 {\n            sum += v*v*v\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpz_c6cmy0_test.go:49: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpz_c6cmy0_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpz_c6cmy0_test.go:49: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpz_c6cmy0_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpz_c6cmy0_test.go:49: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpz_c6cmy0_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpz_c6cmy0_test.go:49: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpz_c6cmy0_test.go:49:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    // Write\
    \ your code here\n    sum := 0\n    for _, v := range lst {\n        if v%3 !=\
    \ 0 {\n            sum += v\n        }\n        if v%4 != 0 {\n            sum\
    \ += v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T)\
    \ {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmp2jwn4pil_test.go:50: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmp2jwn4pil_test.go:50:\
    \ expected '%!s(int=14)', got '%!s(int=15)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp2jwn4pil_test.go:50: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp2jwn4pil_test.go:50:\
    \ expected '%!s(int=-3)', got '%!s(int=-18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmp2jwn4pil_test.go:50: expected '%!s(int=-126)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmp2jwn4pil_test.go:50:\
    \ expected '%!s(int=3030)', got '%!s(int=-157)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmp2jwn4pil_test.go:50: expected '%!s(int=0)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmp2jwn4pil_test.go:50:\
    \ expected '%!s(int=-14196)', got '%!s(int=121)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmp2jwn4pil_test.go:50: expected '%!s(int=-1448)', got '%!s(int=136)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    var sum\
    \ int = 0\n    for _, v := range lst {\n        if v%3 != 0 {\n            sum\
    \ += v*v\n        }\n        if v%4 != 0 {\n            sum += v*v*v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate\
    \ := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14\
    \ },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    var sum\
    \ int\n    for _, v := range lst {\n        if v%3 != 0 {\n            sum +=\
    \ v*v\n        }\n        if v%4 != 0 {\n            sum += v*v*v\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate\
    \ := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14\
    \ },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpm04ew1dr_test.go:49: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpm04ew1dr_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpm04ew1dr_test.go:49: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpm04ew1dr_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpm04ew1dr_test.go:49: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpm04ew1dr_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpm04ew1dr_test.go:49: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpm04ew1dr_test.go:49:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    // Write\
    \ your code here\n    sum := 0\n    for _, v := range lst {\n        if v%3 ==\
    \ 0 {\n            sum += v\n        }\n        if v%4 == 0 {\n            sum\
    \ += v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T)\
    \ {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmp6xjhr2qn_test.go:50: expected '%!s(int=6)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmp6xjhr2qn_test.go:50:\
    \ expected '%!s(int=14)', got '%!s(int=13)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp6xjhr2qn_test.go:50: expected '%!s(int=9)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp6xjhr2qn_test.go:50:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmp6xjhr2qn_test.go:50: expected '%!s(int=-126)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmp6xjhr2qn_test.go:50:\
    \ expected '%!s(int=3030)', got '%!s(int=-155)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmp6xjhr2qn_test.go:50: expected '%!s(int=-14196)', got '%!s(int=99)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmp6xjhr2qn_test.go:50:\
    \ expected '%!s(int=-1448)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075008
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    var sum\
    \ int = 0\n    for _, v := range lst {\n        if v%3 != 0 {\n            sum\
    \ += v*v\n        }\n        if v%4 != 0 {\n            sum += v*v*v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate\
    \ := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14\
    \ },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    // Write\
    \ your code here\n    sum := 0\n    for _, v := range lst {\n        if v%3 !=\
    \ 0 {\n            sum += v\n        }\n        if v%4 != 0 {\n            sum\
    \ += v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T)\
    \ {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmp2jwn4pil_test.go:50: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmp2jwn4pil_test.go:50:\
    \ expected '%!s(int=14)', got '%!s(int=15)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp2jwn4pil_test.go:50: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp2jwn4pil_test.go:50:\
    \ expected '%!s(int=-3)', got '%!s(int=-18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmp2jwn4pil_test.go:50: expected '%!s(int=-126)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmp2jwn4pil_test.go:50:\
    \ expected '%!s(int=3030)', got '%!s(int=-157)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmp2jwn4pil_test.go:50: expected '%!s(int=0)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmp2jwn4pil_test.go:50:\
    \ expected '%!s(int=-14196)', got '%!s(int=121)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmp2jwn4pil_test.go:50: expected '%!s(int=-1448)', got '%!s(int=136)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    sum :=\
    \ 0\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum += v*v\n\
    \        }\n        if v%4 == 0 {\n            sum += v*v*v\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmp3ephvgb6_test.go:49: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmp3ephvgb6_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=145)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp3ephvgb6_test.go:49: expected '%!s(int=9)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp3ephvgb6_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmp3ephvgb6_test.go:49: expected '%!s(int=-126)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmp3ephvgb6_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=-165815)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmp3ephvgb6_test.go:49: expected '%!s(int=-14196)', got '%!s(int=29697)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmp3ephvgb6_test.go:49:\
    \ expected '%!s(int=-1448)', got '%!s(int=6942)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    var sum\
    \ int = 0\n    for _, v := range lst {\n        if v%3 == 0 && v%4 == 0 {\n  \
    \          sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n\
    \     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected:\
    \ -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99,\
    \ 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0,\
    \ 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     {\
    \ actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpgkk9irsu_test.go:46: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpgkk9irsu_test.go:46:\
    \ expected '%!s(int=14)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpgkk9irsu_test.go:46: expected '%!s(int=9)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpgkk9irsu_test.go:46:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpgkk9irsu_test.go:46: expected '%!s(int=-126)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpgkk9irsu_test.go:46:\
    \ expected '%!s(int=3030)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpgkk9irsu_test.go:46: expected '%!s(int=-14196)', got '%!s(int=84)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpgkk9irsu_test.go:46:\
    \ expected '%!s(int=-1448)', got '%!s(int=-12)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    var sum\
    \ int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum +=\
    \ v*v\n        }\n        if v%4 == 0 {\n            sum += v*v*v\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate\
    \ := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14\
    \ },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpzluir7yp_test.go:49: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpzluir7yp_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=145)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzluir7yp_test.go:49: expected '%!s(int=9)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzluir7yp_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpzluir7yp_test.go:49: expected '%!s(int=-126)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpzluir7yp_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=-165815)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpzluir7yp_test.go:49: expected '%!s(int=-14196)', got '%!s(int=29697)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpzluir7yp_test.go:49:\
    \ expected '%!s(int=-1448)', got '%!s(int=6942)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075008
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    var sum\
    \ int = 0\n    for _, v := range lst {\n        if v%3 != 0 {\n            sum\
    \ += v*v\n        }\n        if v%4 != 0 {\n            sum += v*v*v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate\
    \ := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14\
    \ },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    // Write\
    \ your code here\n    sum := 0\n    for _, v := range lst {\n        if v%3 !=\
    \ 0 {\n            sum += v*v\n        }\n        if v%4 != 0 {\n            sum\
    \ += v*v*v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T)\
    \ {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpt26rwkhl_test.go:50: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpt26rwkhl_test.go:50:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpt26rwkhl_test.go:50: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpt26rwkhl_test.go:50:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpt26rwkhl_test.go:50: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpt26rwkhl_test.go:50:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpt26rwkhl_test.go:50: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpt26rwkhl_test.go:50:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    sum :=\
    \ 0\n    for _, v := range lst {\n        if v%3 != 0 {\n            sum += v*v\n\
    \        }\n        if v%4 != 0 {\n            sum += v*v*v\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpz_c6cmy0_test.go:49: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpz_c6cmy0_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpz_c6cmy0_test.go:49: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpz_c6cmy0_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpz_c6cmy0_test.go:49: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpz_c6cmy0_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpz_c6cmy0_test.go:49: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpz_c6cmy0_test.go:49:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    // Write\
    \ your code here\n    sum := 0\n    for _, v := range lst {\n        if v%3 !=\
    \ 0 {\n            sum += v\n        }\n        if v%4 != 0 {\n            sum\
    \ += v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T)\
    \ {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmp2jwn4pil_test.go:50: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmp2jwn4pil_test.go:50:\
    \ expected '%!s(int=14)', got '%!s(int=15)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp2jwn4pil_test.go:50: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp2jwn4pil_test.go:50:\
    \ expected '%!s(int=-3)', got '%!s(int=-18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmp2jwn4pil_test.go:50: expected '%!s(int=-126)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmp2jwn4pil_test.go:50:\
    \ expected '%!s(int=3030)', got '%!s(int=-157)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmp2jwn4pil_test.go:50: expected '%!s(int=0)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmp2jwn4pil_test.go:50:\
    \ expected '%!s(int=-14196)', got '%!s(int=121)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmp2jwn4pil_test.go:50: expected '%!s(int=-1448)', got '%!s(int=136)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    // Your\
    \ code here\n    sum := 0\n    for _, v := range lst {\n        if v%3 != 0 {\n\
    \            sum += v*v\n        }\n        if v%4 != 0 {\n            sum +=\
    \ v*v*v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T)\
    \ {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmp2ae1pwc4_test.go:50: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmp2ae1pwc4_test.go:50:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp2ae1pwc4_test.go:50: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp2ae1pwc4_test.go:50:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmp2ae1pwc4_test.go:50: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmp2ae1pwc4_test.go:50:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmp2ae1pwc4_test.go:50: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmp2ae1pwc4_test.go:50:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075008
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    sum :=\
    \ 0\n    for _, v := range lst {\n        if v%3 == 0 && v%4 == 0 {\n        \
    \    sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T)\
    \ {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpgqvnx__r_test.go:46: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpgqvnx__r_test.go:46:\
    \ expected '%!s(int=14)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpgqvnx__r_test.go:46: expected '%!s(int=9)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpgqvnx__r_test.go:46:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpgqvnx__r_test.go:46: expected '%!s(int=-126)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpgqvnx__r_test.go:46:\
    \ expected '%!s(int=3030)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpgqvnx__r_test.go:46: expected '%!s(int=-14196)', got '%!s(int=84)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpgqvnx__r_test.go:46:\
    \ expected '%!s(int=-1448)', got '%!s(int=-12)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075008
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    sum :=\
    \ 0\n    for _, i := range lst {\n        if i%3 != 0 {\n            sum += i\n\
    \        }\n        if i%4 != 0 {\n            sum += i\n        }\n    }\n  \
    \  return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpyz099ik4_test.go:49: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpyz099ik4_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=15)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpyz099ik4_test.go:49: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpyz099ik4_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=-18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpyz099ik4_test.go:49: expected '%!s(int=-126)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpyz099ik4_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=-157)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpyz099ik4_test.go:49: expected '%!s(int=0)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpyz099ik4_test.go:49:\
    \ expected '%!s(int=-14196)', got '%!s(int=121)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpyz099ik4_test.go:49: expected '%!s(int=-1448)', got '%!s(int=136)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    var sum\
    \ int = 0\n    for _, v := range lst {\n        if v%3 != 0 {\n            sum\
    \ += v\n        }\n        if v%4 != 0 {\n            sum += v\n        }\n  \
    \  }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate :=\
    \ sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1,\
    \ 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1,\
    \ -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpph5ey1vo_test.go:49: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpph5ey1vo_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=15)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpph5ey1vo_test.go:49: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpph5ey1vo_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=-18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpph5ey1vo_test.go:49: expected '%!s(int=-126)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpph5ey1vo_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=-157)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpph5ey1vo_test.go:49: expected '%!s(int=0)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpph5ey1vo_test.go:49:\
    \ expected '%!s(int=-14196)', got '%!s(int=121)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpph5ey1vo_test.go:49: expected '%!s(int=-1448)', got '%!s(int=136)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    sum :=\
    \ 0\n    for _, entry := range lst {\n        if entry % 3 == 0 {\n          \
    \  entry *= entry\n            sum += entry\n        } else if entry % 4 == 0\
    \ {\n            entry *= entry\n            sum += entry\n        } else {\n\
    \            sum += entry\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n\
    \     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected:\
    \ -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99,\
    \ 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0,\
    \ 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     {\
    \ actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmps8bok9q8_test.go:52: expected '%!s(int=6)', got '%!s(int=12)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmps8bok9q8_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=98)'\n    --- FAIL: TestSum_Squares/test_num__4\
    \ (0.00s)\n        tmps8bok9q8_test.go:52: expected '%!s(int=-3)', got '%!s(int=-9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__6 (0.00s)\n        tmps8bok9q8_test.go:52:\
    \ expected '%!s(int=-126)', got '%!s(int=-10)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmps8bok9q8_test.go:52: expected '%!s(int=3030)', got '%!s(int=12936)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmps8bok9q8_test.go:52:\
    \ expected '%!s(int=0)', got '%!s(int=-2)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmps8bok9q8_test.go:52: expected '%!s(int=-14196)', got '%!s(int=5584)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmps8bok9q8_test.go:52:\
    \ expected '%!s(int=-1448)', got '%!s(int=998)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075008
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    sum :=\
    \ 0\n    for _, v := range lst {\n        if v%3 != 0 {\n            sum += v*v\n\
    \        }\n        if v%4 != 0 {\n            sum += v*v*v\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpz_c6cmy0_test.go:49: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpz_c6cmy0_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpz_c6cmy0_test.go:49: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpz_c6cmy0_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpz_c6cmy0_test.go:49: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpz_c6cmy0_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpz_c6cmy0_test.go:49: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpz_c6cmy0_test.go:49:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    sum :=\
    \ 0\n    for _, v := range lst {\n        if v%3 != 0 {\n            sum += v\n\
    \        }\n        if v%4 != 0 {\n            sum += v\n        }\n    }\n  \
    \  return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpbamt0mov_test.go:49: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpbamt0mov_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=15)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpbamt0mov_test.go:49: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpbamt0mov_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=-18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpbamt0mov_test.go:49: expected '%!s(int=-126)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpbamt0mov_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=-157)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpbamt0mov_test.go:49: expected '%!s(int=0)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpbamt0mov_test.go:49:\
    \ expected '%!s(int=-14196)', got '%!s(int=121)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpbamt0mov_test.go:49: expected '%!s(int=-1448)', got '%!s(int=136)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    sum :=\
    \ 0\n    for _, v := range lst {\n        if v%3 != 0 {\n            sum += v\n\
    \        }\n        if v%4 != 0 {\n            sum += v\n        }\n    }\n  \
    \  return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpbamt0mov_test.go:49: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpbamt0mov_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=15)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpbamt0mov_test.go:49: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpbamt0mov_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=-18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpbamt0mov_test.go:49: expected '%!s(int=-126)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpbamt0mov_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=-157)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpbamt0mov_test.go:49: expected '%!s(int=0)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpbamt0mov_test.go:49:\
    \ expected '%!s(int=-14196)', got '%!s(int=121)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpbamt0mov_test.go:49: expected '%!s(int=-1448)', got '%!s(int=136)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    var sum\
    \ int = 0\n    for _, v := range lst {\n        if v%3 != 0 {\n            sum\
    \ += v*v\n        }\n        if v%4 != 0 {\n            sum += v*v*v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate\
    \ := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14\
    \ },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    sum :=\
    \ 0\n    for _, v := range lst {\n        if v%3 != 0 {\n            sum += v*v\n\
    \        }\n        if v%4 != 0 {\n            sum += v*v*v\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpz_c6cmy0_test.go:49: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpz_c6cmy0_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpz_c6cmy0_test.go:49: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpz_c6cmy0_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpz_c6cmy0_test.go:49: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpz_c6cmy0_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpz_c6cmy0_test.go:49: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpz_c6cmy0_test.go:49:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    // Write\
    \ your code here\n    sum := 0\n    for _, v := range lst {\n        if v%3 !=\
    \ 0 {\n            sum += v\n        }\n        if v%4 != 0 {\n            sum\
    \ += v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T)\
    \ {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmp2jwn4pil_test.go:50: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmp2jwn4pil_test.go:50:\
    \ expected '%!s(int=14)', got '%!s(int=15)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp2jwn4pil_test.go:50: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp2jwn4pil_test.go:50:\
    \ expected '%!s(int=-3)', got '%!s(int=-18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmp2jwn4pil_test.go:50: expected '%!s(int=-126)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmp2jwn4pil_test.go:50:\
    \ expected '%!s(int=3030)', got '%!s(int=-157)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmp2jwn4pil_test.go:50: expected '%!s(int=0)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmp2jwn4pil_test.go:50:\
    \ expected '%!s(int=-14196)', got '%!s(int=121)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmp2jwn4pil_test.go:50: expected '%!s(int=-1448)', got '%!s(int=136)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    var sum\
    \ int = 0\n    for _, v := range lst {\n        if v%3 != 0 {\n            sum\
    \ += v*v\n        }\n        if v%4 != 0 {\n            sum += v*v*v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate\
    \ := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14\
    \ },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    sum :=\
    \ 0\n    for _, i := range lst {\n        if i%3 != 0 {\n            sum += i\
    \ * i\n        }\n        if i%4 != 0 {\n            sum += i * i * i\n      \
    \  }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate\
    \ := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14\
    \ },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpcbzz07sh_test.go:49: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpcbzz07sh_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpcbzz07sh_test.go:49: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpcbzz07sh_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpcbzz07sh_test.go:49: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpcbzz07sh_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpcbzz07sh_test.go:49: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpcbzz07sh_test.go:49:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075008
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    // Write\
    \ your code here\n    sum := 0\n    for _, v := range lst {\n        if v%3 !=\
    \ 0 {\n            sum += v\n        }\n        if v%4 != 0 {\n            sum\
    \ += v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T)\
    \ {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmp2jwn4pil_test.go:50: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmp2jwn4pil_test.go:50:\
    \ expected '%!s(int=14)', got '%!s(int=15)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp2jwn4pil_test.go:50: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp2jwn4pil_test.go:50:\
    \ expected '%!s(int=-3)', got '%!s(int=-18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmp2jwn4pil_test.go:50: expected '%!s(int=-126)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmp2jwn4pil_test.go:50:\
    \ expected '%!s(int=3030)', got '%!s(int=-157)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmp2jwn4pil_test.go:50: expected '%!s(int=0)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmp2jwn4pil_test.go:50:\
    \ expected '%!s(int=-14196)', got '%!s(int=121)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmp2jwn4pil_test.go:50: expected '%!s(int=-1448)', got '%!s(int=136)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    var sum\
    \ int = 0\n    for _, v := range lst {\n        if v%3 != 0 {\n            sum\
    \ += v\n        }\n        if v%4 != 0 {\n            sum += v\n        }\n  \
    \  }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate :=\
    \ sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1,\
    \ 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1,\
    \ -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpph5ey1vo_test.go:49: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpph5ey1vo_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=15)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpph5ey1vo_test.go:49: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpph5ey1vo_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=-18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpph5ey1vo_test.go:49: expected '%!s(int=-126)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpph5ey1vo_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=-157)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpph5ey1vo_test.go:49: expected '%!s(int=0)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpph5ey1vo_test.go:49:\
    \ expected '%!s(int=-14196)', got '%!s(int=121)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpph5ey1vo_test.go:49: expected '%!s(int=-1448)', got '%!s(int=136)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    // Write\
    \ your code here\n    sum := 0\n    for _, v := range lst {\n        if v%3 !=\
    \ 0 {\n            sum += v\n        }\n        if v%4 != 0 {\n            sum\
    \ += v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T)\
    \ {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmp2jwn4pil_test.go:50: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmp2jwn4pil_test.go:50:\
    \ expected '%!s(int=14)', got '%!s(int=15)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp2jwn4pil_test.go:50: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp2jwn4pil_test.go:50:\
    \ expected '%!s(int=-3)', got '%!s(int=-18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmp2jwn4pil_test.go:50: expected '%!s(int=-126)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmp2jwn4pil_test.go:50:\
    \ expected '%!s(int=3030)', got '%!s(int=-157)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmp2jwn4pil_test.go:50: expected '%!s(int=0)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmp2jwn4pil_test.go:50:\
    \ expected '%!s(int=-14196)', got '%!s(int=121)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmp2jwn4pil_test.go:50: expected '%!s(int=-1448)', got '%!s(int=136)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    // Write\
    \ your code here\n    sum := 0\n    for _, v := range lst {\n        if v%3 !=\
    \ 0 {\n            sum += v\n        }\n        if v%4 != 0 {\n            sum\
    \ += v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T)\
    \ {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmp2jwn4pil_test.go:50: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmp2jwn4pil_test.go:50:\
    \ expected '%!s(int=14)', got '%!s(int=15)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp2jwn4pil_test.go:50: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp2jwn4pil_test.go:50:\
    \ expected '%!s(int=-3)', got '%!s(int=-18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmp2jwn4pil_test.go:50: expected '%!s(int=-126)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmp2jwn4pil_test.go:50:\
    \ expected '%!s(int=3030)', got '%!s(int=-157)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmp2jwn4pil_test.go:50: expected '%!s(int=0)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmp2jwn4pil_test.go:50:\
    \ expected '%!s(int=-14196)', got '%!s(int=121)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmp2jwn4pil_test.go:50: expected '%!s(int=-1448)', got '%!s(int=136)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    sum :=\
    \ 0\n    for _, v := range lst {\n        if v%3 != 0 {\n            sum += v\n\
    \        }\n        if v%4 != 0 {\n            sum += v\n        }\n    }\n  \
    \  return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpbamt0mov_test.go:49: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpbamt0mov_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=15)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpbamt0mov_test.go:49: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpbamt0mov_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=-18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpbamt0mov_test.go:49: expected '%!s(int=-126)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpbamt0mov_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=-157)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpbamt0mov_test.go:49: expected '%!s(int=0)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpbamt0mov_test.go:49:\
    \ expected '%!s(int=-14196)', got '%!s(int=121)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpbamt0mov_test.go:49: expected '%!s(int=-1448)', got '%!s(int=136)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    var sum\
    \ int\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum +=\
    \ v*v\n        }\n        if v%4 == 0 {\n            sum += v*v*v\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate\
    \ := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14\
    \ },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpzluir7yp_test.go:49: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpzluir7yp_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=145)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzluir7yp_test.go:49: expected '%!s(int=9)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzluir7yp_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpzluir7yp_test.go:49: expected '%!s(int=-126)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpzluir7yp_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=-165815)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpzluir7yp_test.go:49: expected '%!s(int=-14196)', got '%!s(int=29697)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpzluir7yp_test.go:49:\
    \ expected '%!s(int=-1448)', got '%!s(int=6942)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075008
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    var sum\
    \ int = 0\n    for _, v := range lst {\n        if v%3 != 0 {\n            sum\
    \ += v*v\n        }\n        if v%4 != 0 {\n            sum += v*v*v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate\
    \ := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14\
    \ },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    var sum\
    \ int = 0\n    for _, v := range lst {\n        if v%3 != 0 {\n            sum\
    \ += v*v\n        }\n        if v%4 != 0 {\n            sum += v*v*v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate\
    \ := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14\
    \ },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    var sum\
    \ int = 0\n    for _, v := range lst {\n        if v%3 != 0 {\n            sum\
    \ += v*v\n        }\n        if v%4 != 0 {\n            sum += v*v*v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate\
    \ := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14\
    \ },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    var sum\
    \ int = 0\n    for _, v := range lst {\n        if v%3 != 0 {\n            sum\
    \ += v\n        }\n        if v%4 != 0 {\n            sum += v\n        }\n  \
    \  }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate :=\
    \ sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1,\
    \ 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1,\
    \ -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpph5ey1vo_test.go:49: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpph5ey1vo_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=15)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpph5ey1vo_test.go:49: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpph5ey1vo_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=-18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpph5ey1vo_test.go:49: expected '%!s(int=-126)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpph5ey1vo_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=-157)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpph5ey1vo_test.go:49: expected '%!s(int=0)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpph5ey1vo_test.go:49:\
    \ expected '%!s(int=-14196)', got '%!s(int=121)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpph5ey1vo_test.go:49: expected '%!s(int=-1448)', got '%!s(int=136)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    var sum\
    \ int\n    for _, v := range lst {\n        if v%3 != 0 {\n            sum +=\
    \ v\n        }\n        if v%4 != 0 {\n            sum += v\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpth4y_a9q_test.go:49: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpth4y_a9q_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=15)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpth4y_a9q_test.go:49: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpth4y_a9q_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=-18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpth4y_a9q_test.go:49: expected '%!s(int=-126)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpth4y_a9q_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=-157)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpth4y_a9q_test.go:49: expected '%!s(int=0)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpth4y_a9q_test.go:49:\
    \ expected '%!s(int=-14196)', got '%!s(int=121)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpth4y_a9q_test.go:49: expected '%!s(int=-1448)', got '%!s(int=136)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    var sum\
    \ int = 0\n    for _, v := range lst {\n        if v%3 != 0 {\n            sum\
    \ += v\n        }\n        if v%4 != 0 {\n            sum += v\n        }\n  \
    \  }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate :=\
    \ sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1,\
    \ 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1,\
    \ -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpph5ey1vo_test.go:49: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpph5ey1vo_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=15)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpph5ey1vo_test.go:49: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpph5ey1vo_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=-18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpph5ey1vo_test.go:49: expected '%!s(int=-126)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpph5ey1vo_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=-157)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpph5ey1vo_test.go:49: expected '%!s(int=0)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpph5ey1vo_test.go:49:\
    \ expected '%!s(int=-14196)', got '%!s(int=121)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpph5ey1vo_test.go:49: expected '%!s(int=-1448)', got '%!s(int=136)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    // Write\
    \ your code here\n    sum := 0\n    for _, v := range lst {\n        if v%3 !=\
    \ 0 {\n            sum += v*v\n        }\n        if v%4 != 0 {\n            sum\
    \ += v*v*v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T)\
    \ {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpt26rwkhl_test.go:50: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpt26rwkhl_test.go:50:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpt26rwkhl_test.go:50: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpt26rwkhl_test.go:50:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpt26rwkhl_test.go:50: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpt26rwkhl_test.go:50:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpt26rwkhl_test.go:50: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpt26rwkhl_test.go:50:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    sum :=\
    \ 0\n    for _, v := range lst {\n        if v%3 != 0 {\n            sum += v*v\n\
    \        }\n        if v%4 != 0 {\n            sum += v*v*v\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpz_c6cmy0_test.go:49: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpz_c6cmy0_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpz_c6cmy0_test.go:49: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpz_c6cmy0_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpz_c6cmy0_test.go:49: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpz_c6cmy0_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpz_c6cmy0_test.go:49: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpz_c6cmy0_test.go:49:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    sum :=\
    \ 0\n    for _, v := range lst {\n        if v%3 != 0 {\n            sum += v*v\n\
    \        }\n        if v%4 != 0 {\n            sum += v*v*v\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpz_c6cmy0_test.go:49: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpz_c6cmy0_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpz_c6cmy0_test.go:49: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpz_c6cmy0_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpz_c6cmy0_test.go:49: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpz_c6cmy0_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpz_c6cmy0_test.go:49: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpz_c6cmy0_test.go:49:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    // Write\
    \ your code here\n    sum := 0\n    for _, v := range lst {\n        if v%3 !=\
    \ 0 {\n            sum += v*v\n        }\n        if v%4 != 0 {\n            sum\
    \ += v*v*v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T)\
    \ {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpt26rwkhl_test.go:50: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpt26rwkhl_test.go:50:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpt26rwkhl_test.go:50: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpt26rwkhl_test.go:50:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpt26rwkhl_test.go:50: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpt26rwkhl_test.go:50:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpt26rwkhl_test.go:50: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpt26rwkhl_test.go:50:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    sum :=\
    \ 0\n    for _, v := range lst {\n        if v%3 != 0 {\n            sum += v\n\
    \        }\n        if v%4 != 0 {\n            sum += v\n        }\n    }\n  \
    \  return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpbamt0mov_test.go:49: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpbamt0mov_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=15)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpbamt0mov_test.go:49: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpbamt0mov_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=-18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpbamt0mov_test.go:49: expected '%!s(int=-126)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpbamt0mov_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=-157)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpbamt0mov_test.go:49: expected '%!s(int=0)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpbamt0mov_test.go:49:\
    \ expected '%!s(int=-14196)', got '%!s(int=121)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpbamt0mov_test.go:49: expected '%!s(int=-1448)', got '%!s(int=136)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    var sum\
    \ int = 0\n    for _, v := range lst {\n        if v%3 != 0 {\n            sum\
    \ += v*v\n        }\n        if v%4 != 0 {\n            sum += v*v*v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate\
    \ := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14\
    \ },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    // Write\
    \ your code here\n    sum := 0\n    for _, i := range lst {\n        if i%3 !=\
    \ 0 {\n            sum += i*i\n        }\n        if i%4 != 0 {\n            sum\
    \ += i*i*i\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T)\
    \ {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpk55v6rwo_test.go:50: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpk55v6rwo_test.go:50:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpk55v6rwo_test.go:50: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpk55v6rwo_test.go:50:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpk55v6rwo_test.go:50: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpk55v6rwo_test.go:50:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpk55v6rwo_test.go:50: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpk55v6rwo_test.go:50:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075008
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    // Write\
    \ your code here\n    sum := 0\n    for _, v := range lst {\n        if v%3 !=\
    \ 0 {\n            sum += v*v\n        }\n        if v%4 != 0 {\n            sum\
    \ += v*v*v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T)\
    \ {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpt26rwkhl_test.go:50: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpt26rwkhl_test.go:50:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpt26rwkhl_test.go:50: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpt26rwkhl_test.go:50:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpt26rwkhl_test.go:50: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpt26rwkhl_test.go:50:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpt26rwkhl_test.go:50: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpt26rwkhl_test.go:50:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    sum :=\
    \ 0\n    for _, value := range lst {\n        if value%3 != 0 {\n            sum\
    \ += value * value\n        }\n        if value%4 != 0 {\n            sum += value\
    \ * value\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T)\
    \ {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpc0lpopbn_test.go:49: expected '%!s(int=6)', got '%!s(int=19)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpc0lpopbn_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=99)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpc0lpopbn_test.go:49: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpc0lpopbn_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpc0lpopbn_test.go:49: expected '%!s(int=-126)', got '%!s(int=112)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpc0lpopbn_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=12947)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpc0lpopbn_test.go:49: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpc0lpopbn_test.go:49:\
    \ expected '%!s(int=-14196)', got '%!s(int=11903)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpc0lpopbn_test.go:49: expected '%!s(int=-1448)', got '%!s(int=4118)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    sum :=\
    \ 0\n    for _, v := range lst {\n        if v%3 == 0 && v%4 == 0 {\n        \
    \    sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T)\
    \ {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpgqvnx__r_test.go:46: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpgqvnx__r_test.go:46:\
    \ expected '%!s(int=14)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpgqvnx__r_test.go:46: expected '%!s(int=9)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpgqvnx__r_test.go:46:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpgqvnx__r_test.go:46: expected '%!s(int=-126)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpgqvnx__r_test.go:46:\
    \ expected '%!s(int=3030)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpgqvnx__r_test.go:46: expected '%!s(int=-14196)', got '%!s(int=84)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpgqvnx__r_test.go:46:\
    \ expected '%!s(int=-1448)', got '%!s(int=-12)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075008
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    var sum\
    \ = 0\n    for _, v := range lst {\n        if v%3 != 0 {\n            sum +=\
    \ v\n        }\n        if v%4 != 0 {\n            sum += v\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpvy3m5prz_test.go:49: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpvy3m5prz_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=15)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpvy3m5prz_test.go:49: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpvy3m5prz_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=-18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpvy3m5prz_test.go:49: expected '%!s(int=-126)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpvy3m5prz_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=-157)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpvy3m5prz_test.go:49: expected '%!s(int=0)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpvy3m5prz_test.go:49:\
    \ expected '%!s(int=-14196)', got '%!s(int=121)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpvy3m5prz_test.go:49: expected '%!s(int=-1448)', got '%!s(int=136)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075008
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    var sum\
    \ int = 0\n    for i := 0; i < len(lst); i++ {\n        if i % 3 == 0 {\n    \
    \        sum += lst[i] * lst[i]\n        }\n        if i % 4 == 0 {\n        \
    \    sum += lst[i] * lst[i]\n        }\n        if i % 3 != 0 && i % 4 != 0 {\n\
    \            sum += lst[i] * lst[i]\n        }\n    }\n    return sum\n}\n\nfunc\
    \ TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{1,\
    \ 4, 9}), expected: 14 },\n     { actual: candidate([]int{}), expected: 0 },\n\
    \     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n\
    \     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1, -1}), expected:\
    \ -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n     { actual: candidate([]int{-1,\
    \ -5, 2, -1, -5}), expected: -126 },\n     { actual: candidate([]int{-56, -99,\
    \ 1, 0, -2}), expected: 3030 },\n     { actual: candidate([]int{-1, 0, 0, 0, 0,\
    \ 0, 0, 0, -1}), expected: 0 },\n     { actual: candidate([]int{-16, -9, -2, 36,\
    \ 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     {\
    \ actual: candidate([]int{-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10}), expected: -1448 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpbjb4f3gh_test.go:52: expected '%!s(int=6)', got '%!s(int=15)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpbjb4f3gh_test.go:52:\
    \ expected '%!s(int=14)', got '%!s(int=99)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpbjb4f3gh_test.go:52: expected '%!s(int=9)', got '%!s(int=10)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpbjb4f3gh_test.go:52:\
    \ expected '%!s(int=-3)', got '%!s(int=10)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpbjb4f3gh_test.go:52: expected '%!s(int=-126)', got '%!s(int=57)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpbjb4f3gh_test.go:52:\
    \ expected '%!s(int=3030)', got '%!s(int=16078)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpbjb4f3gh_test.go:52: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpbjb4f3gh_test.go:52:\
    \ expected '%!s(int=-14196)', got '%!s(int=10996)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpbjb4f3gh_test.go:52: expected '%!s(int=-1448)', got '%!s(int=2799)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075008
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    sum :=\
    \ 0\n    for _, v := range lst {\n        if v%3 != 0 {\n            sum += v\n\
    \        }\n        if v%4 != 0 {\n            sum += v\n        }\n    }\n  \
    \  return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpbamt0mov_test.go:49: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpbamt0mov_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=15)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpbamt0mov_test.go:49: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpbamt0mov_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=-18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpbamt0mov_test.go:49: expected '%!s(int=-126)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpbamt0mov_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=-157)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpbamt0mov_test.go:49: expected '%!s(int=0)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpbamt0mov_test.go:49:\
    \ expected '%!s(int=-14196)', got '%!s(int=121)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpbamt0mov_test.go:49: expected '%!s(int=-1448)', got '%!s(int=136)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    var sum\
    \ int = 0\n    for _, v := range lst {\n        if v%3 != 0 {\n            sum\
    \ += v\n        }\n        if v%4 != 0 {\n            sum += v\n        }\n  \
    \  }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate :=\
    \ sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1,\
    \ 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1,\
    \ -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpph5ey1vo_test.go:49: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpph5ey1vo_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=15)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpph5ey1vo_test.go:49: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpph5ey1vo_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=-18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpph5ey1vo_test.go:49: expected '%!s(int=-126)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpph5ey1vo_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=-157)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpph5ey1vo_test.go:49: expected '%!s(int=0)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpph5ey1vo_test.go:49:\
    \ expected '%!s(int=-14196)', got '%!s(int=121)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpph5ey1vo_test.go:49: expected '%!s(int=-1448)', got '%!s(int=136)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    sum :=\
    \ 0\n    for _, v := range lst {\n        if v%3 != 0 {\n            sum += v\n\
    \        }\n        if v%4 != 0 {\n            sum += v\n        }\n    }\n  \
    \  return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpbamt0mov_test.go:49: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpbamt0mov_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=15)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpbamt0mov_test.go:49: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpbamt0mov_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=-18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpbamt0mov_test.go:49: expected '%!s(int=-126)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpbamt0mov_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=-157)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpbamt0mov_test.go:49: expected '%!s(int=0)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpbamt0mov_test.go:49:\
    \ expected '%!s(int=-14196)', got '%!s(int=121)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpbamt0mov_test.go:49: expected '%!s(int=-1448)', got '%!s(int=136)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    var sum\
    \ int = 0\n    for _, v := range lst {\n        if v%3 != 0 {\n            sum\
    \ += v*v\n        }\n        if v%4 != 0 {\n            sum += v*v*v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate\
    \ := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14\
    \ },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    var sum\
    \ int = 0\n    for _, v := range lst {\n        if v%3 != 0 {\n            sum\
    \ += v*v\n        }\n        if v%4 != 0 {\n            sum += v*v*v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate\
    \ := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14\
    \ },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    var sum\
    \ int = 0\n    for _, v := range lst {\n        if v%3 != 0 {\n            sum\
    \ += v*v\n        }\n        if v%4 != 0 {\n            sum += v*v*v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate\
    \ := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14\
    \ },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    var sum\
    \ int = 0\n    for _, v := range lst {\n        if v%3 != 0 {\n            sum\
    \ += v*v\n        }\n        if v%4 != 0 {\n            sum += v*v*v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate\
    \ := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14\
    \ },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    var sum\
    \ int = 0\n    for _, v := range lst {\n        if v%3 != 0 {\n            sum\
    \ += v\n        }\n        if v%4 != 0 {\n            sum += v\n        }\n  \
    \  }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate :=\
    \ sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1,\
    \ 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1,\
    \ -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpph5ey1vo_test.go:49: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpph5ey1vo_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=15)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpph5ey1vo_test.go:49: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpph5ey1vo_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=-18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpph5ey1vo_test.go:49: expected '%!s(int=-126)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpph5ey1vo_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=-157)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpph5ey1vo_test.go:49: expected '%!s(int=0)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpph5ey1vo_test.go:49:\
    \ expected '%!s(int=-14196)', got '%!s(int=121)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpph5ey1vo_test.go:49: expected '%!s(int=-1448)', got '%!s(int=136)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    var sum\
    \ int = 0\n    for _, val := range lst {\n        if val%3 != 0 {\n          \
    \  sum += val*val\n        }\n        if val%4 != 0 {\n            sum += val*val*val\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n\
    \  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmp7qfcnv69_test.go:49: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmp7qfcnv69_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp7qfcnv69_test.go:49: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp7qfcnv69_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmp7qfcnv69_test.go:49: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmp7qfcnv69_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmp7qfcnv69_test.go:49: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmp7qfcnv69_test.go:49:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    var sum\
    \ int = 0\n    for _, v := range lst {\n        if v%3 != 0 {\n            sum\
    \ += v*v\n        }\n        if v%4 != 0 {\n            sum += v*v*v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate\
    \ := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14\
    \ },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    var sum\
    \ = 0\n    for _, v := range lst {\n        if v%3 == 0 {\n            sum +=\
    \ v*v\n        }\n        if v%4 == 0 {\n            sum += v*v*v\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate\
    \ := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14\
    \ },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpsxbvyydo_test.go:49: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpsxbvyydo_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=145)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpsxbvyydo_test.go:49: expected '%!s(int=9)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpsxbvyydo_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpsxbvyydo_test.go:49: expected '%!s(int=-126)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpsxbvyydo_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=-165815)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpsxbvyydo_test.go:49: expected '%!s(int=-14196)', got '%!s(int=29697)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpsxbvyydo_test.go:49:\
    \ expected '%!s(int=-1448)', got '%!s(int=6942)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    sum :=\
    \ 0\n    for _, v := range lst {\n        if v%3 != 0 {\n            sum += v\n\
    \        }\n        if v%4 != 0 {\n            sum += v\n        }\n    }\n  \
    \  return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n\
    \     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 1, 1, 1, 1, 1, 1}),\
    \ expected: 9 },\n     { actual: candidate([]int{-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1}), expected: -3 },\n     { actual: candidate([]int{0}), expected: 0 },\n\
    \     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected: -126 },\n     {\
    \ actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030 },\n     { actual:\
    \ candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected: 0 },\n     { actual:\
    \ candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35,\
    \ 37}), expected: -14196 },\n     { actual: candidate([]int{-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}), expected: -1448\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpbamt0mov_test.go:49: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpbamt0mov_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=15)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpbamt0mov_test.go:49: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpbamt0mov_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=-18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpbamt0mov_test.go:49: expected '%!s(int=-126)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpbamt0mov_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=-157)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpbamt0mov_test.go:49: expected '%!s(int=0)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpbamt0mov_test.go:49:\
    \ expected '%!s(int=-14196)', got '%!s(int=121)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpbamt0mov_test.go:49: expected '%!s(int=-1448)', got '%!s(int=136)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    // Write\
    \ your code here\n    sum := 0\n    for _, v := range lst {\n        if v%3 !=\
    \ 0 {\n            sum += v\n        }\n        if v%4 != 0 {\n            sum\
    \ += v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T)\
    \ {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmp2jwn4pil_test.go:50: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmp2jwn4pil_test.go:50:\
    \ expected '%!s(int=14)', got '%!s(int=15)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp2jwn4pil_test.go:50: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp2jwn4pil_test.go:50:\
    \ expected '%!s(int=-3)', got '%!s(int=-18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmp2jwn4pil_test.go:50: expected '%!s(int=-126)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmp2jwn4pil_test.go:50:\
    \ expected '%!s(int=3030)', got '%!s(int=-157)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmp2jwn4pil_test.go:50: expected '%!s(int=0)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmp2jwn4pil_test.go:50:\
    \ expected '%!s(int=-14196)', got '%!s(int=121)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmp2jwn4pil_test.go:50: expected '%!s(int=-1448)', got '%!s(int=136)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    var sum\
    \ int = 0\n    for _, v := range lst {\n        if v%3 != 0 {\n            sum\
    \ += v*v\n        }\n        if v%4 != 0 {\n            sum += v*v*v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate\
    \ := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14\
    \ },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    var sum\
    \ int = 0\n    for _, v := range lst {\n        if v%3 != 0 {\n            sum\
    \ += v\n        }\n        if v%4 != 0 {\n            sum += v\n        }\n  \
    \  }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate :=\
    \ sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14 },\n     { actual:\
    \ candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1, 1, 1,\
    \ 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1, -1, -1,\
    \ -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpph5ey1vo_test.go:49: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpph5ey1vo_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=15)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpph5ey1vo_test.go:49: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpph5ey1vo_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=-18)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpph5ey1vo_test.go:49: expected '%!s(int=-126)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpph5ey1vo_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=-157)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpph5ey1vo_test.go:49: expected '%!s(int=0)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__9 (0.00s)\n        tmpph5ey1vo_test.go:49:\
    \ expected '%!s(int=-14196)', got '%!s(int=121)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpph5ey1vo_test.go:49: expected '%!s(int=-1448)', got '%!s(int=136)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    var sum\
    \ int = 0\n    for _, v := range lst {\n        if v%3 != 0 {\n            sum\
    \ += v*v\n        }\n        if v%4 != 0 {\n            sum += v*v*v\n       \
    \ }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate\
    \ := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected: 14\
    \ },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpf_4y78ur_test.go:49: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpf_4y78ur_test.go:49:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    var sum\
    \ int\n    for _, val := range lst {\n        if val%3 != 0 {\n            sum\
    \ += val*val\n        }\n        if val%4 != 0 {\n            sum += val*val*val\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n\
    \  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmp9_ukpjya_test.go:49: expected '%!s(int=6)', got '%!s(int=41)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmp9_ukpjya_test.go:49:\
    \ expected '%!s(int=14)', got '%!s(int=747)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp9_ukpjya_test.go:49: expected '%!s(int=9)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp9_ukpjya_test.go:49:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmp9_ukpjya_test.go:49: expected '%!s(int=-126)', got '%!s(int=-188)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmp9_ukpjya_test.go:49:\
    \ expected '%!s(int=3030)', got '%!s(int=-967165)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmp9_ukpjya_test.go:49: expected '%!s(int=-14196)', got '%!s(int=115663)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmp9_ukpjya_test.go:49:\
    \ expected '%!s(int=-1448)', got '%!s(int=10512)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660075008
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// \"\n// This function will take a list of integers. For all entries in the\
    \ list, the function shall square the integer entry if its index is a \n// multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n// change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \n// Examples:\nfunc sum_squares(lst []int) int {\n    // Write\
    \ your code here\n    sum := 0\n    for _, v := range lst {\n        if v%3 ==\
    \ 0 {\n            sum += v*v\n        }\n        if v%4 == 0 {\n            sum\
    \ += v*v*v\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T)\
    \ {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: 6 },\n     { actual: candidate([]int{1, 4, 9}), expected:\
    \ 14 },\n     { actual: candidate([]int{}), expected: 0 },\n     { actual: candidate([]int{1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}), expected: 9 },\n     { actual: candidate([]int{-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1}), expected: -3 },\n     { actual: candidate([]int{0}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -5, 2, -1, -5}), expected:\
    \ -126 },\n     { actual: candidate([]int{-56, -99, 1, 0, -2}), expected: 3030\
    \ },\n     { actual: candidate([]int{-1, 0, 0, 0, 0, 0, 0, 0, -1}), expected:\
    \ 0 },\n     { actual: candidate([]int{-16, -9, -2, 36, 36, 26, -20, 25, -40,\
    \ 20, -4, 12, -26, 35, 37}), expected: -14196 },\n     { actual: candidate([]int{-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
    \ expected: -1448 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpjio391s9_test.go:50: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpjio391s9_test.go:50:\
    \ expected '%!s(int=14)', got '%!s(int=145)'\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpjio391s9_test.go:50: expected '%!s(int=9)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpjio391s9_test.go:50:\
    \ expected '%!s(int=-3)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpjio391s9_test.go:50: expected '%!s(int=-126)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpjio391s9_test.go:50:\
    \ expected '%!s(int=3030)', got '%!s(int=-165815)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpjio391s9_test.go:50: expected '%!s(int=-14196)', got '%!s(int=29697)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpjio391s9_test.go:50:\
    \ expected '%!s(int=-1448)', got '%!s(int=6942)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075008
