name: HumanEval_49_modp
language: go_test.go
prompt: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
  \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n"
tests: "func TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct {\n\
  \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
  \    { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101, 101),\
  \ expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n     { actual:\
  \ candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101), expected:\
  \ 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual: candidate(31,\
  \ 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
  test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
  \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
  , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n       \
    \ return p\n    }\n    if p < 2 {\n        return modp(n - 1, p) % p\n    }\n\
    \    if p < 3 {\n        return modp(n - 2, p) % p\n    }\n    if p < 4 {\n  \
    \      return modp(n - 3, p) % p\n    }\n    if p < 5 {\n        return modp(n\
    \ - 4, p) % p\n    }\n    if p < 6 {\n        return modp(n - 5, p) % p\n    }\n\
    \    if p < 7 {\n        return modp(n - 6, p) % p\n    }\n    if p < 8 {\n  \
    \      return modp(n - 7, p) % p\n    }\n    if p < 9 {\n        return modp(n\
    \ - 8, p) % p\n    }\n    if p < 10 {\n        return modp(n - 9, p) % p\n   \
    \ }\n    if p < 11 {\n        return modp(n - 10, p) % p\n    }\n    if p < 12\
    \ {\n        return modp(n - 11, p) % p\n    }\n    if p < 13 {\n        return\
    \ modp(n - 12, p) % p\n    }\n    if p < 14 {\n        return modp(n - 13, p)\
    \ % p\n    }\n    if p < 15 {\n        return modp(n - 14, p) % p\n    }\n   \
    \ if p < 16 {\n        return modp(n - 15, p) % p\n    }\n    if p < 17 {\n  \
    \      return modp(n - 16, p) % p\n    }\n    if p < 18 {\n        return modp(n\
    \ - 17, p) % p\n    }\n    if p < 19 {\n        return modp(n - 18, p) % p\n \
    \   }\n    if p < 20 {\n        return modp(n - 19, p) % p\n    }\n    if p <\
    \ 21 {\n        return modp(n - 20, p) % p\n    }\n    if p < 22 {\n        return\
    \ modp(n - 21, p) % p\n    }\n    if p < 23 {\n        return modp(n - 22, p)\
    \ % p\n    }\n    if p < 24 {\n        return modp(n - 23, p) % p\n    }\n   \
    \ if p < 25 {\n        return modp(n - 24, p) % p\n    }\n    if p < 26 {\n  \
    \      return modp(n - 25, p) % p\n    }\n    if p < 27 {\n        return modp(n\
    \ - 26, p) % p\n    }\n    if p < 28 {\n        return modp(n - 27, p) % p\n \
    \   }\n    if p < 29 {\n        return modp(n - 28, p) % p\n    }\n    if p <\
    \ 30 {\n        return modp(n - 29, p) % p\n    }\n    if p < 31 {\n", "    x\
    \ := n\n    for {\n        if x&1 != 0 {\n            x >>= 1\n            x ^=\
    \ p\n        } else {\n            return x\n        }\n    }\n}\n", "    if n\
    \ == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n    }\n\
    \    if p == 1 {\n        return modp(n >> 1, p-1)\n    }\n    if p == 2 {\n \
    \       return modp(n >> 2, p-1)\n    }\n    if p == 3 {\n        return modp(n\
    \ >> 3, p-1)\n    }\n    if p == 4 {\n        return modp(n >> 4, p-1)\n    }\n\
    \    if p == 5 {\n        return modp(n >> 5, p-1)\n    }\n    if p == 6 {\n \
    \       return modp(n >> 6, p-1)\n    }\n    if p == 7 {\n        return modp(n\
    \ >> 7, p-1)\n    }\n    if p == 8 {\n        return modp(n >> 8, p-1)\n    }\n\
    \    if p == 9 {\n        return modp(n >> 9, p-1)\n    }\n    if p == 10 {\n\
    \        return modp(n >> 10, p-1)\n    }\n    if p == 11 {\n        return modp(n\
    \ >> 11, p-1)\n    }\n    if p == 12 {\n        return modp(n >> 12, p-1)\n  \
    \  }\n    if p == 13 {\n        return modp(n >> 13, p-1)\n    }\n    if p ==\
    \ 14 {\n        return modp(n >> 14, p-1)\n    }\n    if p == 15 {\n        return\
    \ modp(n >> 15, p-1)\n    }\n    if p == 16 {\n        return modp(n >> 16, p-1)\n\
    \    }\n    if p == 17 {\n        return modp(n >> 17, p-1)\n    }\n    if p ==\
    \ 18 {\n        return modp(n >> 18, p-1)\n    }\n    if p == 19 {\n        return\
    \ modp(n >> 19, p-1)\n    }\n    if p == 20 {\n        return modp(n >> 20, p-1)\n\
    \    }\n    if p == 21 {\n        return modp(n >> 21, p-1)\n    }\n    if p ==\
    \ 22 {\n        return modp(n >> 22, p-1)\n    }\n    if p == 23 {\n        return\
    \ modp(n >> 23, p-1)\n    }\n    if p == 24 {\n        return modp(n >> 24, p-1)\n\
    \    }\n    if p == 25 {\n        return modp(n >> 25, p-1)\n    }\n    if p ==\
    \ 26 {\n        return modp(n >> 26, p-1)\n    }\n    if p == 27 {\n        return\
    \ modp(n >> 27, p-1)\n    }\n    if p == 28 {\n        return modp(n >> 28, p-1)\n\
    \    }\n    if p == 29 {\n        return modp(n >> 29, p-1)\n    }\n    if p ==\
    \ 30 {\n        return modp(n >> 30, p-1)\n", "    if n == 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n       \
    \ return modp(n - 1, p) + p\n    }\n    if p < 3 {\n        return modp(n - 1,\
    \ p) + modp(n - 2, p)\n    }\n    return modp(n - 1, p) + modp(n - 2, p) + modp(n\
    \ - 3, p)\n}\n", "    if n < 0 {\n        n *= -1\n        p *= -1\n    }\n  \
    \  if n < p {\n        return n\n    }\n    if n == p {\n        return n\n  \
    \  }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return\
    \ 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n      \
    \  return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n\
    \        return 5\n    }\n    if n == 6 {\n        return 6\n    }\n    if n ==\
    \ 7 {\n        return 7\n    }\n    if n == 8 {\n        return 8\n    }\n   \
    \ if n == 9 {\n        return 9\n    }\n    if n == 10 {\n        return 10\n\
    \    }\n    if n == 11 {\n        return 11\n    }\n    if n == 12 {\n       \
    \ return 12\n    }\n    if n == 13 {\n        return 13\n    }\n    if n == 14\
    \ {\n        return 14\n    }\n    if n == 15 {\n        return 15\n    }\n  \
    \  if n == 16 {\n        return 16\n    }\n    if n == 17 {\n        return 17\n\
    \    }\n    if n == 18 {\n        return 18\n    }\n    if n == 19 {\n       \
    \ return 19\n    }\n    if n == 20 {\n        return 20\n    }\n    if n == 21\
    \ {\n        return 21\n    }\n    if n == 22 {\n        return 22\n    }\n  \
    \  if n == 23 {\n        return 23\n    }\n    if n == 24 {\n        return 24\n\
    \    }\n    if n == 25 {\n        return 25\n    }\n    if n == 26 {\n       \
    \ return 26\n    }\n    if n == 27 {\n        return 27\n    }\n    if n == 28\
    \ {\n        return 28\n    }\n    if n == 29 {\n        return 29\n    }\n  \
    \  if n == 30 {\n        return 30\n    }\n    if n == 31 {\n        return 31\n\
    \    }\n    if n == 32 {\n        return 32\n    }\n    if n == 33 {\n       \
    \ return 33\n    }\n    if n == 34 {\n        return 34\n    }\n    if n == 35\
    \ {\n        return 35\n    }\n    if n == 36 {\n        return 36\n    }\n  \
    \  if n == 37 {\n        return 37\n    }\n    if n == 38 {\n        return 38\n\
    \    }\n    if n == 39 {\n        return 39\n    }\n    if n == 40 {\n       \
    \ return 40\n    }\n    if n == 41 {\n        return 41\n    }\n    if n == 42\
    \ {\n        return 42\n    }\n    if n == 43 {\n        return 43\n    }\n  \
    \  if n == 44 {\n        return 44\n    }\n    if n == 45 {\n        return 45\n\
    \    }\n    if n == 46 {\n        return 46\n    }\n    if n == 47 {\n       \
    \ return 47\n    }\n    if n == 48 {\n        return 48", "    x := n\n    for\
    \ {\n        if x < (p-1)/2 {\n            x <<= 1\n        } else {\n       \
    \     x >>= 1\n        }\n        if x&1 != 0 {\n            x ^= p\n        }\n\
    \    }\n    return x\n}\n", "    x := n\n    for {\n        if x % p == 0 {\n\
    \            return x\n        }\n        x /= p\n    }\n}\n", "    if n == 0\
    \ {\n        return 0\n    }\n    if n == 1 {\n        return p\n    }\n    if\
    \ p < 2 {\n        return modp(n - 1, p) + p\n    }\n    if p > 2 {\n        return\
    \ modp(n - 1, modp(p - 2, p)) + p\n    }\n    return modp(n - 1, modp(p - 2, p))\
    \ + p\n}\n", "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n    \
    \    return p\n    }\n    if p < 2 {\n        return modp(n - 1, p) % p\n    }\n\
    \    if p > 2 {\n        return modp(n - 1, p) % p\n    }\n    if n == p {\n \
    \       return modp(n - 1, p) % p\n    }\n    if n < p {\n        return modp(n\
    \ - 1, p) % p\n    }\n    return modp(n - 1, p) % p\n}\n", "    if n < 0 {\n \
    \       n *= -1\n        p *= -1\n    }\n    if n < p {\n        return n\n  \
    \  }\n    if n == p {\n        return n\n    }\n    if n == 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n      \
    \  return p\n    }\n    if n > p {\n        return modp(n - p, p)\n    }\n   \
    \ if n < p {\n        return modp(n - p, p)\n    }\n}\n", "    if n == 0 {\n \
    \       return 0\n    }\n    if n == 1 {\n        return p\n    }\n    return\
    \ modp(n / 2, p) + p\n}\n", "    if n == 0 {\n        return 0\n    }\n    if\
    \ n == 1 {\n        return p\n    }\n    if p < 2 {\n        return modp(n >>\
    \ 1, p+1) + p\n    }\n    if p > 2 {\n        return modp(n >> 1, p+1) + p\n \
    \   }\n    return modp(n >> 1, p+1) + p\n}\n", "    if n == 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n       \
    \ return modp(n - 1, p) + 1\n    }\n    if p < 4 {\n        return modp(n - 2,\
    \ p) + p\n    }\n    return modp(n - 4, p) + p\n}\n", "    if n == 0 {\n     \
    \   return 0\n    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n\
    \        return modp(n / 2, p)\n    }\n    if p > p {\n        return modp(n /\
    \ 2, p)\n    }\n    return modp(n / 2, p)\n}\n", "    if n < 0 {\n        n *=\
    \ -1\n    }\n    if n < p {\n        return n\n    }\n    if n == p {\n      \
    \  return n\n    }\n    if n > p {\n        return modp(n - p, p)\n    }\n   \
    \ return 0\n}\n", "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n\
    \        return p\n    }\n    if p < 2 {\n        return modp(n - 1, p) + p\n\
    \    }\n    if p < 4 {\n        return modp(n - 2, p) + p\n    }\n    if p < 8\
    \ {\n        return modp(n - 4, p) + p\n    }\n    if p < 16 {\n        return\
    \ modp(n - 8, p) + p\n    }\n    if p < 32 {\n        return modp(n - 16, p) +\
    \ p\n    }\n    if p < 64 {\n        return modp(n - 32, p) + p\n    }\n    if\
    \ p < 128 {\n        return modp(n - 64, p) + p\n    }\n    if p < 256 {\n   \
    \     return modp(n - 128, p) + p\n    }\n    if p < 512 {\n        return modp(n\
    \ - 256, p) + p\n    }\n    if p < 1024 {\n        return modp(n - 512, p) + p\n\
    \    }\n    if p < 2048 {\n        return modp(n - 1024, p / 2) + p\n    }\n \
    \   if p < 4096 {\n        return modp(n - 2048, p / 2) + p\n    }\n    if p <\
    \ 8192 {\n        return modp(n - 4096, p / 2) + p\n    }\n    if p < 16384 {\n\
    \        return modp(n - 8192, p / 2) + p\n    }\n    if p < 32768 {\n       \
    \ return modp(n - 16384, p / 2) + p\n    }\n    if p < 65536 {\n        return\
    \ modp(n - 32768, p / 2) + p\n    }\n    if p < 131072 {\n        return modp(n\
    \ - 65536, p / 2) + p\n    }\n    if p < 262144 {\n        return modp(n - 131072,\
    \ p / 2) + p\n    }\n    if p < 524288 {\n        return modp(n - 262144, p /\
    \ 2) + p\n    }\n    if p < 1048576 {\n        return modp(n - 524288, p / 2)\
    \ + p\n    }\n    if p < 2097152 {\n        return modp(n - 1048576, p / 2) +\
    \ p\n    }\n    if p < 4194304 {\n        return modp(n - 2097152, p / 2) + p\n\
    \    }\n    if p < 8388608 {\n        return modp(n - 4194304, p / 2) + p\n  \
    \  }\n    if p < 16777216 {\n        return modp(n - 8388608, p / 2) + p\n   \
    \ }\n    if p < 33554432 {\n        return modp(n - 16777216, p / 2) + p\n   \
    \ }\n    if p < 67108864 {\n        return mod", "    if n == 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n       \
    \ return modp(n - 1, p) + p\n    }\n    if p < 3 {\n        return modp(n - 2,\
    \ p) + p\n    }\n    return modp(n - 3, p) + p\n}\n", "    if n == 0 {\n     \
    \   return 0\n    }\n    if n == 1 {\n        return p\n    }\n    if p == 0 {\n\
    \        return modp(n - 1, p-1)\n    }\n    if p == 1 {\n        return n\n \
    \   }\n    if p > 1 {\n        return modp(n - 1, p) + modp(n - 1, p)\n    }\n\
    }\n", "    x := n\n    for {\n        if x&1 != 0 {\n            x >>= 1\n   \
    \         x ^= p\n        } else {\n            break\n        }\n    }\n    return\
    \ x\n}\n", "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n      \
    \  return p\n    }\n    return modp(n >> 1, p) + p\n}\n", "    x := n\n    for\
    \ {\n        if x % p == 0 {\n            return x\n        }\n        x /= p\n\
    \    }\n}\n", "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n   \
    \     return p\n    }\n    if p < 2 {\n        return modp(n - 1, p) % p\n   \
    \ }\n    if p > 2 {\n        return modp(n - 2, p) % p\n    }\n    if p < p {\n\
    \        return modp(n - 1, p) % p\n    }\n    return modp(n - 2, p) % p\n}\n",
  "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n \
    \   }\n    if p < 2 {\n        return modp(n - 1, p+1) + p\n    }\n    if p >\
    \ 2 {\n        return modp(n - 1, p+1) + p\n    }\n    return modp(n - 1, p+1)\
    \ + p\n}\n", "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n    \
    \    return p\n    }\n    if p < 2 {\n        return modp(n - 1, p) % p\n    }\n\
    \    if p > 2 {\n        return modp(n - 2, p) % p\n    }\n    if p == 2 {\n \
    \       return modp(n - 1, p) % p\n    }\n    return modp(n - 1, p) % p\n}\n",
  "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n \
    \   }\n    if p < 2 {\n        return modp(n >> 1, p+1) + p\n    }\n    if p <\
    \ 3 {\n        return modp(n >> 2, p+1) + p\n    }\n    if p < 4 {\n        return\
    \ modp(n >> 3, p+1) + p\n    }\n    if p < 5 {\n        return modp(n >> 4, p+1)\
    \ + p\n    }\n    if p < 6 {\n        return modp(n >> 5, p+1) + p\n    }\n  \
    \  if p < 7 {\n        return modp(n >> 6, p+1) + p\n    }\n    if p < 8 {\n \
    \       return modp(n >> 7, p+1) + p\n    }\n    if p < 9 {\n        return modp(n\
    \ >> 8, p+1) + p\n    }\n    if p < 10 {\n        return modp(n >> 9, p+1) + p\n\
    \    }\n    if p < 11 {\n        return modp(n >> 10, p+1) + p\n    }\n    if\
    \ p < 12 {\n        return modp(n >> 11, p+1) + p\n    }\n    if p < 13 {\n  \
    \      return modp(n >> 12, p+1) + p\n    }\n    if p < 14 {\n        return modp(n\
    \ >> 13, p+1) + p\n    }\n    if p < 15 {\n        return modp(n >> 14, p+1) +\
    \ p\n    }\n    if p < 16 {\n        return modp(n >> 15, p+1) + p\n    }\n  \
    \  if p < 17 {\n        return modp(n >> 16, p+1) + p\n    }\n    if p < 18 {\n\
    \        return modp(n >> 17, p+1) + p\n    }\n    if p < 19 {\n        return\
    \ modp(n >> 18, p+1) + p\n    }\n    if p < 20 {\n        return modp(n >> 19,\
    \ p+1) + p\n    }\n    if p < 21 {\n        return modp(n >> 20, p+1) + p\n  \
    \  }\n    if p < 22 {\n        return modp(n >> 21, p+1) + p\n    }\n    if p\
    \ < 23 {\n        return modp(n >> 22, p+1) + p\n    }\n    if p < 24 {\n    \
    \    return modp(n >> 23, p+1) + p\n    }\n    if p < 25 {\n        return modp(n\
    \ >> 24, p+1) + p\n    }\n    if p < 26 {\n        return modp(n >> 25, p+1) +\
    \ p\n    }\n    if p < 27 {\n        return modp(n >> 26, p+1) + p\n    }\n  \
    \  if p < 28 {", "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n\
    \        return p\n    }\n    if p < 2 {\n        return modp(n - 1, p) % p\n\
    \    }\n    if p > 2 {\n        return modp(n - 2, p) % p\n    }\n    x := modp(n\
    \ - 1, p) % p\n    y := modp(n - 2, p) % p\n    if x == 0 {\n        return y\n\
    \    }\n    if y == 0 {\n        return x\n    }\n    return x % y\n}\n", "  \
    \  x := n\n    for {\n        if x < (p / 2) {\n            x <<= 1\n        }\
    \ else {\n            x >>= 1\n        }\n        if x < (p / 2) {\n         \
    \   x += 1\n        }\n        if x == 0 {\n            break\n        }\n   \
    \ }\n    return x\n}\n", "    x := n\n    y := p\n    for {\n        x -= y\n\
    \        if x == 0 {\n            break\n        }\n        y >>= 1\n    }\n \
    \   return x\n}\n", "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n\
    \        return p\n    }\n    if p < 2 {\n        return modp(n - 1, p+1) + p\n\
    \    }\n    return modp(n - 1, p+1) + modp(n - 2, p)\n}\n", "    if n == 0 {\n\
    \        return 0\n    }\n    if p == 0 {\n        return n\n    }\n    if p >\
    \ n {\n        return modp(n - p, p)\n    }\n    if n == p {\n        return n\n\
    \    }\n    if n < p {\n        return modp(n, p)\n    }\n    return modp(n -\
    \ p, p) + p\n}\n", "    x := n\n    for {\n        if x&1 != 0 {\n           \
    \ x >>= 1\n            x ^= p\n        } else {\n            break\n        }\n\
    \    }\n    return x\n}\n", "    if n == 0 {\n        return 0\n    }\n    if\
    \ p == 1 {\n        return n\n    }\n    if p < 2 {\n        return modp(n - 1,\
    \ p) + 1\n    }\n    if p < 3 {\n        return modp(n - 1, p) + modp(n - 2, p)\
    \ + p\n    }\n    if p < 4 {\n        return modp(n - 1, p) + modp(n - 2, p) +\
    \ modp(n - 3, p) + p\n    }\n    if p < 5 {\n        return modp(n - 1, p) + modp(n\
    \ - 2, p) + modp(n - 3, p) + modp(n - 4, p) + p\n    }\n    if p < 6 {\n     \
    \   return modp(n - 1, p) + modp(n - 2, p) + modp(n - 3, p) + modp(n - 4, p) +\
    \ modp(n - 5, p) + p\n    }\n    if p < 7 {\n        return modp(n - 1, p) + modp(n\
    \ - 2, p) + modp(n - 3, p) + modp(n - 4, p) + modp(n - 5, p) + modp(n - 6, p)\
    \ + p\n    }\n    if p < 8 {\n        return modp(n - 1, p) + modp(n - 2, p) +\
    \ modp(n - 3, p) + modp(n - 4, p) + modp(n - 5, p) + modp(n - 6, p) + modp(n -\
    \ 7, p) + p\n    }\n    if p < 9 {\n        return modp(n - 1, p) + modp(n - 2,\
    \ p) + modp(n - 3, p) + modp(n - 4, p) + modp(n - 5, p) + modp(n - 6, p) + modp(n\
    \ - 7, p) + modp(n - 8, p) + p\n    }\n    if p < 10 {\n        return modp(n\
    \ - 1, p) + modp(n - 2, p) + modp(n - 3, p) + modp(n - 4, p) + modp(n - 5, p)\
    \ + modp(n - 6, p) + modp(n - 7, p) + modp(n - 8, p) + modp(n - 9, p) + p\n  \
    \  }\n    if p < 11 {\n        return modp(n - 1, p) + modp(n - 2, p) + modp(n\
    \ - 3, p) + modp(n - 4, p) + modp(n - 5, p) + modp(n - 6, p) + modp(n - 7, p)\
    \ + modp(n - 8, p) + modp(n - 9, p) + modp(n - 10, p) + p\n    }\n    if p < 12\
    \ {\n        return modp(n - 1, p) + modp(n - 2, p) + modp(n - 3, p) + modp(n\
    \ - 4, p) + modp(n - 5, p) + modp(n - 6, p) + modp(n - 7, p) + modp(n - 8, p)\
    \ + modp(n - 9, p) + modp(n - 10, p) + modp(", "    x := n\n    for {\n      \
    \  if x & 1 == 0 {\n            x >>= 1\n            x &= p\n        } else {\n\
    \            x >>= 1\n        }\n        if x == 0 {\n            break\n    \
    \    }\n    }\n    return x\n}\n", "    if n == 0 {\n        return 0\n    }\n\
    \    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return modp(n\
    \ - 1, p) % p\n    }\n    return modp(n >> 1, p) % p\n}\n", "    if n == 0 {\n\
    \        return 0\n    }\n    if n == 1 {\n        return p\n    }\n    if p <\
    \ 2 {\n        return modp(n - 1, p) + p\n    }\n    if p < 3 {\n        return\
    \ modp(n - 1, p) + modp(n - 2, p)\n    }\n    return modp(n - 1, p) + modp(n -\
    \ 2, p) + modp(n - 3, p)\n}\n", "    if n == 0 {\n        return 0\n    }\n  \
    \  if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return modp(n\
    \ / 2, p)\n    }\n    if p < 3 {\n        return modp(n / 2, p)\n    }\n    return\
    \ modp(n / 2, p)\n}\n", "    if n == 0 {\n        return 0\n    }\n    if n ==\
    \ 1 {\n        return p\n    }\n    if p < 2 {\n        return modp(n - 1, p)\
    \ + 1\n    }\n    if p > 2 {\n        return modp(n - 1, p) - 1\n    }\n    x\
    \ := modp(n - 1, p) // x^(p-1)\n    y := modp(n - 2, p) // y^(p-2)\n    return\
    \ x * y + p\n}\n", "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n\
    \        return p\n    }\n    if p < 2 {\n        return modp(n - 1, p) + p\n\
    \    }\n    if p < 3 {\n        return modp(n - 2, p) + p\n    }\n    if p < 4\
    \ {\n        return modp(n - 3, p) + p\n    }\n    if p < 5 {\n        return\
    \ modp(n - 4, p) + p\n    }\n    if p < 6 {\n        return modp(n - 5, p) + p\n\
    \    }\n    if p < 7 {\n        return modp(n - 6, p) + p\n    }\n    if p < 8\
    \ {\n        return modp(n - 7, p) + p\n    }\n    if p < 9 {\n        return\
    \ modp(n - 8, p) + p\n    }\n    if p < 10 {\n        return modp(n - 9, p) +\
    \ p\n    }\n    if p < 11 {\n        return modp(n - 10, p) + p\n    }\n    if\
    \ p < 12 {\n        return modp(n - 11, p) + p\n    }\n    if p < 13 {\n     \
    \   return modp(n - 12, p) + p\n    }\n    if p < 14 {\n        return modp(n\
    \ - 13, p) + p\n    }\n    if p < 15 {\n        return modp(n - 14, p) + p\n \
    \   }\n    if p < 16 {\n        return modp(n - 15, p) + p\n    }\n    if p <\
    \ 17 {\n        return modp(n - 16, p) + p\n    }\n    if p < 18 {\n        return\
    \ modp(n - 17, p) + p\n    }\n    if p < 19 {\n        return modp(n - 18, p)\
    \ + p\n    }\n    if p < 20 {\n        return modp(n - 19, p) + p\n    }\n   \
    \ if p < 21 {\n        return modp(n - 20, p) + p\n    }\n    if p < 22 {\n  \
    \      return modp(n - 21, p) + p\n    }\n    if p < 23 {\n        return modp(n\
    \ - 22, p) + p\n    }\n    if p < 24 {\n        return modp(n - 23, p) + p\n \
    \   }\n    if p < 25 {\n        return modp(n - 24, p) + p\n    }\n    if p <\
    \ 26 {\n        return modp(n - 25, p) + p\n    }\n    if p < 27 {\n        return\
    \ modp(n - 26, p) + p\n    }\n    if p < 28 {\n        return modp(n - 27, p)\
    \ + p\n    }\n    if p < 29 {\n        return modp(n - 28, p) + p\n    }\n   \
    \ if p < 30 {\n        return modp(n - 29, p) + p\n    }\n    if p < 31 {\n",
  "    x := n\n    for {\n        if x < (p / 2) {\n            x <<= 1\n        }\
    \ else {\n            x >>= 1\n        }\n        if x == 0 {\n            break\n\
    \        }\n    }\n    return x\n}\n", "    if n == 0 {\n        return 0\n  \
    \  }\n    if n == 1 {\n        return p\n    }\n    if p == 1 {\n        return\
    \ modp(n - 1, p-1)\n    }\n    return modp(n - 1, p) + modp(n-1, p)\n}\n", " \
    \   if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n\
    \    }\n    return modp(n >> 1, p) + p\n}\n", "    if n == 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n       \
    \ return modp(n / 2, p)\n    }\n    if p > 2 {\n        return modp(n / 2, p)\n\
    \    }\n    if p == 2 {\n        return n\n    }\n    if p == 3 {\n        return\
    \ modp(n / 2, p)\n    }\n    if p == 5 {\n        return modp(n / 2, p)\n    }\n\
    \    if p == 7 {\n        return modp(n / 2, p)\n    }\n    if p == 9 {\n    \
    \    return modp(n / 2, p)\n    }\n    if p == 11 {\n        return modp(n / 2,\
    \ p)\n    }\n    if p == 13 {\n        return modp(n / 2, p)\n    }\n    if p\
    \ == 17 {\n        return modp(n / 2, p)\n    }\n    if p == 19 {\n        return\
    \ modp(n / 2, p)\n    }\n    if p == 231 {\n        return modp(n / 2, p)\n  \
    \  }\n    if p == 257 {\n        return modp(n / 2, p)\n    }\n    if p == 289\
    \ {\n        return modp(n / 2, p)\n    }\n    if p == 303 {\n        return modp(n\
    \ / 2, p)\n    }\n    if p == 307 {\n        return modp(n / 2, p)\n    }\n  \
    \  if p == 320 {\n        return modp(n / 2, p)\n    }\n    if p == 327 {\n  \
    \      return modp(n / 2, p)\n    }\n    if p == 333 {\n        return modp(n\
    \ / 2, p)\n    }\n    if p == 337 {\n        return modp(n / 2, p)\n    }\n  \
    \  if p == 383 {\n        return modp(n / 2, p)\n    }\n    if p == 383 {\n  \
    \      return modp(n / 2, p)\n    }\n    if p == 383 {\n        return modp(n\
    \ / 2, p)\n    }\n    if p == 383 {\n        return modp(n / 2, p)\n    }\n  \
    \  if p == 383 {\n        return modp(n / 2, p)\n    }\n    if p == 383 {\n  \
    \      return modp(n / 2, p)\n    }\n    if p == 383 {\n        return modp(n\
    \ / 2, p)\n    }\n    if p == 383 {\n        return modp(n / 2, p)\n    }\n  \
    \  if p == 383 {\n        return modp(n / 2, p)\n    }\n    if p == 383 {\n  \
    \      return modp(n / 2, p)\n    }\n    if p == 383 {\n        return modp(n\
    \ / 2, p)\n    }\n    if p == 383 {\n        return modp(n / 2, p)", "    if n\
    \ == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n    }\n\
    \    if p < 2 {\n        return modp(n - 1, p+1) + p\n    }\n    if p < 3 {\n\
    \        return modp(n - 1, p+1) + modp(n - 2, p+1) + p\n    }\n    if p < 4 {\n\
    \        return modp(n - 1, p+1) + modp(n - 2, p+1) + modp(n - 3, p+1) + p\n \
    \   }\n    if p < 5 {\n        return modp(n - 1, p+1) + modp(n - 2, p+1) + modp(n\
    \ - 3, p+1) + modp(n - 4, p+1) + p\n    }\n    if p < 6 {\n        return modp(n\
    \ - 1, p+1) + modp(n - 2, p+1) + modp(n - 3, p+1) + modp(n - 4, p+1) + modp(n\
    \ - 5, p+1) + p\n    }\n    if p < 7 {\n        return modp(n - 1, p+1) + modp(n\
    \ - 2, p+1) + modp(n - 3, p+1) + modp(n - 4, p+1) + modp(n - 5, p+1) + modp(n\
    \ - 6, p+1) + p\n    }\n    if p < 8 {\n        return modp(n - 1, p+1) + modp(n\
    \ - 2, p+1) + modp(n - 3, p+1) + modp(n - 4, p+1) + modp(n - 5, p+1) + modp(n\
    \ - 6, p+1) + modp(n - 7, p+1) + p\n    }\n    if p < 9 {\n        return modp(n\
    \ - 1, p+1) + modp(n - 2, p+1) + modp(n - 3, p+1) + modp(n - 4, p+1) + modp(n\
    \ - 5, p+1) + modp(n - 6, p+1) + modp(n - 7, p+1) + modp(n - 8, p+1) + p\n   \
    \ }\n    if p < 10 {\n        return modp(n - 1, p+1) + modp(n - 2, p+1) + modp(n\
    \ - 3, p+1) + modp(n - 4, p+1) + modp(n - 5, p+1) + modp(n - 6, p+1) + modp(n\
    \ - 7, p+1) + modp(n - 8, p+1) + modp(n - 9, p+1) + p\n    }\n    if p < 11 {\n\
    \        return modp(n - 1, p+1) + modp(n - 2, p+1) + modp(n - 3, p+1) + modp(n\
    \ - 4, p+1) + modp(n - 5, p+1) + modp(n - 6, p+1) + modp(n - 7, p+1) + modp(n\
    \ - 8, p+1) + modp(n - 9, p+1) + modp(n - 10, p+1) + p\n    }\n    if p < 12 {\n\
    \        return modp(n - 1, p+1) + ", "    if n == 0 {\n        return 0\n   \
    \ }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) + 1\n    }\n    if p < 3 {\n        return modp(n - 2, p) + p\n\
    \    }\n    return modp(n - 3, p) + modp(n - 2, p)\n}\n", "    if n == 0 {\n \
    \       return 0\n    }\n    if n == 1 {\n        return p\n    }\n    if p <\
    \ 2 {\n        return modp(n - 1, p) + p\n    }\n    if p < 4 {\n        return\
    \ modp(n - 1, p) + modp(n - 2, p)\n    }\n    if p < 8 {\n        return modp(n\
    \ - 1, p) + modp(n - 2, p) + modp(n - 3, p)\n    }\n    if p < 16 {\n        return\
    \ modp(n - 1, p) + modp(n - 2, p) + modp(n - 3, p) + modp(n - 4, p)\n    }\n \
    \   if p < 32 {\n        return modp(n - 1, p) + modp(n - 2, p) + modp(n - 3,\
    \ p) + modp(n - 4, p) + modp(n - 5, p)\n    }\n    if p < 64 {\n        return\
    \ modp(n - 1, p) + modp(n - 2, p) + modp(n - 3, p) + modp(n - 4, p) + modp(n -\
    \ 5, p) + modp(n - 6, p)\n    }\n    if p < 128 {\n        return modp(n - 1,\
    \ p) + modp(n - 2, p) + modp(n - 3, p) + modp(n - 4, p) + modp(n - 5, p) + modp(n\
    \ - 6, p) + modp(n - 7, p)\n    }\n    if p < 256 {\n        return modp(n - 1,\
    \ p) + modp(n - 2, p) + modp(n - 3, p) + modp(n - 4, p) + modp(n - 5, p) + modp(n\
    \ - 6, p) + modp(n - 7, p) + modp(n - 8, p)\n    }\n    if p < 512 {\n       \
    \ return modp(n - 1, p) + modp(n - 2, p) + modp(n - 3, p) + modp(n - 4, p) + modp(n\
    \ - 5, p) + modp(n - 6, p) + modp(n - 7, p) + modp(n - 8, p) + modp(n - 9, p)\n\
    \    }\n    if p < 1024 {\n        return modp(n - 1, p) + modp(n - 2, p) + modp(n\
    \ - 3, p) + modp(n - 4, p) + modp(n - 5, p) + modp(n - 6, p) + modp(n - 7, p)\
    \ + modp(n - 8, p) + modp(n - 9, p) + modp(n - 10, p)\n    }\n    if p < 2048\
    \ {\n        return modp(n - 1, p) + modp(n - 2, p) + modp(n - 3, p) + modp(n\
    \ - 4, p) + modp(n - 5, p) + modp(n - 6, p) + modp(n - 7, p) + modp(n - 8, p)\
    \ + modp(n - 9, p) + modp(n - 10, p) + modp(n - 11, p)\n    }\n    if p < 4096\
    \ {\n        return modp(n - 1, p", "    if n == 0 {\n        return 0\n    }\n\
    \    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return modp(n\
    \ - 1, p) + p\n    }\n    if p < 3 {\n        return modp(n - 2, p) + p\n    }\n\
    \    if p < 4 {\n        return modp(n - 3, p) + p\n    }\n    if p < 5 {\n  \
    \      return modp(n - 4, p) + p\n    }\n    if p < 6 {\n        return modp(n\
    \ - 5, p) + p\n    }\n    if p < 7 {\n        return modp(n - 6, p) + p\n    }\n\
    \    if p < 8 {\n        return modp(n - 7, p) + p\n    }\n    if p < 9 {\n  \
    \      return modp(n - 8, p) + p\n    }\n    if p < 10 {\n        return modp(n\
    \ - 9, p) + p\n    }\n    if p < 11 {\n        return modp(n - 10, p) + p\n  \
    \  }\n    if p < 12 {\n        return modp(n - 11, p) + p\n    }\n    if p < 13\
    \ {\n        return modp(n - 12, p) + p\n    }\n    if p < 14 {\n        return\
    \ modp(n - 13, p) + p\n    }\n    if p < 15 {\n        return modp(n - 14, p)\
    \ + p\n    }\n    if p < 16 {\n        return modp(n - 15, p) + p\n    }\n   \
    \ if p < 17 {\n        return modp(n - 16, p) + p\n    }\n    if p < 18 {\n  \
    \      return modp(n - 17, p) + p\n    }\n    if p < 19 {\n        return modp(n\
    \ - 18, p) + p\n    }\n    if p < 20 {\n        return modp(n - 19, p) + p\n \
    \   }\n    if p < 21 {\n        return modp(n - 20, p) + p\n    }\n    if p <\
    \ 22 {\n        return modp(n - 21, p) + p\n    }\n    if p < 23 {\n        return\
    \ modp(n - 22, p) + p\n    }\n    if p < 24 {\n        return modp(n - 23, p)\
    \ + p\n    }\n    if p < 25 {\n        return modp(n - 24, p) + p\n    }\n   \
    \ if p < 26 {\n        return modp(n - 25, p) + p\n    }\n    if p < 27 {\n  \
    \      return modp(n - 26, p) + p\n    }\n    if p < 28 {\n        return modp(n\
    \ - 27, p) + p\n    }\n    if p < 29 {\n        return modp(n - 28, p) + p\n \
    \   }\n    if p < 30 {\n        return modp(n - 29, p) + p\n    }\n    if p <\
    \ 31 {\n", "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n      \
    \  return p\n    }\n    if p < 2 {\n        return modp(n - 1, p) % p\n    }\n\
    \    if p > 2 {\n        return modp(n - 1, (p + 1) * (p - 1)) % p\n    }\n  \
    \  return modp(n - 1, (p + 1) * (p - 1)) % p\n}\n", "    r := 0\n    for i :=\
    \ 0; i < n; i++ {\n        r = (r * p + 1) & (p-1)\n    }\n    return r\n}\n",
  "    x := n\n    for x != 0 {\n        x -= p & x\n        p >>= 1\n    }\n    return\
    \ x\n}\n", "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n      \
    \  return p\n    }\n    if p < 2 {\n        return modp(n - 1, p) + p\n    }\n\
    \    if p < 3 {\n        return modp(n - 2, p) + p\n    }\n    if p < 4 {\n  \
    \      return modp(n - 3, p) + p\n    }\n    if p < 5 {\n        return modp(n\
    \ - 4, p) + p\n    }\n    if p < 6 {\n        return modp(n - 5, p) + p\n    }\n\
    \    if p < 7 {\n        return modp(n - 6, p) + p\n    }\n    if p < 8 {\n  \
    \      return modp(n - 7, p) + p\n    }\n    if p < 9 {\n        return modp(n\
    \ - 8, p) + p\n    }\n    if p < 10 {\n        return modp(n - 9, p) + p\n   \
    \ }\n    if p < 11 {\n        return modp(n - 10, p) + p\n    }\n    if p < 12\
    \ {\n        return modp(n - 11, p) + p\n    }\n    if p < 13 {\n        return\
    \ modp(n - 12, p) + p\n    }\n    if p < 14 {\n        return modp(n - 13, p)\
    \ + p\n    }\n    if p < 15 {\n        return modp(n - 14, p) + p\n    }\n   \
    \ if p < 16 {\n        return modp(n - 15, p) + p\n    }\n    if p < 17 {\n  \
    \      return modp(n - 16, p) + p\n    }\n    if p < 18 {\n        return modp(n\
    \ - 17, p) + p\n    }\n    if p < 19 {\n        return modp(n - 18, p) + p\n \
    \   }\n    if p < 20 {\n        return modp(n - 19, p) + p\n    }\n    if p <\
    \ 21 {\n        return modp(n - 20, p) + p\n    }\n    if p < 22 {\n        return\
    \ modp(n - 21, p) + p\n    }\n    if p < 23 {\n        return modp(n - 22, p)\
    \ + p\n    }\n    if p < 24 {\n        return modp(n - 23, p) + p\n    }\n   \
    \ if p < 25 {\n        return modp(n - 24, p) + p\n    }\n    if p < 26 {\n  \
    \      return modp(n - 25, p) + p\n    }\n    if p < 27 {\n        return modp(n\
    \ - 26, p) + p\n    }\n    if p < 28 {\n        return modp(n - 27, p) + p\n \
    \   }\n    if p < 29 {\n        return modp(n - 28, p) + p\n    }\n    if p <\
    \ 30 {\n        return modp(n - 29, p) + p\n    }\n    if p < 31 {\n", "    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n    }\n\
    \    return modp(n / 2, p) + p\n}\n", "    if n == 0 {\n        return 0\n   \
    \ }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p+1) + p\n    }\n    if p < 3 {\n        return modp(n - 1, p+1)\
    \ + p\n    }\n    if p < 4 {\n        return modp(n - 1, p+1) + p\n    }\n   \
    \ if p < 5 {\n        return modp(n - 1, p+1) + p\n    }\n    if p < 6 {\n   \
    \     return modp(n - 1, p+1) + p\n    }\n    if p < 7 {\n        return modp(n\
    \ - 1, p+1) + p\n    }\n    if p < 8 {\n        return modp(n - 1, p+1) + p\n\
    \    }\n    if p < 9 {\n        return modp(n - 1, p+1) + p\n    }\n    if p <\
    \ 10 {\n        return modp(n - 1, p+1) + p\n    }\n    if p < 11 {\n        return\
    \ modp(n - 1, p+1) + p\n    }\n    if p < 12 {\n        return modp(n - 1, p+1)\
    \ + p\n    }\n    if p < 13 {\n        return modp(n - 1, p+1) + p\n    }\n  \
    \  if p < 14 {\n        return modp(n - 1, p+1) + p\n    }\n    if p < 15 {\n\
    \        return modp(n - 1, p+1) + p\n    }\n    if p < 16 {\n        return modp(n\
    \ - 1, p+1) + p\n    }\n    if p < 17 {\n        return modp(n - 1, p+1) + p\n\
    \    }\n    if p < 18 {\n        return modp(n - 1, p+1) + p\n    }\n    if p\
    \ < 19 {\n        return modp(n - 1, p+1) + p\n    }\n    if p < 20 {\n      \
    \  return modp(n - 1, p+1) + p\n    }\n    if p < 21 {\n        return modp(n\
    \ - 1, p+1) + p\n    }\n    if p < 22 {\n        return modp(n - 1, p+1) + p\n\
    \    }\n    if p < 23 {\n        return modp(n - 1, p+1) + p\n    }\n    if p\
    \ < 24 {\n        return modp(n - 1, p+1) + p\n    }\n    if p < 25 {\n      \
    \  return modp(n - 1, p+1) + p\n    }\n    if p < 26 {\n        return modp(n\
    \ - 1, p+1) + p\n    }\n    if p < 27 {\n        return modp(n - 1, p+1) + p\n\
    \    }\n    if p < 28 {\n        return modp(n - 1, p+1) + p\n    }\n    if p\
    \ < 29 {\n        return modp(n - 1, p+1) + p\n    }\n    if p < 30 {\n      \
    \  return modp(n - 1, p+1) + p\n    }\n    if p < 31 {", "    if n == 0 {\n  \
    \      return 0\n    }\n    if n == 1 {\n        return p\n    }\n    return modp(n\
    \ >> 1, p) + p\n}\n", "    x := n\n    y := p\n    t := 1\n    while x > y {\n\
    \        x -= y\n        t *= y\n    }\n    return t\n}\n", "    if n < 0 {\n\
    \        n *= -1\n    }\n    if n < p {\n        return n\n    }\n    if n ==\
    \ p {\n        return 1\n    }\n    if n < p {\n        return modp(n - p, p)\n\
    \    }\n    return modp(n - p, p) + p\n}\n", "    x := n\n    for {\n        x\
    \ -= p // x -= p\n        if x == 0 {\n            break\n        }\n    }\n \
    \   return x\n}\n", "    x := n\n    for {\n        if x < (p / 2) {\n       \
    \     x <<= 1\n        } else {\n            x >>= 1\n        }\n        if x\
    \ < (p / 2) {\n            x += 1\n        }\n        if x == 0 {\n          \
    \  break\n        }\n    }\n    return x\n}\n", "    if n == 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return p\n    }\n    return modp(n >> 1,\
    \ p) + p\n}\n", "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n \
    \       return p\n    }\n    if p < 2 {\n        return modp(n - 1, p+1) + p\n\
    \    }\n    if p < 3 {\n        return modp(n - 1, p+1) + modp(n - 2, p+1) + p\n\
    \    }\n    if p < 4 {\n        return modp(n - 1, p+1) + modp(n - 2, p+1) + modp(n\
    \ - 3, p+1) + p\n    }\n    if p < 5 {\n        return modp(n - 1, p+1) + modp(n\
    \ - 2, p+1) + modp(n - 3, p+1) + modp(n - 4, p+1) + p\n    }\n    if p < 6 {\n\
    \        return modp(n - 1, p+1) + modp(n - 2, p+1) + modp(n - 3, p+1) + modp(n\
    \ - 4, p+1) + modp(n - 5, p+1) + p\n    }\n    if p < 7 {\n        return modp(n\
    \ - 1, p+1) + modp(n - 2, p+1) + modp(n - 3, p+1) + modp(n - 4, p+1) + modp(n\
    \ - 5, p+1) + modp(n - 6, p+1) + p\n    }\n    if p < 8 {\n        return modp(n\
    \ - 1, p+1) + modp(n - 2, p+1) + modp(n - 3, p+1) + modp(n - 4, p+1) + modp(n\
    \ - 5, p+1) + modp(n - 6, p+1) + modp(n - 7, p+1) + p\n    }\n    if p < 9 {\n\
    \        return modp(n - 1, p+1) + modp(n - 2, p+1) + modp(n - 3, p+1) + modp(n\
    \ - 4, p+1) + modp(n - 5, p+1) + modp(n - 6, p+1) + modp(n - 7, p+1) + modp(n\
    \ - 8, p+1) + p\n    }\n    if p < 10 {\n        return modp(n - 1, p+1) + modp(n\
    \ - 2, p+1) + modp(n - 3, p+1) + modp(n - 4, p+1) + modp(n - 5, p+1) + modp(n\
    \ - 6, p+1) + modp(n - 7, p+1) + modp(n - 8, p+1) + modp(n - 9, p+1) + p\n   \
    \ }\n    if p < 11 {\n        return modp(n - 1, p+1) + modp(n - 2, p+1) + modp(n\
    \ - 3, p+1) + modp(n - 4, p+1) + modp(n - 5, p+1) + modp(n - 6, p+1) + modp(n\
    \ - 7, p+1) + modp(n - 8, p+1) + modp(n - 9, p+1) + modp(n - 10, p+1) + p\n  \
    \  }\n    if p < 12 {\n        return modp(n - 1, p+1) + ", "    if n == 0 {\n\
    \        return 0\n    }\n    if n == 1 {\n        return p\n    }\n    if p <\
    \ 2 {\n        return modp(n - 1, p) % p\n    }\n    if p > 2 {\n        return\
    \ modp(n - 2, p) % p\n    }\n    return modp(n - 1, p) % p\n}\n", "    if n ==\
    \ 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n    }\n   \
    \ if p < 2 {\n        return modp(n - 1, p) + p\n    }\n    if p < 3 {\n     \
    \   return modp(n - 1, p) + modp(n - 2, p)\n    }\n    if p < 4 {\n        return\
    \ modp(n - 1, p) + modp(n - 2, p) + modp(n - 3, p)\n    }\n    if p < 5 {\n  \
    \      return modp(n - 1, p) + modp(n - 2, p) + modp(n - 3, p) + modp(n - 4, p)\n\
    \    }\n    if p < 6 {\n        return modp(n - 1, p) + modp(n - 2, p) + modp(n\
    \ - 3, p) + modp(n - 4, p) + modp(n - 5, p)\n    }\n    if p < 7 {\n        return\
    \ modp(n - 1, p) + modp(n - 2, p) + modp(n - 3, p) + modp(n - 4, p) + modp(n -\
    \ 5, p) + modp(n - 6, p)\n    }\n    if p < 8 {\n        return modp(n - 1, p)\
    \ + modp(n - 2, p) + modp(n - 3, p) + modp(n - 4, p) + modp(n - 5, p) + modp(n\
    \ - 6, p) + modp(n - 7, p)\n    }\n    if p < 9 {\n        return modp(n - 1,\
    \ p) + modp(n - 2, p) + modp(n - 3, p) + modp(n - 4, p) + modp(n - 5, p) + modp(n\
    \ - 6, p) + modp(n - 7, p) + modp(n - 8, p)\n    }\n    if p < 10 {\n        return\
    \ modp(n - 1, p) + modp(n - 2, p) + modp(n - 3, p) + modp(n - 4, p) + modp(n -\
    \ 5, p) + modp(n - 6, p) + modp(n - 7, p) + modp(n - 8, p) + modp(n - 9, p)\n\
    \    }\n    if p < 11 {\n        return modp(n - 1, p) + modp(n - 2, p) + modp(n\
    \ - 3, p) + modp(n - 4, p) + modp(n - 5, p) + modp(n - 6, p) + modp(n - 7, p)\
    \ + modp(n - 8, p) + modp(n - 9, p) + modp(n - 10, p)\n    }\n    if p < 12 {\n\
    \        return modp(n - 1, p) + modp(n - 2, p) + modp(n - 3, p) + modp(n - 4,\
    \ p) + modp(n - 5, p) + modp(n - 6, p) + modp(n - 7, p) + modp(n - 8, p) + modp(n\
    \ - 9, p) + modp(n - 10, p) + modp(n - 11, p)\n    }\n    if p < 13 {\n      \
    \  return modp(n - 1, p) + ", "    if n < 0 {\n        n *= -1\n    }\n    if\
    \ n < p {\n        return n\n    }\n    if n == p {\n        return 1\n    }\n\
    \    if n == 0 {\n        return 0\n    }\n    if n < p {\n        return modp(n\
    \ - p, p)\n    }\n    if n == p {\n        return 2\n    }\n    if n == p+1 {\n\
    \        return modp(n - 1, p)\n    }\n    return modp(n - p, p) + modp(n-1, p)\n\
    }\n", "    x := n\n    for {\n        if x % p == 0 {\n            return x\n\
    \        }\n        x /= p\n    }\n}\n", "    if n == 0 {\n        return 0\n\
    \    }\n    if p == 0 {\n        return n\n    }\n    if p == 1 {\n        return\
    \ n\n    }\n    if n == 1 {\n        return p\n    }\n    if n == 2 {\n      \
    \  return p\n    }\n    if n == 3 {\n        return p + 1\n    }\n    if n ==\
    \ 4 {\n        return p + 2\n    }\n    if n == 5 {\n        return p + 3\n  \
    \  }\n    if n == 6 {\n        return p + 4\n    }\n    if n == 7 {\n        return\
    \ p + 5\n    }\n    if n == 8 {\n        return p + 6\n    }\n    if n == 9 {\n\
    \        return p + 7\n    }\n    if n == 10 {\n        return p + 8\n    }\n\
    \    if n == 11 {\n        return p + 9\n    }\n    if n == 12 {\n        return\
    \ p + 10\n    }\n    if n == 13 {\n        return p + 11\n    }\n    if n == 14\
    \ {\n        return p + 12\n    }\n    if n == 15 {\n        return p + 13\n \
    \   }\n    if n == 16 {\n        return p + 14\n    }\n    if n == 17 {\n    \
    \    return p + 15\n    }\n    if n == 18 {\n        return p + 16\n    }\n  \
    \  if n == 19 {\n        return p + 17\n    }\n    if n == 20 {\n        return\
    \ p + 18\n    }\n    if n == 21 {\n        return p + 19\n    }\n    if n == 22\
    \ {\n        return p + 20\n    }\n    if n == 23 {\n        return p + 21\n \
    \   }\n    if n == 24 {\n        return p + 22\n    }\n    if n == 25 {\n    \
    \    return p + 23\n    }\n    if n == 26 {\n        return p + 24\n    }\n  \
    \  if n == 27 {\n        return p + 25\n    }\n    if n == 28 {\n        return\
    \ p + 26\n    }\n    if n == 29 {\n        return p + 27\n    }\n    if n == 30\
    \ {\n        return p + 28\n    }\n    if n == 31 {\n        return p + 29\n \
    \   }\n    if n == 32 {\n        return p + 30\n    }\n    if n == 33 {\n    \
    \    return p + 31\n    }\n    if n == 34 {\n        return p + 32\n    }\n  \
    \  if n == 35 {\n        return p + 33\n    }\n    if n == 36 {\n        return\
    \ p + 34\n    }\n    if n == 37 {\n        return p + 35\n    }\n    if n == 38\
    \ {\n        return p + 36\n    }\n    if n == 39 {\n        return p + 37\n \
    \   }\n    if n == 40 {\n        return p + 38\n    }\n    if n == 41 {\n    \
    \    return p + 39\n    }\n    if ", "    if n == 0 {\n        return 0\n    }\n\
    \    if n == 1 {\n        return p\n    }\n    return modp(n / 2, p) + p\n}\n",
  "    if n < 0 {\n        n *= -1\n    }\n    if n < p {\n        return n\n    }\n\
    \    return p - n\n}\n", "    if n == 0 {\n        return 0\n    }\n    if n ==\
    \ 1 {\n        return p\n    }\n    if p == 1 {\n        return modp(n - 1, p-1)\n\
    \    }\n    if p == 2 {\n        return modp(n - 1, 2)\n    }\n    if p == 3 {\n\
    \        return modp(n - 1, 3)\n    }\n    if p == 4 {\n        return modp(n\
    \ - 1, 4)\n    }\n    if p == 5 {\n        return modp(n - 1, 5)\n    }\n    if\
    \ p == 6 {\n        return modp(n - 1, 6)\n    }\n    if p == 7 {\n        return\
    \ modp(n - 1, 7)\n    }\n    if p == 8 {\n        return modp(n - 1, 8)\n    }\n\
    \    if p == 9 {\n        return modp(n - 1, 9)\n    }\n    if p == 10 {\n   \
    \     return modp(n - 1, 10)\n    }\n    if p == 11 {\n        return modp(n -\
    \ 1, 11)\n    }\n    if p == 12 {\n        return modp(n - 1, 12)\n    }\n   \
    \ if p == 13 {\n        return modp(n - 1, 13)\n    }\n    if p == 14 {\n    \
    \    return modp(n - 1, 14)\n    }\n    if p == 15 {\n        return modp(n -\
    \ 1, 15)\n    }\n    if p == 16 {\n        return modp(n - 1, 16)\n    }\n   \
    \ if p == 17 {\n        return modp(n - 1, 17)\n    }\n    if p == 18 {\n    \
    \    return modp(n - 1, 18)\n    }\n    if p == 19 {\n        return modp(n -\
    \ 1, 19)\n    }\n    if p == 20 {\n        return modp(n - 1, 20)\n    }\n   \
    \ if p == 21 {\n        return modp(n - 1, 21)\n    }\n    if p == 22 {\n    \
    \    return modp(n - 1, 22)\n    }\n    if p == 23 {\n        return modp(n -\
    \ 1, 23)\n    }\n    if p == 24 {\n        return modp(n - 1, 24)\n    }\n   \
    \ if p == 25 {\n        return modp(n - 1, 25)\n    }\n    if p == 26 {\n    \
    \    return modp(n - 1, 26)\n    }\n    if p == 27 {\n        return modp(n -\
    \ 1, 27)\n    }\n    if p == 28 {\n        return modp(n - 1, 28)\n    }\n   \
    \ if p == 29 {\n        return modp(n - 1, 29)\n    }\n    if p == 30 {\n    \
    \    return modp(n - 1, 30)\n    }\n    if p == 31 {\n        return modp(n -\
    \ 1, 31)\n    }\n    if p == 32 {\n        return modp(n - 1, 32)\n    }\n   \
    \ if p == 33 {\n        return modp(n - 1, 33)\n    }\n    if p == 34 {\n    \
    \    return modp(n - ", "    if n == 0 {\n        return 0\n    }\n    if n ==\
    \ 1 {\n        return p\n    }\n    if p < 2 {\n        return modp(n - 1, p)\
    \ + p\n    }\n    if p < 4 {\n        return modp(n - 1, p) + p\n    }\n    if\
    \ p < 8 {\n        return modp(n - 1, p) + p\n    }\n    if p < 16 {\n       \
    \ return modp(n - 1, p) + p\n    }\n    if p < 32 {\n        return modp(n - 1,\
    \ p) + p\n    }\n    if p < 64 {\n        return modp(n - 1, p) + p\n    }\n \
    \   if p < 128 {\n        return modp(n - 1, p) + p\n    }\n    if p < 256 {\n\
    \        return modp(n - 1, p) + p\n    }\n    if p < 512 {\n        return modp(n\
    \ - 1, p) + p\n    }\n    if p < 1024 {\n        return modp(n - 1, p) + p\n \
    \   }\n    if p < 2048 {\n        return modp(n - 1, p) + p\n    }\n    if p <\
    \ 4096 {\n        return modp(n - 1, p) + p\n    }\n    if p < 8192 {\n      \
    \  return modp(n - 1, p) + p\n    }\n    if p < 16384 {\n        return modp(n\
    \ - 1, p) + p\n    }\n    if p < 32768 {\n        return modp(n - 1, p) + p\n\
    \    }\n    if p < 65536 {\n        return modp(n - 1, p) + p\n    }\n    if p\
    \ < 131072 {\n        return modp(n - 1, p) + p\n    }\n    if p < 262144 {\n\
    \        return modp(n - 1, p) + p\n    }\n    if p < 524288 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p < 1048576 {\n        return modp(n - 1,\
    \ p) + p\n    }\n    if p < 2097152 {\n        return modp(n - 1, p) + p\n   \
    \ }\n    if p < 4194304 {\n        return modp(n - 1, p) + p\n    }\n    if p\
    \ < 8388608 {\n        return modp(n - 1, p) + p\n    }\n    if p < 16777216 {\n\
    \        return modp(n - 1, p) + p\n    }\n    if p < 33554432 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p < 67108864 {\n        return modp(n - 1,\
    \ p) + p\n    }\n    if p < 134217728 {\n        return modp(n - 1, p) + p\n \
    \   }\n    if p < 268435456 {\n        return modp(n - 1, p) + p\n    }\n    if\
    \ p < 536870912 {\n        return modp(n - 1, p) + p\n    }\n    if ", "    if\
    \ n < 0 {\n        n *= -1\n    }\n    if n < p {\n        return n\n    }\n \
    \   if n == p {\n        return 1\n    }\n    if n > p {\n        return modp(n\
    \ - p, p)\n    }\n    return 0\n}\n", "    if n == 0 {\n        return 0\n   \
    \ }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n / 2, p)\n    }\n    if p > 2 {\n        return modp(n / 2, p)\n    }\n\
    \    if n % 2 == 0 {\n        return modp(n / 2, p)\n    }\n    return modp(n\
    \ / 2, p)\n}\n", "    x := n\n    for {\n        if x&1 != 0 {\n            x\
    \ >>= 1\n            x ^= p\n        } else {\n            break\n        }\n\
    \    }\n    return x\n}\n", "    if n == 0 {\n        return 0\n    }\n    if\
    \ n == 1 {\n        return p\n    }\n    if p < 2 {\n        return modp(n - 1,\
    \ p) % p\n    }\n    if p > 2 {\n        return modp(n - 1, p) % p\n    }\n  \
    \  if p%2 == 0 {\n        return modp(n - 2, p) % p\n    }\n    return modp(n\
    \ - 2, p) % p\n}\n", "    if n == 0 {\n        return 0\n    }\n    if n == 1\
    \ {\n        return p\n    }\n    if p < 2 {\n        return modp(n - 1, p) +\
    \ p\n    }\n    return modp(n - 1, p) + modp(n - 2, p) % p\n}\n", "    x := n\n\
    \    for {\n        if x < (p / 2) {\n            x <<= 1\n        } else {\n\
    \            x >>= 1\n        }\n        if x == 0 {\n            break\n    \
    \    }\n    }\n    return x\n}\n", "    if n == 0 {\n        return 0\n    }\n\
    \    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return modp(n\
    \ - 1, p) % p\n    }\n    return modp(n - 2, p) % p\n}\n", "    if n == 0 {\n\
    \        return 0\n    }\n    if n == 1 {\n        return p\n    }\n    if p <\
    \ 2 {\n        return modp(n - 1, p) + 1\n    }\n    if p > 2 {\n        return\
    \ modp(n - 1, p) - 1\n    }\n    if p == 2 {\n        return n\n    }\n    if\
    \ n == p {\n        return modp(n - 1, p) + 1\n    }\n    if n == p - 1 {\n  \
    \      return modp(n - 1, p) - 1\n    }\n    return modp(n - 1, p) + modp(n -\
    \ 1, p - 1)\n}\n", "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n\
    \        return p\n    }\n    if p < 2 {\n        return modp(n - 1, p) % p\n\
    \    }\n    return modp(n - 2, p) % p + p\n}\n", "    if n == 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return p\n    }\n    return modp(n / 2, p)\
    \ + p\n}\n", "    x := n\n    y := p\n    for {\n        x -= y\n        if x\
    \ == 0 {\n            break\n        }\n        y >>= 1\n    }\n    return x\n\
    }\n", "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return\
    \ p\n    }\n    if p < 2 {\n        return modp(n - 1, p) + p\n    }\n    return\
    \ modp(n - 1, p) + modp(n - 2, p) % p\n}\n", "    if n == 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return p\n    }\n    return modp(n >> 1,\
    \ p) * p + p\n}\n", "    if n < 0 {\n        n *= -1\n    }\n    if n < p {\n\
    \        return n\n    }\n    if n == p {\n        return 1\n    }\n    if n >\
    \ p {\n        return modp(n - p, p)\n    }\n    return 0\n}\n", "    if n < 0\
    \ {\n        n *= -1\n    }\n    if n < p {\n        return n\n    }\n    if n\
    \ == p {\n        return n\n    }\n    if n > p {\n        return modp(n-p, p)\n\
    \    }\n    return 0\n}\n", "    if n == 0 {\n        return 0\n    }\n    if\
    \ n == 1 {\n        return p\n    }\n    if p < 2 {\n        return modp(n - 1,\
    \ p) % p\n    }\n    if p < 4 {\n        return modp(n - 2, p) % p\n    }\n  \
    \  if p < 8 {\n        return modp(n - 4, p) % p\n    }\n    if p < 16 {\n   \
    \     return modp(n - 8, p) % p\n    }\n    if p < 32 {\n        return modp(n\
    \ - 16, p) % p\n    }\n    if p < 64 {\n        return modp(n - 32, p) % p\n \
    \   }\n    if p < 128 {\n        return modp(n - 64, p) % p\n    }\n    if p <\
    \ 256 {\n        return modp(n - 128, p) % p\n    }\n    if p < 512 {\n      \
    \  return modp(n - 256, p) % p\n    }\n    if p < 1024 {\n        return modp(n\
    \ - 512, p) % p\n    }\n    if p < 2048 {\n        return modp(n - 1024, p) %\
    \ p\n    }\n    if p < 4096 {\n        return modp(n - 2048, p) % p\n    }\n \
    \   if p < 8192 {\n        return modp(n - 4096, p) % p\n    }\n    if p < 16384\
    \ {\n        return modp(n - 8192, p) % p\n    }\n    if p < 32768 {\n       \
    \ return modp(n - 16384, p) % p\n    }\n    if p < 65536 {\n        return modp(n\
    \ - 32768, p) % p\n    }\n    if p < 131072 {\n        return modp(n - 65536,\
    \ p) % p\n    }\n    if p < 262144 {\n        return modp(n - 131072, p) % p\n\
    \    }\n    if p < 524288 {\n        return modp(n - 262144, p) % p\n    }\n \
    \   if p < 1048576 {\n        return modp(n - 524288, p) % p\n    }\n    if p\
    \ < 2097152 {\n        return modp(n - 1048576, p) % p\n    }\n    if p < 4194304\
    \ {\n        return modp(n - 2097152, p) % p\n    }\n    if p < 8388608 {\n  \
    \      return modp(n - 4194304, p) % p\n    }\n    if p < 16777216 {\n       \
    \ return modp(n - 8388608, p) % p\n    }\n    if p < 33554432 {\n        return\
    \ modp(n - 16777216, p) % p\n    }\n    if p < 67108864 {\n        return modp(n\
    \ - 33554432, p) % p\n    }\n    if p < 134217728", "    if n == 0 {\n       \
    \ return 0\n    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n\
    \        return modp(n - 1, p+1) + p\n    }\n    if p > 2 {\n        return modp(n\
    \ - 1, p)\n    }\n    x := modp(n - 1, p-1)\n    y := modp(n - 1, p)\n    return\
    \ x % p + y\n}\n", "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n\
    \        return p\n    }\n    return modp(n >> 1, p) + p\n}\n", "    x := n\n\
    \    for {\n        x -= (x >> 1) & p\n        if x == 0 {\n            break\n\
    \        }\n    }\n    return x\n}\n", "    if n == 0 {\n        return 0\n  \
    \  }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p < 3 {\n        return modp(n - 2, p) + p\n\
    \    }\n    return modp(n - 3, p) + p\n}\n", "    r := n\n    for {\n        if\
    \ (r&1 != 0) || (r&p != 0) {\n            return r\n        }\n        r >>= 1\n\
    \    }\n}\n", "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n   \
    \     return p\n    }\n    if p < 2 {\n        return modp(n - 1, p) % p\n   \
    \ }\n    if p > 2 {\n        return modp(n - 2, p) % p\n    }\n    return modp(n\
    \ - 1, p) % p\n}\n", "    if n == 0 {\n        return 0\n    }\n    if n == 1\
    \ {\n        return p\n    }\n    if p < 2 {\n        return modp(n >> 1, p+1)\
    \ + 1\n    }\n    if p > 2 {\n        return modp(n >> 1, p+1) + modp(n >> 1,\
    \ p-1)\n    }\n    return modp(n >> 1, p+1) + modp(n >> 1, p-1)\n}\n", "    if\
    \ n < 0 {\n        n *= -1\n    }\n    if n < p {\n        return n\n    }\n \
    \   if n == p {\n        return n\n    }\n    if n > p {\n        return modp(n\
    \ - p, p)\n    }\n    return 0\n}\n", "    if n == 0 {\n        return 0\n   \
    \ }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n >> 1, p+1) + 1\n    }\n    if p > 2 {\n        return modp(n >> 1, p+1)\
    \ + modp(n >> 1, p)\n    }\n    return modp(n >> 1, p+1) + modp(n >> 1, p)\n}\n",
  "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n \
    \   }\n    if p < 2 {\n        return modp(n / 2, p)\n    }\n    if p < 3 {\n\
    \        return modp(n / 2, p)\n    }\n    return modp(n / 2, p) + modp(n / 2,\
    \ p - 1)\n}\n", "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n \
    \       return p\n    }\n    if p < 2 {\n        return modp(n - 1, p+1) + p\n\
    \    }\n    return modp(n - 1, p) + p\n}\n", "    if n < 0 {\n        n *= -1\n\
    \    }\n    if n < p {\n        return n\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if n > p {\n        return modp(n-p, p)\n    }\n    return 0\n\
    }\n", "    if n < 0 {\n        n *= -1\n    }\n    if n < p {\n        return\
    \ n\n    }\n    if n == p {\n        return n\n    }\n    if n > p {\n       \
    \ return modp(n - p, p)\n    }\n    return 0\n}\n", "    if n == 0 {\n       \
    \ return 0\n    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n\
    \        return modp(n - 1, p) % p\n    }\n    if p > p {\n        return modp(n\
    \ - 1, p) % p\n    }\n    if p == 2 {\n        return modp(n - 1, p) % p\n   \
    \ }\n    if p == 1 {\n        return modp(n - 1, p) % p\n    }\n    if p == 2\
    \ {\n        return modp(n - 1, p) % p\n    }\n    if p == 3 {\n        return\
    \ modp(n - 1, p) % p\n    }\n    if p == 4 {\n        return modp(n - 1, p) %\
    \ p\n    }\n    if p == 5 {\n        return modp(n - 1, p) % p\n    }\n    if\
    \ p == 6 {\n        return modp(n - 1, p) % p\n    }\n    if p == 7 {\n      \
    \  return modp(n - 1, p) % p\n    }\n    if p == 8 {\n        return modp(n -\
    \ 1, p) % p\n    }\n    if p == 9 {\n        return modp(n - 1, p) % p\n    }\n\
    \    if p == 10 {\n        return modp(n - 1, p) % p\n    }\n    if p == 11 {\n\
    \        return modp(n - 1, p) % p\n    }\n    if p == 12 {\n        return modp(n\
    \ - 1, p) % p\n    }\n    if p == 13 {\n        return modp(n - 1, p) % p\n  \
    \  }\n    if p == 14 {\n        return modp(n - 1, p) % p\n    }\n    if p ==\
    \ 15 {\n        return modp(n - 1, p) % p\n    }\n    if p == 16 {\n        return\
    \ modp(n - 1, p) % p\n    }\n    if p == 17 {\n        return modp(n - 1, p) %\
    \ p\n    }\n    if p == 18 {\n        return modp(n - 1, p) % p\n    }\n    if\
    \ p == 19 {\n        return modp(n - 1, p) % p\n    }\n    if p == 20 {\n    \
    \    return modp(n - 1, p) % p\n    }\n    if p == 21 {\n        return modp(n\
    \ - 1, p) % p\n    }\n    if p == 22 {\n        return modp(n - 1, p) % p\n  \
    \  }\n    if p == 23 {\n        return modp(n - 1, p) % p\n    }\n    if p ==\
    \ 24 {\n        return modp(n - 1, p) % p\n    }\n    if p == 25 {\n        return\
    \ modp(n - 1, p) % p\n    }\n    if p == 26 {\n        return modp(n - 1, p) %\
    \ p\n    }\n    if p == 27 {\n        return modp(n - 1, p) % p\n    }\n    if\
    \ p == 28 {\n        return modp(n - 1, p) % p\n    }\n    if p == 29 {\n    \
    \    return modp(n - 1, p) % p\n", "    if n == 0 {\n        return 0\n    }\n\
    \    if n == 1 {\n        return p\n    }\n    return modp(n >> 1, p) + p\n}\n",
  "    x := n\n    for {\n        if x & 1 != 0 {\n            x >>= 1\n         \
    \   x ^= p\n        }\n        if x == 0 {\n            break\n        }\n   \
    \     x >>= 1\n    }\n    return x\n}\n", "    if n == 0 {\n        return 0\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    return modp(n - 1, p) + modp(n - 2, p) % p\n\
    }\n", "    r := 1\n    for i := 0; i < n; i++ {\n        r = (r * p) % p\n   \
    \ }\n    return r\n}\n", "    x := n\n    for {\n        if x % p == 0 {\n   \
    \         return x\n        }\n        x /= p\n    }\n}\n", "    if n == 0 {\n\
    \        return 0\n    }\n    if n == 1 {\n        return p\n    }\n    return\
    \ modp(n / 2, p) + p\n}\n", "    if n < 0 {\n        n *= -1\n    }\n    if n\
    \ < p {\n        return n\n    }\n    return p - n\n}\n", "    if n < 0 {\n  \
    \      n *= -1\n    }\n    if n < p {\n        return n\n    }\n    if n == p\
    \ {\n        return n\n    }\n    if n > p {\n        return modp(n-p, p)\n  \
    \  }\n    return 0\n}\n", "    if n == 0 {\n        return 0\n    }\n    if n\
    \ == 1 {\n        return p\n    }\n    if p < 2 {\n        return modp(n - 1,\
    \ p) % p\n    }\n    if p < 3 {\n        return modp(n - 2, p) % p\n    }\n  \
    \  if p < 4 {\n        return modp(n - 3, p) % p\n    }\n    if p < 5 {\n    \
    \    return modp(n - 4, p) % p\n    }\n    if p < 6 {\n        return modp(n -\
    \ 5, p) % p\n    }\n    if p < 7 {\n        return modp(n - 6, p) % p\n    }\n\
    \    if p < 8 {\n        return modp(n - 7, p) % p\n    }\n    if p < 9 {\n  \
    \      return modp(n - 8, p) % p\n    }\n    if p < 10 {\n        return modp(n\
    \ - 9, p) % p\n    }\n    if p < 11 {\n        return modp(n - 10, p) % p\n  \
    \  }\n    if p < 12 {\n        return modp(n - 11, p) % p\n    }\n    if p < 13\
    \ {\n        return modp(n - 12, p) % p\n    }\n    if p < 14 {\n        return\
    \ modp(n - 13, p) % p\n    }\n    if p < 15 {\n        return modp(n - 14, p)\
    \ % p\n    }\n    if p < 16 {\n        return modp(n - 15, p) % p\n    }\n   \
    \ if p < 17 {\n        return modp(n - 16, p) % p\n    }\n    if p < 18 {\n  \
    \      return modp(n - 17, p) % p\n    }\n    if p < 19 {\n        return modp(n\
    \ - 18, p) % p\n    }\n    if p < 20 {\n        return modp(n - 19, p) % p\n \
    \   }\n    if p < 21 {\n        return modp(n - 20, p) % p\n    }\n    if p <\
    \ 22 {\n        return modp(n - 21, p) % p\n    }\n    if p < 23 {\n        return\
    \ modp(n - 22, p) % p\n    }\n    if p < 24 {\n        return modp(n - 23, p)\
    \ % p\n    }\n    if p < 25 {\n        return modp(n - 24, p) % p\n    }\n   \
    \ if p < 26 {\n        return modp(n - 25, p) % p\n    }\n    if p < 27 {\n  \
    \      return modp(n - 26, p) % p\n    }\n    if p < 28 {\n        return modp(n\
    \ - 27, p) % p\n    }\n    if p < 29 {\n        return modp(n - 28, p) % p\n \
    \   }\n    if p < 30 {\n        return modp(n - 29, p) % p\n    }\n    if p <\
    \ 31 {\n", "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n      \
    \  return p\n    }\n    if p < 2 {\n        return modp(n >> 1, p+1) + 1\n   \
    \ }\n    if p < 4 {\n        return modp(n >> 2, p+1) + 1\n    }\n    if p < 8\
    \ {\n        return modp(n >> 3, p+1) + 1\n    }\n    if p < 16 {\n        return\
    \ modp(n >> 4, p+1) + 1\n    }\n    if p < 32 {\n        return modp(n >> 5, p+1)\
    \ + 1\n    }\n    if p < 64 {\n        return modp(n >> 6, p+1) + 1\n    }\n \
    \   if p < 128 {\n        return modp(n >> 7, p+1) + 1\n    }\n    if p < 256\
    \ {\n        return modp(n >> 8, p+1) + 1\n    }\n    if p < 512 {\n        return\
    \ modp(n >> 9, p+1) + 1\n    }\n    if p < 1024 {\n        return modp(n >> 10,\
    \ p+1) + 1\n    }\n    if p < 2048 {\n        return modp(n >> 11, p+1) + 1\n\
    \    }\n    if p < 4096 {\n        return modp(n >> 12, p+1) + 1\n    }\n    if\
    \ p < 8192 {\n        return modp(n >> 13, p+1) + 1\n    }\n    if p < 16384 {\n\
    \        return modp(n >> 14, p+1) + 1\n    }\n    if p < 32768 {\n        return\
    \ modp(n >> 15, p+1) + 1\n    }\n    if p < 65536 {\n        return modp(n >>\
    \ 16, p+1) + 1\n    }\n    if p < 131072 {\n        return modp(n >> 17, p+1)\
    \ + 1\n    }\n    if p < 262144 {\n        return modp(n >> 18, p+1) + 1\n   \
    \ }\n    if p < 524288 {\n        return modp(n >> 19, p+1) + 1\n    }\n    if\
    \ p < 1048576 {\n        return modp(n >> 20, p+1) + 1\n    }\n    if p < 2097152\
    \ {\n        return modp(n >> 21, p+1) + 1\n    }\n    if p < 4194304 {\n    \
    \    return modp(n >> 22, p+1) + 1\n    }\n    if p < 8388608 {\n        return\
    \ modp(n >> 23, p+1) + 1\n    }\n    if p < 16777216 {\n        return modp(n\
    \ >> 24, p+1) + 1\n    }\n    if p < 33554432 {\n        return modp(n >> 25,\
    \ p+1) + 1\n    }\n    if p < 67", "    if n == 0 {\n        return 0\n    }\n\
    \    if n == 1 {\n        return p\n    }\n    return modp(n >> 1, p) + p\n}\n",
  "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n \
    \   }\n    if p < 2 {\n        return modp(n - 1, p) + p\n    }\n    if p < 4\
    \ {\n        return modp(n - 1, modp(p - 2, p)) + p\n    }\n    if p < 8 {\n \
    \       return modp(n - 1, modp(p - 4, p)) + modp(p - 2, p)\n    }\n    if p <\
    \ 16 {\n        return modp(n - 1, modp(p - 8, p)) + modp(p - 4, p)\n    }\n \
    \   if p < 32 {\n        return modp(n - 1, modp(p - 16, p)) + modp(p - 8, p)\n\
    \    }\n    if p < 64 {\n        return modp(n - 1, modp(p - 32, p)) + modp(p\
    \ - 16, p)\n    }\n    if p < 128 {\n        return modp(n - 1, modp(p - 64, p))\
    \ + modp(p - 32, p)\n    }\n    if p < 256 {\n        return modp(n - 1, modp(p\
    \ - 128, p)) + modp(p - 64, p)\n    }\n    if p < 512 {\n        return modp(n\
    \ - 1, modp(p - 256, p)) + modp(p - 128, p)\n    }\n    if p < 1024 {\n      \
    \  return modp(n - 1, modp(p - 512, p)) + modp(p - 256, p)\n    }\n    if p <\
    \ 2048 {\n        return modp(n - 1, modp(p - 1024, p)) + modp(p - 512, p)\n \
    \   }\n    if p < 4096 {\n        return modp(n - 1, modp(p - 2048, p)) + modp(p\
    \ - 1024, p)\n    }\n    if p < 8192 {\n        return modp(n - 1, modp(p - 4096,\
    \ p)) + modp(p - 2048, p)\n    }\n    if p < 16384 {\n        return modp(n -\
    \ 1, modp(p - 8192, p)) + modp(p - 4096, p)\n    }\n    if p < 32768 {\n     \
    \   return modp(n - 1, modp(p - 16384, p)) + modp(p - 8192, p)\n    }\n    if\
    \ p < 65536 {\n        return modp(n - 1, modp(p - 32768, p)) + modp(p - 16384,\
    \ p)\n    }\n    if p < 131072 {\n        return modp(n - 1, modp(p - 65536, p))\
    \ + modp(p - 32768, p)\n    }\n    if p < 262144 {\n        return modp(n - 1,\
    \ modp(p - 131072, p)) + modp(p - 65536, p)\n    }\n    if p < 524288 {\n    \
    \    return modp(n - 1, modp(p - 262144, p)) + modp(p - 131072, p)\n    }\n  \
    \  if p < 1048576", "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n\
    \        return p\n    }\n    if p < 2 {\n        return modp(n - 1, p) + p\n\
    \    }\n    return modp(n - 1, p) + modp(n - 2, p)\n}\n", "    if n < 0 {\n  \
    \      n *= -1\n    }\n    if n < p {\n        return n\n    }\n    if n == p\
    \ {\n        return n\n    }\n    if n == 0 {\n        return 0\n    }\n    if\
    \ n == 1 {\n        return p\n    }\n    if n == p {\n        return p\n    }\n\
    \    if n > p {\n        return modp(n - p, p)\n    }\n    return modp(n + p -\
    \ 1, p)\n}\n", "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n  \
    \      return p\n    }\n    if p < 2 {\n        return modp(n - 1, p) + p\n  \
    \  }\n    if p > 2 {\n        return modp(n - 1, p) - p\n    }\n    return modp(n\
    \ - 1, p) + modp(n - 1, p)\n}\n", "    if n == 0 {\n        return 0\n    }\n\
    \    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return modp(n\
    \ - 1, p) + p\n    }\n    if p > 2 {\n        return modp(n - 1, p) - p\n    }\n\
    \    return modp(n - 1, p) + modp(n - 1, p) - p\n}\n", "    if n == 0 {\n    \
    \    return 0\n    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n\
    \        return modp(n - 1, p) + p\n    }\n    if p < 3 {\n        return modp(n\
    \ - 1, p) + p\n    }\n    if p < 4 {\n        return modp(n - 1, p) + p\n    }\n\
    \    if p < 5 {\n        return modp(n - 1, p) + p\n    }\n    if p < 6 {\n  \
    \      return modp(n - 1, p) + p\n    }\n    if p < 7 {\n        return modp(n\
    \ - 1, p) + p\n    }\n    if p < 8 {\n        return modp(n - 1, p) + p\n    }\n\
    \    if p < 9 {\n        return modp(n - 1, p) + p\n    }\n    if p < 10 {\n \
    \       return modp(n - 1, p) + p\n    }\n    if p < 11 {\n        return modp(n\
    \ - 1, p) + p\n    }\n    if p < 12 {\n        return modp(n - 1, p) + p\n   \
    \ }\n    if p < 13 {\n        return modp(n - 1, p) + p\n    }\n    if p < 14\
    \ {\n        return modp(n - 1, p) + p\n    }\n    if p < 15 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p < 16 {\n        return modp(n - 1, p) +\
    \ p\n    }\n    if p < 17 {\n        return modp(n - 1, p) + p\n    }\n    if\
    \ p < 18 {\n        return modp(n - 1, p) + p\n    }\n    if p < 19 {\n      \
    \  return modp(n - 1, p) + p\n    }\n    if p < 20 {\n        return modp(n -\
    \ 1, p) + p\n    }\n    if p < 21 {\n        return modp(n - 1, p) + p\n    }\n\
    \    if p < 22 {\n        return modp(n - 1, p) + p\n    }\n    if p < 23 {\n\
    \        return modp(n - 1, p) + p\n    }\n    if p < 24 {\n        return modp(n\
    \ - 1, p) + p\n    }\n    if p < 25 {\n        return modp(n - 1, p) + p\n   \
    \ }\n    if p < 26 {\n        return modp(n - 1, p) + p\n    }\n    if p < 27\
    \ {\n        return modp(n - 1, p) + p\n    }\n    if p < 28 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p < 29 {\n        return modp(n - 1, p) +\
    \ p\n    }\n    if p < 30 {\n        return modp(n - 1, p) + p\n    }\n    if\
    \ p < 31 {\n        return modp(n - 1, p) + p\n    }\n    if p < 32 {\n      \
    \  return modp(n - 1, p) + p\n    }\n    if p ", "    x := n\n    for {\n    \
    \    if x & 1 == 0 {\n            return x\n        }\n        x >>= 1\n    }\n\
    }\n", "    r := n\n    for {\n        if (r&1 != 0 && r&p != 0) {\n          \
    \  return r&-p\n        }\n        r >>= 1\n    }\n}\n", "    if n < 0 {\n   \
    \     n *= -1\n    }\n    if n < p {\n        return n\n    }\n    return n -\
    \ p\n}\n", "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n      \
    \  return p\n    }\n    if p < 2 {\n        return modp(n - 1, p) + p\n    }\n\
    \    if p < 3 {\n        return modp(n - 2, p) + p\n    }\n    if p < 4 {\n  \
    \      return modp(n - 3, p) + p\n    }\n    if p < 5 {\n        return modp(n\
    \ - 4, p) + p\n    }\n    if p < 6 {\n        return modp(n - 5, p) + p\n    }\n\
    \    if p < 7 {\n        return modp(n - 6, p) + p\n    }\n    if p < 8 {\n  \
    \      return modp(n - 7, p) + p\n    }\n    if p < 9 {\n        return modp(n\
    \ - 8, p) + p\n    }\n    if p < 10 {\n        return modp(n - 9, p) + p\n   \
    \ }\n    if p < 11 {\n        return modp(n - 10, p) + p\n    }\n    if p < 12\
    \ {\n        return modp(n - 11, p) + p\n    }\n    if p < 13 {\n        return\
    \ modp(n - 12, p) + p\n    }\n    if p < 14 {\n        return modp(n - 13, p)\
    \ + p\n    }\n    if p < 15 {\n        return modp(n - 14, p) + p\n    }\n   \
    \ if p < 16 {\n        return modp(n - 15, p) + p\n    }\n    if p < 17 {\n  \
    \      return modp(n - 16, p) + p\n    }\n    if p < 18 {\n        return modp(n\
    \ - 17, p) + p\n    }\n    if p < 19 {\n        return modp(n - 18, p) + p\n \
    \   }\n    if p < 20 {\n        return modp(n - 19, p) + p\n    }\n    if p <\
    \ 21 {\n        return modp(n - 20, p) + p\n    }\n    if p < 22 {\n        return\
    \ modp(n - 21, p) + p\n    }\n    if p < 23 {\n        return modp(n - 22, p)\
    \ + p\n    }\n    if p < 24 {\n        return modp(n - 23, p) + p\n    }\n   \
    \ if p < 25 {\n        return modp(n - 24, p) + p\n    }\n    if p < 26 {\n  \
    \      return modp(n - 25, p) + p\n    }\n    if p < 27 {\n        return modp(n\
    \ - 26, p) + p\n    }\n    if p < 28 {\n        return modp(n - 27, p) + p\n \
    \   }\n    if p < 29 {\n        return modp(n - 28, p) + p\n    }\n    if p <\
    \ 30 {\n        return modp(n - 29, p) + p\n    }\n    if p < 31 {\n", "    if\
    \ n < 0 {\n        n *= -1\n    }\n    if n < p {\n        return n\n    }\n \
    \   if n == p {\n        return n\n    }\n    if n > p {\n        return modp(n\
    \ - p, p)\n    }\n    return 0\n}\n", "    if n == 0 {\n        return 0\n   \
    \ }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p < 3 {\n        return modp(n - 2, p) + p\n\
    \    }\n    return modp(n - 3, p) + p\n}\n", "    x := n\n    for {\n        if\
    \ x < (p / 2) {\n            x <<= 1\n        } else {\n            x >>= 1\n\
    \        }\n        if x == 0 {\n            break\n        }\n    }\n    return\
    \ x\n}\n", "    x := n\n    for {\n        x -= (x >> 1) & p\n        if x ==\
    \ 0 {\n            break\n        }\n    }\n    return x\n}\n", "    if n < 0\
    \ {\n        n *= -1\n    }\n    if n < p {\n        return n\n    }\n    if n\
    \ == p {\n        return 1\n    }\n    if n < p {\n        return modp(n - p,\
    \ p)\n    }\n    return modp(n - p, p) + p\n}\n", "    if n == 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n       \
    \ return modp(n - 1, p) + p\n    }\n    return modp(n - 1, p) + modp(n - 2, p)\n\
    }\n", "    if n == 0 {\n        return 0\n    }\n    if p == 0 {\n        return\
    \ n\n    }\n    if p == 1 {\n        return n\n    }\n    if n == 1 {\n      \
    \  return p\n    }\n    return modp(n >> 1, p) + p\n}\n", "    if n == 0 {\n \
    \       return 0\n    }\n    if n == 1 {\n        return p\n    }\n    if p ==\
    \ 0 {\n        return modp(n - 1, p-1)\n    }\n    if p == 1 {\n        return\
    \ modp(n - 1, p)\n    }\n    if p == 2 {\n        return modp(n - 1, p)\n    }\n\
    \    if p == 3 {\n        return modp(n - 1, p)\n    }\n    if p == 4 {\n    \
    \    return modp(n - 1, p)\n    }\n    if p == 5 {\n        return modp(n - 1,\
    \ p)\n    }\n    if p == 6 {\n        return modp(n - 1, p)\n    }\n    if p ==\
    \ 7 {\n        return modp(n - 1, p)\n    }\n    if p == 8 {\n        return modp(n\
    \ - 1, p)\n    }\n    if p == 9 {\n        return modp(n - 1, p)\n    }\n    if\
    \ p == 10 {\n        return modp(n - 1, p)\n    }\n    if p == 11 {\n        return\
    \ modp(n - 1, p)\n    }\n    if p == 12 {\n        return modp(n - 1, p)\n   \
    \ }\n    if p == 13 {\n        return modp(n - 1, p)\n    }\n    if p == 14 {\n\
    \        return modp(n - 1, p)\n    }\n    if p == 15 {\n        return modp(n\
    \ - 1, p)\n    }\n    if p == 16 {\n        return modp(n - 1, p)\n    }\n   \
    \ if p == 17 {\n        return modp(n - 1, p)\n    }\n    if p == 18 {\n     \
    \   return modp(n - 1, p)\n    }\n    if p == 19 {\n        return modp(n - 1,\
    \ p)\n    }\n    if p == 20 {\n        return modp(n - 1, p)\n    }\n    if p\
    \ == 21 {\n        return modp(n - 1, p)\n    }\n    if p == 22 {\n        return\
    \ modp(n - 1, p)\n    }\n    if p == 23 {\n        return modp(n - 1, p)\n   \
    \ }\n    if p == 24 {\n        return modp(n - 1, p)\n    }\n    if p == 25 {\n\
    \        return modp(n - 1, p)\n    }\n    if p == 26 {\n        return modp(n\
    \ - 1, p)\n    }\n    if p == 27 {\n        return modp(n - 1, p)\n    }\n   \
    \ if p == 28 {\n        return modp(n - 1, p)\n    }\n    if p == 29 {\n     \
    \   return modp(n - 1, p)\n    }\n    if p == 30 {\n        return modp(n - 1,\
    \ p)\n    }\n    if p == 31 {\n        return modp(n - 1, p)\n    }\n    if p\
    \ == 32 {\n        return modp(n - 1, p)\n    }\n    if p == 33 {\n        return\
    \ modp(n - 1, p)\n    }\n    if ", "    if n == 0 {\n        return 0\n    }\n\
    \    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return modp(n\
    \ - 1, p) + p\n    }\n    if p < 3 {\n        return modp(n - 1, p) + modp(n -\
    \ 2, p)\n    }\n    if p < 4 {\n        return modp(n - 1, p) + modp(n - 2, p)\
    \ + modp(n - 3, p)\n    }\n    if p < 5 {\n        return modp(n - 1, p) + modp(n\
    \ - 2, p) + modp(n - 3, p) + modp(n - 4, p)\n    }\n    if p < 6 {\n        return\
    \ modp(n - 1, p) + modp(n - 2, p) + modp(n - 3, p) + modp(n - 4, p) + modp(n -\
    \ 5, p)\n    }\n    if p < 7 {\n        return modp(n - 1, p) + modp(n - 2, p)\
    \ + modp(n - 3, p) + modp(n - 4, p) + modp(n - 5, p) + modp(n - 6, p)\n    }\n\
    \    if p < 8 {\n        return modp(n - 1, p) + modp(n - 2, p) + modp(n - 3,\
    \ p) + modp(n - 4, p) + modp(n - 5, p) + modp(n - 6, p) + modp(n - 7, p)\n   \
    \ }\n    if p < 9 {\n        return modp(n - 1, p) + modp(n - 2, p) + modp(n -\
    \ 3, p) + modp(n - 4, p) + modp(n - 5, p) + modp(n - 6, p) + modp(n - 7, p) +\
    \ modp(n - 8, p)\n    }\n    if p < 10 {\n        return modp(n - 1, p) + modp(n\
    \ - 2, p) + modp(n - 3, p) + modp(n - 4, p) + modp(n - 5, p) + modp(n - 6, p)\
    \ + modp(n - 7, p) + modp(n - 8, p) + modp(n - 9, p)\n    }\n    if p < 11 {\n\
    \        return modp(n - 1, p) + modp(n - 2, p) + modp(n - 3, p) + modp(n - 4,\
    \ p) + modp(n - 5, p) + modp(n - 6, p) + modp(n - 7, p) + modp(n - 8, p) + modp(n\
    \ - 9, p) + modp(n - 10, p)\n    }\n    if p < 12 {\n        return modp(n - 1,\
    \ p) + modp(n - 2, p) + modp(n - 3, p) + modp(n - 4, p) + modp(n - 5, p) + modp(n\
    \ - 6, p) + modp(n - 7, p) + modp(n - 8, p) + modp(n - 9, p) + modp(n - 10, p)\
    \ + modp(n - 11, p)\n    }\n    if p < 13 {\n        return modp(n - 1, p) + ",
  "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n \
    \   }\n    if p < 2 {\n        return modp(n - 1, p) % p\n    }\n    if p < 3\
    \ {\n        return modp(n - 2, p) % p\n    }\n    return modp(n - 3, p) % p\n\
    }\n", "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return\
    \ p\n    }\n    if p < 2 {\n        return modp(n - 1, p) + p\n    }\n    if p\
    \ < 3 {\n        return modp(n - 1, p) + p\n    }\n    if p < 4 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p < 5 {\n        return modp(n - 1, p) + p\n\
    \    }\n    if p < 6 {\n        return modp(n - 1, p) + p\n    }\n    if p < 7\
    \ {\n        return modp(n - 1, p) + p\n    }\n    if p < 8 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p < 9 {\n        return modp(n - 1, p) + p\n\
    \    }\n    if p < 10 {\n        return modp(n - 1, p) + p\n    }\n    if p <\
    \ 11 {\n        return modp(n - 1, p) + p\n    }\n    if p < 12 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p < 13 {\n        return modp(n - 1, p) +\
    \ p\n    }\n    if p < 14 {\n        return modp(n - 1, p) + p\n    }\n    if\
    \ p < 15 {\n        return modp(n - 1, p) + p\n    }\n    if p < 16 {\n      \
    \  return modp(n - 1, p) + p\n    }\n    if p < 17 {\n        return modp(n -\
    \ 1, p) + p\n    }\n    if p < 18 {\n        return modp(n - 1, p) + p\n    }\n\
    \    if p < 19 {\n        return modp(n - 1, p) + p\n    }\n    if p < 20 {\n\
    \        return modp(n - 1, p) + p\n    }\n    if p < 21 {\n        return modp(n\
    \ - 1, p) + p\n    }\n    if p < 22 {\n        return modp(n - 1, p) + p\n   \
    \ }\n    if p < 23 {\n        return modp(n - 1, p) + p\n    }\n    if p < 24\
    \ {\n        return modp(n - 1, p) + p\n    }\n    if p < 25 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p < 26 {\n        return modp(n - 1, p) +\
    \ p\n    }\n    if p < 27 {\n        return modp(n - 1, p) + p\n    }\n    if\
    \ p < 28 {\n        return modp(n - 1, p) + p\n    }\n    if p < 29 {\n      \
    \  return modp(n - 1, p) + p\n    }\n    if p < 30 {\n        return modp(n -\
    \ 1, p) + p\n    }\n    if p < 31 {\n        return modp(n - 1, p) + p\n    }\n\
    \    if p < 32 {\n        return modp(n - 1, p) + p\n    }\n    if p ", "    x\
    \ := 0\n    for i := 0; i < n; i++ {\n        x <<= 1\n        x |= 1\n      \
    \  x %= p\n    }\n    return x\n}\n", "    if n == 0 {\n        return 0\n   \
    \ }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p < 3 {\n        return modp(n - 2, p) + p\n\
    \    }\n    if p < 4 {\n        return modp(n - 3, p) + p\n    }\n    if p < 5\
    \ {\n        return modp(n - 4, p) + p\n    }\n    if p < 6 {\n        return\
    \ modp(n - 5, p) + p\n    }\n    if p < 7 {\n        return modp(n - 6, p) + p\n\
    \    }\n    if p < 8 {\n        return modp(n - 7, p) + p\n    }\n    if p < 9\
    \ {\n        return modp(n - 8, p) + p\n    }\n    if p < 10 {\n        return\
    \ modp(n - 9, p) + p\n    }\n    if p < 11 {\n        return modp(n - 10, p) +\
    \ p\n    }\n    if p < 12 {\n        return modp(n - 11, p) + p\n    }\n    if\
    \ p < 13 {\n        return modp(n - 12, p) + p\n    }\n    if p < 14 {\n     \
    \   return modp(n - 13, p) + p\n    }\n    if p < 15 {\n        return modp(n\
    \ - 14, p) + p\n    }\n    if p < 16 {\n        return modp(n - 15, p) + p\n \
    \   }\n    if p < 17 {\n        return modp(n - 16, p) + p\n    }\n    if p <\
    \ 18 {\n        return modp(n - 17, p) + p\n    }\n    if p < 19 {\n        return\
    \ modp(n - 18, p) + p\n    }\n    if p < 20 {\n        return modp(n - 19, p)\
    \ + p\n    }\n    if p < 21 {\n        return modp(n - 20, p) + p\n    }\n   \
    \ if p < 22 {\n        return modp(n - 21, p) + p\n    }\n    if p < 23 {\n  \
    \      return modp(n - 22, p) + p\n    }\n    if p < 24 {\n        return modp(n\
    \ - 23, p) + p\n    }\n    if p < 25 {\n        return modp(n - 24, p) + p\n \
    \   }\n    if p < 26 {\n        return modp(n - 25, p) + p\n    }\n    if p <\
    \ 27 {\n        return modp(n - 26, p) + p\n    }\n    if p < 28 {\n        return\
    \ modp(n - 27, p) + p\n    }\n    if p < 29 {\n        return modp(n - 28, p)\
    \ + p\n    }\n    if p < 30 {\n        return modp(n - 29, p) + p\n    }\n   \
    \ if p < 31 {\n", "    if n == 0 {\n        return 0\n    }\n    if p == 0 {\n\
    \        return n\n    }\n    if p == 1 {\n        return n\n    }\n    if n ==\
    \ 1 {\n        return p\n    }\n    if n == 2 {\n        return modp(n - 1, p-1)\n\
    \    }\n    if n == 3 {\n        return modp(n - 2, p-1)\n    }\n    if n == 4\
    \ {\n        return modp(n - 3, p-1)\n    }\n    if n == 5 {\n        return modp(n\
    \ - 4, p-1)\n    }\n    if n == 6 {\n        return modp(n - 5, p-1)\n    }\n\
    \    if n == 7 {\n        return modp(n - 6, p-1)\n    }\n    if n == 8 {\n  \
    \      return modp(n - 7, p-1)\n    }\n    if n == 9 {\n        return modp(n\
    \ - 8, p-1)\n    }\n    if n == 10 {\n        return modp(n - 9, p-1)\n    }\n\
    \    if n == 11 {\n        return modp(n - 10, p-1)\n    }\n    if n == 12 {\n\
    \        return modp(n - 11, p-1)\n    }\n    if n == 13 {\n        return modp(n\
    \ - 12, p-1)\n    }\n    if n == 14 {\n        return modp(n - 13, p-1)\n    }\n\
    \    if n == 15 {\n        return modp(n - 14, p-1)\n    }\n    if n == 16 {\n\
    \        return modp(n - 15, p-1)\n    }\n    if n == 17 {\n        return modp(n\
    \ - 16, p-1)\n    }\n    if n == 18 {\n        return modp(n - 17, p-1)\n    }\n\
    \    if n == 19 {\n        return modp(n - 18, p-1)\n    }\n    if n == 20 {\n\
    \        return modp(n - 19, p-1)\n    }\n    if n == 21 {\n        return modp(n\
    \ - 20, p-1)\n    }\n    if n == 22 {\n        return modp(n - 21, p-1)\n    }\n\
    \    if n == 23 {\n        return modp(n - 22, p-1)\n    }\n    if n == 24 {\n\
    \        return modp(n - 23, p-1)\n    }\n    if n == 25 {\n        return modp(n\
    \ - 24, p-1)\n    }\n    if n == 26 {\n        return modp(n - 25, p-1)\n    }\n\
    \    if n == 27 {\n        return modp(n - 26, p-1)\n    }\n    if n == 28 {\n\
    \        return modp(n - 27, p-1)\n    }\n    if n == 29 {\n        return modp(n\
    \ - 28, p-1)\n    }\n    if n == 30 {\n        return modp(n - 29, p-1)\n    }\n\
    \    if n == 31 {\n        return modp(n - 30, p-1)\n    }\n    if n == 32 {\n\
    \        return modp(n - 31, p-1)\n    }\n    if n == 33 {\n        return modp(n\
    \ - 32, p-1)\n    }", "    if n == 0 {\n        return 0\n    }\n    if n == 1\
    \ {\n        return p\n    }\n    return modp(n >> 1, p) + p\n}\n", "    x :=\
    \ n\n    y := 0\n    for {\n        if x&1 != 0 {\n            x >>= 1\n     \
    \       y ^= p\n        }\n        if x == 0 {\n            break\n        }\n\
    \        x >>= 1\n    }\n    return y\n}\n", "    if n < 0 {\n        n *= -1\n\
    \    }\n    if n < p {\n        return n\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n      \
    \  return p\n    }\n    if n == p {\n        return p\n    }\n    if n == p+1\
    \ {\n        return p\n    }\n    if n == p-1 {\n        return p\n    }\n   \
    \ if n == p+2 {\n        return p\n    }\n    if n == p-2  {\n        return p\n\
    \    }\n    if n == p+3 {\n        return p\n    }\n    if n == p-3  {\n     \
    \   return p\n    }\n    if n == p+4 {\n        return p\n    }\n    if n == p-4\
    \  {\n        return p\n    }\n    if n == p+5 {\n        return p\n    }\n  \
    \  if n == p-5  {\n        return p\n    }\n    if n == p+6 {\n        return\
    \ p\n    }\n    if n == p-6  {\n        return p\n    }\n    if n == p+7 {\n \
    \       return p\n    }\n    if n == p-7  {\n        return p\n    }\n    if n\
    \ == p+8 {\n        return p\n    }\n    if n == p-8  {\n        return p\n  \
    \  }\n    if n == p+9 {\n        return p\n    }\n    if n == p-9  {\n       \
    \ return p\n    }\n    if n == p+10 {\n        return p\n    }\n    if n == p-10\
    \ {\n        return p\n    }\n    if n == p+11 {\n        return p\n    }\n  \
    \  if n == p-11 {\n        return p\n    }\n    if n == p+12 {\n        return\
    \ p\n    }\n    if n == p-12 {\n        return p\n    }\n    if n == p+13 {\n\
    \        return p\n    }\n    if n == p-13 {\n        return p\n    }\n    if\
    \ n == p+14 {\n        return p\n    }\n    if n == p-14 {\n        return p\n\
    \    }\n    if n == p+15 {\n        return p\n    }\n    if n == p-15 {\n    \
    \    return p\n    }\n    if n == p+16 {\n        return p\n    }\n    if n ==\
    \ p-16 {\n        return p\n    }\n    if n == p+17 {\n        return p\n    }\n\
    \    if n == p-17 {\n        return p\n    }\n    if n == p+18 {\n        return\
    \ p\n    }\n    if n == p-18 {\n        return p\n    }\n    if n == p+19 {\n\
    \        return p\n    }\n    if n == p-19 {\n        return p\n    }\n    if\
    \ n == p+20 {\n        return p\n    }\n    if n == p-20 {\n        return p\n\
    \    }\n    if n == p", "    if n == 0 {\n        return 0\n    }\n    if n ==\
    \ 1 {\n        return p\n    }\n    if p < 2 {\n        return modp(n - 1, p+1)\
    \ + p\n    }\n    if p < p {\n        return modp(n - 1, p+1) + p\n    }\n   \
    \ if p < p {\n        return modp(n - 1, p+1) + p\n    }\n    if p < p {\n   \
    \     return modp(n - 1, p+1) + p\n    }\n    if p < p {\n        return modp(n\
    \ - 1, p+1) + p\n    }\n    if p < p {\n        return modp(n - 1, p+1) + p\n\
    \    }\n    if p < p {\n        return modp(n - 1, p+1) + p\n    }\n    if p <\
    \ p {\n        return modp(n - 1, p+1) + p\n    }\n    if p < p {\n        return\
    \ modp(n - 1, p+1) + p\n    }\n    if p < p {\n        return modp(n - 1, p+1)\
    \ + p\n    }\n    if p < p {\n        return modp(n - 1, p+1) + p\n    }\n   \
    \ if p < p {\n        return modp(n - 1, p+1) + p\n    }\n    if p < p {\n   \
    \     return modp(n - 1, p+1) + p\n    }\n    if p < p {\n        return modp(n\
    \ - 1, p+1) + p\n    }\n    if p < p {\n        return modp(n - 1, p+1) + p\n\
    \    }\n    if p < p {\n        return modp(n - 1, p+1) + p\n    }\n    if p <\
    \ p {\n        return modp(n - 1, p+1) + p\n    }\n    if p < p {\n        return\
    \ modp(n - 1, p+1) + p\n    }\n    if p < p {\n        return modp(n - 1, p+1)\
    \ + p\n    }\n    if p < p {\n        return modp(n - 1, p+1) + p\n    }\n   \
    \ if p < p {\n        return modp(n - 1, p+1) + p\n    }\n    if p < p {\n   \
    \     return modp(n - 1, p+1) + p\n    }\n    if p < p {\n        return modp(n\
    \ - 1, p+1) + p\n    }\n    if p < p {\n        return modp(n - 1, p+1) + p\n\
    \    }\n    if p < p {\n        return modp(n - 1, p+1) + p\n    }\n    if p <\
    \ p {\n        return modp(n - 1, p+1) + p\n    }\n    if p < p {\n        return\
    \ modp(n - 1, p+1) + p\n    }\n    if p < p {\n        return modp(n - 1, p+1)\
    \ + p\n    }\n    if p < p {\n        return modp(n - 1, p+1) + p\n    }\n   \
    \ if p < p {\n        return modp(n - 1, p+1) + p\n    }\n    if p < p {\n   \
    \     return modp(n - 1, p+1) + p\n    }", "    if n == 0 {\n        return 0\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p < 3 {\n        return modp(n - 2, p) + p\n\
    \    }\n    if p < 4 {\n        return modp(n - 3, p) + p\n    }\n    if p < 5\
    \ {\n        return modp(n - 4, p) + p\n    }\n    if p < 6 {\n        return\
    \ modp(n - 5, p) + p\n    }\n    if p < 7 {\n        return modp(n - 6, p) + p\n\
    \    }\n    if p < 8 {\n        return modp(n - 7, p) + p\n    }\n    if p < 9\
    \ {\n        return modp(n - 8, p) + p\n    }\n    if p < 10 {\n        return\
    \ modp(n - 9, p) + p\n    }\n    if p < 11 {\n        return modp(n - 10, p) +\
    \ p\n    }\n    if p < 12 {\n        return modp(n - 11, p) + p\n    }\n    if\
    \ p < 13 {\n        return modp(n - 12, p) + p\n    }\n    if p < 14 {\n     \
    \   return modp(n - 13, p) + p\n    }\n    if p < 15 {\n        return modp(n\
    \ - 14, p) + p\n    }\n    if p < 16 {\n        return modp(n - 15, p) + p\n \
    \   }\n    if p < 17 {\n        return modp(n - 16, p) + p\n    }\n    if p <\
    \ 18 {\n        return modp(n - 17, p) + p\n    }\n    if p < 19 {\n        return\
    \ modp(n - 18, p) + p\n    }\n    if p < 20 {\n        return modp(n - 19, p)\
    \ + p\n    }\n    if p < 21 {\n        return modp(n - 20, p) + p\n    }\n   \
    \ if p < 22 {\n        return modp(n - 21, p) + p\n    }\n    if p < 23 {\n  \
    \      return modp(n - 22, p) + p\n    }\n    if p < 24 {\n        return modp(n\
    \ - 23, p) + p\n    }\n    if p < 25 {\n        return modp(n - 24, p) + p\n \
    \   }\n    if p < 26 {\n        return modp(n - 25, p) + p\n    }\n    if p <\
    \ 27 {\n        return modp(n - 26, p) + p\n    }\n    if p < 28 {\n        return\
    \ modp(n - 27, p) + p\n    }\n    if p < 29 {\n        return modp(n - 28, p)\
    \ + p\n    }\n    if p < 30 {\n        return modp(n - 29, p) + p\n    }\n   \
    \ if p < 31 {\n", "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n\
    \        return p\n    }\n    if p < 2 {\n        return modp(n - 1, p+1) + p\n\
    \    }\n    if p < 4 {\n        return modp(n - 1, p+1) + p\n    }\n    if p <\
    \ 8 {\n        return modp(n - 1, p+1) + p\n    }\n    if p < 16 {\n        return\
    \ modp(n - 1, p+1) + p\n    }\n    if p < 32 {\n        return modp(n - 1, p+1)\
    \ + p\n    }\n    if p < 64 {\n        return modp(n - 1, p+1) + p\n    }\n  \
    \  if p < 128 {\n        return modp(n - 1, p+1) + p\n    }\n    if p < 256 {\n\
    \        return modp(n - 1, p+1) + p\n    }\n    if p < 512 {\n        return\
    \ modp(n - 1, p+1) + p\n    }\n    if p < 1024 {\n        return modp(n - 1, p+1)\
    \ + p\n    }\n    if p < 2048 {\n        return modp(n - 1, p+1) + p\n    }\n\
    \    if p < 4096 {\n        return modp(n - 1, p+1) + p\n    }\n    if p < 8192\
    \ {\n        return modp(n - 1, p+1) + p\n    }\n    if p < 16384 {\n        return\
    \ modp(n - 1, p+1) + p\n    }\n    if p < 32768 {\n        return modp(n - 1,\
    \ p+1) + p\n    }\n    if p < 65536 {\n        return modp(n - 1, p+1) + p\n \
    \   }\n    if p < 131072 {\n        return modp(n - 1, p+1) + p\n    }\n    if\
    \ p < 262144 {\n        return modp(n - 1, p+1) + p\n    }\n    if p < 524288\
    \ {\n        return modp(n - 1, p+1) + p\n    }\n    if p < 1048576 {\n      \
    \  return modp(n - 1, p+1) + p\n    }\n    if p < 2097152 {\n        return modp(n\
    \ - 1, p+1) + p\n    }\n    if p < 4194304 {\n        return modp(n - 1, p+1)\
    \ + p\n    }\n    if p < 8388608 {\n        return modp(n - 1, p+1) + p\n    }\n\
    \    if p < 16777216 {\n        return modp(n - 1, p+1) + p\n    }\n    if p <\
    \ 33554432 {\n        return modp(n - 1, p+1) + p\n    }\n    if p < 67108864\
    \ {\n        return modp(n - 1, p+1) + p\n    }\n    if p < 134217728 {\n    \
    \    return modp(n - 1, p+1) + p\n    }\n    if p < 268435456 {\n        return\
    \ modp(n - ", "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n   \
    \     return p\n    }\n    if p < 2 {\n        return modp(n - 1, p) % p\n   \
    \ }\n    if p > p {\n        return modp(n - 1, p) % p\n    }\n    if p == 2 {\n\
    \        return modp(n - 1, p) % p\n    }\n    if p > 2 {\n        return modp(n\
    \ - 1, p) % p\n    }\n    return modp(n - 1, p) % p\n}\n", "    if n == 0 {\n\
    \        return 0\n    }\n    if n == 1 {\n        return p\n    }\n    if p <\
    \ 2 {\n        return modp(n - 1, p) + p\n    }\n    if p < 3 {\n        return\
    \ modp(n - 2, p) + p\n    }\n    return modp(n - 3, p) + p\n}\n", "    if n ==\
    \ 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n    }\n   \
    \ return modp(n >> 1, p) + p\n}\n", "    if n == 0 {\n        return 0\n    }\n\
    \    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return modp(n\
    \ - 1, p) % p\n    }\n    if p < 3 {\n        return modp(n - 2, p) % p\n    }\n\
    \    return modp(n - 3, p) % p\n}\n", "    if n == 0 {\n        return 0\n   \
    \ }\n    if n == 1 {\n        return p\n    }\n    return modp(n / 2, p) * p +\
    \ modp(n % 2, p)\n}\n", "    if n < 0 {\n        n *= -1\n    }\n    if n < p\
    \ {\n        return n\n    }\n    if n == p {\n        return n\n    }\n    if\
    \ n < p {\n        return modp(n - p, p)\n    }\n    return modp(n - p, p) + p\n\
    }\n", "    x := n\n    for {\n        if x < (p / 2) {\n            x <<= 1\n\
    \        } else {\n            x >>= 1\n        }\n        if x == 0 {\n     \
    \       break\n        }\n    }\n    return x\n}\n", "    x := n\n    for {\n\
    \        if x % p == 0 {\n            return x\n        }\n        x /= p\n  \
    \  }\n}\n", "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n     \
    \   return p\n    }\n    if p < 2 {\n        return modp(n - 1, p) + p\n    }\n\
    \    if p < 3 {\n        return modp(n - 2, p) + p\n    }\n    if p < 4 {\n  \
    \      return modp(n - 3, p) + p\n    }\n    if p < 5 {\n        return modp(n\
    \ - 4, p) + p\n    }\n    if p < 6 {\n        return modp(n - 5, p) + p\n    }\n\
    \    if p < 7 {\n        return modp(n - 6, p) + p\n    }\n    if p < 8 {\n  \
    \      return modp(n - 7, p) + p\n    }\n    if p < 9 {\n        return modp(n\
    \ - 8, p) + p\n    }\n    if p < 10 {\n        return modp(n - 9, p) + p\n   \
    \ }\n    if p < 11 {\n        return modp(n - 10, p) + p\n    }\n    if p < 12\
    \ {\n        return modp(n - 11, p) + p\n    }\n    if p < 13 {\n        return\
    \ modp(n - 12, p) + p\n    }\n    if p < 14 {\n        return modp(n - 13, p)\
    \ + p\n    }\n    if p < 15 {\n        return modp(n - 14, p) + p\n    }\n   \
    \ if p < 16 {\n        return modp(n - 15, p) + p\n    }\n    if p < 17 {\n  \
    \      return modp(n - 16, p) + p\n    }\n    if p < 18 {\n        return modp(n\
    \ - 17, p) + p\n    }\n    if p < 19 {\n        return modp(n - 18, p) + p\n \
    \   }\n    if p < 20 {\n        return modp(n - 19, p) + p\n    }\n    if p <\
    \ 21 {\n        return modp(n - 20, p) + p\n    }\n    if p < 22 {\n        return\
    \ modp(n - 21, p) + p\n    }\n    if p < 23 {\n        return modp(n - 22, p)\
    \ + p\n    }\n    if p < 24 {\n        return modp(n - 23, p) + p\n    }\n   \
    \ if p < 25 {\n        return modp(n - 24, p) + p\n    }\n    if p < 26 {\n  \
    \      return modp(n - 25, p) + p\n    }\n    if p < 27 {\n        return modp(n\
    \ - 26, p) + p\n    }\n    if p < 28 {\n        return modp(n - 27, p) + p\n \
    \   }\n    if p < 29 {\n        return modp(n - 28, p) + p\n    }\n    if p <\
    \ 30 {\n        return modp(n - 29, p) + p\n    }\n    if p < 31 {\n", "    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n    }\n\
    \    if p == 1 {\n        return modp(n - 1, p-1)\n    }\n    return modp(n -\
    \ 1, p) + modp(n - 1, p)\n}\n", "    x := n\n    for {\n        x -= p // x is\
    \ now the least common multiple of the two numbers\n        if x == 0 {\n    \
    \        break\n        }\n    }\n    return x\n}\n", "    if n == 0 {\n     \
    \   return 0\n    }\n    if n == 1 {\n        return p\n    }\n    return modp(n\
    \ / 2, p) * p + modp(n % 2, p)\n}\n", "    if n == 0 {\n        return 0\n   \
    \ }\n    if n == 1 {\n        return p\n    }\n    return modp(n / 2, p) + p\n\
    }\n", "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return\
    \ p\n    }\n    return modp(n >> 1, p) + p\n}\n", "    if n == 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return p\n    }\n    return modp(n / 2, p)\
    \ * p + modp(n / 2, p)\n}\n", "    x := n\n    for {\n        if x % p == 0 {\n\
    \            return x\n        }\n        x /= p\n    }\n}\n", "    if n == 0\
    \ {\n        return 0\n    }\n    if p == 0 {\n        return n\n    }\n    if\
    \ p > n {\n        return modp(n - p, p)\n    }\n    if p == 1 {\n        return\
    \ n\n    }\n    if n == 1 {\n        return p\n    }\n    if n == 2 {\n      \
    \  return p + modp(n - 2, p)\n    }\n    if n == 3 {\n        return p + modp(n\
    \ - 3, p)\n    }\n    if n == 4 {\n        return p + modp(n - 4, p)\n    }\n\
    \    if n == 5 {\n        return p + modp(n - 5, p)\n    }\n    if n == 6 {\n\
    \        return p + modp(n - 6, p)\n    }\n    if n == 7 {\n        return p +\
    \ modp(n - 7, p)\n    }\n    if n == 8 {\n        return p + modp(n - 8, p)\n\
    \    }\n    if n == 9 {\n        return p + modp(n - 9, p)\n    }\n    if n ==\
    \ 10 {\n        return p + modp(n - 10, p)\n    }\n    if n == 11 {\n        return\
    \ p + modp(n - 11, p)\n    }\n    if n == 12 {\n        return p + modp(n - 12,\
    \ p)\n    }\n    if n == 13 {\n        return p + modp(n - 13, p)\n    }\n   \
    \ if n == 14 {\n        return p + modp(n - 14, p)\n    }\n    if n == 15 {\n\
    \        return p + modp(n - 15, p)\n    }\n    if n == 16 {\n        return p\
    \ + modp(n - 16, p)\n    }\n    if n == 17 {\n        return p + modp(n - 17,\
    \ p)\n    }\n    if n == 18 {\n        return p + modp(n - 18, p)\n    }\n   \
    \ if n == 19 {\n        return p + modp(n - 19, p)\n    }\n    if n == 20 {\n\
    \        return p + modp(n - 20, p)\n    }\n    if n == 21 {\n        return p\
    \ + modp(n - 21, p)\n    }\n    if n == 22 {\n        return p + modp(n - 22,\
    \ p)\n    }\n    if n == 23 {\n        return p + modp(n - 23, p)\n    }\n   \
    \ if n == 24 {\n        return p + modp(n - 24, p)\n    }\n    if n == 25 {\n\
    \        return p + modp(n - 25, p)\n    }\n    if n == 26 {\n        return p\
    \ + modp(n - 26, p)\n    }\n    if n == 27 {\n        return p + modp(n - 27,\
    \ p)\n    }\n    if n == 28 {\n        return p + modp(n - 28, p)\n    }\n   \
    \ if n == 29 {\n        return p + modp(n - 29, p)\n    }\n    if n == 30 {\n\
    \        return p + modp(n - 30, p)\n    }", "    if n == 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return p\n    }\n    if p == 1 {\n      \
    \  return modp(n - 1, p-1)\n    }\n    if p == 2 {\n        return modp(n - 2,\
    \ p-1)\n    }\n    if p == 3 {\n        return modp(n - 3, p-1)\n    }\n    if\
    \ p == 4 {\n        return modp(n - 4, p-1)\n    }\n    if p == 5 {\n        return\
    \ modp(n - 5, p-1)\n    }\n    if p == 6 {\n        return modp(n - 6, p-1)\n\
    \    }\n    if p == 7 {\n        return modp(n - 7, p-1)\n    }\n    if p == 8\
    \ {\n        return modp(n - 8, p-1)\n    }\n    if p == 9 {\n        return modp(n\
    \ - 9, p-1)\n    }\n    if p == 10 {\n        return modp(n - 10, p-1)\n    }\n\
    \    if p == 11 {\n        return modp(n - 11, p-1)\n    }\n    if p == 12 {\n\
    \        return modp(n - 12, p-1)\n    }\n    if p == 13 {\n        return modp(n\
    \ - 13, p-1)\n    }\n    if p == 14 {\n        return modp(n - 14, p-1)\n    }\n\
    \    if p == 15 {\n        return modp(n - 15, p-1)\n    }\n    if p == 16 {\n\
    \        return modp(n - 16, p-1)\n    }\n    if p == 17 {\n        return modp(n\
    \ - 17, p-1)\n    }\n    if p == 18 {\n        return modp(n - 18, p-1)\n    }\n\
    \    if p == 19 {\n        return modp(n - 19, p-1)\n    }\n    if p == 20 {\n\
    \        return modp(n - 20, p-1)\n    }\n    if p == 21 {\n        return modp(n\
    \ - 21, p-1)\n    }\n    if p == 22 {\n        return modp(n - 22, p-1)\n    }\n\
    \    if p == 23 {\n        return modp(n - 23, p-1)\n    }\n    if p == 24 {\n\
    \        return modp(n - 24, p-1)\n    }\n    if p == 25 {\n        return modp(n\
    \ - 25, p-1)\n    }\n    if p == 26 {\n        return modp(n - 26, p-1)\n    }\n\
    \    if p == 27 {\n        return modp(n - 27, p-1)\n    }\n    if p == 28 {\n\
    \        return modp(n - 28, p-1)\n    }\n    if p == 29 {\n        return modp(n\
    \ - 29, p-1)\n    }\n    if p == 30 {\n        return modp(n - 30, p-1)\n    }\n\
    \    if p == 31 {\n        return modp(n - 31, p-1)\n    }\n    if p == 32 {\n\
    \        return modp(n - 32, p-1)\n", "    if n == 0 {\n        return 0\n   \
    \ }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p+1) + p\n    }\n    if p < 4 {\n        return modp(n - 1, p+1)\
    \ + modp(n - 1, p)\n    }\n    if p < 8 {\n        return modp(n - 1, p+1) + modp(n\
    \ - 1, modp(n - 1, p))\n    }\n    if p < 16 {\n        return modp(n - 1, p+1)\
    \ + modp(n - 1, modp(n - 1, modp(n - 1, p)))\n    }\n    if p < 32 {\n       \
    \ return modp(n - 1, p+1) + modp(n - 1, modp(n - 1, modp(n - 1, modp(n - 1, p))))\n\
    \    }\n    if p < 64 {\n        return modp(n - 1, p+1) + modp(n - 1, modp(n\
    \ - 1, modp(n - 1, modp(n - 1, modp(n - 1, p)))))\n    }\n    if p < 128 {\n \
    \       return modp(n - 1, p+1) + modp(n - 1, modp(n - 1, modp(n - 1, modp(n -\
    \ 1, modp(n - 1, modp(n - 1, p)))))) + p\n    }\n    if p < 256 {\n        return\
    \ modp(n - 1, p+1) + modp(n - 1, modp(n - 1, modp(n - 1, modp(n - 1, modp(n -\
    \ 1, modp(n - 1, modp(n - 1, p)))))) + modp(n - 1, p))\n    }\n    if p < 512\
    \ {\n        return modp(n - 1, p+1) + modp(n - 1, modp(n - 1, modp(n - 1, modp(n\
    \ - 1, modp(n - 1, modp(n - 1, modp(n - 1, modp(n - 1, p)))))) + modp(n - 1, modp(n\
    \ - 1, p)))\n    }\n    if p < 1024 {\n        return modp(n - 1, p+1) + modp(n\
    \ - 1, modp(n - 1, modp(n - 1, modp(n - 1, modp(n - 1, modp(n - 1, modp(n - 1,\
    \ modp(n - 1, modp(n - 1, p)))))) + modp(n - 1, modp(n - 1, modp(n - 1, p)))))\
    \ + modp(n - 1, modp(n - 1, modp(n - 1, modp(n - 1, modp(n - 1, modp(n - 1, modp(n\
    \ - 1, modp(n - 1, p)))))) + modp(n - 1, modp(n - 1, modp(n - 1, modp(n - 1, modp(n\
    \ - 1, modp(n - 1, modp(n - 1, p)))))) + modp(n - 1, modp(n - 1, modp(n - 1, modp(n\
    \ - 1, modp(n - 1, modp(n - 1, modp(n - 1, modp(n - 1, p)))))) + modp(n - 1, modp(n\
    \ - 1, modp(n - ", "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n\
    \        return p\n    }\n    if p < 2 {\n        return modp(n - 1, p+1) + p\n\
    \    }\n    if p < 3 {\n        return modp(n - 1, p+1) + modp(n - 2, p+1) + p\n\
    \    }\n    if p < 4 {\n        return modp(n - 1, p+1) + modp(n - 2, p+1) + modp(n\
    \ - 3, p+1) + p\n    }\n    if p < 5 {\n        return modp(n - 1, p+1) + modp(n\
    \ - 2, p+1) + modp(n - 3, p+1) + modp(n - 4, p+1) + p\n    }\n    if p < 6 {\n\
    \        return modp(n - 1, p+1) + modp(n - 2, p+1) + modp(n - 3, p+1) + modp(n\
    \ - 4, p+1) + modp(n - 5, p+1) + p\n    }\n    if p < 7 {\n        return modp(n\
    \ - 1, p+1) + modp(n - 2, p+1) + modp(n - 3, p+1) + modp(n - 4, p+1) + modp(n\
    \ - 5, p+1) + modp(n - 6, p+1) + p\n    }\n    if p < 8 {\n        return modp(n\
    \ - 1, p+1) + modp(n - 2, p+1) + modp(n - 3, p+1) + modp(n - 4, p+1) + modp(n\
    \ - 5, p+1) + modp(n - 6, p+1) + modp(n - 7, p+1) + p\n    }\n    if p < 9 {\n\
    \        return modp(n - 1, p+1) + modp(n - 2, p+1) + modp(n - 3, p+1) + modp(n\
    \ - 4, p+1) + modp(n - 5, p+1) + modp(n - 6, p+1) + modp(n - 7, p+1) + modp(n\
    \ - 8, p+1) + p\n    }\n    if p < 10 {\n        return modp(n - 1, p+1) + modp(n\
    \ - 2, p+1) + modp(n - 3, p+1) + modp(n - 4, p+1) + modp(n - 5, p+1) + modp(n\
    \ - 6, p+1) + modp(n - 7, p+1) + modp(n - 8, p+1) + modp(n - 9, p+1) + p\n   \
    \ }\n    if p < 11 {\n        return modp(n - 1, p+1) + modp(n - 2, p+1) + modp(n\
    \ - 3, p+1) + modp(n - 4, p+1) + modp(n - 5, p+1) + modp(n - 6, p+1) + modp(n\
    \ - 7, p+1) + modp(n - 8, p+1) + modp(n - 9, p+1) + modp(n - 10, p+1) + p\n  \
    \  }\n    if p < 12 {\n        return modp(n - 1, p+1) + ", "    if n == 0 {\n\
    \        return 0\n    }\n    if n == 1 {\n        return p\n    }\n    if p <\
    \ 2 {\n        return modp(n - 1, p) % p\n    }\n    if p > 2 {\n        return\
    \ modp(n - 1, p) % p\n    }\n    x := modp(n - 2, p)\n    return x % p\n}\n",
  "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n \
    \   }\n    if p < 2 {\n        return modp(n - 1, p) + p\n    }\n    if p > 2\
    \ {\n        return modp(n - 1, p) - p\n    }\n    return modp(n - 1, p) + modp(n\
    \ - 2, p)\n}\n", "    x := n\n    y := 0\n    for {\n        if x&1 == 0 {\n \
    \           break\n        }\n        x >>= 1\n        y++\n    }\n    for {\n\
    \        if y&1 == 0 {\n            break\n        }\n        y >>= 1\n      \
    \  x++\n    }\n    return x % p\n}\n", "    if n == 0 {\n        return 0\n  \
    \  }\n    if n == 1 {\n        return p\n    }\n    return modp(n >> 1, p) + p\n\
    }\n", "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return\
    \ p\n    }\n    if p < 2 {\n        return modp(n - 1, p) + p\n    }\n    if p\
    \ < 3 {\n        return modp(n - 2, p) + p\n    }\n    if p < 4 {\n        return\
    \ modp(n - 3, p) + p\n    }\n    if p < 5 {\n        return modp(n - 4, p) + p\n\
    \    }\n    if p < 6 {\n        return modp(n - 5, p) + p\n    }\n    if p < 7\
    \ {\n        return modp(n - 6, p) + p\n    }\n    if p < 8 {\n        return\
    \ modp(n - 7, p) + p\n    }\n    if p < 9 {\n        return modp(n - 8, p) + p\n\
    \    }\n    if p < 10 {\n        return modp(n - 9, p) + p\n    }\n    if p <\
    \ 11 {\n        return modp(n - 10, p) + p\n    }\n    if p < 12 {\n        return\
    \ modp(n - 11, p) + p\n    }\n    if p < 13 {\n        return modp(n - 12, p)\
    \ + p\n    }\n    if p < 14 {\n        return modp(n - 13, p) + p\n    }\n   \
    \ if p < 15 {\n        return modp(n - 14, p) + p\n    }\n    if p < 16 {\n  \
    \      return modp(n - 15, p) + p\n    }\n    if p < 17 {\n        return modp(n\
    \ - 16, p) + p\n    }\n    if p < 18 {\n        return modp(n - 17, p) + p\n \
    \   }\n    if p < 19 {\n        return modp(n - 18, p) + p\n    }\n    if p <\
    \ 20 {\n        return modp(n - 19, p) + p\n    }\n    if p < 21 {\n        return\
    \ modp(n - 20, p) + p\n    }\n    if p < 22 {\n        return modp(n - 21, p)\
    \ + p\n    }\n    if p < 23 {\n        return modp(n - 22, p) + p\n    }\n   \
    \ if p < 24 {\n        return modp(n - 23, p) + p\n    }\n    if p < 25 {\n  \
    \      return modp(n - 24, p) + p\n    }\n    if p < 26 {\n        return modp(n\
    \ - 25, p) + p\n    }\n    if p < 27 {\n        return modp(n - 26, p) + p\n \
    \   }\n    if p < 28 {\n        return modp(n - 27, p) + p\n    }\n    if p <\
    \ 29 {\n        return modp(n - 28, p) + p\n    }\n    if p < 30 {\n        return\
    \ modp(n - 29, p) + p\n    }\n    if p < 31 {\n", "    if n == 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n       \
    \ return modp(n - 1, p) + p\n    }\n    if p < 3 {\n        return modp(n - 1,\
    \ p) + p\n    }\n    if p < 4 {\n        return modp(n - 1, p) + p\n    }\n  \
    \  if p < 5 {\n        return modp(n - 1, p) + p\n    }\n    if p < 6 {\n    \
    \    return modp(n - 1, p) + p\n    }\n    if p < 7 {\n        return modp(n -\
    \ 1, p) + p\n    }\n    if p < 8 {\n        return modp(n - 1, p) + p\n    }\n\
    \    if p < 9 {\n        return modp(n - 1, p) + p\n    }\n    if p < 10 {\n \
    \       return modp(n - 1, p) + p\n    }\n    if p < 11 {\n        return modp(n\
    \ - 1, p) + p\n    }\n    if p < 12 {\n        return modp(n - 1, p) + p\n   \
    \ }\n    if p < 13 {\n        return modp(n - 1, p) + p\n    }\n    if p < 14\
    \ {\n        return modp(n - 1, p) + p\n    }\n    if p < 15 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p < 16 {\n        return modp(n - 1, p) +\
    \ p\n    }\n    if p < 17 {\n        return modp(n - 1, p) + p\n    }\n    if\
    \ p < 18 {\n        return modp(n - 1, p) + p\n    }\n    if p < 19 {\n      \
    \  return modp(n - 1, p) + p\n    }\n    if p < 20 {\n        return modp(n -\
    \ 1, p) + p\n    }\n    if p < 21 {\n        return modp(n - 1, p) + p\n    }\n\
    \    if p < 22 {\n        return modp(n - 1, p) + p\n    }\n    if p < 23 {\n\
    \        return modp(n - 1, p) + p\n    }\n    if p < 24 {\n        return modp(n\
    \ - 1, p) + p\n    }\n    if p < 25 {\n        return modp(n - 1, p) + p\n   \
    \ }\n    if p < 26 {\n        return modp(n - 1, p) + p\n    }\n    if p < 27\
    \ {\n        return modp(n - 1, p) + p\n    }\n    if p < 28 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p < 29 {\n        return modp(n - 1, p) +\
    \ p\n    }\n    if p < 30 {\n        return modp(n - 1, p) + p\n    }\n    if\
    \ p < 31 {\n        return modp(n - 1, p) + p\n    }\n    if p < 32 {\n      \
    \  return modp(n - 1, p) + p\n    }\n    if p ", "    if n == 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return p\n    }\n    if p == 1 {\n      \
    \  return modp(n - 1, p-1)\n    }\n    return modp(n - 1, p) + modp(n-1, p)\n\
    }\n", "    x := n\n    for {\n        if x < (p / 2) {\n            x <<= 1\n\
    \        } else {\n            x -= p\n        }\n        if x == 0 {\n      \
    \      break\n        }\n    }\n    return x\n}\n", "    if n == 0 {\n       \
    \ return 0\n    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n\
    \        return modp(n - 1, p) + p\n    }\n    if p < 3 {\n        return modp(n\
    \ - 2, p) + p\n    }\n    if p < 4 {\n        return modp(n - 3, p) + p\n    }\n\
    \    if p < 5 {\n        return modp(n - 4, p) + p\n    }\n    if p < 6 {\n  \
    \      return modp(n - 5, p) + p\n    }\n    if p < 7 {\n        return modp(n\
    \ - 6, p) + p\n    }\n    if p < 8 {\n        return modp(n - 7, p) + p\n    }\n\
    \    if p < 9 {\n        return modp(n - 8, p) + p\n    }\n    if p < 10 {\n \
    \       return modp(n - 9, p) + p\n    }\n    if p < 11 {\n        return modp(n\
    \ - 10, p) + p\n    }\n    if p < 12 {\n        return modp(n - 11, p) + p\n \
    \   }\n    if p < 13 {\n        return modp(n - 12, p) + p\n    }\n    if p <\
    \ 14 {\n        return modp(n - 13, p) + p\n    }\n    if p < 15 {\n        return\
    \ modp(n - 14, p) + p\n    }\n    if p < 16 {\n        return modp(n - 15, p)\
    \ + p\n    }\n    if p < 17 {\n        return modp(n - 16, p) + p\n    }\n   \
    \ if p < 18 {\n        return modp(n - 17, p) + p\n    }\n    if p < 19 {\n  \
    \      return modp(n - 18, p) + p\n    }\n    if p < 20 {\n        return modp(n\
    \ - 19, p) + p\n    }\n    if p < 21 {\n        return modp(n - 20, p) + p\n \
    \   }\n    if p < 22 {\n        return modp(n - 21, p) + p\n    }\n    if p <\
    \ 23 {\n        return modp(n - 22, p) + p\n    }\n    if p < 24 {\n        return\
    \ modp(n - 23, p) + p\n    }\n    if p < 25 {\n        return modp(n - 24, p)\
    \ + p\n    }\n    if p < 26 {\n        return modp(n - 25, p) + p\n    }\n   \
    \ if p < 27 {\n        return modp(n - 26, p) + p\n    }\n    if p < 28 {\n  \
    \      return modp(n - 27, p) + p\n    }\n    if p < 29 {\n        return modp(n\
    \ - 28, p) + p\n    }\n    if p < 30 {\n        return modp(n - 29, p) + p\n \
    \   }\n    if p < 31 {\n", "    if n == 0 {\n        return 0\n    }\n    if n\
    \ == 1 {\n        return p\n    }\n    return modp(n >> 1, p) * p + modp(n & 1,\
    \ p) * (p ^ n)\n}\n", "    if n < 0 {\n        n *= -1\n    }\n    if n < p {\n\
    \        return n\n    }\n    if n == p {\n        return n\n    }\n    if n >\
    \ p {\n        return modp(n - p, p)\n    }\n    return 0\n}\n", "    if n ==\
    \ 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n    }\n   \
    \ if p < 2 {\n        return modp(n - 1, p) % p\n    }\n    if p > 2 {\n     \
    \   return modp(n - 1, p) % p\n    }\n    return modp(n - 2, p) % p\n}\n", " \
    \   if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n\
    \    }\n    if p < 2 {\n        return modp(n / 2, p)\n    }\n    if p > 2 {\n\
    \        return modp(n / 2, p)\n    }\n    return modp(n / 2, p) + modp(n / 2,\
    \ p)\n}\n", "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n     \
    \   return p\n    }\n    return modp(n >> 1, p) + p\n}\n", "    if n == 0 {\n\
    \        return 0\n    }\n    if n == 1 {\n        return p\n    }\n    if p <\
    \ 2 {\n        return modp(n / 2, p)\n    }\n    if p > 2 {\n        return modp(n\
    \ / 2, p)\n    }\n    if n == p {\n        return modp(n / 2, p)\n    }\n    if\
    \ n % 2 == 0 {\n        return modp(n / 2, p)\n    }\n    return modp(n / 2, p)\n\
    }\n", "    x := n\n    for {\n        if x&1 != 0 {\n            x >>= 1\n   \
    \         x ^= p\n        } else {\n            return x\n        }\n    }\n}\n",
  "    if n < 0 {\n        n *= -1\n    }\n    if n < p {\n        return n\n    }\n\
    \    if n == p {\n        return 1\n    }\n    if n == p+1 {\n        return 2\n\
    \    }\n    if n == p+2 {\n        return 3\n    }\n    if n == p+3 {\n      \
    \  return 4\n    }\n    if n == p+4 {\n        return 5\n    }\n    if n == p+5\
    \ {\n        return 6\n    }\n    if n == p+6 {\n        return 7\n    }\n   \
    \ if n == p+7 {\n        return 8\n    }\n    if n == p+8 {\n        return 9\n\
    \    }\n    if n == p+9 {\n        return 10\n    }\n    if n == p+10 {\n    \
    \    return 11\n    }\n    if n == p+11 {\n        return 12\n    }\n    if n\
    \ == p+12 {\n        return 13\n    }\n    if n == p+13 {\n        return 14\n\
    \    }\n    if n == p+14 {\n        return 15\n    }\n    if n == p+15 {\n   \
    \     return 16\n    }\n    if n == p+16 {\n        return 17\n    }\n    if n\
    \ == p+17 {\n        return 18\n    }\n    if n == p+18 {\n        return 19\n\
    \    }\n    if n == p+19 {\n        return 20\n    }\n    if n == p+20 {\n   \
    \     return 21\n    }\n    if n == p+21 {\n        return 22\n    }\n    if n\
    \ == p+22 {\n        return 23\n    }\n    if n == p+23 {\n        return 24\n\
    \    }\n    if n == p+24 {\n        return 25\n    }\n    if n == p+25 {\n   \
    \     return 26\n    }\n    if n == p+26 {\n        return 27\n    }\n    if n\
    \ == p+27 {\n        return 28\n    }\n    if n == p+28 {\n        return 29\n\
    \    }\n    if n == p+29 {\n        return 30\n    }\n    if n == p+30 {\n   \
    \     return 31\n    }\n    if n == p+31 {\n        return 32\n    }\n    if n\
    \ == p+32 {\n        return 33\n    }\n    if n == p+33 {\n        return 34\n\
    \    }\n    if n == p+34 {\n        return 35\n    }\n    if n == p+35 {\n   \
    \     return 36\n    }\n    if n == p+36 {\n        return 37\n    }\n    if n\
    \ == p+37 {\n        return 38\n    }\n    if n == p+38 {\n        return 39\n\
    \    }\n    if n == p+39 {\n        return 40\n    }\n    if n == p+40 {\n   \
    \     return 41\n    }\n    if n == p+41 {\n        return 42", "    if n < 0\
    \ {\n        n *= -1\n    }\n    if n < p {\n        return n\n    }\n    if n\
    \ == p {\n        return n\n    }\n    if n > p {\n        return modp(n - p,\
    \ p)\n    }\n    return 0\n}\n", "    if n == 0 {\n        return 0\n    }\n \
    \   if p == 0 {\n        return n\n    }\n    if p == 1 {\n        return n-1\n\
    \    }\n    if n%2 == 0 {\n        return modp(n / 2, p)\n    }\n    return modp(n\
    \ / 2, p) + p\n}\n", "    if n < 0 {\n        n *= -1\n    }\n    if n < p {\n\
    \        return n\n    }\n    if n == p {\n        return 1\n    }\n    if n ==\
    \ p+1 {\n        return 2\n    }\n    if n == p+2 {\n        return 3\n    }\n\
    \    if n == p+3 {\n        return 4\n    }\n    if n == p+4 {\n        return\
    \ 5\n    }\n    if n == p+5 {\n        return 6\n    }\n    if n == p+6 {\n  \
    \      return 7\n    }\n    if n == p+7 {\n        return 8\n    }\n    if n ==\
    \ p+8 {\n        return 9\n    }\n    if n == p+9 {\n        return 10\n    }\n\
    \    if n == p+10 {\n        return 11\n    }\n    if n == p+11 {\n        return\
    \ 12\n    }\n    if n == p+12 {\n        return 13\n    }\n    if n == p+13 {\n\
    \        return 14\n    }\n    if n == p+14 {\n        return 15\n    }\n    if\
    \ n == p+15 {\n        return 16\n    }\n    if n == p+16 {\n        return 17\n\
    \    }\n    if n == p+17 {\n        return 18\n    }\n    if n == p+18 {\n   \
    \     return 19\n    }\n    if n == p+19 {\n        return 20\n    }\n    if n\
    \ == p+20 {\n        return 21\n    }\n    if n == p+21 {\n        return 22\n\
    \    }\n    if n == p+22 {\n        return 23\n    }\n    if n == p+23 {\n   \
    \     return 24\n    }\n    if n == p+24 {\n        return 25\n    }\n    if n\
    \ == p+25 {\n        return 26\n    }\n    if n == p+26 {\n        return 27\n\
    \    }\n    if n == p+27 {\n        return 28\n    }\n    if n == p+28 {\n   \
    \     return 29\n    }\n    if n == p+29 {\n        return 30\n    }\n    if n\
    \ == p+30 {\n        return 31\n    }\n    if n == p+31 {\n        return 32\n\
    \    }\n    if n == p+32 {\n        return 33\n    }\n    if n == p+33 {\n   \
    \     return 34\n    }\n    if n == p+34 {\n        return 35\n    }\n    if n\
    \ == p+35 {\n        return 36\n    }\n    if n == p+36 {\n        return 37\n\
    \    }\n    if n == p+37 {\n        return 38\n    }\n    if n == p+38 {\n   \
    \     return 39\n    }\n    if n == p+39 {\n        return 40\n    }\n    if n\
    \ == p+40 {\n        return 41\n    }\n    if n == p+41 {\n        return 42",
  "    x := n\n    for {\n        if x&1 != 0 {\n            x >>= 1\n           \
    \ x ^= p\n        } else {\n            break\n        }\n    }\n    return x\n\
    }\n", "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return\
    \ p\n    }\n    return modp(n >> 1, p) + p\n}\n", "    if n == 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n       \
    \ return modp(n - 1, p+1) + p\n    }\n    if p < 3 {\n        return modp(n -\
    \ 1, p+1) + modp(n - 2, p+1) + p\n    }\n    if p < 4 {\n        return modp(n\
    \ - 1, p+1) + modp(n - 2, p+1) + modp(n - 3, p+1) + p\n    }\n    if p < 5 {\n\
    \        return modp(n - 1, p+1) + modp(n - 2, p+1) + modp(n - 3, p+1) + modp(n\
    \ - 4, p+1) + p\n    }\n    if p < 6 {\n        return modp(n - 1, p+1) + modp(n\
    \ - 2, p+1) + modp(n - 3, p+1) + modp(n - 4, p+1) + modp(n - 5, p+1) + p\n   \
    \ }\n    if p < 7 {\n        return modp(n - 1, p+1) + modp(n - 2, p+1) + modp(n\
    \ - 3, p+1) + modp(n - 4, p+1) + modp(n - 5, p+1) + modp(n - 6, p+1) + p\n   \
    \ }\n    if p < 8 {\n        return modp(n - 1, p+1) + modp(n - 2, p+1) + modp(n\
    \ - 3, p+1) + modp(n - 4, p+1) + modp(n - 5, p+1) + modp(n - 6, p+1) + modp(n\
    \ - 7, p+1) + p\n    }\n    if p < 9 {\n        return modp(n - 1, p+1) + modp(n\
    \ - 2, p+1) + modp(n - 3, p+1) + modp(n - 4, p+1) + modp(n - 5, p+1) + modp(n\
    \ - 6, p+1) + modp(n - 7, p+1) + modp(n - 8, p+1) + p\n    }\n    if p < 10 {\n\
    \        return modp(n - 1, p+1) + modp(n - 2, p+1) + modp(n - 3, p+1) + modp(n\
    \ - 4, p+1) + modp(n - 5, p+1) + modp(n - 6, p+1) + modp(n - 7, p+1) + modp(n\
    \ - 8, p+1) + modp(n - 9, p+1) + p\n    }\n    if p < 11 {\n        return modp(n\
    \ - 1, p+1) + modp(n - 2, p+1) + modp(n - 3, p+1) + modp(n - 4, p+1) + modp(n\
    \ - 5, p+1) + modp(n - 6, p+1) + modp(n - 7, p+1) + modp(n - 8, p+1) + modp(n\
    \ - 9, p+1) + modp(n - 10, p+1) + p\n    }\n    if p < 12 {\n        return modp(n\
    \ - 1, p+1) + ", "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n\
    \        return p\n    }\n    return modp(n >> 1, p) + p\n}\n", "    if n == 0\
    \ {\n        return 0\n    }\n    if n == 1 {\n        return p\n    }\n    if\
    \ p < 2 {\n        return modp(n - 1, p) + p\n    }\n    if p < 3 {\n        return\
    \ modp(n - 1, p) + modp(n - 2, p)\n    }\n    if p < 4 {\n        return modp(n\
    \ - 1, p) + modp(n - 2, p) + modp(n - 3, p)\n    }\n    if p < 5 {\n        return\
    \ modp(n - 1, p) + modp(n - 2, p) + modp(n - 3, p) + modp(n - 4, p)\n    }\n \
    \   if p < 6 {\n        return modp(n - 1, p) + modp(n - 2, p) + modp(n - 3, p)\
    \ + modp(n - 4, p) + modp(n - 5, p)\n    }\n    if p < 7 {\n        return modp(n\
    \ - 1, p) + modp(n - 2, p) + modp(n - 3, p) + modp(n - 4, p) + modp(n - 5, p)\
    \ + modp(n - 6, p)\n    }\n    if p < 8 {\n        return modp(n - 1, p) + modp(n\
    \ - 2, p) + modp(n - 3, p) + modp(n - 4, p) + modp(n - 5, p) + modp(n - 6, p)\
    \ + modp(n - 7, p)\n    }\n    if p < 9 {\n        return modp(n - 1, p) + modp(n\
    \ - 2, p) + modp(n - 3, p) + modp(n - 4, p) + modp(n - 5, p) + modp(n - 6, p)\
    \ + modp(n - 7, p) + modp(n - 8, p)\n    }\n    if p < 10 {\n        return modp(n\
    \ - 1, p) + modp(n - 2, p) + modp(n - 3, p) + modp(n - 4, p) + modp(n - 5, p)\
    \ + modp(n - 6, p) + modp(n - 7, p) + modp(n - 8, p) + modp(n - 9, p)\n    }\n\
    \    if p < 11 {\n        return modp(n - 1, p) + modp(n - 2, p) + modp(n - 3,\
    \ p) + modp(n - 4, p) + modp(n - 5, p) + modp(n - 6, p) + modp(n - 7, p) + modp(n\
    \ - 8, p) + modp(n - 9, p) + modp(n - 10, p)\n    }\n    if p < 12 {\n       \
    \ return modp(n - 1, p) + modp(n - 2, p) + modp(n - 3, p) + modp(n - 4, p) + modp(n\
    \ - 5, p) + modp(n - 6, p) + modp(n - 7, p) + modp(n - 8, p) + modp(n - 9, p)\
    \ + modp(n - 10, p) + modp(n - 11, p)\n    }\n    if p < 13 {\n        return\
    \ modp(n - 1, p) + ", "    r := 0\n    for i := 0; i < n; i++ {\n        r = (r\
    \ * p + 1) & p\n    }\n    return r\n}\n", "    if n == 0 {\n        return 0\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) % p\n    }\n    if p > 2 {\n        return modp(n - 1, (p + 1)\
    \ * (p - 1)) % p\n    }\n    return modp(n - 1, (p + 1) * (p - 1)) % p\n}\n",
  "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n \
    \   }\n    return modp(n / 2, p) + p\n}\n", "    x := n\n    for {\n        if\
    \ x&1 != 0 {\n            x >>= 1\n            x ^= p\n        } else {\n    \
    \        return x\n        }\n    }\n}\n", "    if n == 0 {\n        return 0\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p < 3 {\n        return modp(n - 2, p) + p\n\
    \    }\n    if p < 4 {\n        return modp(n - 3, p) + p\n    }\n    if p < 5\
    \ {\n        return modp(n - 4, p) + p\n    }\n    if p < 6 {\n        return\
    \ modp(n - 5, p) + p\n    }\n    if p < 7 {\n        return modp(n - 6, p) + p\n\
    \    }\n    if p < 8 {\n        return modp(n - 7, p) + p\n    }\n    if p < 9\
    \ {\n        return modp(n - 8, p) + p\n    }\n    if p < 10 {\n        return\
    \ modp(n - 9, p) + p\n    }\n    if p < 11 {\n        return modp(n - 10, p) +\
    \ p\n    }\n    if p < 12 {\n        return modp(n - 11, p) + p\n    }\n    if\
    \ p < 13 {\n        return modp(n - 12, p) + p\n    }\n    if p < 14 {\n     \
    \   return modp(n - 13, p) + p\n    }\n    if p < 15 {\n        return modp(n\
    \ - 14, p) + p\n    }\n    if p < 16 {\n        return modp(n - 15, p) + p\n \
    \   }\n    if p < 17 {\n        return modp(n - 16, p) + p\n    }\n    if p <\
    \ 18 {\n        return modp(n - 17, p) + p\n    }\n    if p < 19 {\n        return\
    \ modp(n - 18, p) + p\n    }\n    if p < 20 {\n        return modp(n - 19, p)\
    \ + p\n    }\n    if p < 21 {\n        return modp(n - 20, p) + p\n    }\n   \
    \ if p < 22 {\n        return modp(n - 21, p) + p\n    }\n    if p < 23 {\n  \
    \      return modp(n - 22, p) + p\n    }\n    if p < 24 {\n        return modp(n\
    \ - 23, p) + p\n    }\n    if p < 25 {\n        return modp(n - 24, p) + p\n \
    \   }\n    if p < 26 {\n        return modp(n - 25, p) + p\n    }\n    if p <\
    \ 27 {\n        return modp(n - 26, p) + p\n    }\n    if p < 28 {\n        return\
    \ modp(n - 27, p) + p\n    }\n    if p < 29 {\n        return modp(n - 28, p)\
    \ + p\n    }\n    if p < 30 {\n        return modp(n - 29, p) + p\n    }\n   \
    \ if p < 31 {\n", "    r := 0\n    for i := 0; i < n; i++ {\n        r = (r *\
    \ p + 1) & p\n    }\n    return r\n}\n", "    if n == 0 {\n        return 0\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) % p\n    }\n    if p > p {\n        return modp(n - 1, p) % p\n\
    \    }\n    if p % 2 == 0 {\n        return modp(n - 1, p) % p\n    }\n    return\
    \ modp(n - 2, p) % p\n}\n", "    r := n\n    for i := 0; i < p; i++ {\n      \
    \  r = r << 1\n        if r > n {\n            r = r - n\n        }\n    }\n \
    \   return r\n}\n", "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n\
    \        return p\n    }\n    return modp(n / 2, p) + p\n}\n", "    x := n\n \
    \   for {\n        if x < (p / 2) {\n            x <<= 1\n        } else {\n \
    \           x >>= 1\n        }\n        if x == 0 {\n            break\n     \
    \   }\n    }\n    return x\n}\n", "    if n == 0 {\n        return 0\n    }\n\
    \    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return modp(n\
    \ - 1, p) + p\n    }\n    if p < 3 {\n        return modp(n - 2, p) + p\n    }\n\
    \    if p < 4 {\n        return modp(n - 3, p) + p\n    }\n    if p < 5 {\n  \
    \      return modp(n - 4, p) + p\n    }\n    if p < 6 {\n        return modp(n\
    \ - 5, p) + p\n    }\n    if p < 7 {\n        return modp(n - 6, p) + p\n    }\n\
    \    if p < 8 {\n        return modp(n - 7, p) + p\n    }\n    if p < 9 {\n  \
    \      return modp(n - 8, p) + p\n    }\n    if p < 10 {\n        return modp(n\
    \ - 9, p) + p\n    }\n    if p < 11 {\n        return modp(n - 10, p) + p\n  \
    \  }\n    if p < 12 {\n        return modp(n - 11, p) + p\n    }\n    if p < 13\
    \ {\n        return modp(n - 12, p) + p\n    }\n    if p < 14 {\n        return\
    \ modp(n - 13, p) + p\n    }\n    if p < 15 {\n        return modp(n - 14, p)\
    \ + p\n    }\n    if p < 16 {\n        return modp(n - 15, p) + p\n    }\n   \
    \ if p < 17 {\n        return modp(n - 16, p) + p\n    }\n    if p < 18 {\n  \
    \      return modp(n - 17, p) + p\n    }\n    if p < 19 {\n        return modp(n\
    \ - 18, p) + p\n    }\n    if p < 20 {\n        return modp(n - 19, p) + p\n \
    \   }\n    if p < 21 {\n        return modp(n - 20, p) + p\n    }\n    if p <\
    \ 22 {\n        return modp(n - 21, p) + p\n    }\n    if p < 23 {\n        return\
    \ modp(n - 22, p) + p\n    }\n    if p < 24 {\n        return modp(n - 23, p)\
    \ + p\n    }\n    if p < 25 {\n        return modp(n - 24, p) + p\n    }\n   \
    \ if p < 26 {\n        return modp(n - 25, p) + p\n    }\n    if p < 27 {\n  \
    \      return modp(n - 26, p) + p\n    }\n    if p < 28 {\n        return modp(n\
    \ - 27, p) + p\n    }\n    if p < 29 {\n        return modp(n - 28, p) + p\n \
    \   }\n    if p < 30 {\n        return modp(n - 29, p) + p\n    }\n    if p <\
    \ 31 {\n", "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n      \
    \  return p\n    }\n    if p < 2 {\n        return modp(n - 1, p) + p\n    }\n\
    \    if p < 4 {\n        return modp(n - 2, p) + p\n    }\n    if p < 8 {\n  \
    \      return modp(n - 4, p) + p\n    }\n    if p < 16 {\n        return modp(n\
    \ - 8, p) + p\n    }\n    if p < 32 {\n        return modp(n - 16, p) + p\n  \
    \  }\n    if p < 64 {\n        return modp(n - 32, p) + p\n    }\n    if p < 128\
    \ {\n        return modp(n - 64, p) + p\n    }\n    if p < 256 {\n        return\
    \ modp(n - 128, p) + p\n    }\n    if p < 512 {\n        return modp(n - 256,\
    \ p) + p\n    }\n    if p < 1024 {\n        return modp(n - 512, p) + p\n    }\n\
    \    if p < 2048 {\n        return modp(n - 1024, p) + p\n    }\n    if p < 4096\
    \ {\n        return modp(n - 2048, p) + p\n    }\n    if p < 8192 {\n        return\
    \ modp(n - 4096, p) + p\n    }\n    if p < 16384 {\n        return modp(n - 8192,\
    \ p) + p\n    }\n    if p < 32768 {\n        return modp(n - 16384, p) + p\n \
    \   }\n    if p < 65536 {\n        return modp(n - 32768, p) + p\n    }\n    if\
    \ p < 131072 {\n        return modp(n - 65536, p) + p\n    }\n    if p < 262144\
    \ {\n        return modp(n - 131072, p) + p\n    }\n    if p < 524288 {\n    \
    \    return modp(n - 262144, p) + p\n    }\n    if p < 1048576 {\n        return\
    \ modp(n - 524288, p) + p\n    }\n    if p < 2097152 {\n        return modp(n\
    \ - 1048576, p) + p\n    }\n    if p < 4194304 {\n        return modp(n - 2097152,\
    \ p) + p\n    }\n    if p < 8388608 {\n        return modp(n - 4194304, p) + p\n\
    \    }\n    if p < 16777216 {\n        return modp(n - 8388608, p) + p\n    }\n\
    \    if p < 33554432 {\n        return modp(n - 16777216, p) + p\n    }\n    if\
    \ p < 67108864 {\n        return modp(n - 33554432, p) + p\n    }\n    if p <\
    \ 134217728", "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n   \
    \     return p\n    }\n    if p < 2 {\n        return modp(n - 1, p) + p\n   \
    \ }\n    if p > 2 {\n        return modp(n - 1, p) - p\n    }\n    if p < p {\n\
    \        return modp(n - 1, p) + p\n    }\n    if p > p {\n        return modp(n\
    \ - 1, p) - p\n    }\n    if p < p {\n        return modp(n - 1, p) + p\n    }\n\
    \    if p > p {\n        return modp(n - 1, p) - p\n    }\n    if p < p {\n  \
    \      return modp(n - 1, p) + p\n    }\n    if p > p {\n        return modp(n\
    \ - 1, p) - p\n    }\n    if p < p {\n        return modp(n - 1, p) + p\n    }\n\
    \    if p > p {\n        return modp(n - 1, p) - p\n    }\n    if p < p {\n  \
    \      return modp(n - 1, p) + p\n    }\n    if p > p {\n        return modp(n\
    \ - 1, p) - p\n    }\n    if p < p {\n        return modp(n - 1, p) + p\n    }\n\
    \    if p > p {\n        return modp(n - 1, p) - p\n    }\n    if p < p {\n  \
    \      return modp(n - 1, p) + p\n    }\n    if p > p {\n        return modp(n\
    \ - 1, p) - p\n    }\n    if p < p {\n        return modp(n - 1, p) + p\n    }\n\
    \    if p > p {\n        return modp(n - 1, p) - p\n    }\n    if p < p {\n  \
    \      return modp(n - 1, p) + p\n    }\n    if p > p {\n        return modp(n\
    \ - 1, p) - p\n    }\n    if p < p {\n        return modp(n - 1, p) + p\n    }\n\
    \    if p > p {\n        return modp(n - 1, p) - p\n    }\n    if p < p {\n  \
    \      return modp(n - 1, p) + p\n    }\n    if p > p {\n        return modp(n\
    \ - 1, p) - p\n    }\n    if p < p {\n        return modp(n - 1, p) + p\n    }\n\
    \    if p > p {\n        return modp(n - 1, p) - p\n    }\n    if p < p {\n  \
    \      return modp(n - 1, p) + p\n    }\n    if p > p {\n        return modp(n\
    \ - 1, p) - p\n    }\n    if p < p {\n        return modp(n - 1, p) + p\n    }\n\
    \    if p > p {\n        return modp(n - 1, p) - p\n    }\n    if p < p {\n  \
    \      return modp(n - 1, p) + p\n    }\n    if p > p {\n        return modp(n\
    \ - 1, p) - p\n    }\n    if p < p {\n        return modp(n - 1, p) + p\n    }\n",
  "    if n < 0 {\n        n *= -1\n    }\n    if n < p {\n        return n\n    }\n\
    \    if n == p {\n        return n\n    }\n    if n > p {\n        return modp(n\
    \ - p, p)\n    }\n    return 0\n}\n", "    if n < 0 {\n        n *= -1\n    }\n\
    \    if n < p {\n        return n\n    }\n    if n == p {\n        return n\n\
    \    }\n    if n > p {\n        return modp(n - p, p)\n    }\n    return 0\n}\n",
  "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n \
    \   }\n    return modp(n >> 1, p) + p\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
