language: go_test.go
name: HumanEval_22_filter_integers
results:
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    result := make([]int, 0)\n    for _, value := range\
    \ values {\n        switch v := value.(type) {\n        case int:\n          \
    \  result = append(result, v)\n        case float64:\n            result = append(result,\
    \ int(v))\n        case string:\n            i, err := strconv.Atoi(v)\n     \
    \       if err != nil {\n                fmt.Println(\"Error parsing int:\", err)\n\
    \            }\n            result = append(result, i)\n        default:\n   \
    \         fmt.Println(\"Unknown type:\", v)\n        }\n    }\n    return result\n\
    }\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu9k1tk6n_test.go:18:23: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074017
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    result := make([]int, 0)\n    for _, value := range\
    \ values {\n        switch value := value.(type) {\n        case int:\n      \
    \      result = append(result, value)\n        case float64:\n            result\
    \ = append(result, int(value))\n        case string:\n            i, err := strconv.Atoi(value)\n\
    \            if err != nil {\n                fmt.Printf(\"Error parsing string\
    \ %v as int: %v\\n\", value, err)\n            }\n            result = append(result,\
    \ i)\n        default:\n            fmt.Printf(\"Unexpected value %T\\n\", value)\n\
    \        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t *testing.T)\
    \ {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2bgge5kq_test.go:18:23: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074017
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    result := make([]int, 0)\n    for _, value := range\
    \ values {\n        switch value := value.(type) {\n        case int:\n      \
    \      result = append(result, value)\n        case float64:\n            result\
    \ = append(result, int(value))\n        case string:\n            i, err := strconv.Atoi(value)\n\
    \            if err != nil {\n                fmt.Printf(\"Error converting string\
    \ to int: %v\\n\", err)\n            }\n            result = append(result, i)\n\
    \        default:\n            fmt.Printf(\"Unknown type %T\\n\", value)\n   \
    \     }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t *testing.T)\
    \ {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi6olg2r__test.go:18:23: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074017
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    result := make([]int, 0)\n    for _, value := range\
    \ values {\n        if _, ok := value.(int); ok {\n            result = append(result,\
    \ value)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpxaclr0h3_test.go:13:37:\
    \ cannot use value (variable of type interface{}) as type int in argument to append:\n\
    \tneed type assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074017
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    filtered := make([]int, 0, len(values))\n    for\
    \ _, value := range values {\n        switch v := value.(type) {\n        case\
    \ int:\n            filtered = append(filtered, v)\n        case float64:\n  \
    \          filtered = append(filtered, int(v))\n        case string:\n       \
    \     filtered = append(filtered, int(v))\n        default:\n            fmt.Printf(\"\
    Unknown type %T in filter_integers\\n\", value)\n        }\n    }\n    return\
    \ filtered\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3dlxgk2d_test.go:18:45: cannot convert v (variable of type string) to
    type int

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074017
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    result := make([]int, 0)\n    for _, value := range\
    \ values {\n        if value, ok := value.(int); ok {\n            result = append(result,\
    \ value)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074018
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    var result []int\n    for _, value := range values\
    \ {\n        if _, ok := value.(int); ok {\n            result = append(result,\
    \ value)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp1_7wz1q1_test.go:13:37:\
    \ cannot use value (variable of type interface{}) as type int in argument to append:\n\
    \tneed type assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074017
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    var result []int\n    for _, value := range values\
    \ {\n        if _, ok := value.(int); ok {\n            result = append(result,\
    \ value)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp1_7wz1q1_test.go:13:37:\
    \ cannot use value (variable of type interface{}) as type int in argument to append:\n\
    \tneed type assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074017
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    var filtered []int\n    for _, value := range values\
    \ {\n        if value, ok := value.(int); ok {\n            filtered = append(filtered,\
    \ value)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074018
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    result := make([]int, 0)\n    for _, value := range\
    \ values {\n        if _, ok := value.(int); ok {\n            result = append(result,\
    \ value)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpxaclr0h3_test.go:13:37:\
    \ cannot use value (variable of type interface{}) as type int in argument to append:\n\
    \tneed type assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074017
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    filtered := make([]int, 0)\n    for _, value :=\
    \ range values {\n        if v, ok := value.(int); ok {\n            filtered\
    \ = append(filtered, v)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074018
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    result := make([]int, 0, len(values))\n    for _,\
    \ value := range values {\n        switch v := value.(type) {\n        case int:\n\
    \            result = append(result, v)\n        case float64:\n            result\
    \ = append(result, int(v))\n        case string:\n            i, err := strconv.Atoi(v)\n\
    \            if err != nil {\n                fmt.Println(\"Error parsing integer:\"\
    , err)\n            }\n            result = append(result, i)\n        default:\n\
    \            fmt.Println(\"Unknown type:\", v)\n        }\n    }\n    return result\n\
    }\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9y47gph0_test.go:18:23: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074017
- exit_code: 1
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    filtered := make([]int, 0)\n    for _, value :=\
    \ range values {\n        switch v := value.(type) {\n        case int:\n    \
    \        filtered = append(filtered, v)\n        case float64:\n            filtered\
    \ = append(filtered, int(v))\n        default:\n            fmt.Printf(\"%T is\
    \ not an int type\\n\", v)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "map[interface {}]interface {} is not an int type\n[]interface {} is not\
    \ an int type\nstring is not an int type\nstring is not an int type\nstring is\
    \ not an int type\nstring is not an int type\n--- FAIL: TestFilter_Integers (0.00s)\n\
    \    --- FAIL: TestFilter_Integers/test_num__1 (0.00s)\n        tmpiayjp8w9_test.go:39:\
    \ expected '[%!s(int=4) %!s(int=9)]', got '[%!s(int=4) %!s(int=23) %!s(int=9)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074018
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    filtered := make([]int, 0)\n    for _, value :=\
    \ range values {\n        if v, ok := value.(int); ok {\n            filtered\
    \ = append(filtered, v)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074018
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    filtered := make([]int, 0)\n    for _, value :=\
    \ range values {\n        if _, ok := value.(int); ok {\n            filtered\
    \ = append(filtered, value)\n        }\n    }\n    return filtered\n}\n\nfunc\
    \ TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]interface{}{}), expected: []int{} },\n\
    \     { actual: candidate([]interface{}{4, map[interface{}]interface{}{}, []interface{}{},\
    \ 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual: candidate([]interface{}{3,\
    \ \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmplr2bm7bk_test.go:13:41:\
    \ cannot use value (variable of type interface{}) as type int in argument to append:\n\
    \tneed type assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074017
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    result := make([]int, 0)\n    for _, value := range\
    \ values {\n        if _, ok := value.(int); ok {\n            result = append(result,\
    \ value)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpxaclr0h3_test.go:13:37:\
    \ cannot use value (variable of type interface{}) as type int in argument to append:\n\
    \tneed type assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074017
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    filtered := make([]int, 0)\n    for _, value :=\
    \ range values {\n        switch v := value.(type) {\n        case int:\n    \
    \        filtered = append(filtered, v)\n        case float64:\n            filtered\
    \ = append(filtered, int(v))\n        case string:\n            filtered = append(filtered,\
    \ int(v))\n        default:\n            fmt.Printf(\"%T is not a supported type\"\
    , value)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8n34mypz_test.go:18:45: cannot convert v (variable of type string) to
    type int

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074017
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    result := make([]int, 0, len(values))\n    for _,\
    \ value := range values {\n        if _, ok := value.(int); ok {\n           \
    \ result = append(result, value)\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]interface{}{}), expected: []int{} },\n\
    \     { actual: candidate([]interface{}{4, map[interface{}]interface{}{}, []interface{}{},\
    \ 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual: candidate([]interface{}{3,\
    \ \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmps01wmpa6_test.go:13:37:\
    \ cannot use value (variable of type interface{}) as type int in argument to append:\n\
    \tneed type assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074017
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    filtered := make([]int, 0)\n    for _, v := range\
    \ values {\n        if v, ok := v.(int); ok {\n            filtered = append(filtered,\
    \ v)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_Integers(t *testing.T)\
    \ {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074018
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    result := make([]int, 0)\n    for _, value := range\
    \ values {\n        switch v := value.(type) {\n        case int:\n          \
    \  result = append(result, v)\n        case int64:\n            result = append(result,\
    \ int(v))\n        case float64:\n            result = append(result, int(v))\n\
    \        case string:\n            i, err := strconv.Atoi(v)\n            if err\
    \ != nil {\n                fmt.Println(\"Error converting string to int:\", err)\n\
    \            }\n            result = append(result, i)\n        default:\n   \
    \         fmt.Println(\"Unknown type:\", v)\n        }\n    }\n    return result\n\
    }\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5sm0ekzy_test.go:20:23: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074017
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    result := make([]int, 0)\n    for _, value := range\
    \ values {\n        if value, ok := value.(int); ok {\n            result = append(result,\
    \ value)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074018
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    result := make([]int, 0)\n    for _, value := range\
    \ values {\n        if _, ok := value.(int); ok {\n            result = append(result,\
    \ value)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpxaclr0h3_test.go:13:37:\
    \ cannot use value (variable of type interface{}) as type int in argument to append:\n\
    \tneed type assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074017
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    result := make([]int, 0)\n    for _, value := range\
    \ values {\n        if v, ok := value.(int); ok {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t *testing.T)\
    \ {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074018
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    result := make([]int, 0)\n    for _, value := range\
    \ values {\n        if value, ok := value.(int); ok {\n            result = append(result,\
    \ value)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074018
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    filtered := make([]int, 0)\n    for _, value :=\
    \ range values {\n        switch v := value.(type) {\n        case int:\n    \
    \        filtered = append(filtered, v)\n        case int64:\n            filtered\
    \ = append(filtered, int(v))\n        case float64:\n            filtered = append(filtered,\
    \ int(v))\n        case string:\n            filtered = append(filtered, int(v))\n\
    \        default:\n            fmt.Printf(\"Unknown type %T\\n\", value)\n   \
    \     }\n    }\n    return filtered\n}\n\nfunc TestFilter_Integers(t *testing.T)\
    \ {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnrtst9_j_test.go:20:45: cannot convert v (variable of type string) to
    type int

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074017
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    result := make([]int, 0)\n    for _, value := range\
    \ values {\n        switch value := value.(type) {\n        case int:\n      \
    \      result = append(result, value)\n        case int64:\n            result\
    \ = append(result, int(value))\n        case float64:\n            result = append(result,\
    \ int(value))\n        case string:\n            i, err := strconv.Atoi(value)\n\
    \            if err != nil {\n                fmt.Printf(\"%v\\n\", err)\n   \
    \         }\n            result = append(result, i)\n        default:\n      \
    \      fmt.Printf(\"%v\\n\", value)\n        }\n    }\n    return result\n}\n\n\
    func TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]interface{}{}), expected: []int{} },\n\
    \     { actual: candidate([]interface{}{4, map[interface{}]interface{}{}, []interface{}{},\
    \ 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual: candidate([]interface{}{3,\
    \ \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_f6_4lka_test.go:20:23: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074017
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    filtered := make([]int, 0, len(values))\n    for\
    \ _, value := range values {\n        if v, ok := value.(int); ok {\n        \
    \    filtered = append(filtered, v)\n        }\n    }\n    return filtered\n}\n\
    \nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074018
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    filtered := make([]int, 0)\n    for _, value :=\
    \ range values {\n        if v, ok := value.(int); ok {\n            filtered\
    \ = append(filtered, v)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074018
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    var filtered []int\n    for _, value := range values\
    \ {\n        switch v := value.(type) {\n        case int:\n            filtered\
    \ = append(filtered, v)\n        case float64:\n            filtered = append(filtered,\
    \ int(v))\n        case string:\n            filtered = append(filtered, int(v))\n\
    \        default:\n            fmt.Printf(\"Unknown type %T\\n\", value)\n   \
    \     }\n    }\n    return filtered\n}\n\nfunc TestFilter_Integers(t *testing.T)\
    \ {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn2usp_x5_test.go:18:45: cannot convert v (variable of type string) to
    type int

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074017
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    filtered := make([]int, 0)\n    for _, value :=\
    \ range values {\n        if _, ok := value.(int); ok {\n            filtered\
    \ = append(filtered, value)\n        }\n    }\n    return filtered\n}\n\nfunc\
    \ TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]interface{}{}), expected: []int{} },\n\
    \     { actual: candidate([]interface{}{4, map[interface{}]interface{}{}, []interface{}{},\
    \ 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual: candidate([]interface{}{3,\
    \ \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmplr2bm7bk_test.go:13:41:\
    \ cannot use value (variable of type interface{}) as type int in argument to append:\n\
    \tneed type assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074017
- exit_code: 1
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    result := make([]int, len(values))\n    for idx,\
    \ val := range values {\n        switch val.(type) {\n        case int:\n    \
    \        result[idx] = val.(int)\n        case float64:\n            result[idx]\
    \ = val.(int)\n        case string:\n            result[idx] = val.(int)\n   \
    \     default:\n            fmt.Printf(\"Unknown type %T for value %v\\n\", val,\
    \ val)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t *testing.T)\
    \ {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "Unknown type map[interface {}]interface {} for value map[]\nUnknown type\
    \ []interface {} for value []\n--- FAIL: TestFilter_Integers (0.00s)\npanic: interface\
    \ conversion: interface {} is float64, not int [recovered]\n\tpanic: interface\
    \ conversion: interface {} is float64, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x504020,\
    \ 0xc000010450})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x504020, 0xc000010450})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.filter_integers({0xc0000f5e40, 0x6, 0x0?})\n\
    \t/tmp/tmphfkpwh2s_test.go:16 +0x1f7\ncommand-line-arguments_test.TestFilter_Integers(0x0?)\n\
    \t/tmp/tmphfkpwh2s_test.go:34 +0x157\ntesting.tRunner(0xc0001924e0, 0x5291a8)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074018
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    result := make([]int, 0)\n    for _, value := range\
    \ values {\n        if value, ok := value.(int); ok {\n            result = append(result,\
    \ value)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074018
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    filtered := make([]int, 0)\n    for _, value :=\
    \ range values {\n        if value, ok := value.(int); ok {\n            filtered\
    \ = append(filtered, value)\n        }\n    }\n    return filtered\n}\n\nfunc\
    \ TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]interface{}{}), expected: []int{} },\n\
    \     { actual: candidate([]interface{}{4, map[interface{}]interface{}{}, []interface{}{},\
    \ 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual: candidate([]interface{}{3,\
    \ \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074018
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    filtered := make([]int, 0)\n    for _, value :=\
    \ range values {\n        if _, ok := value.(int); ok {\n            filtered\
    \ = append(filtered, value)\n        }\n    }\n    return filtered\n}\n\nfunc\
    \ TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]interface{}{}), expected: []int{} },\n\
    \     { actual: candidate([]interface{}{4, map[interface{}]interface{}{}, []interface{}{},\
    \ 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual: candidate([]interface{}{3,\
    \ \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmplr2bm7bk_test.go:13:41:\
    \ cannot use value (variable of type interface{}) as type int in argument to append:\n\
    \tneed type assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074017
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    result := make([]int, 0)\n    for _, value := range\
    \ values {\n        if _, ok := value.(int); ok {\n            result = append(result,\
    \ value)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpxaclr0h3_test.go:13:37:\
    \ cannot use value (variable of type interface{}) as type int in argument to append:\n\
    \tneed type assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074017
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    var result []int\n    for _, value := range values\
    \ {\n        if v, ok := value.(int); ok {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t *testing.T)\
    \ {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074020
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    result := make([]int, 0)\n    for _, value := range\
    \ values {\n        if value, ok := value.(int); ok {\n            result = append(result,\
    \ value)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074018
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    filtered := make([]int, 0)\n    for _, value :=\
    \ range values {\n        switch v := value.(type) {\n        case int:\n    \
    \        filtered = append(filtered, v)\n        case int64:\n            filtered\
    \ = append(filtered, int(v))\n        case float64:\n            filtered = append(filtered,\
    \ int(v))\n        case string:\n            filtered = append(filtered, int(v))\n\
    \        default:\n            fmt.Printf(\"%T is not an int type\\n\", value)\n\
    \        }\n    }\n    return filtered\n}\n\nfunc TestFilter_Integers(t *testing.T)\
    \ {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpad3cg634_test.go:20:45: cannot convert v (variable of type string) to
    type int

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074019
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    result := make([]int, 0)\n    for _, value := range\
    \ values {\n        if _, ok := value.(int); ok {\n            result = append(result,\
    \ value)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpxaclr0h3_test.go:13:37:\
    \ cannot use value (variable of type interface{}) as type int in argument to append:\n\
    \tneed type assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074017
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    filtered := make([]int, 0)\n    for _, value :=\
    \ range values {\n        if value, ok := value.(int); ok {\n            filtered\
    \ = append(filtered, value)\n        }\n    }\n    return filtered\n}\n\nfunc\
    \ TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]interface{}{}), expected: []int{} },\n\
    \     { actual: candidate([]interface{}{4, map[interface{}]interface{}{}, []interface{}{},\
    \ 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual: candidate([]interface{}{3,\
    \ \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074018
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    var filtered []int\n    for _, value := range values\
    \ {\n        switch value := value.(type) {\n        case int:\n            filtered\
    \ = append(filtered, value)\n        case float64:\n            filtered = append(filtered,\
    \ int(value))\n        case string:\n            filtered = append(filtered, int(value))\n\
    \        default:\n            fmt.Printf(\"%T is not an int\\n\", value)\n  \
    \      }\n    }\n    return filtered\n}\n\nfunc TestFilter_Integers(t *testing.T)\
    \ {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplmy8a3ek_test.go:18:45: cannot convert value (variable of type string)
    to type int

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074019
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    filtered := make([]int, 0)\n    for _, value :=\
    \ range values {\n        if _, ok := value.(int); ok {\n            filtered\
    \ = append(filtered, value)\n        }\n    }\n    return filtered\n}\n\nfunc\
    \ TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]interface{}{}), expected: []int{} },\n\
    \     { actual: candidate([]interface{}{4, map[interface{}]interface{}{}, []interface{}{},\
    \ 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual: candidate([]interface{}{3,\
    \ \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmplr2bm7bk_test.go:13:41:\
    \ cannot use value (variable of type interface{}) as type int in argument to append:\n\
    \tneed type assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074017
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    result := make([]int, 0)\n    for _, value := range\
    \ values {\n        switch v := value.(type) {\n        case int:\n          \
    \  result = append(result, v)\n        case float64:\n            result = append(result,\
    \ int(v))\n        case string:\n            i, err := strconv.Atoi(v)\n     \
    \       if err != nil {\n                fmt.Println(\"Error converting string\
    \ to int:\", err)\n            }\n            result = append(result, i)\n   \
    \     default:\n            fmt.Println(\"Unknown type:\", v)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppxlvfbai_test.go:18:23: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074019
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    result := make([]int, 0)\n    for _, value := range\
    \ values {\n        if v, ok := value.(int); ok {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t *testing.T)\
    \ {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074018
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    filtered := make([]int, 0)\n    for _, value :=\
    \ range values {\n        switch value := value.(type) {\n        case int:\n\
    \            filtered = append(filtered, value)\n        case float64:\n     \
    \       filtered = append(filtered, int(value))\n        case string:\n      \
    \      filtered = append(filtered, int(value))\n        case bool:\n         \
    \   filtered = append(filtered, int(value))\n        default:\n            fmt.Printf(\"\
    Unknown type %T\\n\", value)\n        }\n    }\n    return filtered\n}\n\nfunc\
    \ TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]interface{}{}), expected: []int{} },\n\
    \     { actual: candidate([]interface{}{4, map[interface{}]interface{}{}, []interface{}{},\
    \ 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual: candidate([]interface{}{3,\
    \ \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7_p5jo3i_test.go:18:45: cannot convert value (variable of type string)
    to type int

    /tmp/tmp7_p5jo3i_test.go:20:45: cannot convert value (variable of type bool) to
    type int

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074019
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    filtered := make([]int, 0)\n    for _, value :=\
    \ range values {\n        if v, ok := value.(int); ok {\n            filtered\
    \ = append(filtered, v)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074018
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    result := make([]int, 0)\n    for _, value := range\
    \ values {\n        if _, ok := value.(int); ok {\n            result = append(result,\
    \ value)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpxaclr0h3_test.go:13:37:\
    \ cannot use value (variable of type interface{}) as type int in argument to append:\n\
    \tneed type assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074017
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    filtered := make([]int, 0, len(values))\n    for\
    \ _, v := range values {\n        if v, ok := v.(int); ok {\n            filtered\
    \ = append(filtered, v)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074020
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    filtered := make([]int, 0)\n    for _, value :=\
    \ range values {\n        if _, ok := value.(int); ok {\n            filtered\
    \ = append(filtered, value)\n        }\n    }\n    return filtered\n}\n\nfunc\
    \ TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]interface{}{}), expected: []int{} },\n\
    \     { actual: candidate([]interface{}{4, map[interface{}]interface{}{}, []interface{}{},\
    \ 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual: candidate([]interface{}{3,\
    \ \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmplr2bm7bk_test.go:13:41:\
    \ cannot use value (variable of type interface{}) as type int in argument to append:\n\
    \tneed type assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074017
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    result := make([]int, 0)\n    for _, value := range\
    \ values {\n        switch v := value.(type) {\n        case int:\n          \
    \  result = append(result, v)\n        case float64:\n            result = append(result,\
    \ int(v))\n        case string:\n            i, err := strconv.Atoi(v)\n     \
    \       if err != nil {\n                fmt.Printf(\"Error converting string\
    \ to int: %v\\n\", err)\n            }\n            result = append(result, i)\n\
    \        default:\n            fmt.Printf(\"Unknown type %T\\n\", value)\n   \
    \     }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t *testing.T)\
    \ {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp15zj38h9_test.go:18:23: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074019
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    result := make([]int, 0)\n    for _, value := range\
    \ values {\n        switch v := value.(type) {\n        case int:\n          \
    \  result = append(result, v)\n        case int64:\n            result = append(result,\
    \ int(v))\n        case float64:\n            result = append(result, int(v))\n\
    \        case string:\n            i, err := strconv.Atoi(v)\n            if err\
    \ != nil {\n                fmt.Printf(\"Failed to convert string to int: %v\\\
    n\", err)\n            }\n            result = append(result, i)\n        default:\n\
    \            fmt.Printf(\"Failed to filter value %v\\n\", value)\n        }\n\
    \    }\n    return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5q4fs47b_test.go:20:23: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074019
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    var result []int\n    for _, value := range values\
    \ {\n        if v, ok := value.(int); ok {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t *testing.T)\
    \ {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074020
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    filtered := make([]int, 0)\n    for _, value :=\
    \ range values {\n        if value, ok := value.(int); ok {\n            filtered\
    \ = append(filtered, value)\n        }\n    }\n    return filtered\n}\n\nfunc\
    \ TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]interface{}{}), expected: []int{} },\n\
    \     { actual: candidate([]interface{}{4, map[interface{}]interface{}{}, []interface{}{},\
    \ 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual: candidate([]interface{}{3,\
    \ \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074018
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    result := make([]int, 0)\n    for _, value := range\
    \ values {\n        if v, ok := value.(int); ok {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t *testing.T)\
    \ {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074018
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    filtered := make([]int, 0)\n    for _, value :=\
    \ range values {\n        if _, ok := value.(int); ok {\n            filtered\
    \ = append(filtered, value)\n        }\n    }\n    return filtered\n}\n\nfunc\
    \ TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]interface{}{}), expected: []int{} },\n\
    \     { actual: candidate([]interface{}{4, map[interface{}]interface{}{}, []interface{}{},\
    \ 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual: candidate([]interface{}{3,\
    \ \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmplr2bm7bk_test.go:13:41:\
    \ cannot use value (variable of type interface{}) as type int in argument to append:\n\
    \tneed type assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074017
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    var filtered []int\n    for _, value := range values\
    \ {\n        if _, ok := value.(int); ok {\n            filtered = append(filtered,\
    \ value)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpynnfrhpk_test.go:13:41:\
    \ cannot use value (variable of type interface{}) as type int in argument to append:\n\
    \tneed type assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074019
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    result := make([]int, 0)\n    for _, value := range\
    \ values {\n        if v, ok := value.(int); ok {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t *testing.T)\
    \ {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074018
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    filtered := make([]int, 0)\n    for _, value :=\
    \ range values {\n        switch v := value.(type) {\n        case int:\n    \
    \        filtered = append(filtered, v)\n        case float64:\n            filtered\
    \ = append(filtered, int(v))\n        case string:\n            filtered = append(filtered,\
    \ int(v))\n        default:\n            fmt.Printf(\"Unknown type %T\\n\", value)\n\
    \        }\n    }\n    return filtered\n}\n\nfunc TestFilter_Integers(t *testing.T)\
    \ {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_nxtkmq8_test.go:18:45: cannot convert v (variable of type string) to
    type int

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074019
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    var filtered []int\n    for _, value := range values\
    \ {\n        switch v := value.(type) {\n        case int:\n            filtered\
    \ = append(filtered, v)\n        case float64:\n            filtered = append(filtered,\
    \ int(v))\n        case string:\n            filtered = append(filtered, int(v))\n\
    \        default:\n            fmt.Printf(\"Unknown type %T\\n\", value)\n   \
    \     }\n    }\n    return filtered\n}\n\nfunc TestFilter_Integers(t *testing.T)\
    \ {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn2usp_x5_test.go:18:45: cannot convert v (variable of type string) to
    type int

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074017
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    filtered := make([]int, 0)\n    for _, value :=\
    \ range values {\n        if value, ok := value.(int); ok {\n            filtered\
    \ = append(filtered, value)\n        }\n    }\n    return filtered\n}\n\nfunc\
    \ TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]interface{}{}), expected: []int{} },\n\
    \     { actual: candidate([]interface{}{4, map[interface{}]interface{}{}, []interface{}{},\
    \ 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual: candidate([]interface{}{3,\
    \ \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074018
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    filtered := make([]int, 0)\n    for _, value :=\
    \ range values {\n        switch v := value.(type) {\n        case int:\n    \
    \        filtered = append(filtered, v)\n        case int64:\n            filtered\
    \ = append(filtered, int(v))\n        case float64:\n            filtered = append(filtered,\
    \ int(v))\n        case string:\n            filtered = append(filtered, int(v))\n\
    \        default:\n            fmt.Printf(\"%T not handled\\n\", v)\n        }\n\
    \    }\n    return filtered\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n \
    \ candidate := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvogzypk4_test.go:20:45: cannot convert v (variable of type string) to
    type int

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074019
- exit_code: 1
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    result := make([]int, 0)\n    for _, value := range\
    \ values {\n        switch v := value.(type) {\n        case int:\n          \
    \  result = append(result, v)\n        case float64:\n            result = append(result,\
    \ int(v))\n        default:\n            fmt.Printf(\"%T not an int\\n\", value)\n\
    \        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t *testing.T)\
    \ {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "map[interface {}]interface {} not an int\n[]interface {} not an int\nstring\
    \ not an int\nstring not an int\nstring not an int\nstring not an int\n--- FAIL:\
    \ TestFilter_Integers (0.00s)\n    --- FAIL: TestFilter_Integers/test_num__1 (0.00s)\n\
    \        tmp4o3obnl7_test.go:39: expected '[%!s(int=4) %!s(int=9)]', got '[%!s(int=4)\
    \ %!s(int=23) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074020
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    result := make([]int, 0, len(values))\n    for _,\
    \ value := range values {\n        if _, ok := value.(int); ok {\n           \
    \ result = append(result, value)\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]interface{}{}), expected: []int{} },\n\
    \     { actual: candidate([]interface{}{4, map[interface{}]interface{}{}, []interface{}{},\
    \ 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual: candidate([]interface{}{3,\
    \ \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmps01wmpa6_test.go:13:37:\
    \ cannot use value (variable of type interface{}) as type int in argument to append:\n\
    \tneed type assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074017
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    var filtered []int\n    for _, value := range values\
    \ {\n        if _, ok := value.(int); ok {\n            filtered = append(filtered,\
    \ value.(int))\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074020
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    filtered := make([]int, 0)\n    for _, value :=\
    \ range values {\n        if _, ok := value.(int); ok {\n            filtered\
    \ = append(filtered, value)\n        }\n    }\n    return filtered\n}\n\nfunc\
    \ TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]interface{}{}), expected: []int{} },\n\
    \     { actual: candidate([]interface{}{4, map[interface{}]interface{}{}, []interface{}{},\
    \ 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual: candidate([]interface{}{3,\
    \ \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmplr2bm7bk_test.go:13:41:\
    \ cannot use value (variable of type interface{}) as type int in argument to append:\n\
    \tneed type assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074017
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    result := make([]int, 0)\n    for _, value := range\
    \ values {\n        if value, ok := value.(int); ok {\n            result = append(result,\
    \ value)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074018
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    var result []int\n    for _, value := range values\
    \ {\n        switch v := value.(type) {\n        case int:\n            result\
    \ = append(result, v)\n        case int64:\n            result = append(result,\
    \ int(v))\n        case float64:\n            result = append(result, int(v))\n\
    \        case string:\n            i, err := strconv.Atoi(v)\n            if err\
    \ != nil {\n                fmt.Println(\"Could not convert string to int:\",\
    \ err)\n            }\n            result = append(result, i)\n        default:\n\
    \            fmt.Println(\"Could not convert value to int:\", value)\n       \
    \ }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n\
    \  candidate := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0mflt5ba_test.go:20:23: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074019
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    filtered := make([]int, 0)\n    for _, value :=\
    \ range values {\n        if _, ok := value.(int); ok {\n            filtered\
    \ = append(filtered, value)\n        }\n    }\n    return filtered\n}\n\nfunc\
    \ TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]interface{}{}), expected: []int{} },\n\
    \     { actual: candidate([]interface{}{4, map[interface{}]interface{}{}, []interface{}{},\
    \ 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual: candidate([]interface{}{3,\
    \ \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmplr2bm7bk_test.go:13:41:\
    \ cannot use value (variable of type interface{}) as type int in argument to append:\n\
    \tneed type assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074017
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    filtered := make([]int, 0)\n    for _, value :=\
    \ range values {\n        if value, ok := value.(int); ok {\n            filtered\
    \ = append(filtered, value)\n        }\n    }\n    return filtered\n}\n\nfunc\
    \ TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]interface{}{}), expected: []int{} },\n\
    \     { actual: candidate([]interface{}{4, map[interface{}]interface{}{}, []interface{}{},\
    \ 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual: candidate([]interface{}{3,\
    \ \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074018
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    result := make([]int, 0)\n    for _, value := range\
    \ values {\n        switch value := value.(type) {\n        case int:\n      \
    \      result = append(result, value)\n        case float64:\n            result\
    \ = append(result, int(value))\n        case string:\n            if value, err\
    \ := strconv.ParseInt(value, 10, 64); err == nil {\n                result = append(result,\
    \ int(value))\n            }\n        case bool:\n            if value {\n   \
    \             result = append(result, 1)\n            } else {\n             \
    \   result = append(result, 0)\n            }\n        default:\n            fmt.Printf(\"\
    Unknown type %T\\n\", value)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmm11koak_test.go:18:30: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074020
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    filtered := make([]int, 0)\n    for _, value :=\
    \ range values {\n        if value, ok := value.(int); ok {\n            filtered\
    \ = append(filtered, value)\n        }\n    }\n    return filtered\n}\n\nfunc\
    \ TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]interface{}{}), expected: []int{} },\n\
    \     { actual: candidate([]interface{}{4, map[interface{}]interface{}{}, []interface{}{},\
    \ 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual: candidate([]interface{}{3,\
    \ \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074018
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    filtered := make([]int, 0)\n    for _, value :=\
    \ range values {\n        if _, ok := value.(int); ok {\n            filtered\
    \ = append(filtered, value)\n        }\n    }\n    return filtered\n}\n\nfunc\
    \ TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]interface{}{}), expected: []int{} },\n\
    \     { actual: candidate([]interface{}{4, map[interface{}]interface{}{}, []interface{}{},\
    \ 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual: candidate([]interface{}{3,\
    \ \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmplr2bm7bk_test.go:13:41:\
    \ cannot use value (variable of type interface{}) as type int in argument to append:\n\
    \tneed type assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074017
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    result := make([]int, 0)\n    for _, value := range\
    \ values {\n        if v, ok := value.(int); ok {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t *testing.T)\
    \ {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074018
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    filtered := make([]int, 0)\n    for _, v := range\
    \ values {\n        if _, ok := v.(int); ok {\n            filtered = append(filtered,\
    \ v)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_Integers(t *testing.T)\
    \ {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpn8w2aca9_test.go:13:41:\
    \ cannot use v (variable of type interface{}) as type int in argument to append:\n\
    \tneed type assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074020
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    result := make([]int, 0)\n    for _, value := range\
    \ values {\n        if _, ok := value.(int); ok {\n            result = append(result,\
    \ value)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpxaclr0h3_test.go:13:37:\
    \ cannot use value (variable of type interface{}) as type int in argument to append:\n\
    \tneed type assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074017
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    result := make([]int, 0, len(values))\n    for _,\
    \ v := range values {\n        if v, ok := v.(int); ok {\n            result =\
    \ append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074020
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    filtered := make([]int, 0)\n    for _, v := range\
    \ values {\n        if v, ok := v.(int); ok {\n            filtered = append(filtered,\
    \ v)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_Integers(t *testing.T)\
    \ {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074018
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    var result []int\n    for _, value := range values\
    \ {\n        if _, ok := value.(int); ok {\n            result = append(result,\
    \ value)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp1_7wz1q1_test.go:13:37:\
    \ cannot use value (variable of type interface{}) as type int in argument to append:\n\
    \tneed type assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074017
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    result := make([]int, 0, len(values))\n    for _,\
    \ value := range values {\n        if _, ok := value.(int); ok {\n           \
    \ result = append(result, value)\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]interface{}{}), expected: []int{} },\n\
    \     { actual: candidate([]interface{}{4, map[interface{}]interface{}{}, []interface{}{},\
    \ 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual: candidate([]interface{}{3,\
    \ \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmps01wmpa6_test.go:13:37:\
    \ cannot use value (variable of type interface{}) as type int in argument to append:\n\
    \tneed type assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074017
- exit_code: 1
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    result := make([]int, len(values))\n    for i :=\
    \ range values {\n        switch v := values[i].(type) {\n        case int:\n\
    \            result[i] = v\n        case float64:\n            result[i] = int(v)\n\
    \        case string:\n            result[i] = 0\n        default:\n         \
    \   fmt.Printf(\"%T is not an int\\n\", v)\n        }\n    }\n    return result\n\
    }\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "map[interface {}]interface {} is not an int\n[]interface {} is not an int\n\
    --- FAIL: TestFilter_Integers (0.00s)\n    --- FAIL: TestFilter_Integers/test_num__1\
    \ (0.00s)\n        tmp6l2r7wmv_test.go:41: expected '[%!s(int=4) %!s(int=9)]',\
    \ got '[%!s(int=4) %!s(int=0) %!s(int=0) %!s(int=23) %!s(int=9) %!s(int=0)]'\n\
    \    --- FAIL: TestFilter_Integers/test_num__2 (0.00s)\n        tmp6l2r7wmv_test.go:41:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=3)]', got '[%!s(int=3) %!s(int=0) %!s(int=3)\
    \ %!s(int=3) %!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074020
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    result := make([]int, 0)\n    for _, value := range\
    \ values {\n        if v, ok := value.(int); ok {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t *testing.T)\
    \ {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074018
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    var result []int\n    for _, value := range values\
    \ {\n        if _, ok := value.(int); ok {\n            result = append(result,\
    \ value)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp1_7wz1q1_test.go:13:37:\
    \ cannot use value (variable of type interface{}) as type int in argument to append:\n\
    \tneed type assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074017
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    result := make([]int, 0)\n    for _, value := range\
    \ values {\n        if v, ok := value.(int); ok {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t *testing.T)\
    \ {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074018
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    result := make([]int, 0)\n    for _, value := range\
    \ values {\n        if _, ok := value.(int); ok {\n            result = append(result,\
    \ value)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpxaclr0h3_test.go:13:37:\
    \ cannot use value (variable of type interface{}) as type int in argument to append:\n\
    \tneed type assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074017
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    result := make([]int, 0)\n    for _, value := range\
    \ values {\n        if value, ok := value.(int); ok {\n            result = append(result,\
    \ value)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074018
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    result := make([]int, len(values))\n    for i :=\
    \ range values {\n        switch v := values[i].(type) {\n        case int:\n\
    \            result[i] = v\n        case float64:\n            result[i] = int(v)\n\
    \        case string:\n            v, err := strconv.ParseInt(v, 10, 64)\n   \
    \         if err != nil {\n                fmt.Println(err)\n            }\n \
    \           result[i] = int(v)\n        default:\n            fmt.Printf(\"%T\
    \ not handled in filter_integers\\n\", values[i])\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8gh1uw82_test.go:18:23: undefined: strconv

    /tmp/tmp8gh1uw82_test.go:22:29: cannot convert v (variable of type string) to
    type int

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074020
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    filtered := make([]int, 0)\n    for _, value :=\
    \ range values {\n        if v, ok := value.(int); ok {\n            filtered\
    \ = append(filtered, v)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074018
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    filtered := make([]int, 0)\n    for _, v := range\
    \ values {\n        if v, ok := v.(int); ok {\n            filtered = append(filtered,\
    \ v)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_Integers(t *testing.T)\
    \ {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074018
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    result := make([]int, 0)\n    for _, value := range\
    \ values {\n        if value, ok := value.(int); ok {\n            result = append(result,\
    \ value)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074018
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    filtered := make([]int, 0)\n    for _, value :=\
    \ range values {\n        if value, ok := value.(int); ok {\n            filtered\
    \ = append(filtered, value)\n        }\n    }\n    return filtered\n}\n\nfunc\
    \ TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]interface{}{}), expected: []int{} },\n\
    \     { actual: candidate([]interface{}{4, map[interface{}]interface{}{}, []interface{}{},\
    \ 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual: candidate([]interface{}{3,\
    \ \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074018
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    result := make([]int, 0, len(values))\n    for _,\
    \ value := range values {\n        if _, ok := value.(int); ok {\n           \
    \ result = append(result, value)\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]interface{}{}), expected: []int{} },\n\
    \     { actual: candidate([]interface{}{4, map[interface{}]interface{}{}, []interface{}{},\
    \ 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual: candidate([]interface{}{3,\
    \ \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmps01wmpa6_test.go:13:37:\
    \ cannot use value (variable of type interface{}) as type int in argument to append:\n\
    \tneed type assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074017
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    var result []int\n    for _, value := range values\
    \ {\n        if value, ok := value.(int); ok {\n            result = append(result,\
    \ value)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074020
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    filtered := make([]int, 0)\n    for _, value :=\
    \ range values {\n        if _, ok := value.(int); ok {\n            filtered\
    \ = append(filtered, value)\n        }\n    }\n    return filtered\n}\n\nfunc\
    \ TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]interface{}{}), expected: []int{} },\n\
    \     { actual: candidate([]interface{}{4, map[interface{}]interface{}{}, []interface{}{},\
    \ 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual: candidate([]interface{}{3,\
    \ \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmplr2bm7bk_test.go:13:41:\
    \ cannot use value (variable of type interface{}) as type int in argument to append:\n\
    \tneed type assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074017
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    result := make([]int, 0)\n    for _, value := range\
    \ values {\n        if v, ok := value.(int); ok {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t *testing.T)\
    \ {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074018
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    filtered := make([]int, 0)\n    for _, value :=\
    \ range values {\n        if _, ok := value.(int); ok {\n            filtered\
    \ = append(filtered, value)\n        }\n    }\n    return filtered\n}\n\nfunc\
    \ TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]interface{}{}), expected: []int{} },\n\
    \     { actual: candidate([]interface{}{4, map[interface{}]interface{}{}, []interface{}{},\
    \ 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual: candidate([]interface{}{3,\
    \ \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmplr2bm7bk_test.go:13:41:\
    \ cannot use value (variable of type interface{}) as type int in argument to append:\n\
    \tneed type assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074017
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    filtered := make([]int, 0)\n    for _, value :=\
    \ range values {\n        if _, ok := value.(int); ok {\n            filtered\
    \ = append(filtered, value)\n        }\n    }\n    return filtered\n}\n\nfunc\
    \ TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]interface{}{}), expected: []int{} },\n\
    \     { actual: candidate([]interface{}{4, map[interface{}]interface{}{}, []interface{}{},\
    \ 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual: candidate([]interface{}{3,\
    \ \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmplr2bm7bk_test.go:13:41:\
    \ cannot use value (variable of type interface{}) as type int in argument to append:\n\
    \tneed type assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074017
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    result := make([]int, 0)\n    for _, value := range\
    \ values {\n        switch v := value.(type) {\n        case int:\n          \
    \  result = append(result, v)\n        case int64:\n            result = append(result,\
    \ int(v))\n        case float64:\n            result = append(result, int(v))\n\
    \        case string:\n            i, err := strconv.Atoi(v)\n            if err\
    \ != nil {\n                fmt.Printf(\"%v\", err)\n            }\n         \
    \   result = append(result, i)\n        default:\n            fmt.Printf(\"%v\"\
    , value)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9lqe03ov_test.go:20:23: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074020
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    result := make([]int, 0)\n    for _, value := range\
    \ values {\n        if value, ok := value.(int); ok {\n            result = append(result,\
    \ value)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074018
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    result := make([]int, 0)\n    for _, value := range\
    \ values {\n        switch value := value.(type) {\n        case int:\n      \
    \      result = append(result, value)\n        case int64:\n            result\
    \ = append(result, int(value))\n        case float64:\n            result = append(result,\
    \ int(value))\n        case string:\n            i, err := strconv.Atoi(value)\n\
    \            if err != nil {\n                fmt.Printf(\"Error converting string\
    \ to int: %v\\n\", err)\n            }\n            result = append(result, i)\n\
    \        default:\n            fmt.Printf(\"Unknown type %T\\n\", value)\n   \
    \     }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t *testing.T)\
    \ {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxj9hlmf3_test.go:20:23: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074020
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    filtered := make([]int, 0)\n    for _, value :=\
    \ range values {\n        switch v := value.(type) {\n        case int:\n    \
    \        filtered = append(filtered, v)\n        case float64:\n            filtered\
    \ = append(filtered, int(v))\n        case string:\n            filtered = append(filtered,\
    \ int(v))\n        default:\n            fmt.Printf(\"%T not supported for filtering\\\
    n\", value)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmploho55am_test.go:18:45: cannot convert v (variable of type string) to
    type int

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074020
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    filtered := make([]int, 0)\n    for _, value :=\
    \ range values {\n        if _, ok := value.(int); ok {\n            filtered\
    \ = append(filtered, value)\n        }\n    }\n    return filtered\n}\n\nfunc\
    \ TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]interface{}{}), expected: []int{} },\n\
    \     { actual: candidate([]interface{}{4, map[interface{}]interface{}{}, []interface{}{},\
    \ 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual: candidate([]interface{}{3,\
    \ \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmplr2bm7bk_test.go:13:41:\
    \ cannot use value (variable of type interface{}) as type int in argument to append:\n\
    \tneed type assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074017
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    result := make([]int, 0)\n    for _, value := range\
    \ values {\n        if _, ok := value.(int); ok {\n            result = append(result,\
    \ value)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpxaclr0h3_test.go:13:37:\
    \ cannot use value (variable of type interface{}) as type int in argument to append:\n\
    \tneed type assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074017
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    filtered := make([]int, 0)\n    for _, value :=\
    \ range values {\n        if value, ok := value.(int); ok {\n            filtered\
    \ = append(filtered, value)\n        }\n    }\n    return filtered\n}\n\nfunc\
    \ TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]interface{}{}), expected: []int{} },\n\
    \     { actual: candidate([]interface{}{4, map[interface{}]interface{}{}, []interface{}{},\
    \ 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual: candidate([]interface{}{3,\
    \ \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074018
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    result := make([]int, 0)\n    for _, value := range\
    \ values {\n        if value, ok := value.(int); ok {\n            result = append(result,\
    \ value)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074018
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    filtered := make([]int, 0)\n    for _, value :=\
    \ range values {\n        switch v := value.(type) {\n        case int:\n    \
    \        filtered = append(filtered, v)\n        case float64:\n            filtered\
    \ = append(filtered, int(v))\n        case string:\n            filtered = append(filtered,\
    \ int(v))\n        default:\n            fmt.Printf(\"%T not handled\\n\", value)\n\
    \        }\n    }\n    return filtered\n}\n\nfunc TestFilter_Integers(t *testing.T)\
    \ {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpur_hepvq_test.go:18:45: cannot convert v (variable of type string) to
    type int

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074022
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    result := make([]int, 0)\n    for _, value := range\
    \ values {\n        if _, ok := value.(int); ok {\n            result = append(result,\
    \ value)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpxaclr0h3_test.go:13:37:\
    \ cannot use value (variable of type interface{}) as type int in argument to append:\n\
    \tneed type assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074017
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    filtered := make([]int, 0)\n    for _, value :=\
    \ range values {\n        if value, ok := value.(int); ok {\n            filtered\
    \ = append(filtered, value)\n        }\n    }\n    return filtered\n}\n\nfunc\
    \ TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]interface{}{}), expected: []int{} },\n\
    \     { actual: candidate([]interface{}{4, map[interface{}]interface{}{}, []interface{}{},\
    \ 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual: candidate([]interface{}{3,\
    \ \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074018
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    var result []int\n    for _, value := range values\
    \ {\n        if _, ok := value.(int); ok {\n            result = append(result,\
    \ value)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp1_7wz1q1_test.go:13:37:\
    \ cannot use value (variable of type interface{}) as type int in argument to append:\n\
    \tneed type assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074017
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    var result []int\n    for _, value := range values\
    \ {\n        if _, ok := value.(int); ok {\n            result = append(result,\
    \ value)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp1_7wz1q1_test.go:13:37:\
    \ cannot use value (variable of type interface{}) as type int in argument to append:\n\
    \tneed type assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074017
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    filtered := make([]int, 0, len(values))\n    for\
    \ _, value := range values {\n        switch v := value.(type) {\n        case\
    \ int:\n            filtered = append(filtered, v)\n        case float64:\n  \
    \          filtered = append(filtered, int(v))\n        case string:\n       \
    \     filtered = append(filtered, int(v))\n        default:\n            fmt.Printf(\"\
    %T is not an int\\n\", value)\n        }\n    }\n    return filtered\n}\n\nfunc\
    \ TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]interface{}{}), expected: []int{} },\n\
    \     { actual: candidate([]interface{}{4, map[interface{}]interface{}{}, []interface{}{},\
    \ 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual: candidate([]interface{}{3,\
    \ \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp41dgee4x_test.go:18:45: cannot convert v (variable of type string) to
    type int

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074022
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    filtered := make([]int, 0)\n    for _, value :=\
    \ range values {\n        if _, ok := value.(int); ok {\n            filtered\
    \ = append(filtered, value)\n        }\n    }\n    return filtered\n}\n\nfunc\
    \ TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]interface{}{}), expected: []int{} },\n\
    \     { actual: candidate([]interface{}{4, map[interface{}]interface{}{}, []interface{}{},\
    \ 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual: candidate([]interface{}{3,\
    \ \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmplr2bm7bk_test.go:13:41:\
    \ cannot use value (variable of type interface{}) as type int in argument to append:\n\
    \tneed type assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074017
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    result := make([]int, 0)\n    for _, value := range\
    \ values {\n        switch value := value.(type) {\n        case int:\n      \
    \      result = append(result, value)\n        case int64:\n            result\
    \ = append(result, int(value))\n        case float64:\n            result = append(result,\
    \ int(value))\n        case string:\n            i, err := strconv.Atoi(value)\n\
    \            if err != nil {\n                fmt.Printf(\"%v\", err)\n      \
    \      }\n            result = append(result, i)\n        default:\n         \
    \   fmt.Printf(\"%v\", value)\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]interface{}{}), expected: []int{} },\n\
    \     { actual: candidate([]interface{}{4, map[interface{}]interface{}{}, []interface{}{},\
    \ 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual: candidate([]interface{}{3,\
    \ \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphd0chj3x_test.go:20:23: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074022
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    filtered := make([]int, 0)\n    for _, value :=\
    \ range values {\n        if _, ok := value.(int); ok {\n            filtered\
    \ = append(filtered, value)\n        }\n    }\n    return filtered\n}\n\nfunc\
    \ TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]interface{}{}), expected: []int{} },\n\
    \     { actual: candidate([]interface{}{4, map[interface{}]interface{}{}, []interface{}{},\
    \ 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual: candidate([]interface{}{3,\
    \ \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmplr2bm7bk_test.go:13:41:\
    \ cannot use value (variable of type interface{}) as type int in argument to append:\n\
    \tneed type assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074017
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    var filtered []int\n    for _, value := range values\
    \ {\n        if _, ok := value.(int); ok {\n            filtered = append(filtered,\
    \ value)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpynnfrhpk_test.go:13:41:\
    \ cannot use value (variable of type interface{}) as type int in argument to append:\n\
    \tneed type assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074019
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    var result []int\n    for _, value := range values\
    \ {\n        if value, ok := value.(int); ok {\n            result = append(result,\
    \ value)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074020
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    filtered := make([]int, 0)\n    for _, value :=\
    \ range values {\n        if _, ok := value.(int); ok {\n            filtered\
    \ = append(filtered, value)\n        }\n    }\n    return filtered\n}\n\nfunc\
    \ TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]interface{}{}), expected: []int{} },\n\
    \     { actual: candidate([]interface{}{4, map[interface{}]interface{}{}, []interface{}{},\
    \ 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual: candidate([]interface{}{3,\
    \ \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmplr2bm7bk_test.go:13:41:\
    \ cannot use value (variable of type interface{}) as type int in argument to append:\n\
    \tneed type assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074017
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    result := make([]int, 0)\n    for _, value := range\
    \ values {\n        if _, ok := value.(int); ok {\n            result = append(result,\
    \ value)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpxaclr0h3_test.go:13:37:\
    \ cannot use value (variable of type interface{}) as type int in argument to append:\n\
    \tneed type assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074017
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    filtered := make([]int, 0)\n    for _, value :=\
    \ range values {\n        if _, ok := value.(int); ok {\n            filtered\
    \ = append(filtered, value)\n        }\n    }\n    return filtered\n}\n\nfunc\
    \ TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]interface{}{}), expected: []int{} },\n\
    \     { actual: candidate([]interface{}{4, map[interface{}]interface{}{}, []interface{}{},\
    \ 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual: candidate([]interface{}{3,\
    \ \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmplr2bm7bk_test.go:13:41:\
    \ cannot use value (variable of type interface{}) as type int in argument to append:\n\
    \tneed type assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074017
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    var result []int\n    for _, value := range values\
    \ {\n        if v, ok := value.(int); ok {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t *testing.T)\
    \ {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074020
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    filtered := make([]int, 0)\n    for _, value :=\
    \ range values {\n        switch v := value.(type) {\n        case int:\n    \
    \        filtered = append(filtered, v)\n        case float64:\n            filtered\
    \ = append(filtered, int(v))\n        case string:\n            filtered = append(filtered,\
    \ int(v))\n        default:\n            fmt.Printf(\"%T not handled\\n\", v)\n\
    \        }\n    }\n    return filtered\n}\n\nfunc TestFilter_Integers(t *testing.T)\
    \ {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8h8awqo__test.go:18:45: cannot convert v (variable of type string) to
    type int

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074022
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    filtered := make([]int, 0)\n    for _, value :=\
    \ range values {\n        if _, ok := value.(int); ok {\n            filtered\
    \ = append(filtered, value)\n        }\n    }\n    return filtered\n}\n\nfunc\
    \ TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]interface{}{}), expected: []int{} },\n\
    \     { actual: candidate([]interface{}{4, map[interface{}]interface{}{}, []interface{}{},\
    \ 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual: candidate([]interface{}{3,\
    \ \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmplr2bm7bk_test.go:13:41:\
    \ cannot use value (variable of type interface{}) as type int in argument to append:\n\
    \tneed type assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074017
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    result := make([]int, 0)\n    for _, value := range\
    \ values {\n        switch v := value.(type) {\n        case int:\n          \
    \  result = append(result, v)\n        case float64:\n            result = append(result,\
    \ int(v))\n        case string:\n            if v, err := strconv.Atoi(v); err\
    \ == nil {\n                result = append(result, int(v))\n            } else\
    \ {\n                result = append(result, 0)\n            }\n        default:\n\
    \            result = append(result, 0)\n        }\n    }\n    return result\n\
    }\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwjuifxz8_test.go:18:26: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074022
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    result := make([]int, 0)\n    for _, value := range\
    \ values {\n        if value, ok := value.(int); ok {\n            result = append(result,\
    \ value)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074018
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    filtered := make([]int, 0)\n    for _, value :=\
    \ range values {\n        if v, ok := value.(int); ok {\n            filtered\
    \ = append(filtered, v)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074018
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    result := make([]int, 0)\n    for _, value := range\
    \ values {\n        if _, ok := value.(int); ok {\n            result = append(result,\
    \ value)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpxaclr0h3_test.go:13:37:\
    \ cannot use value (variable of type interface{}) as type int in argument to append:\n\
    \tneed type assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074017
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    result := make([]int, 0)\n    for _, value := range\
    \ values {\n        if value, ok := value.(int); ok {\n            result = append(result,\
    \ value)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074018
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    result := make([]int, 0)\n    for _, value := range\
    \ values {\n        if v, ok := value.(int); ok {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t *testing.T)\
    \ {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074018
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    var filtered []int\n    for _, value := range values\
    \ {\n        if value, ok := value.(int); ok {\n            filtered = append(filtered,\
    \ value)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074018
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    filtered := make([]int, 0)\n    for _, value :=\
    \ range values {\n        if _, ok := value.(int); ok {\n            filtered\
    \ = append(filtered, value)\n        }\n    }\n    return filtered\n}\n\nfunc\
    \ TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]interface{}{}), expected: []int{} },\n\
    \     { actual: candidate([]interface{}{4, map[interface{}]interface{}{}, []interface{}{},\
    \ 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual: candidate([]interface{}{3,\
    \ \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmplr2bm7bk_test.go:13:41:\
    \ cannot use value (variable of type interface{}) as type int in argument to append:\n\
    \tneed type assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074017
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    filtered := make([]int, 0)\n    for _, value :=\
    \ range values {\n        switch v := value.(type) {\n        case int:\n    \
    \        filtered = append(filtered, v)\n        case float64:\n            filtered\
    \ = append(filtered, int(v))\n        case string:\n            filtered = append(filtered,\
    \ int(v))\n        default:\n            fmt.Printf(\"Unknown type %T in filter_integers\\\
    n\", value)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpeslea8ke_test.go:18:45: cannot convert v (variable of type string) to
    type int

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074022
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    filtered := make([]int, 0)\n    for _, value :=\
    \ range values {\n        if value, ok := value.(int); ok {\n            filtered\
    \ = append(filtered, value)\n        }\n    }\n    return filtered\n}\n\nfunc\
    \ TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]interface{}{}), expected: []int{} },\n\
    \     { actual: candidate([]interface{}{4, map[interface{}]interface{}{}, []interface{}{},\
    \ 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual: candidate([]interface{}{3,\
    \ \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074018
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    result := make([]int, 0)\n    for _, value := range\
    \ values {\n        if _, ok := value.(int); ok {\n            result = append(result,\
    \ value)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpxaclr0h3_test.go:13:37:\
    \ cannot use value (variable of type interface{}) as type int in argument to append:\n\
    \tneed type assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074017
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    var result []int\n    for _, value := range values\
    \ {\n        switch v := value.(type) {\n        case int:\n            result\
    \ = append(result, v)\n        case int64:\n            result = append(result,\
    \ int(v))\n        case float64:\n            result = append(result, int(v))\n\
    \        case string:\n            i, err := strconv.Atoi(v)\n            if err\
    \ != nil {\n                fmt.Println(\"Error converting string to int:\", err)\n\
    \            }\n            result = append(result, i)\n        case bool:\n \
    \           result = append(result, int(v))\n        default:\n            fmt.Println(\"\
    Unknown type:\", v)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpox03gfn3_test.go:20:23: undefined: strconv

    /tmp/tmpox03gfn3_test.go:26:41: cannot convert v (variable of type bool) to type
    int

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074022
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    filtered := make([]int, 0)\n    for _, v := range\
    \ values {\n        if v, ok := v.(int); ok {\n            filtered = append(filtered,\
    \ v)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_Integers(t *testing.T)\
    \ {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074018
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    filtered := make([]int, 0)\n    for _, value :=\
    \ range values {\n        switch v := value.(type) {\n        case int:\n    \
    \        filtered = append(filtered, v)\n        case float64:\n            filtered\
    \ = append(filtered, int(v))\n        case string:\n            filtered = append(filtered,\
    \ int(v))\n        default:\n            fmt.Printf(\"Unknown type %T for value\
    \ %v\\n\", value, value)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5rfuol_o_test.go:18:45: cannot convert v (variable of type string) to
    type int

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074022
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    var result []int\n    for _, value := range values\
    \ {\n        switch v := value.(type) {\n        case int:\n            result\
    \ = append(result, v)\n        case int64:\n            result = append(result,\
    \ int(v))\n        case float64:\n            result = append(result, int(v))\n\
    \        case string:\n            i, err := strconv.Atoi(v)\n            if err\
    \ != nil {\n                fmt.Printf(\"Error converting string to int: %v\\\
    n\", err)\n            }\n            result = append(result, i)\n        default:\n\
    \            fmt.Printf(\"Unknown type: %T\\n\", value)\n        }\n    }\n  \
    \  return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate :=\
    \ filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0l76e_ky_test.go:20:23: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074022
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    result := make([]int, 0)\n    for _, value := range\
    \ values {\n        if value, ok := value.(int); ok {\n            result = append(result,\
    \ value)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074018
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    result := make([]int, 0)\n    for _, value := range\
    \ values {\n        if v, ok := value.(int); ok {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t *testing.T)\
    \ {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074018
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    filtered := make([]int, 0)\n    for _, value :=\
    \ range values {\n        if _, ok := value.(int); ok {\n            filtered\
    \ = append(filtered, value)\n        }\n    }\n    return filtered\n}\n\nfunc\
    \ TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]interface{}{}), expected: []int{} },\n\
    \     { actual: candidate([]interface{}{4, map[interface{}]interface{}{}, []interface{}{},\
    \ 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual: candidate([]interface{}{3,\
    \ \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmplr2bm7bk_test.go:13:41:\
    \ cannot use value (variable of type interface{}) as type int in argument to append:\n\
    \tneed type assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074017
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    result := make([]int, 0, len(values))\n    for _,\
    \ value := range values {\n        if _, ok := value.(int); ok {\n           \
    \ result = append(result, value)\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]interface{}{}), expected: []int{} },\n\
    \     { actual: candidate([]interface{}{4, map[interface{}]interface{}{}, []interface{}{},\
    \ 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual: candidate([]interface{}{3,\
    \ \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmps01wmpa6_test.go:13:37:\
    \ cannot use value (variable of type interface{}) as type int in argument to append:\n\
    \tneed type assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074017
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    result := make([]int, 0)\n    for _, value := range\
    \ values {\n        switch value := value.(type) {\n        case int:\n      \
    \      result = append(result, value)\n        case float64:\n            result\
    \ = append(result, int(value))\n        case string:\n            i, err := strconv.Atoi(value)\n\
    \            if err != nil {\n                fmt.Println(\"Could not convert\
    \ string to int:\", err)\n            }\n            result = append(result, i)\n\
    \        default:\n            fmt.Println(\"Could not convert value to int:\"\
    , value)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpttl73c9b_test.go:18:23: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074022
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    result := make([]int, 0)\n    for _, value := range\
    \ values {\n        if v, ok := value.(int); ok {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t *testing.T)\
    \ {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074018
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    result := make([]int, 0)\n    for _, value := range\
    \ values {\n        switch v := value.(type) {\n        case int:\n          \
    \  result = append(result, v)\n        case float64:\n            result = append(result,\
    \ int(v))\n        case string:\n            i, err := strconv.Atoi(v)\n     \
    \       if err != nil {\n                fmt.Printf(\"Failed to convert string\
    \ %s to int: %v\\n\", v, err)\n            }\n            result = append(result,\
    \ i)\n        default:\n            fmt.Printf(\"Failed to convert %T to int\\\
    n\", value)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxgf7enqi_test.go:18:23: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074022
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    result := make([]int, len(values))\n    for i :=\
    \ range values {\n        switch v := values[i].(type) {\n        case int:\n\
    \            result[i] = v\n        case float64:\n            result[i] = int(v)\n\
    \        case string:\n            if v, err := strconv.ParseInt(v, 10, 64); err\
    \ == nil {\n                result[i] = int(v)\n            } else {\n       \
    \         fmt.Printf(\"%T %v\\n\", v, err)\n            }\n        default:\n\
    \            fmt.Printf(\"%T %v\\n\", v, v)\n        }\n    }\n    return result\n\
    }\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpiatb9x1a_test.go:18:26: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074022
- exit_code: 1
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    var result []int\n    for _, value := range values\
    \ {\n        switch value := value.(type) {\n        case int:\n            result\
    \ = append(result, value)\n        case int64:\n            result = append(result,\
    \ int(value))\n        case float64:\n            result = append(result, int(value))\n\
    \        default:\n            fmt.Printf(\"%T not handled\\n\", value)\n    \
    \    }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t *testing.T)\
    \ {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "map[interface {}]interface {} not handled\n[]interface {} not handled\n\
    string not handled\nstring not handled\nstring not handled\nstring not handled\n\
    --- FAIL: TestFilter_Integers (0.00s)\n    --- FAIL: TestFilter_Integers/test_num__1\
    \ (0.00s)\n        tmpkluhmqdw_test.go:41: expected '[%!s(int=4) %!s(int=9)]',\
    \ got '[%!s(int=4) %!s(int=23) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074022
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    result := make([]int, 0)\n    for _, value := range\
    \ values {\n        if value, ok := value.(int); ok {\n            result = append(result,\
    \ value)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074018
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    filtered := make([]int, 0)\n    for _, value :=\
    \ range values {\n        if v, ok := value.(int); ok {\n            filtered\
    \ = append(filtered, v)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074018
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    result := make([]int, 0)\n    for _, value := range\
    \ values {\n        switch value := value.(type) {\n        case int:\n      \
    \      result = append(result, value)\n        case float64:\n            result\
    \ = append(result, int(value))\n        case string:\n            i, err := strconv.Atoi(value)\n\
    \            if err != nil {\n                fmt.Printf(\"Unable to convert %s\
    \ to int for filtering\\n\", value)\n            }\n            result = append(result,\
    \ i)\n        default:\n            fmt.Printf(\"Unable to filter %v\\n\", value)\n\
    \        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t *testing.T)\
    \ {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8cokf63q_test.go:18:23: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074022
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    result := make([]int, 0)\n    for _, value := range\
    \ values {\n        if _, ok := value.(int); ok {\n            result = append(result,\
    \ value)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpxaclr0h3_test.go:13:37:\
    \ cannot use value (variable of type interface{}) as type int in argument to append:\n\
    \tneed type assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074017
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    result := make([]int, 0)\n    for _, value := range\
    \ values {\n        if _, ok := value.(int); ok {\n            result = append(result,\
    \ value)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpxaclr0h3_test.go:13:37:\
    \ cannot use value (variable of type interface{}) as type int in argument to append:\n\
    \tneed type assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074017
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    result := make([]int, 0)\n    for _, value := range\
    \ values {\n        if _, ok := value.(int); ok {\n            result = append(result,\
    \ value)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpxaclr0h3_test.go:13:37:\
    \ cannot use value (variable of type interface{}) as type int in argument to append:\n\
    \tneed type assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074017
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    result := make([]int, 0)\n    for _, value := range\
    \ values {\n        if value, ok := value.(int); ok {\n            result = append(result,\
    \ value)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074018
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    result := make([]int, 0)\n    for _, value := range\
    \ values {\n        if _, ok := value.(int); ok {\n            result = append(result,\
    \ value)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpxaclr0h3_test.go:13:37:\
    \ cannot use value (variable of type interface{}) as type int in argument to append:\n\
    \tneed type assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074017
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    var result []int\n    for _, value := range values\
    \ {\n        if _, ok := value.(int); ok {\n            result = append(result,\
    \ value)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp1_7wz1q1_test.go:13:37:\
    \ cannot use value (variable of type interface{}) as type int in argument to append:\n\
    \tneed type assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074017
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    result := make([]int, 0)\n    for _, value := range\
    \ values {\n        if value, ok := value.(int); ok {\n            result = append(result,\
    \ value)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074018
- exit_code: 1
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    result := make([]int, len(values))\n    for i :=\
    \ range values {\n        switch v := values[i].(type) {\n        case int:\n\
    \            result[i] = v\n        case float64:\n            result[i] = int(v)\n\
    \        case string:\n            result[i] = 0\n        default:\n         \
    \   result[i] = 0\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFilter_Integers (0.00s)\n    --- FAIL: TestFilter_Integers/test_num__1\
    \ (0.00s)\n        tmpg_slwls0_test.go:41: expected '[%!s(int=4) %!s(int=9)]',\
    \ got '[%!s(int=4) %!s(int=0) %!s(int=0) %!s(int=23) %!s(int=9) %!s(int=0)]'\n\
    \    --- FAIL: TestFilter_Integers/test_num__2 (0.00s)\n        tmpg_slwls0_test.go:41:\
    \ expected '[%!s(int=3) %!s(int=3) %!s(int=3)]', got '[%!s(int=3) %!s(int=0) %!s(int=3)\
    \ %!s(int=3) %!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074022
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    filtered := make([]int, 0)\n    for _, value :=\
    \ range values {\n        if value, ok := value.(int); ok {\n            filtered\
    \ = append(filtered, value)\n        }\n    }\n    return filtered\n}\n\nfunc\
    \ TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]interface{}{}), expected: []int{} },\n\
    \     { actual: candidate([]interface{}{4, map[interface{}]interface{}{}, []interface{}{},\
    \ 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual: candidate([]interface{}{3,\
    \ \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074018
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    var filtered []int\n    for _, value := range values\
    \ {\n        switch value := value.(type) {\n        case int:\n            filtered\
    \ = append(filtered, value)\n        case float64:\n            filtered = append(filtered,\
    \ int(value))\n        case string:\n            filtered = append(filtered, int(value))\n\
    \        default:\n            fmt.Printf(\"Unknown type %T\\n\", value)\n   \
    \     }\n    }\n    return filtered\n}\n\nfunc TestFilter_Integers(t *testing.T)\
    \ {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn1hdlo7q_test.go:18:45: cannot convert value (variable of type string)
    to type int

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074022
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    result := make([]int, 0)\n    for _, value := range\
    \ values {\n        switch value := value.(type) {\n        case int:\n      \
    \      result = append(result, value)\n        case float64:\n            result\
    \ = append(result, int(value))\n        case string:\n            n, err := strconv.Atoi(value)\n\
    \            if err != nil {\n                fmt.Printf(\"Failed to convert string\
    \ to int: %v\\n\", err)\n            }\n            result = append(result, int(n))\n\
    \        default:\n            fmt.Printf(\"Failed to filter value %v\\n\", value)\n\
    \        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t *testing.T)\
    \ {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphizxa_j8_test.go:18:23: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074022
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    var filtered []int\n    for _, value := range values\
    \ {\n        switch value := value.(type) {\n        case int:\n            filtered\
    \ = append(filtered, value)\n        case float64:\n            filtered = append(filtered,\
    \ int(value))\n        case string:\n            filtered = append(filtered, int(value))\n\
    \        default:\n            fmt.Printf(\"%T is not an int\\n\", value)\n  \
    \      }\n    }\n    return filtered\n}\n\nfunc TestFilter_Integers(t *testing.T)\
    \ {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplmy8a3ek_test.go:18:45: cannot convert value (variable of type string)
    to type int

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074019
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    filtered := make([]int, 0, len(values))\n    for\
    \ _, value := range values {\n        if _, ok := value.(int); ok {\n        \
    \    filtered = append(filtered, value)\n        }\n    }\n    return filtered\n\
    }\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0xmosz_3_test.go:13:41:\
    \ cannot use value (variable of type interface{}) as type int in argument to append:\n\
    \tneed type assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074022
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    result := make([]int, 0)\n    for _, value := range\
    \ values {\n        if value, ok := value.(int); ok {\n            result = append(result,\
    \ value)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074018
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    result := make([]int, 0, len(values))\n    for _,\
    \ value := range values {\n        if value, ok := value.(int); ok {\n       \
    \     result = append(result, value)\n        }\n    }\n    return result\n}\n\
    \nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074022
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    var result []int\n    for _, value := range values\
    \ {\n        if value, ok := value.(int); ok {\n            result = append(result,\
    \ value)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074020
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    filtered := make([]int, 0)\n    for _, value :=\
    \ range values {\n        if _, ok := value.(int); ok {\n            filtered\
    \ = append(filtered, value)\n        }\n    }\n    return filtered\n}\n\nfunc\
    \ TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]interface{}{}), expected: []int{} },\n\
    \     { actual: candidate([]interface{}{4, map[interface{}]interface{}{}, []interface{}{},\
    \ 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual: candidate([]interface{}{3,\
    \ \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmplr2bm7bk_test.go:13:41:\
    \ cannot use value (variable of type interface{}) as type int in argument to append:\n\
    \tneed type assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074017
- exit_code: 1
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    filtered := make([]int, 0)\n    for _, value :=\
    \ range values {\n        switch v := value.(type) {\n        case int:\n    \
    \        filtered = append(filtered, v)\n        case float64:\n            filtered\
    \ = append(filtered, int(v))\n        default:\n            fmt.Printf(\"%T not\
    \ an int value\\n\", value)\n        }\n    }\n    return filtered\n}\n\nfunc\
    \ TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]interface{}{}), expected: []int{} },\n\
    \     { actual: candidate([]interface{}{4, map[interface{}]interface{}{}, []interface{}{},\
    \ 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual: candidate([]interface{}{3,\
    \ \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "map[interface {}]interface {} not an int value\n[]interface {} not an int\
    \ value\nstring not an int value\nstring not an int value\nstring not an int value\n\
    string not an int value\n--- FAIL: TestFilter_Integers (0.00s)\n    --- FAIL:\
    \ TestFilter_Integers/test_num__1 (0.00s)\n        tmp_qdgyqey_test.go:39: expected\
    \ '[%!s(int=4) %!s(int=9)]', got '[%!s(int=4) %!s(int=23) %!s(int=9)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074022
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    filtered := make([]int, 0)\n    for _, value :=\
    \ range values {\n        switch v := value.(type) {\n        case int:\n    \
    \        filtered = append(filtered, v)\n        default:\n            continue\n\
    \        }\n    }\n    return filtered\n}\n\nfunc TestFilter_Integers(t *testing.T)\
    \ {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074022
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    var filtered []int\n    for _, v := range values\
    \ {\n        if v, ok := v.(int); ok {\n            filtered = append(filtered,\
    \ v)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_Integers(t *testing.T)\
    \ {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074022
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    filtered := make([]int, 0)\n    for _, value :=\
    \ range values {\n        if _, ok := value.(int); ok {\n            filtered\
    \ = append(filtered, value)\n        }\n    }\n    return filtered\n}\n\nfunc\
    \ TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]interface{}{}), expected: []int{} },\n\
    \     { actual: candidate([]interface{}{4, map[interface{}]interface{}{}, []interface{}{},\
    \ 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual: candidate([]interface{}{3,\
    \ \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmplr2bm7bk_test.go:13:41:\
    \ cannot use value (variable of type interface{}) as type int in argument to append:\n\
    \tneed type assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074017
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    result := make([]int, 0)\n    for _, value := range\
    \ values {\n        if v, ok := value.(int); ok {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t *testing.T)\
    \ {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074018
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    filtered := make([]int, 0)\n    for _, value :=\
    \ range values {\n        switch v := value.(type) {\n        case int:\n    \
    \        filtered = append(filtered, v)\n        case int64:\n            filtered\
    \ = append(filtered, int(v))\n        case float64:\n            filtered = append(filtered,\
    \ int(v))\n        case string:\n            filtered = append(filtered, int(v))\n\
    \        default:\n            fmt.Printf(\"%T not handled in filter_integers\\\
    n\", v)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwcyj94jg_test.go:20:45: cannot convert v (variable of type string) to
    type int

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074022
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    result := make([]int, 0)\n    for _, value := range\
    \ values {\n        if _, ok := value.(int); ok {\n            result = append(result,\
    \ value)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpxaclr0h3_test.go:13:37:\
    \ cannot use value (variable of type interface{}) as type int in argument to append:\n\
    \tneed type assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074017
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    result := make([]int, 0)\n    for _, value := range\
    \ values {\n        if v, ok := value.(int); ok {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t *testing.T)\
    \ {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074018
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    filtered := make([]int, 0)\n    for _, value :=\
    \ range values {\n        if _, ok := value.(int); ok {\n            filtered\
    \ = append(filtered, value)\n        }\n    }\n    return filtered\n}\n\nfunc\
    \ TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]interface{}{}), expected: []int{} },\n\
    \     { actual: candidate([]interface{}{4, map[interface{}]interface{}{}, []interface{}{},\
    \ 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual: candidate([]interface{}{3,\
    \ \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmplr2bm7bk_test.go:13:41:\
    \ cannot use value (variable of type interface{}) as type int in argument to append:\n\
    \tneed type assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074017
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    result := make([]int, 0)\n    for _, value := range\
    \ values {\n        if value, ok := value.(int); ok {\n            result = append(result,\
    \ value)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074018
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    result := make([]int, 0)\n    for _, value := range\
    \ values {\n        if value, ok := value.(int); ok {\n            result = append(result,\
    \ value)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074018
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    result := make([]int, 0)\n    for _, value := range\
    \ values {\n        if _, ok := value.(int); ok {\n            result = append(result,\
    \ value)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpxaclr0h3_test.go:13:37:\
    \ cannot use value (variable of type interface{}) as type int in argument to append:\n\
    \tneed type assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074017
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    filtered := make([]int, 0)\n    for _, value :=\
    \ range values {\n        if _, ok := value.(int); ok {\n            filtered\
    \ = append(filtered, value)\n        }\n    }\n    return filtered\n}\n\nfunc\
    \ TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]interface{}{}), expected: []int{} },\n\
    \     { actual: candidate([]interface{}{4, map[interface{}]interface{}{}, []interface{}{},\
    \ 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual: candidate([]interface{}{3,\
    \ \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmplr2bm7bk_test.go:13:41:\
    \ cannot use value (variable of type interface{}) as type int in argument to append:\n\
    \tneed type assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074017
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    filtered := make([]int, 0)\n    for _, value :=\
    \ range values {\n        if _, ok := value.(int); ok {\n            filtered\
    \ = append(filtered, value)\n        }\n    }\n    return filtered\n}\n\nfunc\
    \ TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]interface{}{}), expected: []int{} },\n\
    \     { actual: candidate([]interface{}{4, map[interface{}]interface{}{}, []interface{}{},\
    \ 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual: candidate([]interface{}{3,\
    \ \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmplr2bm7bk_test.go:13:41:\
    \ cannot use value (variable of type interface{}) as type int in argument to append:\n\
    \tneed type assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074017
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    result := make([]int, 0)\n    for _, value := range\
    \ values {\n        if _, ok := value.(int); ok {\n            result = append(result,\
    \ value)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpxaclr0h3_test.go:13:37:\
    \ cannot use value (variable of type interface{}) as type int in argument to append:\n\
    \tneed type assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074017
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    filtered := make([]int, 0, len(values))\n    for\
    \ _, v := range values {\n        if v, ok := v.(int); ok {\n            filtered\
    \ = append(filtered, v)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074020
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    result := make([]int, 0)\n    for _, value := range\
    \ values {\n        if _, ok := value.(int); ok {\n            result = append(result,\
    \ value)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpxaclr0h3_test.go:13:37:\
    \ cannot use value (variable of type interface{}) as type int in argument to append:\n\
    \tneed type assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074017
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    var filtered []int\n    for _, value := range values\
    \ {\n        switch v := value.(type) {\n        case int:\n            filtered\
    \ = append(filtered, v)\n        case float64:\n            filtered = append(filtered,\
    \ int(v))\n        case string:\n            filtered = append(filtered, int(v))\n\
    \        default:\n            fmt.Printf(\"unsupported type %T\\n\", value)\n\
    \        }\n    }\n    return filtered\n}\n\nfunc TestFilter_Integers(t *testing.T)\
    \ {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc33v7mn6_test.go:18:45: cannot convert v (variable of type string) to
    type int

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074022
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    result := make([]int, 0)\n    for _, value := range\
    \ values {\n        if _, ok := value.(int); ok {\n            result = append(result,\
    \ value)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpxaclr0h3_test.go:13:37:\
    \ cannot use value (variable of type interface{}) as type int in argument to append:\n\
    \tneed type assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074017
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    var result []int\n    for _, value := range values\
    \ {\n        if _, ok := value.(int); ok {\n            result = append(result,\
    \ value)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp1_7wz1q1_test.go:13:37:\
    \ cannot use value (variable of type interface{}) as type int in argument to append:\n\
    \tneed type assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074017
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    var filtered []int\n    for _, v := range values\
    \ {\n        if v, ok := v.(int); ok {\n            filtered = append(filtered,\
    \ v)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_Integers(t *testing.T)\
    \ {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074022
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    filtered := make([]int, 0)\n    for _, value :=\
    \ range values {\n        switch v := value.(type) {\n        case int:\n    \
    \        filtered = append(filtered, v)\n        case int64:\n            filtered\
    \ = append(filtered, int(v))\n        case float64:\n            filtered = append(filtered,\
    \ int(v))\n        case string:\n            filtered = append(filtered, int(v))\n\
    \        default:\n            fmt.Printf(\"Unknown type %T in filter_integers\\\
    n\", v)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4goz3fqo_test.go:20:45: cannot convert v (variable of type string) to
    type int

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074022
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    result := make([]int, 0)\n    for _, value := range\
    \ values {\n        if value, ok := value.(int); ok {\n            result = append(result,\
    \ value)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074018
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    result := make([]int, 0)\n    for _, value := range\
    \ values {\n        if value, ok := value.(int); ok {\n            result = append(result,\
    \ value)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074018
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    filtered := make([]int, 0)\n    for _, value :=\
    \ range values {\n        if value, ok := value.(int); ok {\n            filtered\
    \ = append(filtered, value)\n        }\n    }\n    return filtered\n}\n\nfunc\
    \ TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]interface{}{}), expected: []int{} },\n\
    \     { actual: candidate([]interface{}{4, map[interface{}]interface{}{}, []interface{}{},\
    \ 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual: candidate([]interface{}{3,\
    \ \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074018
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    result := make([]int, 0)\n    for _, value := range\
    \ values {\n        if v, ok := value.(int); ok {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t *testing.T)\
    \ {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074018
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    result := make([]int, 0)\n    for _, value := range\
    \ values {\n        if v, ok := value.(int); ok {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t *testing.T)\
    \ {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074018
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    result := make([]int, 0)\n    for _, value := range\
    \ values {\n        if value, ok := value.(int); ok {\n            result = append(result,\
    \ value)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074018
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    result := make([]int, 0)\n    for _, value := range\
    \ values {\n        if value, ok := value.(int); ok {\n            result = append(result,\
    \ value)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074018
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    result := make([]int, 0)\n    for _, value := range\
    \ values {\n        if value, ok := value.(int); ok {\n            result = append(result,\
    \ value)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074018
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    filtered := make([]int, 0)\n    for _, value :=\
    \ range values {\n        if _, ok := value.(int); ok {\n            filtered\
    \ = append(filtered, value)\n        }\n    }\n    return filtered\n}\n\nfunc\
    \ TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]interface{}{}), expected: []int{} },\n\
    \     { actual: candidate([]interface{}{4, map[interface{}]interface{}{}, []interface{}{},\
    \ 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual: candidate([]interface{}{3,\
    \ \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmplr2bm7bk_test.go:13:41:\
    \ cannot use value (variable of type interface{}) as type int in argument to append:\n\
    \tneed type assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074017
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    result := make([]int, 0)\n    for _, value := range\
    \ values {\n        if _, ok := value.(int); ok {\n            result = append(result,\
    \ value)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpxaclr0h3_test.go:13:37:\
    \ cannot use value (variable of type interface{}) as type int in argument to append:\n\
    \tneed type assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074017
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    result := make([]int, 0)\n    for _, value := range\
    \ values {\n        if _, ok := value.(int); ok {\n            result = append(result,\
    \ value)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpxaclr0h3_test.go:13:37:\
    \ cannot use value (variable of type interface{}) as type int in argument to append:\n\
    \tneed type assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074017
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    var result []int\n    for _, value := range values\
    \ {\n        if value, ok := value.(int); ok {\n            result = append(result,\
    \ value)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074020
- exit_code: 2
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\nfunc filter_integers(values\
    \ []interface{}) []int {\n    result := make([]int, 0)\n    for _, value := range\
    \ values {\n        if _, ok := value.(int); ok {\n            result = append(result,\
    \ value)\n        }\n    }\n    return result\n}\n\nfunc TestFilter_Integers(t\
    \ *testing.T) {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]interface{}{}), expected: []int{} },\n     { actual: candidate([]interface{}{4,\
    \ map[interface{}]interface{}{}, []interface{}{}, 23.2, 9, \"adasd\"}), expected:\
    \ []int{4, 9} },\n     { actual: candidate([]interface{}{3, \"c\", 3, 3, \"a\"\
    , \"b\"}), expected: []int{3, 3, 3} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpxaclr0h3_test.go:13:37:\
    \ cannot use value (variable of type interface{}) as type int in argument to append:\n\
    \tneed type assertion\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074017
