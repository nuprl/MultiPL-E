language: go_test.go
name: HumanEval_157_right_angle_triangle
results:
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a > b {\n        return false\n    }\n    if b > c {\n        return\
    \ false\n    }\n    if a == b {\n        return false\n    }\n    if a == c {\n\
    \        return true\n    }\n    if b == c {\n        return true\n    }\n   \
    \ if a > c {\n        return false\n    }\n    if a == b {\n        return true\n\
    \    }\n    if a == c {\n        return true\n    }\n    if b > c {\n        return\
    \ false\n    }\n    return true\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T)\
    \ {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false\
    \ },\n     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__1\
    \ (0.00s)\n        tmpva_ztie5_test.go:67: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpva_ztie5_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmpva_ztie5_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073748
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n    }\n    \n\
    \    if a > b {\n        if b > c {\n            return false\n        }\n   \
    \ } else {\n        if c > b {\n            return false\n        }\n    }\n \
    \   \n    if a > c {\n        if c > b {\n            return false\n        }\n\
    \    } else {\n        if b > c {\n            return false\n        }\n    }\n\
    \    \n    return true\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n \
    \ candidate := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false\
    \ },\n     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp9tghlc6__test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp9tghlc6__test.go:64:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmp9tghlc6__test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmp9tghlc6__test.go:64:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmp9tghlc6__test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp9tghlc6__test.go:64:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__9\
    \ (0.00s)\n        tmp9tghlc6__test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073748
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a > b {\n        return false\n    }\n    if b > c {\n        return\
    \ false\n    }\n    if a == b {\n        return true\n    }\n    if a == c {\n\
    \        return true\n    }\n    if b == c {\n        return true\n    }\n   \
    \ if a > c {\n        return false\n    }\n    if b > a {\n        return false\n\
    \    }\n    if c > a {\n        return false\n    }\n    return true\n}\n\nfunc\
    \ TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpll51ioh1_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpll51ioh1_test.go:64:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmpll51ioh1_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpll51ioh1_test.go:64:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmpll51ioh1_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmpll51ioh1_test.go:64:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmpll51ioh1_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmpll51ioh1_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmpll51ioh1_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073748
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n    }\n    if\
    \ a == b {\n        return a == c\n    }\n    if a == c {\n        return b ==\
    \ c\n    }\n    if b == c {\n        return a == b\n    }\n    if a == b+c {\n\
    \        return a == c+b\n    }\n    if a == c+b {\n        return b == c+a\n\
    \    }\n    if b == c+a {\n        return a == b+c\n    }\n    return false\n\
    }\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp2xgl_1pq_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp2xgl_1pq_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmp2xgl_1pq_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmp2xgl_1pq_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmp2xgl_1pq_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmp2xgl_1pq_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmp2xgl_1pq_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmp2xgl_1pq_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073748
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n    }\n    if\
    \ a > b {\n        if a > c {\n            return true\n        } else {\n   \
    \         return false\n        }\n    } else {\n        if b > c {\n        \
    \    return true\n        } else {\n            return false\n        }\n    }\n\
    }\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpe3h_qig3_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpe3h_qig3_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__5\
    \ (0.00s)\n        tmpe3h_qig3_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmpe3h_qig3_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmpe3h_qig3_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmpe3h_qig3_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073748
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a > b {\n        return false\n    }\n    if b > c {\n        return\
    \ false\n    }\n    if a == b {\n        return true\n    }\n    if a == c {\n\
    \        return true\n    }\n    if b == c {\n        return true\n    }\n   \
    \ return false\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate\
    \ := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4,\
    \ 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false },\n\
    \     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp62p1i57g_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp62p1i57g_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmp62p1i57g_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmp62p1i57g_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmp62p1i57g_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmp62p1i57g_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmp62p1i57g_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmp62p1i57g_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmp62p1i57g_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073748
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a > b {\n        if b > c {\n            return true\n        } else\
    \ {\n            return false\n        }\n    } else {\n        if c > b {\n \
    \           return true\n        } else {\n            return false\n        }\n\
    \    }\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__1\
    \ (0.00s)\n        tmp0zcdwvdy_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp0zcdwvdy_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp0zcdwvdy_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__10 (0.00s)\n        tmp0zcdwvdy_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073748
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a > b {\n        return false\n    }\n    if b > c {\n        return\
    \ false\n    }\n    if a == b {\n        return false\n    }\n    if a == c {\n\
    \        return false\n    }\n    if b == c {\n        return true\n    }\n  \
    \  if a > c {\n        return false\n    }\n    if b > a {\n        return false\n\
    \    }\n    if c > a {\n        return false\n    }\n    return true\n}\n\nfunc\
    \ TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp351216ou_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp351216ou_test.go:64:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp351216ou_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp351216ou_test.go:64:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp351216ou_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp351216ou_test.go:64:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073748
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a > b {\n        if b > c {\n            return true\n        } else\
    \ {\n            return false\n        }\n    } else {\n        if c > b {\n \
    \           return true\n        } else {\n            return false\n        }\n\
    \    }\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__1\
    \ (0.00s)\n        tmp0zcdwvdy_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp0zcdwvdy_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp0zcdwvdy_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__10 (0.00s)\n        tmp0zcdwvdy_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073748
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a > b {\n        if b > c {\n            return true\n        } else\
    \ {\n            return false\n        }\n    } else {\n        if c > b {\n \
    \           return true\n        } else {\n            return false\n        }\n\
    \    }\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__1\
    \ (0.00s)\n        tmp0zcdwvdy_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp0zcdwvdy_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp0zcdwvdy_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__10 (0.00s)\n        tmp0zcdwvdy_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073748
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a > b {\n        return false\n    }\n    if b > c {\n        return\
    \ false\n    }\n    if a == b {\n        return false\n    }\n    if a == c {\n\
    \        return true\n    }\n    if b == c {\n        return true\n    }\n   \
    \ if a > c {\n        return false\n    }\n    if a == b {\n        return true\n\
    \    }\n    if a == c {\n        return true\n    }\n    if b > c {\n        return\
    \ false\n    }\n    return true\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T)\
    \ {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false\
    \ },\n     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__1\
    \ (0.00s)\n        tmpva_ztie5_test.go:67: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpva_ztie5_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmpva_ztie5_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073748
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a > b {\n        return false\n    }\n    if b > c {\n        return\
    \ false\n    }\n    if a == b {\n        return true\n    }\n    if a == c {\n\
    \        return true\n    }\n    if b == c {\n        return true\n    }\n   \
    \ if a > c {\n        return false\n    }\n    if b > a {\n        return false\n\
    \    }\n    if c > a {\n        return false\n    }\n    if a > b {\n        return\
    \ false\n    }\n    if b > c {\n        return false\n    }\n    if c > b {\n\
    \        return false\n    }\n    return true\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpy6ihdngv_test.go:73: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpy6ihdngv_test.go:73:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmpy6ihdngv_test.go:73: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpy6ihdngv_test.go:73:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmpy6ihdngv_test.go:73: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmpy6ihdngv_test.go:73:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmpy6ihdngv_test.go:73: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmpy6ihdngv_test.go:73:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmpy6ihdngv_test.go:73: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073748
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n    }\n\n    if\
    \ a == b {\n        return a == c\n    }\n\n    if a == c {\n        return b\
    \ == c\n    }\n\n    if b == c {\n        return a == b\n    }\n\n    return false\n\
    }\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpwqry0w30_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpwqry0w30_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmpwqry0w30_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpwqry0w30_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmpwqry0w30_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmpwqry0w30_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmpwqry0w30_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmpwqry0w30_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073748
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a > b {\n        return false\n    }\n    if b > c {\n        return\
    \ false\n    }\n    if a == b {\n        return true\n    }\n    if a == c {\n\
    \        return true\n    }\n    if b == c {\n        return true\n    }\n   \
    \ if a > c {\n        return false\n    }\n    if b > a {\n        return false\n\
    \    }\n    if c > a {\n        return false\n    }\n    if b > c {\n        return\
    \ false\n    }\n    if c > b {\n        return false\n    }\n    return true\n\
    }\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp6sh56vcw_test.go:70: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp6sh56vcw_test.go:70:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmp6sh56vcw_test.go:70: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmp6sh56vcw_test.go:70:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmp6sh56vcw_test.go:70: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmp6sh56vcw_test.go:70:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmp6sh56vcw_test.go:70: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmp6sh56vcw_test.go:70:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmp6sh56vcw_test.go:70: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073748
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    // Write your code here\n    \n    // return true if all sides are equal\n\
    \    if a == b {\n        return a == c\n    }\n    \n    // return true if all\
    \ sides are equal\n    if a == c {\n        return b == c\n    }\n    \n    //\
    \ return true if all sides are equal\n    if b == c {\n        return a == b\n\
    \    }\n    \n    // return true if all sides are equal\n    if a == b {\n   \
    \     return a == c\n    }\n    \n    // return true if all sides are equal\n\
    \    if a == c {\n        return b == c\n    }\n    \n    // return true if all\
    \ sides are equal\n    if b == c {\n        return a == b\n    }\n    \n    //\
    \ return true if all sides are equal\n    if a == b {\n        return a == c\n\
    \    }\n    \n    // return true if all sides are equal\n    if a == c {\n   \
    \     return b == c\n    }\n    \n    // return true if all sides are equal\n\
    \    if b == c {\n        return a == b\n    }\n    \n    // return true if all\
    \ sides are equal\n    if a == b {\n        return a == c\n    }\n    \n    //\
    \ return true if all sides are equal\n    if a == c {\n        return b == c\n\
    \    }\n    \n    // return true if all sides are equal\n    if b == c {\n   \
    \     return a == b\n    }\n    \n    // return true if all sides are equal\n\
    \    if a == b {\n        return a == c\n    }\n    \n    // return true if all\
    \ sides are equal\n    if a == c {\n        return b == c\n    }\n    \n    //\
    \ return true if all sides are equal\n    if b == c {\n        return a == b\n\
    \    }\n    \n    // return true if all sides are equal\n    if a == b {\n   \
    \     return a == c\n    }\n    \n    // return true if all sides are equal\n\
    \    if a == c {\n        return b == c\n    }\n    \n    // return true if all\
    \ sides are equal\n    if b == c {\n        return a == b\n    }\n    \n    //\
    \ return true if all sides are equal\n    if a == b {\n        return a == c\n\
    \    }\n    \n    // return true if all sides are equal\n    if a == c {\n   \
    \     return b == c\n    }\n    \n    // return true if all sides are equal\n\
    \    if b == c {\n        return a == b\n    }\n    \n    // return true if all\
    \ sides are equal\n    if a == b {\n        return a == c\n    }\n    \n    //\
    \ return true if all sides are equal\n    if a == c {\n        return b == c\n\
    \    }\n    \n    // return true if all sides are equal\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpm8wphjtl_test.go:132:6: expected ''('', found TestRight_Angle_Triangle

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073746
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a > b {\n        if b > c {\n            return true\n        } else\
    \ {\n            return false\n        }\n    } else {\n        if c > b {\n \
    \           return true\n        } else {\n            return false\n        }\n\
    \    }\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__1\
    \ (0.00s)\n        tmp0zcdwvdy_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp0zcdwvdy_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp0zcdwvdy_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__10 (0.00s)\n        tmp0zcdwvdy_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073748
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a > b {\n        return false\n    }\n    if b > c {\n        return\
    \ false\n    }\n    if a == b {\n        return true\n    }\n    if a == c {\n\
    \        return true\n    }\n    if b == c {\n        return true\n    }\n   \
    \ if a > c {\n        return false\n    }\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpq81q022i_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpq81q022i_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmpq81q022i_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpq81q022i_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmpq81q022i_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmpq81q022i_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmpq81q022i_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmpq81q022i_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmpq81q022i_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073748
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n    }\n    if\
    \ a == b {\n        return a == c\n    }\n    if a == c {\n        return b ==\
    \ c\n    }\n    if b == c {\n        return a != b\n    }\n    return a > b and\
    \ a > c and b > c\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate\
    \ := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4,\
    \ 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false },\n\
    \     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpxnxcpa8c_test.go:26:18: expected '';'', found and

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073746
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n    }\n    if\
    \ a > b {\n        if a > c {\n            return false\n        }\n        return\
    \ true\n    }\n    if b > c {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp0gmr40un_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp0gmr40un_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp0gmr40un_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp0gmr40un_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmp0gmr40un_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073748
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a > b {\n        return false\n    }\n    if b > c {\n        return\
    \ false\n    }\n    if a == b {\n        return true\n    }\n    if a == c {\n\
    \        return true\n    }\n    if b == c {\n        return true\n    }\n   \
    \ if a > c {\n        return false\n    }\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpq81q022i_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpq81q022i_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmpq81q022i_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpq81q022i_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmpq81q022i_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmpq81q022i_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmpq81q022i_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmpq81q022i_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmpq81q022i_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073748
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a > b {\n        return false\n    }\n    if b > c {\n        return\
    \ false\n    }\n    if a == b {\n        return true\n    }\n    if a == c {\n\
    \        return true\n    }\n    if b == c {\n        return true\n    }\n   \
    \ if a > c {\n        return false\n    }\n    if b > a {\n        return false\n\
    \    }\n    if c > a {\n        return false\n    }\n    return true\n}\n\nfunc\
    \ TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpll51ioh1_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpll51ioh1_test.go:64:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmpll51ioh1_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpll51ioh1_test.go:64:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmpll51ioh1_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmpll51ioh1_test.go:64:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmpll51ioh1_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmpll51ioh1_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmpll51ioh1_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073748
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a > b {\n        return right_angle_triangle(b, a, c)\n    }\n   \
    \ if b > c {\n        return right_angle_triangle(a, c, b)\n    }\n    if a ==\
    \ b {\n        return true\n    }\n    if a == c {\n        return true\n    }\n\
    \    if b == c {\n        return true\n    }\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp8v6_5w0r_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp8v6_5w0r_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmp8v6_5w0r_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmp8v6_5w0r_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmp8v6_5w0r_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmp8v6_5w0r_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmp8v6_5w0r_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmp8v6_5w0r_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmp8v6_5w0r_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073748
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a > b {\n        return right_angle_triangle(b, a, c)\n    }\n   \
    \ if b > c {\n        return right_angle_triangle(c, a, b)\n    }\n    if a ==\
    \ b {\n        return true\n    }\n    if a == c {\n        return true\n    }\n\
    \    if b == c {\n        return true\n    }\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpi9kw55so_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpi9kw55so_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmpi9kw55so_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpi9kw55so_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmpi9kw55so_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmpi9kw55so_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmpi9kw55so_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmpi9kw55so_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmpi9kw55so_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073748
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    // Write your code here\n    if a == 0 || b == 0 || c == 0 {\n      \
    \  return false\n    }\n    if a > b+c {\n        return false\n    }\n    if\
    \ b > a+c {\n        return false\n    }\n    if c > a+b {\n        return false\n\
    \    }\n    return true\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n\
    \  candidate := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false\
    \ },\n     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__1\
    \ (0.00s)\n        tmppf35rzh1_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__3 (0.00s)\n        tmppf35rzh1_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__5\
    \ (0.00s)\n        tmppf35rzh1_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmppf35rzh1_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073748
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a > b {\n        if a > c {\n            return true\n        } else\
    \ {\n            return false\n        }\n    } else {\n        if b > c {\n \
    \           return true\n        } else {\n            return false\n        }\n\
    \    }\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpwspl5leg_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpwspl5leg_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__5\
    \ (0.00s)\n        tmpwspl5leg_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmpwspl5leg_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmpwspl5leg_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmpwspl5leg_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073748
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a > b {\n        if b > c {\n            return true\n        } else\
    \ {\n            return false\n        }\n    } else {\n        if c > b {\n \
    \           return true\n        } else {\n            return false\n        }\n\
    \    }\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__1\
    \ (0.00s)\n        tmp0zcdwvdy_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp0zcdwvdy_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp0zcdwvdy_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__10 (0.00s)\n        tmp0zcdwvdy_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073748
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n    }\n\n    //\
    \ The formula to calculate the area of a triangle is given below:\n    // area\
    \ = a * b * c / 2\n    // The area of a right angle triangle is equal to the area\
    \ of a triangle \n    // with one side of the triangle being right angle. \n \
    \   // The area of a triangle with one side of the triangle being right angle\
    \ \n    // is equal to the area of the other side.\n    // The area of a triangle\
    \ with one side of the triangle being right angle \n    // is equal to the area\
    \ of the other side.\n    // The area of a triangle with one side of the triangle\
    \ being right angle \n    // is equal to the area of the other side.\n    // The\
    \ area of a triangle with one side of the triangle being right angle \n    //\
    \ is equal to the area of the other side.\n    // The area of a triangle with\
    \ one side of the triangle being right angle \n    // is equal to the area of\
    \ the other side.\n    // The area of a triangle with one side of the triangle\
    \ being right angle \n    // is equal to the area of the other side.\n    // The\
    \ area of a triangle with one side of the triangle being right angle \n    //\
    \ is equal to the area of the other side.\n    // The area of a triangle with\
    \ one side of the triangle being right angle \n    // is equal to the area of\
    \ the other side.\n    // The area of a triangle with one side of the triangle\
    \ being right angle \n    // is equal to the area of the other side.\n    // The\
    \ area of a triangle with one side of the triangle being right angle \n    //\
    \ is equal to the area of the other side.\n    // The area of a triangle with\
    \ one side of the triangle being right angle \n    // is equal to the area of\
    \ the other side.\n    // The area of a triangle with one side of the triangle\
    \ being right angle \n    // is equal to the area of the other side.\n    // The\
    \ area of a triangle with one side of the triangle being right angle \n    //\
    \ is equal to the area of the other side.\n    // The area of a triangle with\
    \ one side of the triangle being right angle \n    // is equal to the area of\
    \ the other side.\n    // The area of a triangle with one side of the triangle\
    \ being right angle \n    // is equal to the area of the other side.\n    // The\
    \ area of a triangle with one side of the triangle being right angle \n    //\
    \ is equal to the area of the other side.\n    // The area of a triangle with\
    \ one side of the triangle being right angle \n    // is equal to the area of\
    \ the other side.\n    // The area of a triangle with one side of the triangle\
    \ being right angle \n    // is equal to the area of the other side.\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpdx3j3q85_test.go:58:6: expected ''('', found TestRight_Angle_Triangle

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073746
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a > b {\n        return false\n    }\n    if b > c {\n        return\
    \ false\n    }\n    if a == b {\n        return true\n    }\n    if a == c {\n\
    \        return true\n    }\n    if b == c {\n        return true\n    }\n   \
    \ if a > c {\n        return false\n    }\n    return true\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__1\
    \ (0.00s)\n        tmppe716j2q_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmppe716j2q_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmppe716j2q_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmppe716j2q_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__9\
    \ (0.00s)\n        tmppe716j2q_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__10 (0.00s)\n        tmppe716j2q_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073748
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a > b {\n        return false\n    }\n    if b > c {\n        return\
    \ false\n    }\n    if a == b {\n        return false\n    }\n    if a == c {\n\
    \        return true\n    }\n    if b == c {\n        return true\n    }\n   \
    \ if a > c {\n        return false\n    }\n    if b > a {\n        return false\n\
    \    }\n    if c > a {\n        return false\n    }\n    if b > c {\n        return\
    \ false\n    }\n    return true\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T)\
    \ {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false\
    \ },\n     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpiziq320k_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpiziq320k_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmpiziq320k_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmpiziq320k_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmpiziq320k_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmpiziq320k_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073748
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n    }\n    if\
    \ a > b {\n        if a > c {\n            return true\n        }\n        return\
    \ false\n    }\n    if b > c {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpzjlp1ypa_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpzjlp1ypa_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__5\
    \ (0.00s)\n        tmpzjlp1ypa_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmpzjlp1ypa_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmpzjlp1ypa_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmpzjlp1ypa_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073748
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    // Write your code here\n    if a == 0 || b == 0 || c == 0 {\n      \
    \  return false\n    }\n    if a == b {\n        return c == a\n    }\n    if\
    \ a == c {\n        return b == a\n    }\n    if b == c {\n        return a ==\
    \ b\n    }\n    if a == b+c {\n        return a == c\n    }\n    if a == c+b {\n\
    \        return b == c\n    }\n    if b == c+a {\n        return c == a\n    }\n\
    \    return false\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate\
    \ := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4,\
    \ 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false },\n\
    \     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp4mgl5me3_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp4mgl5me3_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmp4mgl5me3_test.go:62: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmp4mgl5me3_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmp4mgl5me3_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmp4mgl5me3_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmp4mgl5me3_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmp4mgl5me3_test.go:62:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073748
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a > b {\n        return false\n    }\n    if b > c {\n        return\
    \ false\n    }\n    if a == b {\n        return true\n    }\n    if a == c {\n\
    \        return true\n    }\n    if b == c {\n        return true\n    }\n   \
    \ if a > c {\n        return false\n    }\n    if b > a {\n        return false\n\
    \    }\n    if c > a {\n        return false\n    }\n    return true\n}\n\nfunc\
    \ TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpll51ioh1_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpll51ioh1_test.go:64:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmpll51ioh1_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpll51ioh1_test.go:64:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmpll51ioh1_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmpll51ioh1_test.go:64:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmpll51ioh1_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmpll51ioh1_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmpll51ioh1_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073748
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a > b {\n        return false\n    }\n    if b > c {\n        return\
    \ false\n    }\n    if a == b {\n        return false\n    }\n    if a == c {\n\
    \        return true\n    }\n    if b == c {\n        return true\n    }\n   \
    \ if a > c {\n        return false\n    }\n    return true\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__1\
    \ (0.00s)\n        tmpumacnv_k_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpumacnv_k_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmpumacnv_k_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073748
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    // Write your code here\n    if a == 0 || b == 0 || c == 0 {\n      \
    \  return false\n    }\n    if a > b {\n        if a > c {\n            return\
    \ true\n        } else {\n            return false\n        }\n    } else {\n\
    \        if b > c {\n            return true\n        } else {\n            return\
    \ false\n        }\n    }\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n\
    \  candidate := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false\
    \ },\n     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp5ho4n6d9_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmp5ho4n6d9_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__5\
    \ (0.00s)\n        tmp5ho4n6d9_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp5ho4n6d9_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp5ho4n6d9_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp5ho4n6d9_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073748
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a > b {\n        return false\n    }\n    if b > c {\n        return\
    \ false\n    }\n    if a == b {\n        return true\n    }\n    if a == c {\n\
    \        return true\n    }\n    if b == c {\n        return true\n    }\n   \
    \ return false\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate\
    \ := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4,\
    \ 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false },\n\
    \     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp62p1i57g_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp62p1i57g_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmp62p1i57g_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmp62p1i57g_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmp62p1i57g_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmp62p1i57g_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmp62p1i57g_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmp62p1i57g_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmp62p1i57g_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073748
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a > b {\n        if b > c {\n            return true\n        } else\
    \ {\n            return false\n        }\n    } else {\n        if c > b {\n \
    \           return true\n        } else {\n            return false\n        }\n\
    \    }\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__1\
    \ (0.00s)\n        tmp0zcdwvdy_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp0zcdwvdy_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp0zcdwvdy_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__10 (0.00s)\n        tmp0zcdwvdy_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073748
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a > b {\n        if b > c {\n            return true\n        } else\
    \ {\n            return false\n        }\n    } else {\n        if c > b {\n \
    \           return true\n        } else {\n            return false\n        }\n\
    \    }\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__1\
    \ (0.00s)\n        tmp0zcdwvdy_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp0zcdwvdy_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp0zcdwvdy_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__10 (0.00s)\n        tmp0zcdwvdy_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073748
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a > b {\n        return false\n    }\n    if b > c {\n        return\
    \ false\n    }\n    if a == b {\n        return false\n    }\n    if a == c {\n\
    \        return false\n    }\n    if b == c {\n        return true\n    }\n  \
    \  return false\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate\
    \ := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4,\
    \ 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false },\n\
    \     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpugzb4a54_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpugzb4a54_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmpugzb4a54_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmpugzb4a54_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmpugzb4a54_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmpugzb4a54_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a > b {\n        return false\n    }\n    if b > c {\n        return\
    \ false\n    }\n    if a == b {\n        return true\n    }\n    if a == c {\n\
    \        return true\n    }\n    if b == c {\n        return true\n    }\n   \
    \ return false\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate\
    \ := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4,\
    \ 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false },\n\
    \     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp62p1i57g_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp62p1i57g_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmp62p1i57g_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmp62p1i57g_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmp62p1i57g_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmp62p1i57g_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmp62p1i57g_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmp62p1i57g_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmp62p1i57g_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073748
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a > b {\n        return false\n    }\n    if b > c {\n        return\
    \ false\n    }\n    if a == b {\n        return false\n    }\n    if a == c {\n\
    \        return false\n    }\n    if b == c {\n        return true\n    }\n  \
    \  return false\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate\
    \ := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4,\
    \ 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false },\n\
    \     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpugzb4a54_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpugzb4a54_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmpugzb4a54_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmpugzb4a54_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmpugzb4a54_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmpugzb4a54_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n    }\n    \n\
    \    switch {\n    case a > b + c:\n        return false\n    case b > a + c:\n\
    \        return false\n    case c > a + b:\n        return false\n    }\n    \n\
    \    return true\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate\
    \ := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4,\
    \ 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false },\n\
    \     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__1\
    \ (0.00s)\n        tmp4xsw1d6m_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__3 (0.00s)\n        tmp4xsw1d6m_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__5\
    \ (0.00s)\n        tmp4xsw1d6m_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmp4xsw1d6m_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a > b {\n        if a > c {\n            return true\n        } else\
    \ {\n            return false\n        }\n    } else {\n        if b > c {\n \
    \           return true\n        } else {\n            return false\n        }\n\
    \    }\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpwspl5leg_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpwspl5leg_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__5\
    \ (0.00s)\n        tmpwspl5leg_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmpwspl5leg_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmpwspl5leg_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmpwspl5leg_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073748
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n    }\n    if\
    \ a > b {\n        if a > c {\n            return true\n        } else {\n   \
    \         return false\n        }\n    } else {\n        if b > c {\n        \
    \    return true\n        } else {\n            return false\n        }\n    }\n\
    }\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpe3h_qig3_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpe3h_qig3_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__5\
    \ (0.00s)\n        tmpe3h_qig3_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmpe3h_qig3_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmpe3h_qig3_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmpe3h_qig3_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073748
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a > b {\n        return false\n    }\n    if b > c {\n        return\
    \ false\n    }\n    if a == b {\n        return true\n    }\n    if a == c {\n\
    \        return true\n    }\n    if b == c {\n        return true\n    }\n   \
    \ if a > c {\n        return false\n    }\n    if b > a {\n        return false\n\
    \    }\n    if c > a {\n        return false\n    }\n    return true\n}\n\nfunc\
    \ TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpll51ioh1_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpll51ioh1_test.go:64:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmpll51ioh1_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpll51ioh1_test.go:64:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmpll51ioh1_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmpll51ioh1_test.go:64:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmpll51ioh1_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmpll51ioh1_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmpll51ioh1_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073748
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a > b {\n        if b > c {\n            return true\n        }\n\
    \    }\n    if b > c {\n        return true\n    }\n    if c > a {\n        return\
    \ true\n    }\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T)\
    \ {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false\
    \ },\n     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__1\
    \ (0.00s)\n        tmpjbev61us_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpjbev61us_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmpjbev61us_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a > b {\n        return false\n    }\n    if b > c {\n        return\
    \ false\n    }\n    if a == b {\n        return true\n    }\n    if a == c {\n\
    \        return true\n    }\n    if b == c {\n        return true\n    }\n   \
    \ return false\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate\
    \ := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4,\
    \ 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false },\n\
    \     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp62p1i57g_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp62p1i57g_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmp62p1i57g_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmp62p1i57g_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmp62p1i57g_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmp62p1i57g_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmp62p1i57g_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmp62p1i57g_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmp62p1i57g_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073748
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a > b {\n        return false\n    }\n    if b > c {\n        return\
    \ false\n    }\n    if a == b {\n        return true\n    }\n    if a == c {\n\
    \        return true\n    }\n    if b == c {\n        return true\n    }\n   \
    \ return false\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate\
    \ := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4,\
    \ 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false },\n\
    \     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp62p1i57g_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp62p1i57g_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmp62p1i57g_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmp62p1i57g_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmp62p1i57g_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmp62p1i57g_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmp62p1i57g_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmp62p1i57g_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmp62p1i57g_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073748
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n    }\n    \n\
    \    if a > b {\n        if a > c {\n            return false\n        }\n   \
    \     return true\n    }\n    \n    if b > c {\n        return true\n    }\n \
    \   \n    if a < b {\n        if b < c {\n            return false\n        }\n\
    \        return true\n    }\n    \n    if c < a {\n        return true\n    }\n\
    \    \n    return false\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n\
    \  candidate := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false\
    \ },\n     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpg4cw25go_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpg4cw25go_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmpg4cw25go_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmpg4cw25go_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmpg4cw25go_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a > b {\n        return false\n    }\n    if b > c {\n        return\
    \ false\n    }\n    if a == b {\n        return true\n    }\n    if a == c {\n\
    \        return true\n    }\n    if b == c {\n        return true\n    }\n   \
    \ if a > c {\n        return false\n    }\n    if b > a {\n        return false\n\
    \    }\n    if c > a {\n        return false\n    }\n    return true\n}\n\nfunc\
    \ TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpll51ioh1_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpll51ioh1_test.go:64:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmpll51ioh1_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpll51ioh1_test.go:64:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmpll51ioh1_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmpll51ioh1_test.go:64:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmpll51ioh1_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmpll51ioh1_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmpll51ioh1_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073748
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a > b {\n        return false\n    }\n    if b > c {\n        return\
    \ false\n    }\n    if a == b {\n        return false\n    }\n    if a == c {\n\
    \        return true\n    }\n    if b == c {\n        return true\n    }\n   \
    \ if a > c {\n        return false\n    }\n    return true\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__1\
    \ (0.00s)\n        tmpumacnv_k_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpumacnv_k_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmpumacnv_k_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073748
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a > b {\n        if b > c {\n            return true\n        }\n\
    \        return false\n    }\n    if b > c {\n        return false\n    }\n  \
    \  return true\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate\
    \ := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4,\
    \ 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false },\n\
    \     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__1\
    \ (0.00s)\n        tmpnyv6qwr6_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpnyv6qwr6_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmpnyv6qwr6_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmpnyv6qwr6_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__9\
    \ (0.00s)\n        tmpnyv6qwr6_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__10 (0.00s)\n        tmpnyv6qwr6_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    // Write your code here\n    if a == 0 || b == 0 || c == 0 {\n      \
    \  return false\n    }\n    if a == b {\n        return c == b\n    }\n    if\
    \ a == c {\n        return b == c\n    }\n    if b == c {\n        return a ==\
    \ b\n    }\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T)\
    \ {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false\
    \ },\n     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmphh0_2_tc_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmphh0_2_tc_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmphh0_2_tc_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmphh0_2_tc_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmphh0_2_tc_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmphh0_2_tc_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmphh0_2_tc_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmphh0_2_tc_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    // Write your code here\n    if a == 0 || b == 0 || c == 0 {\n      \
    \  return false\n    }\n    \n    if a > b {\n        a, b = b, a\n    }\n   \
    \ if a > c {\n        a, c = c, a\n    }\n    if b > c {\n        b, c = c, b\n\
    \    }\n    \n    if a + b > c {\n        return false\n    }\n    \n    if a\
    \ + c > b {\n        return false\n    }\n    \n    if b + c > a {\n        return\
    \ false\n    }\n    \n    return true\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T)\
    \ {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false\
    \ },\n     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp0ib6sn6e_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp0ib6sn6e_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp0ib6sn6e_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp0ib6sn6e_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp0ib6sn6e_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp0ib6sn6e_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a > b {\n        return false\n    }\n    if b > c {\n        return\
    \ false\n    }\n    if a == b {\n        return false\n    }\n    if a == c {\n\
    \        return true\n    }\n    if b == c {\n        return true\n    }\n   \
    \ if a > c {\n        return false\n    }\n    if b > a {\n        return false\n\
    \    }\n    if c > a {\n        return false\n    }\n    return true\n}\n\nfunc\
    \ TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp_urr6wka_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp_urr6wka_test.go:64:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp_urr6wka_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp_urr6wka_test.go:64:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp_urr6wka_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp_urr6wka_test.go:64:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    // Write your code here\n    if a > b {\n        if b > c {\n       \
    \     return true\n        } else {\n            return false\n        }\n   \
    \ } else {\n        if c > b {\n            return true\n        } else {\n  \
    \          return false\n        }\n    }\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__1\
    \ (0.00s)\n        tmpx4u0byto_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpx4u0byto_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmpx4u0byto_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__10 (0.00s)\n        tmpx4u0byto_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a > b {\n        return false\n    }\n    if b > c {\n        return\
    \ false\n    }\n    if a == b {\n        return true\n    }\n    if a == c {\n\
    \        return true\n    }\n    if b == c {\n        return true\n    }\n   \
    \ if a > c {\n        return false\n    }\n    if b > a {\n        return false\n\
    \    }\n    if c > a {\n        return false\n    }\n    if a > b {\n        return\
    \ false\n    }\n    if b > c {\n        return false\n    }\n    if c > b {\n\
    \        return false\n    }\n    if a > c {\n        return false\n    }\n  \
    \  if b > a {\n        return false\n    }\n    if c > a {\n        return false\n\
    \    }\n    return true\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n\
    \  candidate := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false\
    \ },\n     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpmrd8tg9p_test.go:82: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpmrd8tg9p_test.go:82:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmpmrd8tg9p_test.go:82: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpmrd8tg9p_test.go:82:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmpmrd8tg9p_test.go:82: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmpmrd8tg9p_test.go:82:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmpmrd8tg9p_test.go:82: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmpmrd8tg9p_test.go:82:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmpmrd8tg9p_test.go:82: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n    }\n    \n\
    \    d := (b * b) - (4 * a * c)\n    if d < 0 {\n        return false\n    }\n\
    \    \n    e := (b * c) - (4 * a * b)\n    if e < 0 {\n        return false\n\
    \    }\n    \n    f := (d * d) - (4 * a * e)\n    if f < 0 {\n        return false\n\
    \    }\n    \n    g := (e * e) - (4 * a * f)\n    if g < 0 {\n        return false\n\
    \    }\n    \n    if g == 0 {\n        return true\n    }\n    \n    return false\n\
    }\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp6nhegzyy_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp6nhegzyy_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp6nhegzyy_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp6nhegzyy_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp6nhegzyy_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp6nhegzyy_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a > b {\n        return false\n    }\n    if b > c {\n        return\
    \ false\n    }\n    if a == b {\n        return true\n    }\n    if a == c {\n\
    \        return true\n    }\n    if b == c {\n        return true\n    }\n   \
    \ if a > c {\n        return false\n    }\n    if b > a {\n        return false\n\
    \    }\n    return true\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n\
    \  candidate := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false\
    \ },\n     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpzgb21k7g_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpzgb21k7g_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmpzgb21k7g_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpzgb21k7g_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmpzgb21k7g_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmpzgb21k7g_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmpzgb21k7g_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmpzgb21k7g_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmpzgb21k7g_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a > b {\n        return right_angle_triangle(b, a, c)\n    }\n   \
    \ if b > c {\n        return right_angle_triangle(c, a, b)\n    }\n    if a ==\
    \ b {\n        return true\n    }\n    if a == c {\n        return true\n    }\n\
    \    if b == c {\n        return true\n    }\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpi9kw55so_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpi9kw55so_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmpi9kw55so_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpi9kw55so_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmpi9kw55so_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmpi9kw55so_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmpi9kw55so_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmpi9kw55so_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmpi9kw55so_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073748
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a > b {\n        return false\n    }\n    if b > c {\n        return\
    \ false\n    }\n    if a == b {\n        return false\n    }\n    if a == c {\n\
    \        return true\n    }\n    if b == c {\n        return true\n    }\n   \
    \ if a > c {\n        return false\n    }\n    if b > a {\n        return false\n\
    \    }\n    if c > a {\n        return false\n    }\n    return true\n}\n\nfunc\
    \ TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp_urr6wka_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp_urr6wka_test.go:64:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp_urr6wka_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp_urr6wka_test.go:64:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp_urr6wka_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp_urr6wka_test.go:64:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a > b {\n        if a > c {\n            return true\n        }\n\
    \        return false\n    }\n    if b > c {\n        return false\n    }\n  \
    \  if a == b {\n        if a == c {\n            return true\n        }\n    \
    \    return false\n    }\n    if a == c {\n        return true\n    }\n    if\
    \ b == c {\n        return true\n    }\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpjhr_6nge_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__3 (0.00s)\n        tmpjhr_6nge_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmpjhr_6nge_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__5 (0.00s)\n        tmpjhr_6nge_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmpjhr_6nge_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmpjhr_6nge_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmpjhr_6nge_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmpjhr_6nge_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n    }\n    if\
    \ a == b {\n        return a == c\n    }\n    if a == c {\n        return b ==\
    \ c\n    }\n    if b == c {\n        return a == b\n    }\n    return false\n\
    }\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpfi82mik4_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpfi82mik4_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmpfi82mik4_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpfi82mik4_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmpfi82mik4_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmpfi82mik4_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmpfi82mik4_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmpfi82mik4_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    // Write your code here\n    \n    if a == 0 || b == 0 || c == 0 {\n\
    \        return false\n    }\n    \n    if a > b {\n        if a > c {\n     \
    \       return true\n        } else {\n            return false\n        }\n \
    \   } else {\n        if b > c {\n            return true\n        } else {\n\
    \            return false\n        }\n    }\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpgi7g_kgm_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpgi7g_kgm_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__5\
    \ (0.00s)\n        tmpgi7g_kgm_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmpgi7g_kgm_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmpgi7g_kgm_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmpgi7g_kgm_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    // Write your code here\n    \n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp9h21lqc4_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp9h21lqc4_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp9h21lqc4_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp9h21lqc4_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp9h21lqc4_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp9h21lqc4_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a > b {\n        if b > c {\n            return true\n        }\n\
    \    }\n    if b > c {\n        return true\n    }\n    if c > a {\n        return\
    \ true\n    }\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T)\
    \ {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false\
    \ },\n     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__1\
    \ (0.00s)\n        tmpjbev61us_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpjbev61us_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmpjbev61us_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a > b {\n        return false\n    }\n    if b > c {\n        return\
    \ false\n    }\n    if a == b {\n        return false\n    }\n    if a == c {\n\
    \        return true\n    }\n    if b == c {\n        return true\n    }\n   \
    \ if a > c {\n        return false\n    }\n    if b > a {\n        return false\n\
    \    }\n    return true\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n\
    \  candidate := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false\
    \ },\n     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpvi4nrroo_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpvi4nrroo_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmpvi4nrroo_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmpvi4nrroo_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmpvi4nrroo_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmpvi4nrroo_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    // Write your code here\n    if a == 0 || b == 0 || c == 0 {\n      \
    \  return false\n    }\n    \n    if a == b {\n        if a == c {\n         \
    \   return true\n        }\n        return false\n    }\n    \n    if a == c {\n\
    \        return true\n    }\n    \n    if b == c {\n        return true\n    }\n\
    \    \n    if a > b {\n        if a > c {\n            return true\n        }\n\
    \        return false\n    }\n    \n    if b > c {\n        if b > a {\n     \
    \       return true\n        }\n        return false\n    }\n    \n    if a >\
    \ c {\n        return true\n    }\n    \n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpj0dsw5ry_test.go:78: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__3 (0.00s)\n        tmpj0dsw5ry_test.go:78:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmpj0dsw5ry_test.go:78: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__5 (0.00s)\n        tmpj0dsw5ry_test.go:78:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmpj0dsw5ry_test.go:78: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmpj0dsw5ry_test.go:78:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmpj0dsw5ry_test.go:78: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmpj0dsw5ry_test.go:78:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a > b {\n        return false\n    }\n    if b > c {\n        return\
    \ false\n    }\n    if a == b {\n        return true\n    }\n    if a == c {\n\
    \        return true\n    }\n    if b == c {\n        return true\n    }\n   \
    \ if a > c {\n        return false\n    }\n    if b > a {\n        return false\n\
    \    }\n    if c > a {\n        return false\n    }\n    return true\n}\n\nfunc\
    \ TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpll51ioh1_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpll51ioh1_test.go:64:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmpll51ioh1_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpll51ioh1_test.go:64:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmpll51ioh1_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmpll51ioh1_test.go:64:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmpll51ioh1_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmpll51ioh1_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmpll51ioh1_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073748
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n    }\n    \n\
    \    // The first two sides are equal\n    if a == b {\n        return true\n\
    \    }\n    \n    // The first two sides are equal\n    if a == c {\n        return\
    \ true\n    }\n    \n    // The first two sides are equal\n    if b == c {\n \
    \       return true\n    }\n    \n    // The first two sides are equal\n    if\
    \ a == b+c {\n        return true\n    }\n    \n    // The first two sides are\
    \ equal\n    if a == c-b {\n        return true\n    }\n    \n    // The first\
    \ two sides are equal\n    if b == c-a {\n        return true\n    }\n    \n \
    \   // The first two sides are equal\n    if c == a-b {\n        return true\n\
    \    }\n    \n    // The first two sides are equal\n    if a == b+c && b == c-a\
    \ {\n        return true\n    }\n    \n    // The first two sides are equal\n\
    \    if a == c-b && c == a-b {\n        return true\n    }\n    \n    // The first\
    \ two sides are equal\n    if a == c-b && c == b+a {\n        return true\n  \
    \  }\n    \n    // The first two sides are equal\n    if a == c-b && c == a-b\
    \ {\n        return true\n    }\n    \n    // The first two sides are equal\n\
    \    if a == c-b && c == b+a {\n        return true\n    }\n    \n    // The first\
    \ two sides are equal\n    if a == c-b && c == a-b {\n        return true\n  \
    \  }\n    \n    // The first two sides are equal\n    if a == c-b && c == b+a\
    \ {\n        return true\n    }\n    \n    // The first two sides are equal\n\
    \    if a == c-b && c == a-b {\n        return true\n    }\n    \n    // The first\
    \ two sides are equal\n    if a == c-b && c == b+a {\n        return true\n  \
    \  }\n    \n    // The first two sides are equal\n    if a == c-b && c == a-b\
    \ {\n        return true\n    }\n    \n    // The first two sides are equal\n\
    \    if a == c-b && c == b+a {\n        return true\n    }\n    \n    // The first\
    \ two sides are equal\n    if a == c-b && c == a-b {\n        return true\n  \
    \  }\n    \n    // The first two sides are equal\n    if a == c-b && c == b+a\
    \ {\n        return true\n    }\n    \n    // The first two sides are equal\n\
    \    if a == c-b && c == a-b {\n        return true\n    }\n    \nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpf7c633pl_test.go:123:6: expected ''('', found TestRight_Angle_Triangle

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073749
- exit_code: 2
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n    }\n    \n\
    \    switch {\n    case a > 0 && b > 0 && c > 0:\n        return true\n    case\
    \ a > 0 && b > 0 && c < 0:\n        return false\n    case a > 0 && b < 0 && c\
    \ > 0:\n        return false\n    case a > 0 && b < 0 && c < 0:\n        return\
    \ true\n    case a < 0 && b > 0 && c > 0:\n        return false\n    case a <\
    \ 0 && b > 0 && c < 0:\n        return true\n    case a < 0 && b < 0 && c > 0:\n\
    \        return false\n    case a < 0 && b < 0 && c < 0:\n        return true\n\
    \    }\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpf06b36b9_test.go:36:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n    }\n    if\
    \ a > b {\n        if a > c {\n            return false\n        }\n        return\
    \ true\n    }\n    if b > c {\n        return true\n    }\n    if a > c {\n  \
    \      return false\n    }\n    return true\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__1\
    \ (0.00s)\n        tmp_31fp9_j_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp_31fp9_j_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmp_31fp9_j_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmp_31fp9_j_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmp_31fp9_j_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a > b {\n        if b > c {\n            return true\n        } else\
    \ {\n            return false\n        }\n    } else {\n        if c > b {\n \
    \           return true\n        } else {\n            return false\n        }\n\
    \    }\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__1\
    \ (0.00s)\n        tmp0zcdwvdy_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp0zcdwvdy_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp0zcdwvdy_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__10 (0.00s)\n        tmp0zcdwvdy_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073748
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a > b {\n        return false\n    }\n    if b > c {\n        return\
    \ false\n    }\n    if a == b {\n        return false\n    }\n    if a == c {\n\
    \        return true\n    }\n    if b == c {\n        return true\n    }\n   \
    \ if a > c {\n        return false\n    }\n    if b > a {\n        return false\n\
    \    }\n    return true\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n\
    \  candidate := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false\
    \ },\n     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpvi4nrroo_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpvi4nrroo_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmpvi4nrroo_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmpvi4nrroo_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmpvi4nrroo_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmpvi4nrroo_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a < 0 || b < 0 || c < 0 {\n        return false\n    }\n    if a +\
    \ b > c {\n        return false\n    }\n    if a + c > b {\n        return false\n\
    \    }\n    if b + c > a {\n        return false\n    }\n    return true\n}\n\n\
    func TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmprhmho95y_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmprhmho95y_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmprhmho95y_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmprhmho95y_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmprhmho95y_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmprhmho95y_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a > b {\n        return false\n    }\n    if b > c {\n        return\
    \ false\n    }\n    if a == b {\n        return true\n    }\n    if a == c {\n\
    \        return true\n    }\n    if b == c {\n        return true\n    }\n   \
    \ return false\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate\
    \ := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4,\
    \ 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false },\n\
    \     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp62p1i57g_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp62p1i57g_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmp62p1i57g_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmp62p1i57g_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmp62p1i57g_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmp62p1i57g_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmp62p1i57g_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmp62p1i57g_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmp62p1i57g_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073748
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n    }\n\n    //\
    \ The formula to calculate the area of a triangle is :\n    // (a + b + c) / 2\n\
    \    // The formula to calculate the perimeter of a triangle is :\n    // a +\
    \ b + c\n    // The formula to calculate the area of a right-angled triangle is\
    \ :\n    // a + b + c - a * b\n    // The formula to calculate the perimeter of\
    \ a right-angled triangle is :\n    // a + b + c - a + b + c\n    // The formula\
    \ to calculate the area of a right-angled triangle is :\n    // a + b + c - a\
    \ * b\n    // The formula to calculate the perimeter of a right-angled triangle\
    \ is :\n    // a + b + c - a + b + c\n    // The formula to calculate the area\
    \ of a right-angled triangle is :\n    // a + b + c - a * b\n    // The formula\
    \ to calculate the perimeter of a right-angled triangle is :\n    // a + b + c\
    \ - a + b + c\n    // The formula to calculate the area of a right-angled triangle\
    \ is :\n    // a + b + c - a * b\n    // The formula to calculate the perimeter\
    \ of a right-angled triangle is :\n    // a + b + c - a + b + c\n    // The formula\
    \ to calculate the area of a right-angled triangle is :\n    // a + b + c - a\
    \ * b\n    // The formula to calculate the perimeter of a right-angled triangle\
    \ is :\n    // a + b + c - a + b + c\n    // The formula to calculate the area\
    \ of a right-angled triangle is :\n    // a + b + c - a * b\n    // The formula\
    \ to calculate the perimeter of a right-angled triangle is :\n    // a + b + c\
    \ - a + b + c\n    // The formula to calculate the area of a right-angled triangle\
    \ is :\n    // a + b + c - a * b\n    // The formula to calculate the perimeter\
    \ of a right-angled triangle is :\n    // a + b + c - a + b + c\n    // The formula\
    \ to calculate the area of a right-angled triangle is :\n    // a + b + c - a\
    \ * b\n    // The formula to calculate the perimeter of a right-angled triangle\
    \ is :\n    // a + b + c - a + b + c\n    // The formula to calculate the area\
    \ of a right-angled triangle is :\n    // a + b + c - a * b\n    // The formula\
    \ to calculate the perimeter of a right-angled triangle is :\n    // a + b + c\
    \ - a + b + c\n    // The formula to calculate the area of a right-\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpp8j8s6wp_test.go:59:6: expected ''('', found TestRight_Angle_Triangle

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    // Write your code here\n    if a == 0 || b == 0 || c == 0 {\n      \
    \  return false\n    }\n    \n    d := b * b - 4 * a * c\n    if d < 0 {\n   \
    \     return false\n    }\n    \n    s := (-b + d) / (2 * a)\n    if s < 0 {\n\
    \        return false\n    }\n    \n    t := (-b - d) / (2 * a)\n    if t < 0\
    \ {\n        return false\n    }\n    \n    return true\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmptc1nvszp_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmptc1nvszp_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmptc1nvszp_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmptc1nvszp_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmptc1nvszp_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmptc1nvszp_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073751
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n    }\n    \n\
    \    x := (b * c) - (a * c)\n    y := (a * c) - (b * c)\n    \n    if x == y {\n\
    \        return true\n    }\n    \n    if x == 0 {\n        return false\n   \
    \ }\n    \n    if y == 0 {\n        return false\n    }\n    \n    if x > y {\n\
    \        return false\n    }\n    \n    return true\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp1wnmwg5g_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__3 (0.00s)\n        tmp1wnmwg5g_test.go:63:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp1wnmwg5g_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__5 (0.00s)\n        tmp1wnmwg5g_test.go:63:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmp1wnmwg5g_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp1wnmwg5g_test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__9\
    \ (0.00s)\n        tmp1wnmwg5g_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__10 (0.00s)\n        tmp1wnmwg5g_test.go:63:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073751
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n    }\n    \n\
    \    if a == b {\n        return a == c\n    }\n    \n    if a == c {\n      \
    \  return b == c\n    }\n    \n    if b == c {\n        return a == b\n    }\n\
    \    \n    return false\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n\
    \  candidate := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false\
    \ },\n     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpdj617vie_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpdj617vie_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmpdj617vie_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpdj617vie_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmpdj617vie_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmpdj617vie_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmpdj617vie_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmpdj617vie_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073751
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a > b {\n        return false\n    }\n    if b > c {\n        return\
    \ false\n    }\n    if a == b {\n        return true\n    }\n    if a == c {\n\
    \        return true\n    }\n    if b == c {\n        return true\n    }\n   \
    \ if a > c {\n        return false\n    }\n    return true\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__1\
    \ (0.00s)\n        tmppe716j2q_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmppe716j2q_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmppe716j2q_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmppe716j2q_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__9\
    \ (0.00s)\n        tmppe716j2q_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__10 (0.00s)\n        tmppe716j2q_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073748
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a > b {\n        return right_angle_triangle(b, a, c)\n    }\n   \
    \ if a > c {\n        return right_angle_triangle(a, c, b)\n    }\n    if b >\
    \ c {\n        return right_angle_triangle(a, b, c)\n    }\n    return true\n\
    }\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0388\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x520368?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.right_angle_triangle(0x6?,\
    \ 0xa?, 0x8?)\n\t/tmp/tmp7mhgdwnp_test.go:13 +0x87 fp=0xc0201e0398 sp=0xc0201e0390\
    \ pc=0x4ef6e7\ncommand-line-arguments_test.right_angle_triangle(0x0?, 0x0?, 0x0?)\n\
    \t/tmp/tmp7mhgdwnp_test.go:21 +0x2a fp=0xc0201e03c0 sp=0xc0201e0398 pc=0x4ef68a\n\
    command-line-arguments_test.right_angle_triangle(0x0?, 0x0?, 0x0?)\n\t/tmp/tmp7mhgdwnp_test.go:21\
    \ +0x2a fp=0xc0201e03e8 sp=0xc0201e03c0 pc=0x4ef68a\ncommand-line-arguments_test.right_angle_triangle(0x0?,\
    \ 0x0?, 0x0?)\n\t/tmp/tmp7mhgdwnp_test.go:21 +0x2a fp=0xc0201e0410 sp=0xc0201e03e8\
    \ pc=0x4ef68a\ncommand-line-arguments_test.right_angle_triangle(0x0?, 0x0?, 0x0?)\n\
    \t/tmp/tmp7mhgdwnp_test.go:21 +0x2a fp=0xc0201e0438 sp=0xc0201e0410 pc=0x4ef68a\n\
    command-line-arguments_test.right_angle_triangle(0x0?, 0x0?, 0x0?)\n\t/tmp/tmp7mhgdwnp_test.go:21\
    \ +0x2a fp=0xc0201e0460 sp=0xc0201e0438 pc=0x4ef68a\ncommand-line-arguments_test.right_angle_triangle(0x0?,\
    \ 0x0?, 0x0?)\n\t/tmp/tmp7mhgdwnp_test.go:21 +0x2a fp=0xc0201e0488 sp=0xc0201e0460\
    \ pc=0x4ef68a\ncommand-line-arguments_test.right_angle_triangle(0x0?, 0x0?, 0x0?)\n\
    \t/tmp/tmp7mhgdwnp_test.go:21 +0x2a fp=0xc0201e04b0 sp=0xc0201e0488 pc=0x4ef68a\n\
    command-line-arguments_test.right_angle_triangle(0x0?, 0x0?, 0x0?)\n\t/tmp/tmp7mhgdwnp_test.go:21\
    \ +0x2a fp=0xc0201e04d8 sp=0xc0201e04b0 pc=0x4ef68a\ncommand-line-arguments_test.right_angle_triangle(0x0?,\
    \ 0x0?, 0x0?)\n\t/tmp/tmp7mhgdwnp_test.go:21 +0x2a fp=0xc0201e0500 sp=0xc0201e04d8\
    \ pc=0x4ef68a\ncommand-line-arguments_test.right_angle_triangle(0x0?, 0x0?, 0x0?)\n\
    \t/tmp/tmp7mhgdwnp_test.go:21 +0x2a fp=0xc0201e052"
  timestamp: 1660073753
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a > b {\n        if b > c {\n            return false\n        } else\
    \ {\n            return true\n        }\n    } else {\n        if c > b {\n  \
    \          return true\n        } else {\n            return false\n        }\n\
    \    }\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__1\
    \ (0.00s)\n        tmptjwd4zn1_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__5 (0.00s)\n        tmptjwd4zn1_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmptjwd4zn1_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073752
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n    }\n    \n\
    \    switch {\n    case a > b + c:\n        return false\n    case b > a + c:\n\
    \        return false\n    case c > a + b:\n        return false\n    default:\n\
    \        return true\n    }\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T)\
    \ {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false\
    \ },\n     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__1\
    \ (0.00s)\n        tmpx_ajdceo_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__3 (0.00s)\n        tmpx_ajdceo_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__5\
    \ (0.00s)\n        tmpx_ajdceo_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmpx_ajdceo_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073752
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a < 0 || b < 0 || c < 0 {\n        return false\n    }\n    if a +\
    \ b > c {\n        return false\n    }\n    if a + c > b {\n        return false\n\
    \    }\n    if b + c > a {\n        return false\n    }\n    return true\n}\n\n\
    func TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmprhmho95y_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmprhmho95y_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmprhmho95y_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmprhmho95y_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmprhmho95y_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmprhmho95y_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n    }\n    \n\
    \    switch {\n    case a > b + c:\n        return false\n    case b > a + c:\n\
    \        return false\n    case c > a + b:\n        return false\n    default:\n\
    \        return true\n    }\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T)\
    \ {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false\
    \ },\n     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__1\
    \ (0.00s)\n        tmpx_ajdceo_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__3 (0.00s)\n        tmpx_ajdceo_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__5\
    \ (0.00s)\n        tmpx_ajdceo_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmpx_ajdceo_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073752
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a > b {\n        return false\n    }\n    if b > c {\n        return\
    \ false\n    }\n    if a == b {\n        return true\n    }\n    if a == c {\n\
    \        return true\n    }\n    if b == c {\n        return true\n    }\n   \
    \ return false\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate\
    \ := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4,\
    \ 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false },\n\
    \     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp62p1i57g_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp62p1i57g_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmp62p1i57g_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmp62p1i57g_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmp62p1i57g_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmp62p1i57g_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmp62p1i57g_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmp62p1i57g_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmp62p1i57g_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073748
- exit_code: 2
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n    }\n    \n\
    \    switch {\n    case a > 0 && b > 0 && c > 0:\n        return true\n    case\
    \ a > 0 && b > 0 && c < 0:\n        return false\n    case a > 0 && b < 0 && c\
    \ > 0:\n        return false\n    case a > 0 && b < 0 && c < 0:\n        return\
    \ true\n    case a < 0 && b > 0 && c > 0:\n        return false\n    case a <\
    \ 0 && b > 0 && c < 0:\n        return true\n    case a < 0 && b < 0 && c > 0:\n\
    \        return true\n    case a < 0 && b < 0 && c < 0:\n        return false\n\
    \    }\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8p_6d83u_test.go:36:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073752
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a > b {\n        return false\n    }\n    if b > c {\n        return\
    \ false\n    }\n    if a == b {\n        return true\n    }\n    if a == c {\n\
    \        return true\n    }\n    if b == c {\n        return true\n    }\n   \
    \ return false\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate\
    \ := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4,\
    \ 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false },\n\
    \     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp62p1i57g_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp62p1i57g_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmp62p1i57g_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmp62p1i57g_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmp62p1i57g_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmp62p1i57g_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmp62p1i57g_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmp62p1i57g_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmp62p1i57g_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073748
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a > b {\n        return false\n    }\n    if b > c {\n        return\
    \ false\n    }\n    if a == b {\n        return true\n    }\n    if a == c {\n\
    \        return true\n    }\n    if b == c {\n        return true\n    }\n   \
    \ if a > c {\n        return false\n    }\n    if a == b {\n        return true\n\
    \    }\n    if a == c {\n        return true\n    }\n    if b == c {\n       \
    \ return true\n    }\n    if a > b {\n        return false\n    }\n    if a ==\
    \ b {\n        return true\n    }\n    if a == c {\n        return true\n    }\n\
    \    if b == c {\n        return true\n    }\n    if a > c {\n        return false\n\
    \    }\n    if a == b {\n        return true\n    }\n    if a == c {\n       \
    \ return true\n    }\n    if b == c {\n        return true\n    }\n    if a >\
    \ b {\n        return false\n    }\n    if a == b {\n        return true\n   \
    \ }\n    if a == c {\n        return true\n    }\n    if b == c {\n        return\
    \ true\n    }\n    if a > c {\n        return false\n    }\n    if a == b {\n\
    \        return true\n    }\n    if a == c {\n        return true\n    }\n   \
    \ if b == c {\n        return true\n    }\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpns_jyl9t_test.go:115: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpns_jyl9t_test.go:115:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmpns_jyl9t_test.go:115: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpns_jyl9t_test.go:115:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmpns_jyl9t_test.go:115: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmpns_jyl9t_test.go:115:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmpns_jyl9t_test.go:115: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmpns_jyl9t_test.go:115:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmpns_jyl9t_test.go:115: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073752
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n    }\n    \n\
    \    switch {\n    case a > b + c:\n        return false\n    case a > c + b:\n\
    \        return false\n    case b > c + a:\n        return false\n    }\n    return\
    \ true\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__1\
    \ (0.00s)\n        tmp_pf_qviy_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__3 (0.00s)\n        tmp_pf_qviy_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__5\
    \ (0.00s)\n        tmp_pf_qviy_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmp_pf_qviy_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmp_pf_qviy_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073752
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n    }\n    if\
    \ a == b {\n        return c == b\n    }\n    if a == c {\n        return b ==\
    \ c\n    }\n    if b == c {\n        return a == b\n    }\n    return false\n\
    }\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpsshks4pw_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpsshks4pw_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmpsshks4pw_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpsshks4pw_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmpsshks4pw_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmpsshks4pw_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmpsshks4pw_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmpsshks4pw_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073752
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n    }\n    if\
    \ a > b {\n        if a > c {\n            return true\n        }\n        return\
    \ false\n    }\n    if b > c {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpzjlp1ypa_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpzjlp1ypa_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__5\
    \ (0.00s)\n        tmpzjlp1ypa_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmpzjlp1ypa_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmpzjlp1ypa_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmpzjlp1ypa_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073748
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a > b {\n        return false\n    }\n    if b > c {\n        return\
    \ false\n    }\n    if a == b {\n        return false\n    }\n    if a == c {\n\
    \        return false\n    }\n    if b == c {\n        return true\n    }\n  \
    \  if a > c {\n        return false\n    }\n    if b > a {\n        return false\n\
    \    }\n    return true\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n\
    \  candidate := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false\
    \ },\n     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpvtoo6xo2_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpvtoo6xo2_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmpvtoo6xo2_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmpvtoo6xo2_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmpvtoo6xo2_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmpvtoo6xo2_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073752
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a > b {\n        return false\n    }\n    if b > c {\n        return\
    \ false\n    }\n    if a == b {\n        return true\n    }\n    if a == c {\n\
    \        return true\n    }\n    if b == c {\n        return true\n    }\n   \
    \ if a > c {\n        return false\n    }\n    if a == b {\n        return false\n\
    \    }\n    if a == c {\n        return false\n    }\n    if b == c {\n      \
    \  return false\n    }\n    return true\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__1\
    \ (0.00s)\n        tmpqso9k4hi_test.go:67: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpqso9k4hi_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmpqso9k4hi_test.go:67: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmpqso9k4hi_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__9\
    \ (0.00s)\n        tmpqso9k4hi_test.go:67: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__10 (0.00s)\n        tmpqso9k4hi_test.go:67:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073752
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a > b {\n        return right_angle_triangle(b, a, c)\n    }\n   \
    \ if b > c {\n        return right_angle_triangle(a, c, b)\n    }\n    if a ==\
    \ b {\n        return right_angle_triangle(a, a, a)\n    }\n    if a == c {\n\
    \        return right_angle_triangle(a, a, b)\n    }\n    if b == c {\n      \
    \  return right_angle_triangle(a, b, b)\n    }\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0388\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x520368?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.right_angle_triangle(0x2?,\
    \ 0x2?, 0x2?)\n\t/tmp/tmp1k4dfjfm_test.go:13 +0xa6 fp=0xc0201e0398 sp=0xc0201e0390\
    \ pc=0x4ef706\ncommand-line-arguments_test.right_angle_triangle(0x0?, 0x0?, 0x0?)\n\
    \t/tmp/tmp1k4dfjfm_test.go:21 +0x58 fp=0xc0201e03c0 sp=0xc0201e0398 pc=0x4ef6b8\n\
    command-line-arguments_test.right_angle_triangle(0x0?, 0x0?, 0x0?)\n\t/tmp/tmp1k4dfjfm_test.go:21\
    \ +0x58 fp=0xc0201e03e8 sp=0xc0201e03c0 pc=0x4ef6b8\ncommand-line-arguments_test.right_angle_triangle(0x0?,\
    \ 0x0?, 0x0?)\n\t/tmp/tmp1k4dfjfm_test.go:21 +0x58 fp=0xc0201e0410 sp=0xc0201e03e8\
    \ pc=0x4ef6b8\ncommand-line-arguments_test.right_angle_triangle(0x0?, 0x0?, 0x0?)\n\
    \t/tmp/tmp1k4dfjfm_test.go:21 +0x58 fp=0xc0201e0438 sp=0xc0201e0410 pc=0x4ef6b8\n\
    command-line-arguments_test.right_angle_triangle(0x0?, 0x0?, 0x0?)\n\t/tmp/tmp1k4dfjfm_test.go:21\
    \ +0x58 fp=0xc0201e0460 sp=0xc0201e0438 pc=0x4ef6b8\ncommand-line-arguments_test.right_angle_triangle(0x0?,\
    \ 0x0?, 0x0?)\n\t/tmp/tmp1k4dfjfm_test.go:21 +0x58 fp=0xc0201e0488 sp=0xc0201e0460\
    \ pc=0x4ef6b8\ncommand-line-arguments_test.right_angle_triangle(0x0?, 0x0?, 0x0?)\n\
    \t/tmp/tmp1k4dfjfm_test.go:21 +0x58 fp=0xc0201e04b0 sp=0xc0201e0488 pc=0x4ef6b8\n\
    command-line-arguments_test.right_angle_triangle(0x0?, 0x0?, 0x0?)\n\t/tmp/tmp1k4dfjfm_test.go:21\
    \ +0x58 fp=0xc0201e04d8 sp=0xc0201e04b0 pc=0x4ef6b8\ncommand-line-arguments_test.right_angle_triangle(0x0?,\
    \ 0x0?, 0x0?)\n\t/tmp/tmp1k4dfjfm_test.go:21 +0x58 fp=0xc0201e0500 sp=0xc0201e04d8\
    \ pc=0x4ef6b8\ncommand-line-arguments_test.right_angle_triangle(0x0?, 0x0?, 0x0?)\n\
    \t/tmp/tmp1k4dfjfm_test.go:21 +0x58 fp=0xc0201e052"
  timestamp: 1660073753
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a > b {\n        if b > c {\n            return false\n        }\n\
    \        return true\n    }\n    if b > c {\n        return true\n    }\n    return\
    \ false\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpc7guy1u__test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpc7guy1u__test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__5\
    \ (0.00s)\n        tmpc7guy1u__test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmpc7guy1u__test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmpc7guy1u__test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073752
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n    }\n    \n\
    \    switch {\n    case a > b + c:\n        return false\n    case b > a + c:\n\
    \        return false\n    case c > a + b:\n        return false\n    }\n    \n\
    \    return true\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate\
    \ := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4,\
    \ 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false },\n\
    \     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__1\
    \ (0.00s)\n        tmp4xsw1d6m_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__3 (0.00s)\n        tmp4xsw1d6m_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__5\
    \ (0.00s)\n        tmp4xsw1d6m_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmp4xsw1d6m_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n    }\n    \n\
    \    d := b * b - 4 * a * c\n    if d < 0 {\n        return false\n    }\n   \
    \ \n    s := (-b + d) / (2 * a)\n    if s <= 0 {\n        return false\n    }\n\
    \    \n    t := (-b - d) / (2 * a)\n    if t <= 0 {\n        return false\n  \
    \  }\n    \n    return true\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T)\
    \ {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false\
    \ },\n     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpkygx4tt8_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpkygx4tt8_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmpkygx4tt8_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmpkygx4tt8_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmpkygx4tt8_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmpkygx4tt8_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073752
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n    }\n    if\
    \ a == b {\n        return a == c\n    }\n    if a == c {\n        return b ==\
    \ c\n    }\n    if b == c {\n        return a == b\n    }\n    return false\n\
    }\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpfi82mik4_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpfi82mik4_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmpfi82mik4_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpfi82mik4_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmpfi82mik4_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmpfi82mik4_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmpfi82mik4_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmpfi82mik4_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a > b {\n        return right_angle_triangle(b, a, c)\n    }\n   \
    \ if b > c {\n        return right_angle_triangle(c, a, b)\n    }\n    if a ==\
    \ b {\n        return true\n    }\n    if a == c {\n        return true\n    }\n\
    \    if b == c {\n        return true\n    }\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpi9kw55so_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpi9kw55so_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmpi9kw55so_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpi9kw55so_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmpi9kw55so_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmpi9kw55so_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmpi9kw55so_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmpi9kw55so_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmpi9kw55so_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073748
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a > b {\n        return false\n    }\n    if b > c {\n        return\
    \ false\n    }\n    if a == b {\n        return true\n    }\n    if a == c {\n\
    \        return true\n    }\n    if b == c {\n        return true\n    }\n   \
    \ return false\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate\
    \ := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4,\
    \ 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false },\n\
    \     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp62p1i57g_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp62p1i57g_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmp62p1i57g_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmp62p1i57g_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmp62p1i57g_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmp62p1i57g_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmp62p1i57g_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmp62p1i57g_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmp62p1i57g_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073748
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    // Write your code here\n    if a > b {\n        return false\n    }\n\
    \    if b > c {\n        return false\n    }\n    if c > a {\n        return false\n\
    \    }\n    if a == b {\n        return true\n    }\n    if a == c {\n       \
    \ return true\n    }\n    if b == c {\n        return true\n    }\n    return\
    \ false\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpdft3nfj3_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpdft3nfj3_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmpdft3nfj3_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpdft3nfj3_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmpdft3nfj3_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmpdft3nfj3_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmpdft3nfj3_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmpdft3nfj3_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073752
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    // Write code here\n    if a == 0 || b == 0 || c == 0 {\n        return\
    \ false\n    }\n    \n    if a > b {\n        if a > c {\n            return true\n\
    \        } else {\n            return false\n        }\n    } else {\n       \
    \ if b > c {\n            return true\n        } else {\n            return false\n\
    \        }\n    }\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate\
    \ := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4,\
    \ 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false },\n\
    \     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpciytrxsl_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpciytrxsl_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__5\
    \ (0.00s)\n        tmpciytrxsl_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmpciytrxsl_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmpciytrxsl_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmpciytrxsl_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073752
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n    }\n    if\
    \ a > b {\n        if a > c {\n            return false\n        }\n        return\
    \ true\n    }\n    if b > c {\n        return true\n    }\n    if a > c {\n  \
    \      return false\n    }\n    return true\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__1\
    \ (0.00s)\n        tmp_31fp9_j_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp_31fp9_j_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmp_31fp9_j_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmp_31fp9_j_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmp_31fp9_j_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a > b {\n        if b > c {\n            return false\n        }\n\
    \        return true\n    }\n    if b > c {\n        return true\n    }\n    return\
    \ false\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpc7guy1u__test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpc7guy1u__test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__5\
    \ (0.00s)\n        tmpc7guy1u__test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmpc7guy1u__test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmpc7guy1u__test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073752
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a > b {\n        if b > c {\n            return true\n        } else\
    \ {\n            return false\n        }\n    } else {\n        if b > c {\n \
    \           return false\n        } else {\n            return true\n        }\n\
    \    }\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__1\
    \ (0.00s)\n        tmpd0ih8bsy_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpd0ih8bsy_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmpd0ih8bsy_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmpd0ih8bsy_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__9\
    \ (0.00s)\n        tmpd0ih8bsy_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__10 (0.00s)\n        tmpd0ih8bsy_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073752
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n    }\n    \n\
    \    // If one side is greater than the other, the triangle is not right-angled.\n\
    \    if a > b {\n        return false\n    }\n    if b > c {\n        return false\n\
    \    }\n    if c > a {\n        return false\n    }\n    \n    // If all sides\
    \ are equal, triangle is right-angled.\n    if a == b {\n        return true\n\
    \    }\n    if a == c {\n        return true\n    }\n    if b == c {\n       \
    \ return true\n    }\n    \n    // If all sides are equal, triangle is right-angled.\n\
    \    if a == c {\n        return true\n    }\n    if b == c {\n        return\
    \ true\n    }\n    if c == a {\n        return true\n    }\n    \n    // If all\
    \ sides are equal, triangle is right-angled.\n    if a == b {\n        return\
    \ true\n    }\n    if b == c {\n        return true\n    }\n    if c == a {\n\
    \        return true\n    }\n    \n    // If all sides are equal, triangle is\
    \ right-angled.\n    if a == b {\n        return true\n    }\n    if b == c {\n\
    \        return true\n    }\n    if c == a {\n        return true\n    }\n   \
    \ \n    // If all sides are equal, triangle is right-angled.\n    if a == b {\n\
    \        return true\n    }\n    if b == c {\n        return true\n    }\n   \
    \ if c == a {\n        return true\n    }\n    \n    // If all sides are equal,\
    \ triangle is right-angled.\n    if a == b {\n        return true\n    }\n   \
    \ if b == c {\n        return true\n    }\n    if c == a {\n        return true\n\
    \    }\n    \n    // If all sides are equal, triangle is right-angled.\n    if\
    \ a == b {\n        return true\n    }\n    if b == c {\n        return true\n\
    \    }\n    if c == a {\n        return true\n    }\n    \n    // If all sides\
    \ are equal, triangle is right-angled.\n    if a == b {\n        return true\n\
    \    }\n    if b == c {\n        return true\n    }\n    if c == a {\n       \
    \ return true\n    }\n    \n    // If all sides are equal, triangle is right-angled.\n\
    \    if a == b {\n        return true\n    }\n    if b == c {\n        return\
    \ true\n    }\n    if c == a {\n        return true\n    }\n    \n    // If all\
    \ sides are equal, triangle is right-angled.\n    if a == b {\n        return\
    \ true\n    }\n    if b == c {\n        return \nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3n9dr332_test.go:134:6: expected ''('', found TestRight_Angle_Triangle

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073751
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n    }\n    if\
    \ a > b {\n        if a > c {\n            return true\n        }\n        return\
    \ false\n    }\n    if b > c {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpzjlp1ypa_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpzjlp1ypa_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__5\
    \ (0.00s)\n        tmpzjlp1ypa_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmpzjlp1ypa_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmpzjlp1ypa_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmpzjlp1ypa_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073748
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n    }\n    if\
    \ a > b {\n        if a > c {\n            return true\n        } else {\n   \
    \         return false\n        }\n    } else {\n        if b > c {\n        \
    \    return true\n        } else {\n            return false\n        }\n    }\n\
    }\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpe3h_qig3_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpe3h_qig3_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__5\
    \ (0.00s)\n        tmpe3h_qig3_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmpe3h_qig3_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmpe3h_qig3_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmpe3h_qig3_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073748
- exit_code: 2
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    // Write your code here\n    if a == 0 || b == 0 || c == 0 {\n      \
    \  return false\n    }\n    if a > b {\n        a, b = b, a\n    }\n    if a >\
    \ c {\n        a, c = c, a\n    }\n    if b > c {\n        b, c = c, b\n    }\n\
    \    return a == b == c\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n\
    \  candidate := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false\
    \ },\n     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2n4mch3w_test.go:27:22: invalid operation: a == b == c (mismatched types
    untyped bool and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073752
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    // Write your code here\n    if a == 0 || b == 0 || c == 0 {\n      \
    \  return false\n    }\n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate\
    \ := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4,\
    \ 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false },\n\
    \     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp0norz9yq_test.go:265:6: expected ''('', found TestRight_Angle_Triangle

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073751
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a > b {\n        return right_angle_triangle(b, a, c)\n    }\n   \
    \ if b > c {\n        return right_angle_triangle(a, c, b)\n    }\n    if a ==\
    \ b {\n        return true\n    }\n    if a == c {\n        return true\n    }\n\
    \    if b == c {\n        return true\n    }\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp8v6_5w0r_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp8v6_5w0r_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmp8v6_5w0r_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmp8v6_5w0r_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmp8v6_5w0r_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmp8v6_5w0r_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmp8v6_5w0r_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmp8v6_5w0r_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmp8v6_5w0r_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073748
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a > b {\n        return false\n    }\n    if b > c {\n        return\
    \ false\n    }\n    if a == b {\n        return true\n    }\n    if a == c {\n\
    \        return true\n    }\n    if b == c {\n        return true\n    }\n   \
    \ if a > c {\n        return false\n    }\n    if b > a {\n        return false\n\
    \    }\n    if c > a {\n        return false\n    }\n    return true\n}\n\nfunc\
    \ TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpll51ioh1_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpll51ioh1_test.go:64:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmpll51ioh1_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpll51ioh1_test.go:64:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmpll51ioh1_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmpll51ioh1_test.go:64:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmpll51ioh1_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmpll51ioh1_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmpll51ioh1_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073748
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    // Write your code here\n    if a == 0 || b == 0 || c == 0 {\n      \
    \  return false\n    }\n    if a > b+c {\n        return false\n    }\n    if\
    \ b > a+c {\n        return false\n    }\n    if c > a+b {\n        return false\n\
    \    }\n    return true\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n\
    \  candidate := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false\
    \ },\n     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__1\
    \ (0.00s)\n        tmppf35rzh1_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__3 (0.00s)\n        tmppf35rzh1_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__5\
    \ (0.00s)\n        tmppf35rzh1_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmppf35rzh1_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073748
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a > b {\n        return false\n    }\n    if b > c {\n        return\
    \ false\n    }\n    if a == b {\n        return true\n    }\n    if a == c {\n\
    \        return true\n    }\n    if b == c {\n        return true\n    }\n   \
    \ return false\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate\
    \ := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4,\
    \ 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false },\n\
    \     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp62p1i57g_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp62p1i57g_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmp62p1i57g_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmp62p1i57g_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmp62p1i57g_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmp62p1i57g_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmp62p1i57g_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmp62p1i57g_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmp62p1i57g_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073748
- exit_code: 2
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n    }\n    \n\
    \    // Calculate the area of the triangle\n    area := a * b * c\n    \n    //\
    \ Calculate the hypotenuse of the triangle\n    hypotenuse := sqrt(a * a + b *\
    \ b)\n    \n    // Calculate the area of the right angled triangle\n    right_area\
    \ := sqrt(area / hypotenuse)\n    \n    // Return true if the area of the triangle\
    \ is equal to the area of the \n    // right angled triangle\n    return area\
    \ == right_area\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate\
    \ := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4,\
    \ 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false },\n\
    \     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi_1qxvb1_test.go:22:19: undefined: sqrt

    /tmp/tmpi_1qxvb1_test.go:25:19: undefined: sqrt

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073752
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n    }\n    \n\
    \    // The formula is given by : \n    // http://en.wikipedia.org/wiki/Equilateral_triangle\n\
    \    \n    // The formula is given by : \n    // http://en.wikipedia.org/wiki/Equilateral_triangle\n\
    \    \n    // The formula is given by : \n    // http://en.wikipedia.org/wiki/Equilateral_triangle\n\
    \    \n    // The formula is given by : \n    // http://en.wikipedia.org/wiki/Equilateral_triangle\n\
    \    \n    // The formula is given by : \n    // http://en.wikipedia.org/wiki/Equilateral_triangle\n\
    \    \n    // The formula is given by : \n    // http://en.wikipedia.org/wiki/Equilateral_triangle\n\
    \    \n    // The formula is given by : \n    // http://en.wikipedia.org/wiki/Equilateral_triangle\n\
    \    \n    // The formula is given by : \n    // http://en.wikipedia.org/wiki/Equilateral_triangle\n\
    \    \n    // The formula is given by : \n    // http://en.wikipedia.org/wiki/Equilateral_triangle\n\
    \    \n    // The formula is given by : \n    // http://en.wikipedia.org/wiki/Equilateral_triangle\n\
    \    \n    // The formula is given by : \n    // http://en.wikipedia.org/wiki/Equilateral_triangle\n\
    \    \n    // The formula is given by : \n    // http://en.wikipedia.org/wiki/Equilateral_triangle\n\
    \    \n    // The formula is given by : \n    // http://en.wikipedia.org/wiki/Equilateral_triangle\n\
    \    \n    // The formula is given by : \n    // http://en.wikipedia.org/wiki/Equilateral_triangle\n\
    \    \n    // The formula is given by : \n    // http://en.wikipedia.org/wiki/Equilateral_triangle\n\
    \    \n    // The formula is given by : \n    // http://en.wikipedia.org/wiki/Equilateral_triangle\n\
    \    \n    // The formula is given by : \n    // http://en.wikipedia.org/wiki/Equilateral_triangle\n\
    \    \n    // The formula is given by : \n    // http://en.wikipedia.org/wiki/Equilateral_triangle\n\
    \    \n    // The formula is given by : \n    // http://en.wikipedia.org/wiki/Equilateral_triangle\n\
    \    \n    // The formula is given by : \n    // http://en.wikipedia.org/wiki/Equilateral_triangle\n\
    \    \n    // The formula is given by : \n    // http://en.wikipedia.org/wiki/Equilateral_triangle\n\
    \    \n    // The formula is given by : \n    // http://en.wikipedia.org/wiki/Equilateral_triangle\n\
    \    \n    // The formula is given by : \n    // http://en.wikipedia.org/wiki/Equilateral_triangle\n\
    \    \n    // The formula is given by : \n    // http://en.wikipedia.org/wiki/Equilateral_triangle\n\
    \    \n    // The formula is given by : \n    // http://en.wikipedia.org/wiki/Equilateral_triangle\n\
    \    \n    // The formula is given by : \n    // http://en.wikipedia.org/wiki/Equilateral_triangle\n\
    \    \n    // The \nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate\
    \ := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4,\
    \ 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false },\n\
    \     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpde7_2vgs_test.go:97:6: expected ''('', found TestRight_Angle_Triangle

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073751
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a > b {\n        return false\n    }\n    if b > c {\n        return\
    \ false\n    }\n    if a == b {\n        return false\n    }\n    if a == c {\n\
    \        return true\n    }\n    if b == c {\n        return true\n    }\n   \
    \ if a > c {\n        return false\n    }\n    return true\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__1\
    \ (0.00s)\n        tmpumacnv_k_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpumacnv_k_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmpumacnv_k_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073748
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a > b {\n        return false\n    }\n    if b > c {\n        return\
    \ false\n    }\n    if c > a {\n        return false\n    }\n    if a == 0 ||\
    \ b == 0 || c == 0 {\n        return false\n    }\n    if a + b > c {\n      \
    \  return false\n    }\n    if a + c > b {\n        return false\n    }\n    if\
    \ b + c > a {\n        return false\n    }\n    return true\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp0d9eangq_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp0d9eangq_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp0d9eangq_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp0d9eangq_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp0d9eangq_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp0d9eangq_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073753
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a > b {\n        if b > c {\n            return true\n        } else\
    \ {\n            return false\n        }\n    } else {\n        if c > b {\n \
    \           return true\n        } else {\n            return false\n        }\n\
    \    }\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__1\
    \ (0.00s)\n        tmp0zcdwvdy_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp0zcdwvdy_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp0zcdwvdy_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__10 (0.00s)\n        tmp0zcdwvdy_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073748
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n    }\n    if\
    \ a > b {\n        if a > c {\n            return true\n        } else {\n   \
    \         return false\n        }\n    } else {\n        if b > c {\n        \
    \    return true\n        } else {\n            return false\n        }\n    }\n\
    }\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpe3h_qig3_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpe3h_qig3_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__5\
    \ (0.00s)\n        tmpe3h_qig3_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmpe3h_qig3_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmpe3h_qig3_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmpe3h_qig3_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073748
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n    }\n    if\
    \ a > b {\n        if a > c {\n            return true\n        } else {\n   \
    \         return false\n        }\n    } else {\n        if b > c {\n        \
    \    return true\n        } else {\n            return false\n        }\n    }\n\
    }\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpe3h_qig3_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpe3h_qig3_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__5\
    \ (0.00s)\n        tmpe3h_qig3_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmpe3h_qig3_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmpe3h_qig3_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmpe3h_qig3_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073748
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a > b {\n        return false\n    }\n    if b > c {\n        return\
    \ false\n    }\n    if a == b {\n        return false\n    }\n    if a == c {\n\
    \        return true\n    }\n    if b == c {\n        return true\n    }\n   \
    \ return false\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate\
    \ := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4,\
    \ 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false },\n\
    \     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpn8d95f5s_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpn8d95f5s_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmpn8d95f5s_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmpn8d95f5s_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmpn8d95f5s_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmpn8d95f5s_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073753
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    // Write your code here\n    \n    if a == 0 || b == 0 || c == 0 {\n\
    \        return false\n    }\n    \n    d := (b*b) - (4*a*c)\n    if d < 0 {\n\
    \        return false\n    }\n    \n    e := (b*b) - (a*a)\n    if e < 0 {\n \
    \       return false\n    }\n    \n    f := (a*a) - (c*c)\n    if f < 0 {\n  \
    \      return false\n    }\n    \n    if d == 0 && e == 0 && f == 0 {\n      \
    \  return true\n    }\n    \n    if d == 0 && e != 0 && f == 0 {\n        return\
    \ false\n    }\n    \n    if d == 0 && e == 0 && f != 0 {\n        return true\n\
    \    }\n    \n    if d == 0 && e != 0 && f != 0 {\n        return false\n    }\n\
    \    \n    if d == 0 && e == 0 && f == 0 {\n        return false\n    }\n    \n\
    \    if d == 0 && e != 0 && f != 0 {\n        return true\n    }\n    \n    if\
    \ d == 0 && e == 0 && f != 0 {\n        return true\n    }\n    \n    if d ==\
    \ 0 && e != 0 && f == 0 {\n        return true\n    }\n    \n    if d == 0 &&\
    \ e == 0 && f != 0 {\n        return true\n    }\n    \n    if d == 0 && e !=\
    \ 0 && f != 0 {\n        return true\n    }\n    \n    if d == 0 && e == 0 &&\
    \ f == 0 {\n        return true\n    }\n    \n    if d == 0 && e != 0 && f !=\
    \ 0 {\n        return true\n    }\n    \n    if d == 0 && e == 0 && f != 0 {\n\
    \        return true\n    }\n    \n    if d == 0 && e != 0 && f == 0 {\n     \
    \   return true\n    }\n    \n    if d == 0 && e == 0 && f != 0 {\n        return\
    \ true\n    }\n    \n    if d == 0 && e != 0 && f != 0 {\n        return true\n\
    \    }\n    \n    if d == 0 && e == 0 && f == 0 {\n        return true\n    }\n\
    \    \n    if d == 0 && e != 0 && f != 0 {\n        return true\n    }\n    \n\
    \    if d == 0 && e == 0 && f != 0 {\n        return true\n    }\n    \n    if\
    \ d == 0 && e != 0 && f == 0 {\n        return true\n    }\n    \n    if d ==\
    \ 0 && e == 0 && f != 0 {\n        return true\n    }\n    \n    if d == 0 &&\
    \ e != 0 && f != 0 {\n        return true\n    }\n    \n    if d == 0 && e ==\
    \ 0 && f == 0 {\n        return true\n    }\n    \n    if d == 0 && e != 0 &&\
    \ f != 0 {\n        return true\n    }\n    \n    if d == 0 && e == 0 && f !=\
    \ 0 {\n        return true\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n\
    \  candidate := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false\
    \ },\n     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmphfykybz4_test.go:134:6: expected ''('', found TestRight_Angle_Triangle

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073752
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a > b {\n        if b > c {\n            return false\n        }\n\
    \        return true\n    }\n    if b > c {\n        return true\n    }\n    return\
    \ false\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpc7guy1u__test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpc7guy1u__test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__5\
    \ (0.00s)\n        tmpc7guy1u__test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmpc7guy1u__test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmpc7guy1u__test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073752
- exit_code: 2
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n    }\n    \n\
    \    switch {\n    case a > 0 && b > 0 && c > 0:\n        return true\n    case\
    \ a > 0 && b > 0 && c < 0:\n        return false\n    case a > 0 && b < 0 && c\
    \ > 0:\n        return false\n    case a > 0 && b < 0 && c < 0:\n        return\
    \ true\n    case a < 0 && b > 0 && c > 0:\n        return false\n    case a <\
    \ 0 && b > 0 && c < 0:\n        return true\n    case a < 0 && b < 0 && c > 0:\n\
    \        return false\n    case a < 0 && b < 0 && c < 0:\n        return true\n\
    \    }\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpf06b36b9_test.go:36:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n    }\n    if\
    \ a == b {\n        return a == c\n    }\n    if a == c {\n        return b ==\
    \ c\n    }\n    if b == c {\n        return a != b\n    }\n    return a < b+c\
    \ && b < c+a && c < a+b\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n\
    \  candidate := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false\
    \ },\n     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmpxsgager5_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__5 (0.00s)\n        tmpxsgager5_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__9\
    \ (0.00s)\n        tmpxsgager5_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073753
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    // Write your code here\n    if a > b {\n        if b > c {\n       \
    \     return true\n        } else {\n            return false\n        }\n   \
    \ } else {\n        if c > b {\n            return true\n        } else {\n  \
    \          return false\n        }\n    }\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__1\
    \ (0.00s)\n        tmpx4u0byto_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpx4u0byto_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmpx4u0byto_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__10 (0.00s)\n        tmpx4u0byto_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n    }\n    if\
    \ a > b {\n        if b > c {\n            return false\n        }\n        return\
    \ true\n    }\n    if b > c {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpucmjmt9f_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpucmjmt9f_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__5\
    \ (0.00s)\n        tmpucmjmt9f_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmpucmjmt9f_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmpucmjmt9f_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073753
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n    }\n    if\
    \ a == b {\n        return a == c\n    }\n    if a == c {\n        return b ==\
    \ c\n    }\n    if b == c {\n        return a != b\n    }\n    return a > b and\
    \ a > c and b > c\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate\
    \ := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4,\
    \ 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false },\n\
    \     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpxnxcpa8c_test.go:26:18: expected '';'', found and

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073746
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n    }\n    \n\
    \    switch {\n    case a > b + c:\n        return false\n    case b > a + c:\n\
    \        return false\n    case c > a + b:\n        return false\n    default:\n\
    \        return true\n    }\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T)\
    \ {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false\
    \ },\n     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__1\
    \ (0.00s)\n        tmpx_ajdceo_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__3 (0.00s)\n        tmpx_ajdceo_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__5\
    \ (0.00s)\n        tmpx_ajdceo_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmpx_ajdceo_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073752
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a > b {\n        return false\n    }\n    if b > c {\n        return\
    \ false\n    }\n    if a == b {\n        return true\n    }\n    if a == c {\n\
    \        return true\n    }\n    if b == c {\n        return true\n    }\n   \
    \ return false\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate\
    \ := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4,\
    \ 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false },\n\
    \     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp62p1i57g_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp62p1i57g_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmp62p1i57g_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmp62p1i57g_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmp62p1i57g_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmp62p1i57g_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmp62p1i57g_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmp62p1i57g_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmp62p1i57g_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073748
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n    }\n    if\
    \ a > b {\n        if a > c {\n            return true\n        } else {\n   \
    \         return false\n        }\n    } else {\n        if b > c {\n        \
    \    return true\n        } else {\n            return false\n        }\n    }\n\
    }\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpe3h_qig3_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpe3h_qig3_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__5\
    \ (0.00s)\n        tmpe3h_qig3_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmpe3h_qig3_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmpe3h_qig3_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmpe3h_qig3_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073748
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n    }\n    \n\
    \    // If one side is greater than the other, the triangle is not right-angled.\n\
    \    if a > b {\n        return false\n    }\n    if b > c {\n        return false\n\
    \    }\n    if c > a {\n        return false\n    }\n    \n    // If all sides\
    \ are equal, triangle is right-angled.\n    if a == b {\n        return true\n\
    \    }\n    if a == c {\n        return true\n    }\n    if b == c {\n       \
    \ return true\n    }\n    \n    // If all sides are equal, triangle is right-angled.\n\
    \    if a == b {\n        return true\n    }\n    if a == c {\n        return\
    \ true\n    }\n    if b == c {\n        return true\n    }\n    \n    // If all\
    \ sides are equal, triangle is right-angled.\n    if a == b {\n        return\
    \ true\n    }\n    if a == c {\n        return true\n    }\n    if b == c {\n\
    \        return true\n    }\n    \n    // If all sides are equal, triangle is\
    \ right-angled.\n    if a == b {\n        return true\n    }\n    if a == c {\n\
    \        return true\n    }\n    if b == c {\n        return true\n    }\n   \
    \ \n    // If all sides are equal, triangle is right-angled.\n    if a == b {\n\
    \        return true\n    }\n    if a == c {\n        return true\n    }\n   \
    \ if b == c {\n        return true\n    }\n    \n    // If all sides are equal,\
    \ triangle is right-angled.\n    if a == b {\n        return true\n    }\n   \
    \ if a == c {\n        return true\n    }\n    if b == c {\n        return true\n\
    \    }\n    \n    // If all sides are equal, triangle is right-angled.\n    if\
    \ a == b {\n        return true\n    }\n    if a == c {\n        return true\n\
    \    }\n    if b == c {\n        return true\n    }\n    \n    // If all sides\
    \ are equal, triangle is right-angled.\n    if a == b {\n        return true\n\
    \    }\n    if a == c {\n        return true\n    }\n    if b == c {\n       \
    \ return true\n    }\n    \n    // If all sides are equal, triangle is right-angled.\n\
    \    if a == b {\n        return true\n    }\n    if a == c {\n        return\
    \ true\n    }\n    if b == c {\n        return true\n    }\n    \n    // If all\
    \ sides are equal, triangle is right-angled.\n    if a == b {\n        return\
    \ true\n    }\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp9ebp6m9x_test.go:132:6: expected ''('', found TestRight_Angle_Triangle

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073752
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a > b {\n        if a > c {\n            return true\n        } else\
    \ {\n            return false\n        }\n    } else {\n        if b > c {\n \
    \           return true\n        } else {\n            return false\n        }\n\
    \    }\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpwspl5leg_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpwspl5leg_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__5\
    \ (0.00s)\n        tmpwspl5leg_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmpwspl5leg_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmpwspl5leg_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmpwspl5leg_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073748
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    // Write code here\n    if a == 0 || b == 0 || c == 0 {\n        return\
    \ false\n    }\n    \n    switch {\n    case a > b and a > c:\n        return\
    \ true\n    case b > a and b > c:\n        return true\n    case c > a and c >\
    \ b:\n        return true\n    default:\n        return false\n    }\n}\n\nfunc\
    \ TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1_lri5s8_test.go:20:16: expected '':'', found and

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073753
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n    }\n    if\
    \ a > b {\n        if a > c {\n            return true\n        }\n        return\
    \ false\n    }\n    if b > c {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpzjlp1ypa_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpzjlp1ypa_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__5\
    \ (0.00s)\n        tmpzjlp1ypa_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmpzjlp1ypa_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmpzjlp1ypa_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmpzjlp1ypa_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073748
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n    }\n\n    //\
    \ The hypotenuse of a right angle triangle is equal to the sum of the\n    //\
    \ lengths of the sides\n    hypotenuse := a + b + c\n    if hypotenuse == 0 {\n\
    \        return false\n    }\n\n    // The area of a right angle triangle is equal\
    \ to the product of the \n    // lengths of the sides multiplied by the hypotenuse\n\
    \    area := a * b * c\n    if area == 0 {\n        return false\n    }\n\n  \
    \  // The area of a right angle triangle is equal to the product of the \n   \
    \ // lengths of the sides multiplied by the hypotenuse\n    area := a * b * c\n\
    \    if area == 0 {\n        return false\n    }\n\n    // The area of a right\
    \ angle triangle is equal to the product of the \n    // lengths of the sides\
    \ multiplied by the hypotenuse\n    area := a * b * c\n    if area == 0 {\n  \
    \      return false\n    }\n\n    // The area of a right angle triangle is equal\
    \ to the product of the \n    // lengths of the sides multiplied by the hypotenuse\n\
    \    area := a * b * c\n    if area == 0 {\n        return false\n    }\n\n  \
    \  // The area of a right angle triangle is equal to the product of the \n   \
    \ // lengths of the sides multiplied by the hypotenuse\n    area := a * b * c\n\
    \    if area == 0 {\n        return false\n    }\n\n    // The area of a right\
    \ angle triangle is equal to the product of the \n    // lengths of the sides\
    \ multiplied by the hypotenuse\n    area := a * b * c\n    if area == 0 {\n  \
    \      return false\n    }\n\n    // The area of a right angle triangle is equal\
    \ to the product of the \n    // lengths of the sides multiplied by the hypotenuse\n\
    \    area := a * b * c\n    if area == 0 {\n        return false\n    }\n\n  \
    \  // The area of a right angle triangle is equal to the product of the \n   \
    \ // lengths of the sides multiplied by the hypotenuse\n    area := a * b * c\n\
    \    if area == 0 {\n        return false\n    }\n\n    // The area of a right\
    \ angle triangle is equal to the product of the \n    // lengths of the sides\
    \ multiplied by the hypotenuse\n    area := a * b * c\n    if area == 0 {\n  \
    \      return false\n    }\n\n    // The area of a right angle triangle is equal\
    \ to the product of the \n    // lengths of the sides multiplied by the hypotenuse\n\
    \    area := a * b * c\n    if area == 0 {\n        return false\n    }\n\n  \
    \  // The area of a right angle triangle is equal to the product of the \n   \
    \ // lengths of the sides multiplied by the hypotenuse\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvpgnfd92_test.go:98:6: expected ''('', found TestRight_Angle_Triangle

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073753
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n    }\n    \n\
    \    x := b * c / a\n    y := a * c / b\n    z := a * b / c\n    \n    if x ==\
    \ y && y == z {\n        return true\n    }\n    \n    if x == y || x == z {\n\
    \        return false\n    }\n    \n    if y == z {\n        return false\n  \
    \  }\n    \n    if x == z {\n        return true\n    }\n    \n    if y == x {\n\
    \        return true\n    }\n    \n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp56t90_hc_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp56t90_hc_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmp56t90_hc_test.go:68: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmp56t90_hc_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmp56t90_hc_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmp56t90_hc_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmp56t90_hc_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmp56t90_hc_test.go:68:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073754
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a > b {\n        if b > c {\n            return false\n        }\n\
    \        return true\n    }\n    if b > c {\n        return true\n    }\n    return\
    \ false\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpc7guy1u__test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpc7guy1u__test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__5\
    \ (0.00s)\n        tmpc7guy1u__test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmpc7guy1u__test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmpc7guy1u__test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073752
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a > b {\n        return false\n    }\n    if b > c {\n        return\
    \ false\n    }\n    if a == b {\n        return false\n    }\n    if a == c {\n\
    \        return true\n    }\n    if b == c {\n        return true\n    }\n   \
    \ if a > c {\n        return false\n    }\n    if a == b {\n        return true\n\
    \    }\n    if a == c {\n        return true\n    }\n    if b > c {\n        return\
    \ true\n    }\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T)\
    \ {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false\
    \ },\n     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp6autgg3i_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp6autgg3i_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp6autgg3i_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp6autgg3i_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp6autgg3i_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp6autgg3i_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073754
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a > b {\n        return false\n    }\n    if b > c {\n        return\
    \ false\n    }\n    if a == b {\n        return false\n    }\n    if a == c {\n\
    \        return true\n    }\n    if b == c {\n        return true\n    }\n   \
    \ return false\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate\
    \ := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4,\
    \ 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false },\n\
    \     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpn8d95f5s_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpn8d95f5s_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmpn8d95f5s_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmpn8d95f5s_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmpn8d95f5s_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmpn8d95f5s_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073753
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a > b {\n        return false\n    }\n    if b > c {\n        return\
    \ false\n    }\n    if a == b {\n        return true\n    }\n    if a == c {\n\
    \        return true\n    }\n    if b == c {\n        return true\n    }\n   \
    \ return false\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate\
    \ := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4,\
    \ 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false },\n\
    \     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp62p1i57g_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp62p1i57g_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmp62p1i57g_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmp62p1i57g_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmp62p1i57g_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmp62p1i57g_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmp62p1i57g_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmp62p1i57g_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmp62p1i57g_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073748
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    // Write your code here\n    if a == 0 || b == 0 || c == 0 {\n      \
    \  return false\n    }\n    \n    switch {\n    case a > b + c:\n        return\
    \ false\n    case b > a + c:\n        return false\n    case c > a + b:\n    \
    \    return false\n    }\n    \n    return true\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__1\
    \ (0.00s)\n        tmpjt_0u2za_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__3 (0.00s)\n        tmpjt_0u2za_test.go:54:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__5\
    \ (0.00s)\n        tmpjt_0u2za_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmpjt_0u2za_test.go:54:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073754
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a > b {\n        return right_angle_triangle(b, a, c)\n    }\n   \
    \ if b > c {\n        return right_angle_triangle(c, a, b)\n    }\n    if a ==\
    \ 0 || b == 0 || c == 0 {\n        return false\n    }\n    if a > c {\n     \
    \   return right_angle_triangle(b, a, c)\n    }\n    if b > c {\n        return\
    \ right_angle_triangle(c, a, b)\n    }\n    if a == b {\n        return right_angle_triangle(c,\
    \ a, c)\n    }\n    if a == c {\n        return right_angle_triangle(b, a, c)\n\
    \    }\n    if b == c {\n        return right_angle_triangle(a, b, c)\n    }\n\
    \    return false\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate\
    \ := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4,\
    \ 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false },\n\
    \     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0388\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x520368?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.right_angle_triangle(0x2?,\
    \ 0x2?, 0x2?)\n\t/tmp/tmpn4bjmojz_test.go:13 +0xc5 fp=0xc0201e0398 sp=0xc0201e0390\
    \ pc=0x4ef725\ncommand-line-arguments_test.right_angle_triangle(0x0?, 0x0?, 0x0?)\n\
    \t/tmp/tmpn4bjmojz_test.go:30 +0x71 fp=0xc0201e03c0 sp=0xc0201e0398 pc=0x4ef6d1\n\
    command-line-arguments_test.right_angle_triangle(0x0?, 0x0?, 0x0?)\n\t/tmp/tmpn4bjmojz_test.go:30\
    \ +0x71 fp=0xc0201e03e8 sp=0xc0201e03c0 pc=0x4ef6d1\ncommand-line-arguments_test.right_angle_triangle(0x0?,\
    \ 0x0?, 0x0?)\n\t/tmp/tmpn4bjmojz_test.go:30 +0x71 fp=0xc0201e0410 sp=0xc0201e03e8\
    \ pc=0x4ef6d1\ncommand-line-arguments_test.right_angle_triangle(0x0?, 0x0?, 0x0?)\n\
    \t/tmp/tmpn4bjmojz_test.go:30 +0x71 fp=0xc0201e0438 sp=0xc0201e0410 pc=0x4ef6d1\n\
    command-line-arguments_test.right_angle_triangle(0x0?, 0x0?, 0x0?)\n\t/tmp/tmpn4bjmojz_test.go:30\
    \ +0x71 fp=0xc0201e0460 sp=0xc0201e0438 pc=0x4ef6d1\ncommand-line-arguments_test.right_angle_triangle(0x0?,\
    \ 0x0?, 0x0?)\n\t/tmp/tmpn4bjmojz_test.go:30 +0x71 fp=0xc0201e0488 sp=0xc0201e0460\
    \ pc=0x4ef6d1\ncommand-line-arguments_test.right_angle_triangle(0x0?, 0x0?, 0x0?)\n\
    \t/tmp/tmpn4bjmojz_test.go:30 +0x71 fp=0xc0201e04b0 sp=0xc0201e0488 pc=0x4ef6d1\n\
    command-line-arguments_test.right_angle_triangle(0x0?, 0x0?, 0x0?)\n\t/tmp/tmpn4bjmojz_test.go:30\
    \ +0x71 fp=0xc0201e04d8 sp=0xc0201e04b0 pc=0x4ef6d1\ncommand-line-arguments_test.right_angle_triangle(0x0?,\
    \ 0x0?, 0x0?)\n\t/tmp/tmpn4bjmojz_test.go:30 +0x71 fp=0xc0201e0500 sp=0xc0201e04d8\
    \ pc=0x4ef6d1\ncommand-line-arguments_test.right_angle_triangle(0x0?, 0x0?, 0x0?)\n\
    \t/tmp/tmpn4bjmojz_test.go:30 +0x71 fp=0xc0201e052"
  timestamp: 1660073755
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a > b {\n        return right_angle_triangle(b, a, c)\n    }\n   \
    \ if b > c {\n        return right_angle_triangle(a, c, b)\n    }\n    if a ==\
    \ b {\n        return true\n    }\n    if a == c {\n        return true\n    }\n\
    \    if b == c {\n        return true\n    }\n    if a > c {\n        return right_angle_triangle(b,\
    \ a, c)\n    }\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T)\
    \ {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false\
    \ },\n     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpshchc__l_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpshchc__l_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmpshchc__l_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpshchc__l_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmpshchc__l_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmpshchc__l_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmpshchc__l_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmpshchc__l_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmpshchc__l_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073754
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a > b {\n        if b > c {\n            return true\n        } else\
    \ {\n            return false\n        }\n    } else {\n        if c > b {\n \
    \           return true\n        } else {\n            return false\n        }\n\
    \    }\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__1\
    \ (0.00s)\n        tmp0zcdwvdy_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp0zcdwvdy_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp0zcdwvdy_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__10 (0.00s)\n        tmp0zcdwvdy_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073748
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a > b {\n        return false\n    }\n    if b > c {\n        return\
    \ false\n    }\n    if a == b {\n        return true\n    }\n    if a == c {\n\
    \        return true\n    }\n    if b == c {\n        return true\n    }\n   \
    \ if a > c {\n        return false\n    }\n    if b > a {\n        return false\n\
    \    }\n    if c > a {\n        return false\n    }\n    if a > b {\n        return\
    \ false\n    }\n    if b > c {\n        return false\n    }\n    if c > b {\n\
    \        return false\n    }\n    if a > c {\n        return false\n    }\n  \
    \  if b > a {\n        return false\n    }\n    if c > a {\n        return false\n\
    \    }\n    return true\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n\
    \  candidate := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false\
    \ },\n     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpmrd8tg9p_test.go:82: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpmrd8tg9p_test.go:82:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmpmrd8tg9p_test.go:82: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpmrd8tg9p_test.go:82:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmpmrd8tg9p_test.go:82: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmpmrd8tg9p_test.go:82:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmpmrd8tg9p_test.go:82: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmpmrd8tg9p_test.go:82:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmpmrd8tg9p_test.go:82: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a > b {\n        if b > c {\n            return true\n        } else\
    \ {\n            return false\n        }\n    } else {\n        if c > b {\n \
    \           return true\n        } else {\n            return false\n        }\n\
    \    }\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__1\
    \ (0.00s)\n        tmp0zcdwvdy_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp0zcdwvdy_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp0zcdwvdy_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__10 (0.00s)\n        tmp0zcdwvdy_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073748
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n    }\n    if\
    \ a == b && b == c {\n        return true\n    }\n    if a == c {\n        return\
    \ true\n    }\n    if b == c {\n        return true\n    }\n    if a > b {\n \
    \       if a > c {\n            return true\n        }\n        if b > c {\n \
    \           return false\n        }\n    }\n    if a > c {\n        if a > b {\n\
    \            return false\n        }\n        if b > c {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T)\
    \ {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false\
    \ },\n     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp90ra69ck_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__3 (0.00s)\n        tmp90ra69ck_test.go:68:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp90ra69ck_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__5 (0.00s)\n        tmp90ra69ck_test.go:68:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmp90ra69ck_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmp90ra69ck_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmp90ra69ck_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmp90ra69ck_test.go:68:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073754
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a > b {\n        return false\n    }\n    if b > c {\n        return\
    \ false\n    }\n    if a == b {\n        return true\n    }\n    if a == c {\n\
    \        return true\n    }\n    if b == c {\n        return true\n    }\n   \
    \ if a > c {\n        return false\n    }\n    if a == b {\n        return true\n\
    \    }\n    if a == c {\n        return true\n    }\n    if b == c {\n       \
    \ return true\n    }\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T)\
    \ {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false\
    \ },\n     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpgc5s55n0_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpgc5s55n0_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmpgc5s55n0_test.go:67: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpgc5s55n0_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmpgc5s55n0_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmpgc5s55n0_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmpgc5s55n0_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmpgc5s55n0_test.go:67:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmpgc5s55n0_test.go:67: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073754
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n    }\n    \n\
    \    d := (b * b) - (4 * a * c)\n    if d < 0 {\n        return false\n    }\n\
    \    \n    s := (a + b + c) / 2\n    if s == 0 {\n        return false\n    }\n\
    \    \n    t := (a + b + c) / s\n    if t > 1 {\n        return false\n    }\n\
    \    \n    return true\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n \
    \ candidate := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false\
    \ },\n     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpt1mhxybf_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpt1mhxybf_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmpt1mhxybf_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmpt1mhxybf_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmpt1mhxybf_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmpt1mhxybf_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073754
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n    }\n    \n\
    \    if a == b {\n        return a == c\n    }\n    \n    if a == c {\n      \
    \  return b == c\n    }\n    \n    if b == c {\n        return a == b\n    }\n\
    \    \n    if a == b+c {\n        return a == c-b\n    }\n    \n    if a == c+b\
    \ {\n        return b == c-a\n    }\n    \n    if b == c+a {\n        return a\
    \ == b - a\n    }\n    \n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp7nmhn_bq_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp7nmhn_bq_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmp7nmhn_bq_test.go:68: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmp7nmhn_bq_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmp7nmhn_bq_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmp7nmhn_bq_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmp7nmhn_bq_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmp7nmhn_bq_test.go:68:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073754
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a > b {\n        if a > c {\n            return true\n        } else\
    \ {\n            return false\n        }\n    } else {\n        if b > c {\n \
    \           return true\n        } else {\n            return false\n        }\n\
    \    }\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpwspl5leg_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpwspl5leg_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__5\
    \ (0.00s)\n        tmpwspl5leg_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmpwspl5leg_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmpwspl5leg_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmpwspl5leg_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073748
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a > b {\n        return right_angle_triangle(b, a, c)\n    }\n   \
    \ if b > c {\n        return right_angle_triangle(c, a, b)\n    }\n    if a ==\
    \ b {\n        return true\n    }\n    if a == c {\n        return true\n    }\n\
    \    if b == c {\n        return true\n    }\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpi9kw55so_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpi9kw55so_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmpi9kw55so_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpi9kw55so_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmpi9kw55so_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmpi9kw55so_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmpi9kw55so_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmpi9kw55so_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmpi9kw55so_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073748
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a < 0 || b < 0 || c < 0 {\n        return false\n    }\n    if a ==\
    \ 0 || b == 0 || c == 0 {\n        return false\n    }\n    if a > b+c {\n   \
    \     return false\n    }\n    if b > a+c {\n        return false\n    }\n   \
    \ if c > a+b {\n        return false\n    }\n    return true\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__1\
    \ (0.00s)\n        tmpwi_ix1mq_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__3 (0.00s)\n        tmpwi_ix1mq_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__5\
    \ (0.00s)\n        tmpwi_ix1mq_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmpwi_ix1mq_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073754
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n    }\n    if\
    \ a > b {\n        if b > c {\n            return false\n        }\n    } else\
    \ {\n        if c > b {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpuo5g8pqk_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__3 (0.00s)\n        tmpuo5g8pqk_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmpuo5g8pqk_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__5 (0.00s)\n        tmpuo5g8pqk_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmpuo5g8pqk_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmpuo5g8pqk_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__9\
    \ (0.00s)\n        tmpuo5g8pqk_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073754
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n    }\n    \n\
    \    switch {\n    case a > b + c:\n        return false\n    case b > a + c:\n\
    \        return false\n    case c > a + b:\n        return false\n    }\n    \n\
    \    return true\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate\
    \ := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4,\
    \ 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false },\n\
    \     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__1\
    \ (0.00s)\n        tmp4xsw1d6m_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__3 (0.00s)\n        tmp4xsw1d6m_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__5\
    \ (0.00s)\n        tmp4xsw1d6m_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmp4xsw1d6m_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a < 0 || b < 0 || c < 0 {\n        return false\n    }\n    if a +\
    \ b > c || a + c > b || b + c > a {\n        return false\n    }\n    return true\n\
    }\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpdkky03sf_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpdkky03sf_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmpdkky03sf_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmpdkky03sf_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmpdkky03sf_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmpdkky03sf_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660073754
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n    }\n    \n\
    \    if a == b {\n        return a == c\n    }\n    \n    if a == c {\n      \
    \  return b == c\n    }\n    \n    if b == c {\n        return a == b\n    }\n\
    \    \n    if a == b+c {\n        return a == c+b\n    }\n    \n    if a == c+b\
    \ {\n        return b == c+a\n    }\n    \n    if b == c+a {\n        return a\
    \ == b+c\n    }\n    \n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpxecj2v07_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpxecj2v07_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmpxecj2v07_test.go:68: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpxecj2v07_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmpxecj2v07_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmpxecj2v07_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmpxecj2v07_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmpxecj2v07_test.go:68:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073754
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n    }\n    \n\
    \    x := (b * c - a * c) / 2.0\n    y := (a * c + b * x) / 2.0\n    z := (a *\
    \ c - b * x) / 2.0\n    \n    if x == y && x == z {\n        return true\n   \
    \ }\n    \n    return false\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T)\
    \ {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false\
    \ },\n     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpod1q66_e_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpod1q66_e_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmpod1q66_e_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmpod1q66_e_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmpod1q66_e_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmpod1q66_e_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__9\
    \ (0.00s)\n        tmpod1q66_e_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073754
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n    }\n    \n\
    \    switch {\n    case a > b + c:\n        return false\n    case b > a + c:\n\
    \        return false\n    case c > a + b:\n        return false\n    default:\n\
    \        return true\n    }\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T)\
    \ {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false\
    \ },\n     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__1\
    \ (0.00s)\n        tmpx_ajdceo_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__3 (0.00s)\n        tmpx_ajdceo_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__5\
    \ (0.00s)\n        tmpx_ajdceo_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmpx_ajdceo_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073752
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a > b {\n        return right_angle_triangle(b, a, c)\n    }\n   \
    \ if b > c {\n        return right_angle_triangle(a, c, b)\n    }\n    if a ==\
    \ b {\n        return true\n    }\n    if a == c {\n        return true\n    }\n\
    \    if b == c {\n        return true\n    }\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp8v6_5w0r_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp8v6_5w0r_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmp8v6_5w0r_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmp8v6_5w0r_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmp8v6_5w0r_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmp8v6_5w0r_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmp8v6_5w0r_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmp8v6_5w0r_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmp8v6_5w0r_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073748
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n    }\n    if\
    \ a == b {\n        return a == c\n    }\n    if a == c {\n        return b ==\
    \ c\n    }\n    if b == c {\n        return a == b\n    }\n    if a > b {\n  \
    \      if a > c {\n            return false\n        }\n        return true\n\
    \    }\n    if b > c {\n        if b > a {\n            return false\n       \
    \ }\n        return true\n    }\n    if c > a {\n        if c > b {\n        \
    \    return false\n        }\n        return true\n    }\n    return false\n}\n\
    \nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpxg6j0xxu_test.go:70: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpxg6j0xxu_test.go:70:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmpxg6j0xxu_test.go:70: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpxg6j0xxu_test.go:70:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmpxg6j0xxu_test.go:70: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmpxg6j0xxu_test.go:70:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__9\
    \ (0.00s)\n        tmpxg6j0xxu_test.go:70: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073754
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n    }\n    if\
    \ a == b {\n        return a == c\n    }\n    if a == c {\n        return b ==\
    \ c\n    }\n    if b == c {\n        return a != b\n    }\n    return a > b and\
    \ a > c and b > c\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate\
    \ := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4,\
    \ 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false },\n\
    \     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpxnxcpa8c_test.go:26:18: expected '';'', found and

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073746
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a > b {\n        if a > c {\n            return true\n        }\n\
    \        return false\n    }\n    if b > c {\n        return false\n    }\n  \
    \  if a == b {\n        return true\n    }\n    if a == c {\n        return true\n\
    \    }\n    if b == c {\n        return true\n    }\n    return false\n}\n\nfunc\
    \ TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpqsq0snim_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__3 (0.00s)\n        tmpqsq0snim_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmpqsq0snim_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__5 (0.00s)\n        tmpqsq0snim_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmpqsq0snim_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmpqsq0snim_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmpqsq0snim_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmpqsq0snim_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmpqsq0snim_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073755
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    // Write code here\n    if a > b {\n        if b > c {\n            return\
    \ true\n        } else {\n            return false\n        }\n    } else {\n\
    \        if c > b {\n            return false\n        } else {\n            return\
    \ true\n        }\n    }\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n\
    \  candidate := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false\
    \ },\n     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpv59wy94r_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpv59wy94r_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmpv59wy94r_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpv59wy94r_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmpv59wy94r_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmpv59wy94r_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmpv59wy94r_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmpv59wy94r_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073755
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n    }\n    \n\
    \    // Check that the three sides are equal\n    if a != b {\n        if a !=\
    \ c {\n            if b != c {\n                // Check that the two sides are\
    \ equal\n                if a == b {\n                    // Check that the third\
    \ side is equal\n                    if a == c {\n                        return\
    \ true\n                    }\n                }\n            }\n        }\n \
    \   }\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n\
    \  candidate := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false\
    \ },\n     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpeh9xrjlv_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpeh9xrjlv_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmpeh9xrjlv_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmpeh9xrjlv_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmpeh9xrjlv_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmpeh9xrjlv_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073755
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    // Write your code here\n    if a == 0 || b == 0 || c == 0 {\n      \
    \  return false\n    }\n    if a > b {\n        if a > c {\n            return\
    \ true\n        } else {\n            return false\n        }\n    } else {\n\
    \        if b > c {\n            return true\n        } else {\n            return\
    \ false\n        }\n    }\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n\
    \  candidate := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false\
    \ },\n     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp5ho4n6d9_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmp5ho4n6d9_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__5\
    \ (0.00s)\n        tmp5ho4n6d9_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp5ho4n6d9_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp5ho4n6d9_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp5ho4n6d9_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073748
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a > b {\n        return false\n    }\n    if b > c {\n        return\
    \ false\n    }\n    if a == b {\n        return false\n    }\n    if a == c {\n\
    \        return false\n    }\n    if b == c {\n        return true\n    }\n  \
    \  if a > c {\n        return false\n    }\n    if b > a {\n        return false\n\
    \    }\n    if c > a {\n        return false\n    }\n    return true\n}\n\nfunc\
    \ TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp351216ou_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp351216ou_test.go:64:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp351216ou_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp351216ou_test.go:64:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp351216ou_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp351216ou_test.go:64:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073748
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n    }\n    if\
    \ a == b {\n        return a == c\n    }\n    if a == c {\n        return b ==\
    \ c\n    }\n    if b == c {\n        return a != b\n    }\n    return false\n\
    }\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpzvm4126o_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpzvm4126o_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmpzvm4126o_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpzvm4126o_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmpzvm4126o_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmpzvm4126o_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmpzvm4126o_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmpzvm4126o_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073755
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n    }\n    \n\
    \    switch {\n    case a > b + c:\n        return false\n    case b > a + c:\n\
    \        return false\n    case c > a + b:\n        return false\n    default:\n\
    \        return true\n    }\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T)\
    \ {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false\
    \ },\n     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__1\
    \ (0.00s)\n        tmpx_ajdceo_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__3 (0.00s)\n        tmpx_ajdceo_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__5\
    \ (0.00s)\n        tmpx_ajdceo_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmpx_ajdceo_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073752
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a > b {\n        return false\n    }\n    if b > c {\n        return\
    \ false\n    }\n    if a == b {\n        return true\n    }\n    if a == c {\n\
    \        return true\n    }\n    if b == c {\n        return true\n    }\n   \
    \ if a > c {\n        return false\n    }\n    if b > a {\n        return false\n\
    \    }\n    if c > a {\n        return false\n    }\n    return true\n}\n\nfunc\
    \ TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpll51ioh1_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpll51ioh1_test.go:64:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmpll51ioh1_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpll51ioh1_test.go:64:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmpll51ioh1_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmpll51ioh1_test.go:64:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmpll51ioh1_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmpll51ioh1_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmpll51ioh1_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073748
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a > b {\n        if b > c {\n            return false\n        } else\
    \ {\n            return true\n        }\n    } else {\n        if c > b {\n  \
    \          return false\n        } else {\n            return true\n        }\n\
    \    }\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp9wtwmtsd_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__3 (0.00s)\n        tmp9wtwmtsd_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp9wtwmtsd_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__5 (0.00s)\n        tmp9wtwmtsd_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmp9wtwmtsd_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp9wtwmtsd_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__9\
    \ (0.00s)\n        tmp9wtwmtsd_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073755
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n    }\n    if\
    \ a == b {\n        return a == c\n    }\n    if a == c {\n        return b ==\
    \ c\n    }\n    if b == c {\n        return a > b\n    }\n    return a > b &&\
    \ b > c\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp3406kw1h_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp3406kw1h_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmp3406kw1h_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmp3406kw1h_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmp3406kw1h_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmp3406kw1h_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmp3406kw1h_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmp3406kw1h_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073755
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n    }\n    \n\
    \    // if one side is 90 degree, return true\n    if a == b {\n        if a ==\
    \ c {\n            return true\n        }\n        return false\n    }\n    \n\
    \    // if one side is right angle\n    if a == c {\n        return true\n   \
    \ }\n    \n    // if two sides are 90 degree, return false\n    if b == c {\n\
    \        return false\n    }\n    \n    // if two sides are right angle\n    if\
    \ a == b {\n        return true\n    }\n    \n    // if two sides are equal, return\
    \ false\n    if a == c {\n        return false\n    }\n    \n    // if two sides\
    \ are equal, return false\n    if b == c {\n        return false\n    }\n    \n\
    \    // if two sides are equal, return false\n    if a == b {\n        return\
    \ false\n    }\n    \n    // if two sides are equal, return false\n    if a ==\
    \ c {\n        return false\n    }\n    \n    // if two sides are equal, return\
    \ false\n    if b == c {\n        return false\n    }\n    \n    // if two sides\
    \ are equal, return false\n    if a == b {\n        return false\n    }\n    \n\
    \    // if two sides are equal, return false\n    if a == c {\n        return\
    \ false\n    }\n    \n    // if two sides are equal, return false\n    if b ==\
    \ c {\n        return false\n    }\n    \n    // if two sides are equal, return\
    \ false\n    if a == b {\n        return false\n    }\n    \n    // if two sides\
    \ are equal, return false\n    if a == c {\n        return false\n    }\n    \n\
    \    // if two sides are equal, return false\n    if b == c {\n        return\
    \ false\n    }\n    \n    // if two sides are equal, return false\n    if a ==\
    \ b {\n        return false\n    }\n    \n    // if two sides are equal, return\
    \ false\n    if a == c {\n        return false\n    }\n    \n    // if two sides\
    \ are equal, return false\n    if b == c {\n        return false\n    }\n    \n\
    \    // if two sides are equal, return false\n    if a == b {\n        return\
    \ false\n    }\n    \n    // if two sides are equal, return false\n    if a ==\
    \ c {\n        return false\n    }\n    \n    // if two sides are equal, return\
    \ false\n    if b == c {\n        return false\n    }\n    \n    // if two sides\
    \ are equal, return false\n    if a == b {\n        return false\n    }\nfunc\
    \ TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmptem8n9oq_test.go:130:6: expected ''('', found TestRight_Angle_Triangle

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073754
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a > b {\n        return right_angle_triangle(b, a, c)\n    }\n   \
    \ if b > c {\n        return right_angle_triangle(a, c, b)\n    }\n    if a ==\
    \ 0 || b == 0 || c == 0 {\n        return false\n    }\n    if a + b > c {\n \
    \       return false\n    }\n    if a + c > b {\n        return false\n    }\n\
    \    if b + c > a {\n        return false\n    }\n    return true\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmprqfkcnro_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmprqfkcnro_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmprqfkcnro_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmprqfkcnro_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmprqfkcnro_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmprqfkcnro_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073755
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a > b {\n        return false\n    }\n    if b > c {\n        return\
    \ false\n    }\n    if a == b {\n        return true\n    }\n    if a == c {\n\
    \        return true\n    }\n    if b == c {\n        return true\n    }\n   \
    \ return false\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate\
    \ := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4,\
    \ 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false },\n\
    \     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp62p1i57g_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp62p1i57g_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmp62p1i57g_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmp62p1i57g_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmp62p1i57g_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmp62p1i57g_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmp62p1i57g_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmp62p1i57g_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmp62p1i57g_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073748
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n    }\n    if\
    \ a == b {\n        return a == c\n    }\n    if a == c {\n        return b ==\
    \ c\n    }\n    if b == c {\n        return a != b\n    }\n    return a > b and\
    \ a > c and b > c\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate\
    \ := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4,\
    \ 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false },\n\
    \     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpxnxcpa8c_test.go:26:18: expected '';'', found and

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073746
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    // Write your code here\n    if a > b {\n        if b > c {\n       \
    \     return true\n        } else {\n            return false\n        }\n   \
    \ } else {\n        if c > b {\n            return true\n        } else {\n  \
    \          return false\n        }\n    }\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__1\
    \ (0.00s)\n        tmpx4u0byto_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpx4u0byto_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmpx4u0byto_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__10 (0.00s)\n        tmpx4u0byto_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a > b {\n        return false\n    }\n    if b > c {\n        return\
    \ false\n    }\n    if a == b {\n        return true\n    }\n    if a == c {\n\
    \        return true\n    }\n    if b == c {\n        return true\n    }\n   \
    \ if a > c {\n        return false\n    }\n    if b > a {\n        return false\n\
    \    }\n    return true\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n\
    \  candidate := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false\
    \ },\n     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpzgb21k7g_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpzgb21k7g_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmpzgb21k7g_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpzgb21k7g_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmpzgb21k7g_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmpzgb21k7g_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmpzgb21k7g_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmpzgb21k7g_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmpzgb21k7g_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a > b {\n        return right_angle_triangle(b, a, c)\n    }\n   \
    \ if b > c {\n        return right_angle_triangle(c, a, b)\n    }\n    if a ==\
    \ b {\n        return true\n    }\n    if a == c {\n        return true\n    }\n\
    \    if b == c {\n        return true\n    }\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpi9kw55so_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpi9kw55so_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmpi9kw55so_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpi9kw55so_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmpi9kw55so_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmpi9kw55so_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmpi9kw55so_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmpi9kw55so_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmpi9kw55so_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073748
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a > b {\n        return false\n    }\n    if b > c {\n        return\
    \ false\n    }\n    if a == b {\n        return true\n    }\n    if a == c {\n\
    \        return true\n    }\n    if b == c {\n        return true\n    }\n   \
    \ if a > c {\n        return false\n    }\n    if b > a {\n        return false\n\
    \    }\n    if c > a {\n        return false\n    }\n    if b > c {\n        return\
    \ false\n    }\n    return true\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T)\
    \ {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false\
    \ },\n     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpixfuhpma_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpixfuhpma_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmpixfuhpma_test.go:67: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpixfuhpma_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmpixfuhpma_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmpixfuhpma_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmpixfuhpma_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmpixfuhpma_test.go:67:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmpixfuhpma_test.go:67: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073755
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a > b {\n        return false\n    }\n    if b > c {\n        return\
    \ false\n    }\n    if a == b {\n        return false\n    }\n    if a == c {\n\
    \        return true\n    }\n    if b == c {\n        return true\n    }\n   \
    \ if a > c {\n        return false\n    }\n    return true\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__1\
    \ (0.00s)\n        tmpumacnv_k_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpumacnv_k_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmpumacnv_k_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073748
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a > b {\n        return false\n    }\n    if b > c {\n        return\
    \ false\n    }\n    if a == b {\n        return false\n    }\n    if a == c {\n\
    \        return true\n    }\n    if b == c {\n        return true\n    }\n   \
    \ if a > c {\n        return false\n    }\n    if b > a {\n        return false\n\
    \    }\n    if c > a {\n        return false\n    }\n    return true\n}\n\nfunc\
    \ TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp_urr6wka_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp_urr6wka_test.go:64:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp_urr6wka_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp_urr6wka_test.go:64:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp_urr6wka_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp_urr6wka_test.go:64:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n    }\n    if\
    \ a == b {\n        return a == c\n    }\n    if a == c {\n        return b ==\
    \ c\n    }\n    if b == c {\n        return b == a\n    }\n    return false\n\
    }\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpdb8bl0mg_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpdb8bl0mg_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmpdb8bl0mg_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpdb8bl0mg_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmpdb8bl0mg_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmpdb8bl0mg_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmpdb8bl0mg_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmpdb8bl0mg_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073755
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a > b {\n        if b > c {\n            return true\n        }\n\
    \        return false\n    }\n    if b > c {\n        return false\n    }\n  \
    \  return true\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate\
    \ := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4,\
    \ 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false },\n\
    \     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__1\
    \ (0.00s)\n        tmpnyv6qwr6_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpnyv6qwr6_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmpnyv6qwr6_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmpnyv6qwr6_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__9\
    \ (0.00s)\n        tmpnyv6qwr6_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__10 (0.00s)\n        tmpnyv6qwr6_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a < 0 || b < 0 || c < 0 {\n        return false\n    }\n    if a ==\
    \ 0 || b == 0 || c == 0 {\n        return false\n    }\n    if a > b+c {\n   \
    \     return false\n    }\n    if a > c {\n        return false\n    }\n    if\
    \ b > c {\n        return false\n    }\n    return true\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__1\
    \ (0.00s)\n        tmpzfwlceuk_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpzfwlceuk_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmpzfwlceuk_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmpzfwlceuk_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmpzfwlceuk_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073755
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n    }\n    \n\
    \    if a > b {\n        if a > c {\n            return true\n        } else {\n\
    \            return false\n        }\n    } else {\n        if b > c {\n     \
    \       return true\n        } else {\n            return false\n        }\n \
    \   }\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp3qqenc2z_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmp3qqenc2z_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__5\
    \ (0.00s)\n        tmp3qqenc2z_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp3qqenc2z_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp3qqenc2z_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp3qqenc2z_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073755
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a > b {\n        return false\n    }\n    if b > c {\n        return\
    \ false\n    }\n    if a == b {\n        return true\n    }\n    if a == c {\n\
    \        return true\n    }\n    if b == c {\n        return true\n    }\n   \
    \ if a > c {\n        return false\n    }\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpq81q022i_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpq81q022i_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmpq81q022i_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpq81q022i_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmpq81q022i_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmpq81q022i_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmpq81q022i_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmpq81q022i_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmpq81q022i_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073748
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n    }\n    if\
    \ a > b {\n        if a > c {\n            return true\n        } else {\n   \
    \         return false\n        }\n    } else {\n        if b > c {\n        \
    \    return true\n        } else {\n            return false\n        }\n    }\n\
    }\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpe3h_qig3_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpe3h_qig3_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__5\
    \ (0.00s)\n        tmpe3h_qig3_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmpe3h_qig3_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmpe3h_qig3_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmpe3h_qig3_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073748
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a > b {\n        return false\n    }\n    if b > c {\n        return\
    \ false\n    }\n    if a == b {\n        return false\n    }\n    if a == c {\n\
    \        return true\n    }\n    if b == c {\n        return true\n    }\n   \
    \ if a > c {\n        return false\n    }\n    if b > a {\n        return false\n\
    \    }\n    if c > a {\n        return false\n    }\n    if b > c {\n        return\
    \ false\n    }\n    return true\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T)\
    \ {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false\
    \ },\n     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpiziq320k_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpiziq320k_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmpiziq320k_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmpiziq320k_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmpiziq320k_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmpiziq320k_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073748
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a > b {\n        return false\n    }\n    if b > c {\n        return\
    \ false\n    }\n    if c > a {\n        return false\n    }\n    return true\n\
    }\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpw3b96pt2_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpw3b96pt2_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmpw3b96pt2_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpw3b96pt2_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmpw3b96pt2_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmpw3b96pt2_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmpw3b96pt2_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmpw3b96pt2_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073755
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a > b {\n        if b > c {\n            return true\n        }\n\
    \    }\n    if b > c {\n        return true\n    }\n    if c > a {\n        return\
    \ true\n    }\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T)\
    \ {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false\
    \ },\n     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__1\
    \ (0.00s)\n        tmpjbev61us_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpjbev61us_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmpjbev61us_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n    }\n    \n\
    \    if a > b {\n        if a > c {\n            return true\n        } else {\n\
    \            return false\n        }\n    } else {\n        if b > c {\n     \
    \       return true\n        } else {\n            return false\n        }\n \
    \   }\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp3qqenc2z_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmp3qqenc2z_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__5\
    \ (0.00s)\n        tmp3qqenc2z_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp3qqenc2z_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp3qqenc2z_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp3qqenc2z_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073755
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a > b {\n        return false\n    }\n    if b > c {\n        return\
    \ false\n    }\n    if a == b {\n        return false\n    }\n    if a == c {\n\
    \        return true\n    }\n    if b == c {\n        return true\n    }\n   \
    \ if a > c {\n        return false\n    }\n    if b > a {\n        return false\n\
    \    }\n    if c > a {\n        return false\n    }\n    return true\n}\n\nfunc\
    \ TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp_urr6wka_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp_urr6wka_test.go:64:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp_urr6wka_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp_urr6wka_test.go:64:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp_urr6wka_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp_urr6wka_test.go:64:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a > b {\n        if b > c {\n            return false\n        }\n\
    \        return true\n    }\n    if b > c {\n        return true\n    }\n    if\
    \ a > c {\n        return false\n    }\n    return true\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__1\
    \ (0.00s)\n        tmp05_sths1_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__3 (0.00s)\n        tmp05_sths1_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__5\
    \ (0.00s)\n        tmp05_sths1_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmp05_sths1_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmp05_sths1_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073755
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a > b {\n        return right_angle_triangle(b, a, c)\n    }\n   \
    \ if b > c {\n        return right_angle_triangle(c, a, b)\n    }\n    if a ==\
    \ b {\n        return right_angle_triangle(c, a, c)\n    }\n    if a == c {\n\
    \        return right_angle_triangle(b, a, c)\n    }\n    if b == c {\n      \
    \  return right_angle_triangle(a, b, c)\n    }\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0388\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x520368?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.right_angle_triangle(0x2?,\
    \ 0x2?, 0x2?)\n\t/tmp/tmp7aigt6sd_test.go:13 +0xa9 fp=0xc0201e0398 sp=0xc0201e0390\
    \ pc=0x4ef709\ncommand-line-arguments_test.right_angle_triangle(0x0?, 0x0?, 0x0?)\n\
    \t/tmp/tmp7aigt6sd_test.go:21 +0x55 fp=0xc0201e03c0 sp=0xc0201e0398 pc=0x4ef6b5\n\
    command-line-arguments_test.right_angle_triangle(0x0?, 0x0?, 0x0?)\n\t/tmp/tmp7aigt6sd_test.go:21\
    \ +0x55 fp=0xc0201e03e8 sp=0xc0201e03c0 pc=0x4ef6b5\ncommand-line-arguments_test.right_angle_triangle(0x0?,\
    \ 0x0?, 0x0?)\n\t/tmp/tmp7aigt6sd_test.go:21 +0x55 fp=0xc0201e0410 sp=0xc0201e03e8\
    \ pc=0x4ef6b5\ncommand-line-arguments_test.right_angle_triangle(0x0?, 0x0?, 0x0?)\n\
    \t/tmp/tmp7aigt6sd_test.go:21 +0x55 fp=0xc0201e0438 sp=0xc0201e0410 pc=0x4ef6b5\n\
    command-line-arguments_test.right_angle_triangle(0x0?, 0x0?, 0x0?)\n\t/tmp/tmp7aigt6sd_test.go:21\
    \ +0x55 fp=0xc0201e0460 sp=0xc0201e0438 pc=0x4ef6b5\ncommand-line-arguments_test.right_angle_triangle(0x0?,\
    \ 0x0?, 0x0?)\n\t/tmp/tmp7aigt6sd_test.go:21 +0x55 fp=0xc0201e0488 sp=0xc0201e0460\
    \ pc=0x4ef6b5\ncommand-line-arguments_test.right_angle_triangle(0x0?, 0x0?, 0x0?)\n\
    \t/tmp/tmp7aigt6sd_test.go:21 +0x55 fp=0xc0201e04b0 sp=0xc0201e0488 pc=0x4ef6b5\n\
    command-line-arguments_test.right_angle_triangle(0x0?, 0x0?, 0x0?)\n\t/tmp/tmp7aigt6sd_test.go:21\
    \ +0x55 fp=0xc0201e04d8 sp=0xc0201e04b0 pc=0x4ef6b5\ncommand-line-arguments_test.right_angle_triangle(0x0?,\
    \ 0x0?, 0x0?)\n\t/tmp/tmp7aigt6sd_test.go:21 +0x55 fp=0xc0201e0500 sp=0xc0201e04d8\
    \ pc=0x4ef6b5\ncommand-line-arguments_test.right_angle_triangle(0x0?, 0x0?, 0x0?)\n\
    \t/tmp/tmp7aigt6sd_test.go:21 +0x55 fp=0xc0201e052"
  timestamp: 1660073757
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n    }\n    if\
    \ a > b {\n        if a > c {\n            return true\n        } else {\n   \
    \         return false\n        }\n    } else {\n        if b > c {\n        \
    \    return true\n        } else {\n            return false\n        }\n    }\n\
    }\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpe3h_qig3_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpe3h_qig3_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__5\
    \ (0.00s)\n        tmpe3h_qig3_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmpe3h_qig3_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmpe3h_qig3_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmpe3h_qig3_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073748
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\nfunc right_angle_triangle(a int, b int, c int) bool\
    \ {\n    if a > b {\n        return false\n    }\n    if b > c {\n        return\
    \ false\n    }\n    if a == b {\n        return false\n    }\n    if a == c {\n\
    \        return true\n    }\n    if b == c {\n        return true\n    }\n   \
    \ if a > c {\n        return false\n    }\n    if a == b {\n        return true\n\
    \    }\n    if b > a {\n        return false\n    }\n    if b == c {\n       \
    \ return true\n    }\n    if c > a {\n        return false\n    }\n    if c ==\
    \ b {\n        return true\n    }\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpj2hhorhc_test.go:73: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpj2hhorhc_test.go:73:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmpj2hhorhc_test.go:73: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmpj2hhorhc_test.go:73:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmpj2hhorhc_test.go:73: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmpj2hhorhc_test.go:73:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073755
