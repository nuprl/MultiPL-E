language: go_test.go
name: HumanEval_17_parse_music
results:
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    \nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpf5ndo4v__test.go:54:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\nfunc TestParse_Music(t *testing.T) {\n  candidate\
    \ := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4,\
    \ 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1}\
    \ },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2,\
    \ 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected:\
    \ []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz52eg648_test.go:63:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \"|\"\n    music_string += \"o\"\n    music_string +=\
    \ \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \".|\"\n    music_string += \"o\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"|\"\n    music_string += \".|\"\n    music_string\
    \ += \"o\"\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"|\"\n    music_string += \".|\"\n    music_string += \"o\"\n    music_string\
    \ += \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \".|\"\n    music_string += \"o\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"|\"\n    music_string += \".|\"\n    music_string\
    \ += \"o\"\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"|\"\n    music_string += \".|\"\n    music_string += \"o\"\n    music_string\
    \ += \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \".|\"\n    music_string += \"o\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"|\"\n    music_string += \".|\"\n    music_string\
    \ += \"o\"\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"|\"\n    music_string += \".|\"\n    music_string += \"o\"\n    music_string\
    \ += \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \".|\"\n    music_string += \"o\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"|\"\n    music_string += \".|\"\n    music_string\
    \ += \"o\"\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"|\"\n    music_string += \".|\"\n\nfunc TestParse_Music(t *testing.T) {\n\
    \  candidate := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1,\
    \ 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2,\
    \ 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"\
    ), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpfleqn64w_test.go:78:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string +=\
    \ \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n\nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n \
    \    { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcjlzyar9_test.go:74:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\nfunc TestParse_Music(t *testing.T) {\n  candidate :=\
    \ parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n\
    \     { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpurr24wh1_test.go:62:21: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string +=\
    \ \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n\nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n \
    \    { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcjlzyar9_test.go:74:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string +=\
    \ \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n\nfunc TestParse_Music(t *testing.T) {\n\
    \  candidate := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1,\
    \ 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2,\
    \ 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"\
    ), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp076_bsg1_test.go:81:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    \nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpf5ndo4v__test.go:54:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string +=\
    \ \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n\nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n \
    \    { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcjlzyar9_test.go:74:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\nfunc TestParse_Music(t *testing.T) {\n  candidate\
    \ := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4,\
    \ 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1}\
    \ },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2,\
    \ 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected:\
    \ []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz52eg648_test.go:63:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string +=\
    \ \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n\nfunc TestParse_Music(t *testing.T) {\n\
    \  candidate := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1,\
    \ 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2,\
    \ 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"\
    ), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp076_bsg1_test.go:81:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \"|\"\n    music_string += \"o\"\n    music_string +=\
    \ \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_\nfunc TestParse_Music(t *testing.T) {\n  candidate :=\
    \ parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n\
    \     { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp85sop488_test.go:77:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string +=\
    \ \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n\nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n \
    \    { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcjlzyar9_test.go:74:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \"|\"\n    music_string += \"o\"\n    music_string +=\
    \ \"|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    musi\nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n \
    \    { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmplla__ajj_test.go:74:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\nfunc TestParse_Music(t *testing.T) {\n  candidate\
    \ := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4,\
    \ 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1}\
    \ },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2,\
    \ 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected:\
    \ []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz52eg648_test.go:63:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \".|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n \
    \    { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpxoyu10g9_test.go:73:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string +=\
    \ \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n\nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n \
    \    { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcjlzyar9_test.go:74:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \"|\"\n    music_string += \"o\"\n    music_string +=\
    \ \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_\nfunc TestParse_Music(t *testing.T) {\n  candidate :=\
    \ parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n\
    \     { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp85sop488_test.go:77:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \"|\"\n    music_string += \"o\"\n    music_string +=\
    \ \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_\nfunc TestParse_Music(t *testing.T) {\n  candidate :=\
    \ parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n\
    \     { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp85sop488_test.go:77:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string +=\
    \ \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n\nfunc TestParse_Music(t *testing.T) {\n\
    \  candidate := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1,\
    \ 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2,\
    \ 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"\
    ), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp076_bsg1_test.go:81:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string +=\
    \ \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n\nfunc TestParse_Music(t *testing.T) {\n\
    \  candidate := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1,\
    \ 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2,\
    \ 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"\
    ), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp076_bsg1_test.go:81:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    // Your code here\n    music_string += \"|\"\n    music_string += \"\
    o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string \nfunc TestParse_Music(t *testing.T) {\n  candidate\
    \ := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4,\
    \ 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1}\
    \ },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2,\
    \ 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected:\
    \ []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpms_ooi6l_test.go:74:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string +=\
    \ \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n\nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n \
    \    { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcjlzyar9_test.go:74:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\nfunc TestParse_Music(t *testing.T) {\n  candidate :=\
    \ parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n\
    \     { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpurr24wh1_test.go:62:21: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string +=\
    \ \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n\nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n \
    \    { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcjlzyar9_test.go:74:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string +=\
    \ \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n\nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n \
    \    { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcjlzyar9_test.go:74:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string +=\
    \ \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n\nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n \
    \    { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcjlzyar9_test.go:74:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string +=\
    \ \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n\nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n \
    \    { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcjlzyar9_test.go:74:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    // TODO: implement this function\n    return nil\n}\n\nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmphkhevpba_test.go:37: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__2 (0.00s)\n\
    \        tmphkhevpba_test.go:37: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n        tmphkhevpba_test.go:37:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1) %!s(int=4) %!s(int=4)\
    \ %!s(int=4) %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__4\
    \ (0.00s)\n        tmphkhevpba_test.go:37: expected '[%!s(int=2) %!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=2)]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    \nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpf5ndo4v__test.go:54:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string +=\
    \ \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n\nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n \
    \    { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcjlzyar9_test.go:74:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string +=\
    \ \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n\nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n \
    \    { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcjlzyar9_test.go:74:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    notes := []int{}\n    music_string += \"|\"\n    for i := 0; i < len(music_string);\
    \ i++ {\n        if music_string[i] == 'o' {\n            notes = append(notes,\
    \ 4)\n        } else if music_string[i] == 'o|' {\n            notes = append(notes,\
    \ 2)\n        } else if music_string[i] == '.|' {\n            notes = append(notes,\
    \ 1)\n        } else {\n            fmt.Printf(\"Invalid music string: %v\\n\"\
    , music_string)\n            fmt.Printf(\"%v\\n\", music_string[i:])\n       \
    \     fmt.Printf(\"%v\\n\", music_string[:i])\n            fmt.Printf(\"%v\\n\"\
    , music_string[i:])\n            fmt.Printf(\"%v\\n\", music_string[:i])\n   \
    \         fmt.Printf(\"%v\\n\", music_string[i:])\n            fmt.Printf(\"%v\\\
    n\", music_string[:i])\n            fmt.Printf(\"%v\\n\", music_string[i:])\n\
    \            fmt.Printf(\"%v\\n\", music_string[:i])\n            fmt.Printf(\"\
    %v\\n\", music_string[i:])\n            fmt.Printf(\"%v\\n\", music_string[:i])\n\
    \            fmt.Printf(\"%v\\n\", music_string[i:])\n            fmt.Printf(\"\
    %v\\n\", music_string[:i])\n            fmt.Printf(\"%v\\n\", music_string[i:])\n\
    \            fmt.Printf(\"%v\\n\", music_string[:i])\n            fmt.Printf(\"\
    %v\\n\", music_string[i:])\n            fmt.Printf(\"%v\\n\", music_string[:i])\n\
    \            fmt.Printf(\"%v\\n\", music_string[i:])\n            fmt.Printf(\"\
    %v\\n\", music_string[:i])\n            fmt.Printf(\"%v\\n\", music_string[i:])\n\
    \            fmt.Printf(\"%v\\n\", music_string[:i])\n            fmt.Printf(\"\
    %v\\n\", music_string[i:])\n            fmt.Printf(\"%v\\n\", music_string[:i])\n\
    \            fmt.Printf(\"%v\\n\", music_string[i:])\n            fmt.Printf(\"\
    %v\\n\", music_string[:i])\n            fmt.Printf(\"%v\\n\", music_string[i:])\n\
    \            fmt.Printf(\"%v\\n\", music_string[:i])\n            fmt.Printf(\"\
    %v\\n\", music_string[i:])\n            fmt.Printf(\"%v\\n\", music_string[:i])\n\
    \            fmt.Printf(\"%v\\n\", music_string[i:])\n            fmt.Printf(\"\
    %v\\n\", music_string[:i])\n            fmt.Printf(\"%v\\n\", music_string[i:])\n\
    \            fmt.Printf(\"\nfunc TestParse_Music(t *testing.T) {\n  candidate\
    \ := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4,\
    \ 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1}\
    \ },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2,\
    \ 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected:\
    \ []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5c0rxmq1_test.go:21:38: illegal rune literal

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string +=\
    \ \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n\nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n \
    \    { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcjlzyar9_test.go:74:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \" \"\n    music_string += \"|\"\n    music_string +=\
    \ \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    \nfunc TestParse_Music(t *testing.T)\
    \ {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1,\
    \ 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2,\
    \ 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"\
    ), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpoovzrley_test.go:81:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    // TODO: implement this function\n    return nil\n}\n\nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmphkhevpba_test.go:37: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__2 (0.00s)\n\
    \        tmphkhevpba_test.go:37: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n        tmphkhevpba_test.go:37:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1) %!s(int=4) %!s(int=4)\
    \ %!s(int=4) %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__4\
    \ (0.00s)\n        tmphkhevpba_test.go:37: expected '[%!s(int=2) %!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=2)]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string +=\
    \ \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n\nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n \
    \    { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcjlzyar9_test.go:74:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string +=\
    \ \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n\nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n \
    \    { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcjlzyar9_test.go:74:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string +=\
    \ \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n\nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n \
    \    { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcjlzyar9_test.go:74:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \"|\"\n    music_string += \"o\"\n    music_string +=\
    \ \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_\nfunc TestParse_Music(t *testing.T) {\n  candidate :=\
    \ parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n\
    \     { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp85sop488_test.go:77:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string +=\
    \ \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n\nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n \
    \    { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcjlzyar9_test.go:74:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string +=\
    \ \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n\nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n \
    \    { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcjlzyar9_test.go:74:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \" \"\n    music_string += \"|\"\n    music_string +=\
    \ \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    \nfunc TestParse_Music(t *testing.T)\
    \ {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1,\
    \ 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2,\
    \ 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"\
    ), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpoovzrley_test.go:81:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string +=\
    \ \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n\nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n \
    \    { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcjlzyar9_test.go:74:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string +=\
    \ \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n\nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n \
    \    { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcjlzyar9_test.go:74:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string +=\
    \ \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n\nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n \
    \    { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcjlzyar9_test.go:74:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    // Your code here\n    music_string += \"|\"\n    music_string += \"\
    o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string \nfunc TestParse_Music(t *testing.T) {\n  candidate\
    \ := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4,\
    \ 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1}\
    \ },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2,\
    \ 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected:\
    \ []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpms_ooi6l_test.go:74:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string +=\
    \ \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n\nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n \
    \    { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcjlzyar9_test.go:74:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string +=\
    \ \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n\nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n \
    \    { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcjlzyar9_test.go:74:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    // Your code here\n    music_string += \".|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:\nfunc TestParse_Music(t *testing.T) {\n  candidate\
    \ := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4,\
    \ 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1}\
    \ },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2,\
    \ 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected:\
    \ []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpab415mai_test.go:54:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string +=\
    \ \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n\nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n \
    \    { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcjlzyar9_test.go:74:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    \nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpf5ndo4v__test.go:54:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string +=\
    \ \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n\nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n \
    \    { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcjlzyar9_test.go:74:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string +=\
    \ \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n\nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n \
    \    { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcjlzyar9_test.go:74:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string +=\
    \ \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n\nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n \
    \    { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcjlzyar9_test.go:74:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string +=\
    \ \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n\nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n \
    \    { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcjlzyar9_test.go:74:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    // Your code here\n    music_string += \".|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:\nfunc TestParse_Music(t *testing.T) {\n  candidate\
    \ := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4,\
    \ 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1}\
    \ },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2,\
    \ 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected:\
    \ []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpab415mai_test.go:54:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    \nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpf5ndo4v__test.go:54:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string +=\
    \ \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n\nfunc TestParse_Music(t *testing.T) {\n\
    \  candidate := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1,\
    \ 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2,\
    \ 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"\
    ), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp076_bsg1_test.go:81:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\nfunc TestParse_Music(t *testing.T) {\n  candidate\
    \ := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4,\
    \ 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1}\
    \ },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2,\
    \ 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected:\
    \ []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz52eg648_test.go:63:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string +=\
    \ \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n\nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n \
    \    { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcjlzyar9_test.go:74:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    \nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpf5ndo4v__test.go:54:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string +=\
    \ \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n\nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n \
    \    { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcjlzyar9_test.go:74:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    // TODO: Implement this function\n    return nil\n}\n\nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmpwzfapg8t_test.go:37: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__2 (0.00s)\n\
    \        tmpwzfapg8t_test.go:37: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n        tmpwzfapg8t_test.go:37:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1) %!s(int=4) %!s(int=4)\
    \ %!s(int=4) %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__4\
    \ (0.00s)\n        tmpwzfapg8t_test.go:37: expected '[%!s(int=2) %!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=2)]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string +=\
    \ \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n\nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n \
    \    { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcjlzyar9_test.go:74:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string +=\
    \ \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n\nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n \
    \    { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcjlzyar9_test.go:74:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string +=\
    \ \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n\nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n \
    \    { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcjlzyar9_test.go:74:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string +=\
    \ \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n\nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n \
    \    { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcjlzyar9_test.go:74:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \"|\"\n    music_string += \"o\"\n    music_string +=\
    \ \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_\nfunc TestParse_Music(t *testing.T) {\n  candidate :=\
    \ parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n\
    \     { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp85sop488_test.go:77:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string +=\
    \ \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n\nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n \
    \    { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcjlzyar9_test.go:74:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\nfunc TestParse_Music(t *testing.T) {\n  candidate\
    \ := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4,\
    \ 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1}\
    \ },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2,\
    \ 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected:\
    \ []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz52eg648_test.go:63:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string +=\
    \ \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n\nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n \
    \    { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcjlzyar9_test.go:74:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string +=\
    \ \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n\nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n \
    \    { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcjlzyar9_test.go:74:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string +=\
    \ \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n\nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n \
    \    { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcjlzyar9_test.go:74:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string +=\
    \ \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n\nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n \
    \    { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcjlzyar9_test.go:74:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    \nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpf5ndo4v__test.go:54:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string +=\
    \ \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n\nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n \
    \    { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcjlzyar9_test.go:74:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \" \"\n    music_string += \"|\"\n    music_string +=\
    \ \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    \nfunc TestParse_Music(t *testing.T)\
    \ {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1,\
    \ 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2,\
    \ 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"\
    ), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpoovzrley_test.go:81:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    notes := make([]int, 0)\n    notes_string := music_string\n    notes_string\
    \ += \"|\"\n    notes_string += \"o|\"\n    notes_string += \"o|\"\n    notes_string\
    \ += \"o|\"\n    notes_string += \"o|\"\n    notes_string += \"o|\"\n    notes_string\
    \ += \"o|\"\n    notes_string += \"o|\"\n    notes_string += \"o|\"\n    notes_string\
    \ += \"o|\"\n    notes_string += \"o|\"\n    notes_string += \"o|\"\n    notes_string\
    \ += \"o|\"\n    notes_string += \"o|\"\n    notes_string += \"o|\"\n    notes_string\
    \ += \"o|\"\n    notes_string += \"o|\"\n    notes_string += \"o|\"\n    notes_string\
    \ += \"o|\"\n    notes_string += \"o|\"\n    notes_string += \"o|\"\n    notes_string\
    \ += \"o|\"\n    notes_string += \"o|\"\n    notes_string += \"o|\"\n    notes_string\
    \ += \"o|\"\n    notes_string += \"o|\"\n    notes_string += \"o|\"\n    notes_string\
    \ += \"o|\"\n    notes_string += \"o|\"\n    notes_string += \"o|\"\n    notes_string\
    \ += \"o|\"\n    notes_string += \"o|\"\n    notes_string += \"o|\"\n    notes_string\
    \ += \"o|\"\n    notes_string += \"o|\"\n    notes_string += \"o|\"\n    notes_string\
    \ += \"o|\"\n    notes_string += \"o|\"\n    notes_string += \"o|\"\n    notes_string\
    \ += \"o|\"\n    notes_string += \"o|\"\n    notes_string += \"o|\"\n    notes_string\
    \ += \"o|\"\n    notes_string += \"o|\"\n    notes_string += \"o|\"\n    notes_string\
    \ += \"o|\"\n    notes_string += \"o|\"\n    notes_string += \"o|\"\n    notes_string\
    \ += \"o|\"\n    notes_string += \"o|\"\n    notes_string += \"o|\"\n    notes_string\
    \ += \"o|\"\n    notes_string += \"o|\"\n    notes_string += \"o|\"\n    notes_string\
    \ += \"o|\"\nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n \
    \    { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpjybqw1ut_test.go:73:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string +=\
    \ \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n\nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n \
    \    { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcjlzyar9_test.go:74:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    notes := make([]int, len(music_string))\n    for i := 0; i < len(music_string);\
    \ i++ {\n        switch music_string[i] {\n        case 'o':\n            notes[i]\
    \ = 4\n        case 'o|':\n            notes[i] = 2\n        case '.|':\n    \
    \        notes[i] = 1\n        default:\n            fmt.Printf(\"Unknown note\
    \ %q\\n\", music_string[i])\n            fmt.Printf(\"Input was: %q\\n\", music_string)\n\
    \            fmt.Printf(\"Returning empty list\\n\")\n            return notes\n\
    \        }\n    }\n    return notes\n}\n\nfunc TestParse_Music(t *testing.T) {\n\
    \  candidate := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1,\
    \ 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2,\
    \ 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"\
    ), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpaw3tpjbj_test.go:21:14: illegal rune literal

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string +=\
    \ \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n\nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n \
    \    { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcjlzyar9_test.go:74:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    \nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpf5ndo4v__test.go:54:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string +=\
    \ \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n\nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n \
    \    { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcjlzyar9_test.go:74:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string +=\
    \ \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n\nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n \
    \    { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcjlzyar9_test.go:74:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string +=\
    \ \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n\nfunc TestParse_Music(t *testing.T) {\n\
    \  candidate := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1,\
    \ 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2,\
    \ 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"\
    ), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp076_bsg1_test.go:81:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string +=\
    \ \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n\nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n \
    \    { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcjlzyar9_test.go:74:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string +=\
    \ \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n\nfunc TestParse_Music(t *testing.T) {\n\
    \  candidate := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1,\
    \ 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2,\
    \ 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"\
    ), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp076_bsg1_test.go:81:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string +=\
    \ \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n\nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n \
    \    { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcjlzyar9_test.go:74:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string +=\
    \ \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n\nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n \
    \    { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcjlzyar9_test.go:74:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string +=\
    \ \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n\nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n \
    \    { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcjlzyar9_test.go:74:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string +=\
    \ \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n\nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n \
    \    { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcjlzyar9_test.go:74:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string +=\
    \ \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n\nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n \
    \    { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcjlzyar9_test.go:74:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string +=\
    \ \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n\nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n \
    \    { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcjlzyar9_test.go:74:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string +=\
    \ \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n\nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n \
    \    { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcjlzyar9_test.go:74:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    \nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpf5ndo4v__test.go:54:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string +=\
    \ \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n\nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n \
    \    { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcjlzyar9_test.go:74:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    notes := make([]int, 0)\n    notes_str := music_string\n    notes_str\
    \ = notes_str[:len(notes_str)-1]\n    notes_str = notes_str[:len(notes_str)-1]\n\
    \    notes_str = notes_str[:len(notes_str)-1]\n    notes_str = notes_str[:len(notes_str)-1]\n\
    \    notes_str = notes_str[:len(notes_str)-1]\n    notes_str = notes_str[:len(notes_str)-1]\n\
    \    notes_str = notes_str[:len(notes_str)-1]\n    notes_str = notes_str[:len(notes_str)-1]\n\
    \    notes_str = notes_str[:len(notes_str)-1]\n    notes_str = notes_str[:len(notes_str)-1]\n\
    \    notes_str = notes_str[:len(notes_str)-1]\n    notes_str = notes_str[:len(notes_str)-1]\n\
    \    notes_str = notes_str[:len(notes_str)-1]\n    notes_str = notes_str[:len(notes_str)-1]\n\
    \    notes_str = notes_str[:len(notes_str)-1]\n    notes_str = notes_str[:len(notes_str)-1]\n\
    \    notes_str = notes_str[:len(notes_str)-1]\n    notes_str = notes_str[:len(notes_str)-1]\n\
    \    notes_str = notes_str[:len(notes_str)-1]\n    notes_str = notes_str[:len(notes_str)-1]\n\
    \    notes_str = notes_str[:len(notes_str)-1]\n    notes_str = notes_str[:len(notes_str)-1]\n\
    \    notes_str = notes_str[:len(notes_str)-1]\n    notes_str = notes_str[:len(notes_str)-1]\n\
    \    notes_str = notes_str[:len(notes_str)-1]\n    notes_str = notes_str[:len(notes_str)-1]\n\
    \    notes_str = notes_str[:len(notes_str)-1]\n    notes_str = notes_str[:len(notes_str)-1]\n\
    \    notes_str = notes_str[:len(notes_str)-1]\n    notes_str = notes_str[:len(notes_str)-1]\n\
    \    notes_str = notes_str[:len(notes_str)-1]\n    notes_str = notes_str[:len(notes_str)-1]\n\
    \    notes_str = notes_str[:len(notes_str)-1]\n    notes_str = notes_str[:len(notes_str)-1]\n\
    \    notes_str = notes_str[:len(notes_str)-1]\n    notes_\nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1gds9iy5_test.go:54:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string +=\
    \ \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n\nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n \
    \    { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcjlzyar9_test.go:74:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \"|\"\n    music_string += \"o\"\n    music_string +=\
    \ \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_\nfunc TestParse_Music(t *testing.T) {\n  candidate :=\
    \ parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n\
    \     { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp85sop488_test.go:77:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n\nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpmmh6nzyk_test.go:54:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \"|\"\n    music_string += \"o\"\n    music_string +=\
    \ \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_\nfunc TestParse_Music(t *testing.T) {\n  candidate :=\
    \ parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n\
    \     { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp85sop488_test.go:77:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \".|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n \
    \    { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpxoyu10g9_test.go:73:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\nfunc TestParse_Music(t *testing.T) {\n  candidate\
    \ := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4,\
    \ 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1}\
    \ },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2,\
    \ 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected:\
    \ []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz52eg648_test.go:63:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string +=\
    \ \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n\nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n \
    \    { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcjlzyar9_test.go:74:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string +=\
    \ \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n\nfunc TestParse_Music(t *testing.T) {\n\
    \  candidate := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1,\
    \ 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2,\
    \ 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"\
    ), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp076_bsg1_test.go:81:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\nfunc TestParse_Music(t *testing.T) {\n  candidate\
    \ := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4,\
    \ 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1}\
    \ },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2,\
    \ 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected:\
    \ []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz52eg648_test.go:63:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \"|\"\n    music_string += \"o\"\n    music_string +=\
    \ \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_\nfunc TestParse_Music(t *testing.T) {\n  candidate :=\
    \ parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n\
    \     { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp85sop488_test.go:77:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    notes := make([]int, 0)\n    music_string += \" \"\n    music_string\
    \ = music_string[:len(music_string)-1]\n    for _, char := range music_string\
    \ {\n        if char == 'o' {\n            notes = append(notes, 4)\n        }\
    \ else if char == 'o|' {\n            notes = append(notes, 2)\n        } else\
    \ if char == '.|' {\n            notes = append(notes, 1)\n        } else {\n\
    \            fmt.Println(\"Invalid music string\")\n            fmt.Println(music_string)\n\
    \            fmt.Println(char)\n        }\n    }\n    return notes\n}\n\nfunc\
    \ TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"\
    o o o o\"), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .|\
    \ .|\"), expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .|\
    \ o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5ekqghkj_test.go:22:27: illegal rune literal

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \"|\"\n    music_string += \"o\"\n    music_string +=\
    \ \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_\nfunc TestParse_Music(t *testing.T) {\n  candidate :=\
    \ parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n\
    \     { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp85sop488_test.go:77:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string +=\
    \ \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n\nfunc TestParse_Music(t *testing.T) {\n\
    \  candidate := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1,\
    \ 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2,\
    \ 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"\
    ), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp076_bsg1_test.go:81:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string +=\
    \ \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n\nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n \
    \    { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcjlzyar9_test.go:74:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    \nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpf5ndo4v__test.go:54:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string +=\
    \ \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n\nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n \
    \    { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcjlzyar9_test.go:74:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    // Your code here\n    music_string += \"|\"\n    music_string += \"\
    o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string \nfunc TestParse_Music(t *testing.T) {\n  candidate\
    \ := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4,\
    \ 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1}\
    \ },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2,\
    \ 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected:\
    \ []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpms_ooi6l_test.go:74:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string +=\
    \ \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n\nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n \
    \    { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcjlzyar9_test.go:74:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string +=\
    \ \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n\nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n \
    \    { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcjlzyar9_test.go:74:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \" \"\n    music_string += \"|\"\n    music_string +=\
    \ \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    \nfunc TestParse_Music(t *testing.T)\
    \ {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1,\
    \ 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2,\
    \ 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"\
    ), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpoovzrley_test.go:81:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string +=\
    \ \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n\nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n \
    \    { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcjlzyar9_test.go:74:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \"|\"\n    music_string += \"o\"\n    music_string +=\
    \ \"|\"\n    music_string += \"o\"\n    music_string += \"|\"\n    music_string\
    \ += \"o\"\n    music_string += \"|\"\n    music_string += \"o\"\n    music_string\
    \ += \"|\"\n    music_string += \"o\"\n    music_string += \"|\"\n    music_string\
    \ += \"o\"\n    music_string += \"|\"\n    music_string += \"o\"\n    music_string\
    \ += \"|\"\n    music_string += \"o\"\n    music_string += \"|\"\n    music_string\
    \ += \"o\"\n    music_string += \"|\"\n    music_string += \"o\"\n    music_string\
    \ += \"|\"\n    music_string += \"o\"\n    music_string += \"|\"\n    music_string\
    \ += \"o\"\n    music_string += \"|\"\n    music_string += \"o\"\n    music_string\
    \ += \"|\"\n    music_string += \"o\"\n    music_string += \"|\"\n    music_string\
    \ += \"o\"\n    music_string += \"|\"\n    music_string += \"o\"\n    music_string\
    \ += \"|\"\n    music_string += \"o\"\n    music_string += \"|\"\n    music_string\
    \ += \"o\"\n    music_string += \"|\"\n    music_string += \"o\"\n    music_string\
    \ += \"|\"\n    music_string += \"o\"\n    music_string += \"|\"\n    music_string\
    \ += \"o\"\n    music_string += \"|\"\n    music_string += \"o\"\n    music_string\
    \ += \"|\"\n    music_string += \"o\"\n    music_string += \"|\"\n    music_string\
    \ += \"o\"\n    music_string += \"|\"\n    music_string += \"o\"\n    music_string\
    \ += \"|\"\n    music_string += \"o\"\n    music_string += \"|\"\n    music_string\
    \ += \"o\"\n    music_string += \"|\"\n    music_string += \"o\"\n    music_string\
    \ += \"|\"\n    music_string += \"o\"\n    music_string += \"|\"\n    music_string\
    \ += \"o\"\n    music_string += \"|\"\n    music_string += \"o\"\n    music_string\
    \ += \"|\"\n    music_string += \"o\"\n\nfunc TestParse_Music(t *testing.T) {\n\
    \  candidate := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1,\
    \ 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2,\
    \ 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"\
    ), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpy1a4ttk5_test.go:81:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    notes := []int{}\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    for _, char := range music_string {\n        if char == '|' {\n         \
    \   notes = append(notes, 4)\n        } else if char == 'o' {\n            notes\
    \ = append(notes, 4)\n        } else if char == 'o|' {\n            notes = append(notes,\
    \ 2)\n        } else if char == '.|' {\n            notes = append(notes, 1)\n\
    \        } else {\n            fmt.Printf(\"Unknown character %c in music string\\\
    n\", char)\n        }\n    }\n    return notes\n}\n\nfunc TestParse_Music(t *testing.T)\
    \ {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1,\
    \ 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2,\
    \ 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"\
    ), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpp31uuoyt_test.go:24:27: illegal rune literal

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string +=\
    \ \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n\nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n \
    \    { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcjlzyar9_test.go:74:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \" \"\n    music_string += \"|\"\n    music_string +=\
    \ \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    \nfunc TestParse_Music(t *testing.T)\
    \ {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1,\
    \ 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2,\
    \ 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"\
    ), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpoovzrley_test.go:81:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\nfunc TestParse_Music(t *testing.T) {\n  candidate\
    \ := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4,\
    \ 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1}\
    \ },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2,\
    \ 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected:\
    \ []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz52eg648_test.go:63:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \"|\"\n    music_string += \"o\"\n    music_string +=\
    \ \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_\nfunc TestParse_Music(t *testing.T) {\n  candidate :=\
    \ parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n\
    \     { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp85sop488_test.go:77:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string +=\
    \ \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n\nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n \
    \    { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcjlzyar9_test.go:74:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    // Your code here\n    music_string += \" \"\n    music_string += \"\
    |\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string +=\
    \ \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string \nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpydorpl2e_test.go:81:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string +=\
    \ \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n\nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n \
    \    { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcjlzyar9_test.go:74:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    // Your code goes here\n    music_string += \"|\"\n    music_string +=\
    \ \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_\nfunc TestParse_Music(t *testing.T) {\n  candidate :=\
    \ parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n\
    \     { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpr7z3f5x3_test.go:74:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string +=\
    \ \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n\nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n \
    \    { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcjlzyar9_test.go:74:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string +=\
    \ \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n\nfunc TestParse_Music(t *testing.T) {\n\
    \  candidate := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1,\
    \ 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2,\
    \ 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"\
    ), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp076_bsg1_test.go:81:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \" \"\n    music_string += \"|\"\n    music_string +=\
    \ \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    \nfunc TestParse_Music(t *testing.T)\
    \ {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1,\
    \ 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2,\
    \ 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"\
    ), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpoovzrley_test.go:81:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    \nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpf5ndo4v__test.go:54:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string +=\
    \ \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n\nfunc TestParse_Music(t *testing.T) {\n\
    \  candidate := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1,\
    \ 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2,\
    \ 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"\
    ), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp076_bsg1_test.go:81:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    \nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpf5ndo4v__test.go:54:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string +=\
    \ \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n\nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n \
    \    { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcjlzyar9_test.go:74:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\nfunc TestParse_Music(t *testing.T) {\n  candidate\
    \ := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4,\
    \ 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1}\
    \ },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2,\
    \ 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected:\
    \ []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz52eg648_test.go:63:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string +=\
    \ \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n\nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n \
    \    { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcjlzyar9_test.go:74:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string +=\
    \ \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n\nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n \
    \    { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcjlzyar9_test.go:74:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string +=\
    \ \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n\nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n \
    \    { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcjlzyar9_test.go:74:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    notes := make([]int, 0)\n    music_string += \" \"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\nfunc TestParse_Music(t *testing.T) {\n\
    \  candidate := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1,\
    \ 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2,\
    \ 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"\
    ), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpads8c626_test.go:80:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    // Your code here\n    music_string += \"|\"\n    music_string += \"\
    o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string \nfunc TestParse_Music(t *testing.T) {\n  candidate\
    \ := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4,\
    \ 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1}\
    \ },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2,\
    \ 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected:\
    \ []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpms_ooi6l_test.go:74:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    \nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpf5ndo4v__test.go:54:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 2
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    notes := []int{}\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    for _, note := range music_string {\n        if note == \"o\" {\n       \
    \     notes = append(notes, 4)\n        } else if note == \"o|\" {\n         \
    \   notes = append(notes, 2)\n        } else if note == \".|\" {\n           \
    \ notes = append(notes, 1)\n        } else {\n            fmt.Println(\"Invalid\
    \ note\", note)\n        }\n    }\n    return notes\n}\n\nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5xuqpdh1_test.go:20:20: invalid operation: note == "o" (mismatched types
    rune and untyped string)

    /tmp/tmp5xuqpdh1_test.go:22:27: invalid operation: note == "o|" (mismatched types
    rune and untyped string)

    /tmp/tmp5xuqpdh1_test.go:24:27: invalid operation: note == ".|" (mismatched types
    rune and untyped string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string +=\
    \ \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n\nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n \
    \    { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcjlzyar9_test.go:74:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \"|\"\n    music_string += \"o\"\n    music_string +=\
    \ \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_\nfunc TestParse_Music(t *testing.T) {\n  candidate :=\
    \ parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n\
    \     { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp85sop488_test.go:77:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string +=\
    \ \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n\nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n \
    \    { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcjlzyar9_test.go:74:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\nfunc TestParse_Music(t *testing.T) {\n  candidate\
    \ := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4,\
    \ 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1}\
    \ },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2,\
    \ 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected:\
    \ []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz52eg648_test.go:63:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string +=\
    \ \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n\nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n \
    \    { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcjlzyar9_test.go:74:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    // Your code here\n    music_string += \"|\"\n    music_string += \"\
    o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string \nfunc TestParse_Music(t *testing.T) {\n  candidate\
    \ := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4,\
    \ 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1}\
    \ },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2,\
    \ 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected:\
    \ []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpms_ooi6l_test.go:74:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string +=\
    \ \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n\nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n \
    \    { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcjlzyar9_test.go:74:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \"|\"\n    music_string += \"o\"\n    music_string +=\
    \ \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_\nfunc TestParse_Music(t *testing.T) {\n  candidate :=\
    \ parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n\
    \     { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp85sop488_test.go:77:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string +=\
    \ \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n\nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n \
    \    { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcjlzyar9_test.go:74:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    \nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpf5ndo4v__test.go:54:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    \nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpf5ndo4v__test.go:54:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string +=\
    \ \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n\nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n \
    \    { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcjlzyar9_test.go:74:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string +=\
    \ \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n\nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n \
    \    { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcjlzyar9_test.go:74:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string +=\
    \ \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n\nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n \
    \    { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcjlzyar9_test.go:74:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string +=\
    \ \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n\nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n \
    \    { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcjlzyar9_test.go:74:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    \nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpf5ndo4v__test.go:54:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    // Your code goes here\n    music_string += \"|\"\n    music_string +=\
    \ \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    musi\nfunc TestParse_Music(t *testing.T)\
    \ {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1,\
    \ 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2,\
    \ 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"\
    ), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpfddl6hy7_test.go:81:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string +=\
    \ \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n\nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n \
    \    { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcjlzyar9_test.go:74:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \".|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n \
    \    { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpxoyu10g9_test.go:73:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string +=\
    \ \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n\nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n \
    \    { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcjlzyar9_test.go:74:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string +=\
    \ \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n\nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n \
    \    { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcjlzyar9_test.go:74:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string +=\
    \ \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n\nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n \
    \    { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcjlzyar9_test.go:74:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string +=\
    \ \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n\nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n \
    \    { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcjlzyar9_test.go:74:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \"|\"\n    music_string += \"o\"\n    music_string +=\
    \ \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_\nfunc TestParse_Music(t *testing.T) {\n  candidate :=\
    \ parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n\
    \     { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp85sop488_test.go:77:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string +=\
    \ \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n\nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n \
    \    { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcjlzyar9_test.go:74:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string +=\
    \ \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n\nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n \
    \    { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcjlzyar9_test.go:74:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\nfunc TestParse_Music(t *testing.T) {\n  candidate\
    \ := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4,\
    \ 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1}\
    \ },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2,\
    \ 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected:\
    \ []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz52eg648_test.go:63:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string +=\
    \ \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n\nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n \
    \    { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcjlzyar9_test.go:74:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \"|\"\n    music_string += \"o\"\n    music_string +=\
    \ \"|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    musi\nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n \
    \    { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmplla__ajj_test.go:74:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string +=\
    \ \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n\nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n \
    \    { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcjlzyar9_test.go:74:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\nfunc TestParse_Music(t *testing.T) {\n  candidate\
    \ := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4,\
    \ 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1}\
    \ },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2,\
    \ 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected:\
    \ []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz52eg648_test.go:63:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string +=\
    \ \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n\nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n \
    \    { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcjlzyar9_test.go:74:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string +=\
    \ \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n\nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n \
    \    { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcjlzyar9_test.go:74:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string +=\
    \ \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n\nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n \
    \    { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcjlzyar9_test.go:74:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string +=\
    \ \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n\nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n \
    \    { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcjlzyar9_test.go:74:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    notes := make([]int, 0)\n    notes_string := music_string\n    notes_string\
    \ += \"|\"\n    notes_string += \"o\"\n    notes_string += \"|\"\n    notes_string\
    \ += \"o|\"\n    notes_string += \"|\"\n    notes_string += \"o|\"\n    notes_string\
    \ += \"|\"\n    notes_string += \"o|\"\n    notes_string += \"|\"\n    notes_string\
    \ += \"o|\"\n    notes_string += \"|\"\n    notes_string += \"o|\"\n    notes_string\
    \ += \"|\"\n    notes_string += \"o|\"\n    notes_string += \"|\"\n    notes_string\
    \ += \"o|\"\n    notes_string += \"|\"\n    notes_string += \"o|\"\n    notes_string\
    \ += \"|\"\n    notes_string += \"o|\"\n    notes_string += \"|\"\n    notes_string\
    \ += \"o|\"\n    notes_string += \"|\"\n    notes_string += \"o|\"\n    notes_string\
    \ += \"|\"\n    notes_string += \"o|\"\n    notes_string += \"|\"\n    notes_string\
    \ += \"o|\"\n    notes_string += \"|\"\n    notes_string += \"o|\"\n    notes_string\
    \ += \"|\"\n    notes_string += \"o|\"\n    notes_string += \"|\"\n    notes_string\
    \ += \"o|\"\n    notes_string += \"|\"\n    notes_string += \"o|\"\n    notes_string\
    \ += \"|\"\n    notes_string += \"o|\"\n    notes_string += \"|\"\n    notes_string\
    \ += \"o|\"\n    notes_string += \"|\"\n    notes_string += \"o|\"\n    notes_string\
    \ += \"|\"\n    notes_string += \"o|\"\n    notes_string += \"|\"\n    notes_string\
    \ += \"o|\"\n    notes_string += \"|\"\n    notes_string += \"o|\"\n    notes_string\
    \ += \"|\"\n    notes_string += \"o|\"\n    notes_string += \"|\"\n    notes_string\
    \ += \"o|\"\n    notes_string += \"|\"\n    notes_string += \"o|\"\n    notes_string\
    \ += \"|\"\n    notes_string += \"o|\"\n    notes_string += \"|\"\n    notes_string\
    \ += \"o|\"\n    \nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n \
    \    { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpsufhg9ap_test.go:77:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    \nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpf5ndo4v__test.go:54:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\nfunc TestParse_Music(t *testing.T) {\n  candidate :=\
    \ parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n\
    \     { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpurr24wh1_test.go:62:21: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    // Your code goes here\n    music_string += \" \"\n    music_string =\
    \ music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(\n\
    func TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n     { actual:\
    \ candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\"\
    .| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o|\
    \ o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual:\
    \ candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpxi9jffyg_test.go:54:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    // Your code here\n    music_string += \"|\"\n    music_string += \"\
    o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string \nfunc TestParse_Music(t *testing.T) {\n  candidate\
    \ := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4,\
    \ 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1}\
    \ },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2,\
    \ 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected:\
    \ []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpms_ooi6l_test.go:74:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string +=\
    \ \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n\nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n \
    \    { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcjlzyar9_test.go:74:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    \nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpf5ndo4v__test.go:54:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string +=\
    \ \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n\nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n \
    \    { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcjlzyar9_test.go:74:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    notes := []int{}\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    for _, char := range music_string {\n        if char == 'o' {\n         \
    \   notes = append(notes, 4)\n        } else if char == 'o|' {\n            notes\
    \ = append(notes, 2)\n        } else if char == '.|' {\n            notes = append(notes,\
    \ 1)\n        } else {\n            fmt.Println(\"Unknown note\", char)\n    \
    \    }\n    }\n    return notes\n}\n\nfunc TestParse_Music(t *testing.T) {\n \
    \ candidate := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1,\
    \ 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2,\
    \ 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"\
    ), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp70p43i7b_test.go:22:27: illegal rune literal

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    // TODO: Implement this function\n    return nil\n}\n\nfunc TestParse_Music(t\
    \ *testing.T) {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []int{} },\n     { actual: candidate(\"o o o o\"\
    ), expected: []int{4, 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"),\
    \ expected: []int{1, 1, 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o\
    \ o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"\
    o| .| o| .| o o| o o|\"), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Music (0.00s)\n    --- FAIL: TestParse_Music/test_num__1\
    \ (0.00s)\n        tmpwzfapg8t_test.go:37: expected '[%!s(int=4) %!s(int=4) %!s(int=4)\
    \ %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__2 (0.00s)\n\
    \        tmpwzfapg8t_test.go:37: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestParse_Music/test_num__3 (0.00s)\n        tmpwzfapg8t_test.go:37:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1) %!s(int=4) %!s(int=4)\
    \ %!s(int=4) %!s(int=4)]', got '[]'\n    --- FAIL: TestParse_Music/test_num__4\
    \ (0.00s)\n        tmpwzfapg8t_test.go:37: expected '[%!s(int=2) %!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=2)]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\nfunc TestParse_Music(t *testing.T) {\n  candidate\
    \ := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4,\
    \ 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1}\
    \ },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2,\
    \ 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected:\
    \ []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz52eg648_test.go:63:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string +=\
    \ \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n\nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n \
    \    { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcjlzyar9_test.go:74:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \" \"\n    music_string += \"|\"\n    music_string +=\
    \ \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    music_string += \"|\"\n    music_string\
    \ += \"|\"\n    music_string += \"|\"\n    \nfunc TestParse_Music(t *testing.T)\
    \ {\n  candidate := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1,\
    \ 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2,\
    \ 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"\
    ), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpoovzrley_test.go:81:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    // Your code here\n    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(music_string)-1]\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string = music_string[:len(\nfunc TestParse_Music(t *testing.T) {\n\
    \  candidate := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1,\
    \ 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2,\
    \ 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"\
    ), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp25kvm622_test.go:54:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \" \"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\nfunc TestParse_Music(t *testing.T) {\n  candidate\
    \ := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4,\
    \ 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1}\
    \ },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2,\
    \ 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected:\
    \ []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz52eg648_test.go:63:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string +=\
    \ \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n\nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n \
    \    { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcjlzyar9_test.go:74:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\"\n    music_string = music_string[:len(music_string)-1]\n\
    \    music_string += \"|\nfunc TestParse_Music(t *testing.T) {\n  candidate :=\
    \ parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n\
    \     { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpurr24wh1_test.go:62:21: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    // Your code here\n    music_string += \"|\"\n    music_string += \"\
    o\"\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string +=\
    \ \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"|\"\n    music_string += \"o|\"\n    music_string += \"|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"|\"\n    music_string += \"o|\nfunc TestParse_Music(t *testing.T) {\n \
    \ candidate := parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: []int{} },\n     { actual: candidate(\"o o o o\"), expected: []int{4,\
    \ 4, 4, 4} },\n     { actual: candidate(\".| .| .| .|\"), expected: []int{1, 1,\
    \ 1, 1} },\n     { actual: candidate(\"o| o| .| .| o o o o\"), expected: []int{2,\
    \ 2, 1, 1, 4, 4, 4, 4} },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"\
    ), expected: []int{2, 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpffl50lpe_test.go:76:21: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string +=\
    \ \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n\nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n \
    \    { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcjlzyar9_test.go:74:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    // Your code goes here\n    music_string += \"|\"\n    music_string +=\
    \ \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_\nfunc TestParse_Music(t *testing.T) {\n  candidate :=\
    \ parse_music\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n\
    \     { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpr7z3f5x3_test.go:74:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
- exit_code: 1
  program: "package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return list of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\nfunc parse_music(music_string string) []int\
    \ {\n    music_string += \"|\"\n    music_string += \"o|\"\n    music_string +=\
    \ \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n    music_string += \"o|\"\n    music_string += \"o|\"\n    music_string\
    \ += \"o|\"\n\nfunc TestParse_Music(t *testing.T) {\n  candidate := parse_music\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []int{} },\n \
    \    { actual: candidate(\"o o o o\"), expected: []int{4, 4, 4, 4} },\n     {\
    \ actual: candidate(\".| .| .| .|\"), expected: []int{1, 1, 1, 1} },\n     { actual:\
    \ candidate(\"o| o| .| .| o o o o\"), expected: []int{2, 2, 1, 1, 4, 4, 4, 4}\
    \ },\n     { actual: candidate(\"o| .| o| .| o o| o o|\"), expected: []int{2,\
    \ 1, 2, 1, 4, 2, 4, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcjlzyar9_test.go:74:6: expected ''('', found TestParse_Music

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075187
