language: go_test.go
name: HumanEval_153_Strongest_Extension
results:
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return class_name\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'Watashi.eIGHt8OKe', got 'Watashi'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got 'Boku123'\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE'\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n \
    \       tmp8oo0jeyv_test.go:50: expected 'K.TAR', got 'K'\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected '__HAHA.123', got '__HAHA'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected 'YameRore.okIWILL123', got 'YameRore'\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'finNNalLLly.WoW', got 'finNNalLLly'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected '_.Bb', got '_'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'Sp.671235', got 'Sp'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    return\
    \ \"\"\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmp4esb3i7w_test.go:49: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmp4esb3i7w_test.go:49:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmp4esb3i7w_test.go:49: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmp4esb3i7w_test.go:49:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmp4esb3i7w_test.go:49: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmp4esb3i7w_test.go:49:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmp4esb3i7w_test.go:49: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmp4esb3i7w_test.go:49:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmp4esb3i7w_test.go:49: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return \"\"\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpclu215ww_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    return\
    \ \"\"\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmp4esb3i7w_test.go:49: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmp4esb3i7w_test.go:49:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmp4esb3i7w_test.go:49: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmp4esb3i7w_test.go:49:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmp4esb3i7w_test.go:49: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmp4esb3i7w_test.go:49:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmp4esb3i7w_test.go:49: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmp4esb3i7w_test.go:49:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmp4esb3i7w_test.go:49: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return \"\"\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpclu215ww_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Write your code here\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \nfunc TestStrongest_Extension(t *testing.T)\
    \ {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpfz3xqgek_test.go:278:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074952
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return \"\"\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpclu215ww_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return class_name\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'Watashi.eIGHt8OKe', got 'Watashi'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got 'Boku123'\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE'\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n \
    \       tmp8oo0jeyv_test.go:50: expected 'K.TAR', got 'K'\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected '__HAHA.123', got '__HAHA'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected 'YameRore.okIWILL123', got 'YameRore'\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'finNNalLLly.WoW', got 'finNNalLLly'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected '_.Bb', got '_'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'Sp.671235', got 'Sp'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \nfunc TestStrongest_Extension(t *testing.T) {\n\
    \  candidate := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpy_gbvp82_test.go:278:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074952
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return class_name\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'Watashi.eIGHt8OKe', got 'Watashi'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got 'Boku123'\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE'\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n \
    \       tmp8oo0jeyv_test.go:50: expected 'K.TAR', got 'K'\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected '__HAHA.123', got '__HAHA'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected 'YameRore.okIWILL123', got 'YameRore'\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'finNNalLLly.WoW', got 'finNNalLLly'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected '_.Bb', got '_'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'Sp.671235', got 'Sp'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return \"\"\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpclu215ww_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return class_name\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'Watashi.eIGHt8OKe', got 'Watashi'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got 'Boku123'\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE'\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n \
    \       tmp8oo0jeyv_test.go:50: expected 'K.TAR', got 'K'\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected '__HAHA.123', got '__HAHA'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected 'YameRore.okIWILL123', got 'YameRore'\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'finNNalLLly.WoW', got 'finNNalLLly'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected '_.Bb', got '_'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'Sp.671235', got 'Sp'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    return\
    \ \"\"\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmp4esb3i7w_test.go:49: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmp4esb3i7w_test.go:49:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmp4esb3i7w_test.go:49: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmp4esb3i7w_test.go:49:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmp4esb3i7w_test.go:49: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmp4esb3i7w_test.go:49:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmp4esb3i7w_test.go:49: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmp4esb3i7w_test.go:49:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmp4esb3i7w_test.go:49: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \nfunc TestStrongest_Extension(t *testing.T) {\n\
    \  candidate := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpy_gbvp82_test.go:278:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074952
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    // Your\
    \ code here\n    \n    // Your code here\n    \n    // Your code here\n    \n\
    \    // Your code here\n    \n    // Your code here\n    \n    // Your code here\n\
    \    \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // \nfunc\
    \ TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpk6h_90_d_test.go:170:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074952
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    return\
    \ class_name\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate :=\
    \ Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpt8ubc5p0_test.go:49: expected 'Watashi.eIGHt8OKe', got 'Watashi'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpt8ubc5p0_test.go:49:\
    \ expected 'Boku123.YEs.WeCaNe', got 'Boku123'\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpt8ubc5p0_test.go:49: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE'\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n \
    \       tmpt8ubc5p0_test.go:49: expected 'K.TAR', got 'K'\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpt8ubc5p0_test.go:49: expected '__HAHA.123', got '__HAHA'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpt8ubc5p0_test.go:49:\
    \ expected 'YameRore.okIWILL123', got 'YameRore'\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpt8ubc5p0_test.go:49: expected 'finNNalLLly.WoW', got 'finNNalLLly'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpt8ubc5p0_test.go:49:\
    \ expected '_.Bb', got '_'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpt8ubc5p0_test.go:49: expected 'Sp.671235', got 'Sp'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \nfunc TestStrongest_Extension(t *testing.T) {\n\
    \  candidate := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpy_gbvp82_test.go:278:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074952
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return class_name\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'Watashi.eIGHt8OKe', got 'Watashi'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got 'Boku123'\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE'\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n \
    \       tmp8oo0jeyv_test.go:50: expected 'K.TAR', got 'K'\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected '__HAHA.123', got '__HAHA'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected 'YameRore.okIWILL123', got 'YameRore'\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'finNNalLLly.WoW', got 'finNNalLLly'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected '_.Bb', got '_'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'Sp.671235', got 'Sp'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    // Initialize\
    \ a map to store extension strengths\n    extension_map := make(map[string]int)\n\
    \    \n    // Iterate through the extensions and store their strengths\n    for\
    \ _, extension := range extensions {\n        extension_map[extension] = -1\n\
    \    }\n    \n    // Iterate through the extensions and find the strongest one\n\
    \    for _, extension := range extensions {\n        extension_map[extension]\
    \ = -1\n    }\n    \n    // Iterate through the extensions and find the strongest\
    \ one\n    for _, extension := range extensions {\n        extension_map[extension]\
    \ = -1\n    }\n    \n    // Iterate through the extensions and find the strongest\
    \ one\n    for _, extension := range extensions {\n        extension_map[extension]\
    \ = -1\n    }\n    \n    // Iterate through the extensions and find the strongest\
    \ one\n    for _, extension := range extensions {\n        extension_map[extension]\
    \ = -1\n    }\n    \n    // Iterate through the extensions and find the strongest\
    \ one\n    for _, extension := range extensions {\n        extension_map[extension]\
    \ = -1\n    }\n    \n    // Iterate through the extensions and find the strongest\
    \ one\n    for _, extension := range extensions {\n        extension_map[extension]\
    \ = -1\n    }\n    \n    // Iterate through the extensions and find the strongest\
    \ one\n    for _, extension := range extensions {\n        extension_map[extension]\
    \ = -1\n    }\n    \n    // Iterate through the extensions and find the strongest\
    \ one\n    for _, extension := range extensions {\n        extension_map[extension]\
    \ = -1\n    }\n    \n    // Iterate through the extensions and find the strongest\
    \ one\n    for _, extension := range extensions {\n        extension_map[extension]\
    \ = -1\n    }\n    \n    // Iterate through the extensions and find the strongest\
    \ one\n    for _, extension := range extensions {\n        extension_map[extension]\
    \ = -1\n    }\n    \n    // Iterate through the extensions and find the strongest\
    \ one\n    for _, extension := range extensions {\n        extension_map[extension]\
    \ = -1\n    }\n    \n    // Iterate through the extensions and find the strongest\
    \ one\n    for _, extension := range extensions {\n        extension_map[extension]\
    \ = -1\n    }\n    \n    // Iterate through the extensions and find the strongest\
    \ one\n    for _, extension := range extensions {\n        extension_map[extension]\
    \ = -1\n    }\n    \n    // Iterate through the extensions and find the strongest\
    \ one\n    for _, extension := range extensions {\n        extension_map[extension]\
    \ = -1\n    }\n    \n    // Iterate through the extensions and find the strongest\
    \ one\n    for _, extension := range extension\nfunc TestStrongest_Extension(t\
    \ *testing.T) {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    }), expected: \"Watashi.eIGHt8OKe\" },\n     { actual: candidate(\"Boku123\",\
    \ []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"}), expected: \"\
    Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\", []string{\"\
    t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"}), expected:\
    \ \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"Ta\",\
    \ \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual: candidate(\"\
    __HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\"\
    \ },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n  \
    \   { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\",\
    \ \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"_\"\
    , []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvf3qyqi1_test.go:104:40: expected ''{'', found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074952
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return class_name\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'Watashi.eIGHt8OKe', got 'Watashi'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got 'Boku123'\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE'\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n \
    \       tmp8oo0jeyv_test.go:50: expected 'K.TAR', got 'K'\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected '__HAHA.123', got '__HAHA'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected 'YameRore.okIWILL123', got 'YameRore'\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'finNNalLLly.WoW', got 'finNNalLLly'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected '_.Bb', got '_'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'Sp.671235', got 'Sp'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return class_name\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'Watashi.eIGHt8OKe', got 'Watashi'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got 'Boku123'\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE'\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n \
    \       tmp8oo0jeyv_test.go:50: expected 'K.TAR', got 'K'\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected '__HAHA.123', got '__HAHA'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected 'YameRore.okIWILL123', got 'YameRore'\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'finNNalLLly.WoW', got 'finNNalLLly'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected '_.Bb', got '_'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'Sp.671235', got 'Sp'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return \"\"\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpclu215ww_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return \"\"\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpclu215ww_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    var max_strength int = -1\n    var\
    \ max_extension string = \"\"\n    for _, extension := range extensions {\n  \
    \      extension := extension\n        extension := extension[:len(extension)-len(extension[len(extension)-1:])]\n\
    \        extension := extension[:len(extension)-len(extension[len(extension)-1:])]\n\
    \        extension := extension[:len(extension)-len(extension[len(extension)-1:])]\n\
    \        extension := extension[:len(extension)-len(extension[len(extension)-1:])]\n\
    \        extension := extension[:len(extension)-len(extension[len(extension)-1:])]\n\
    \        extension := extension[:len(extension)-len(extension[len(extension)-1:])]\n\
    \        extension := extension[:len(extension)-len(extension[len(extension)-1:])]\n\
    \        extension := extension[:len(extension)-len(extension[len(extension)-1:])]\n\
    \        extension := extension[:len(extension)-len(extension[len(extension)-1:])]\n\
    \        extension := extension[:len(extension)-len(extension[len(extension)-1:])]\n\
    \        extension := extension[:len(extension)-len(extension[len(extension)-1:])]\n\
    \        extension := extension[:len(extension)-len(extension[len(extension)-1:])]\n\
    \        extension := extension[:len(extension)-len(extension[len(extension)-1:])]\n\
    \        extension := extension[:len(extension)-len(extension[len(extension)-1:])]\n\
    \        extension := extension[:len(extension)-len(extension[len(extension)-1:])]\n\
    \        extension := extension[:len(extension)-len(extension[len(extension)-1:])]\n\
    \        extension := extension[:len(extension)-len(extension[len(extension)-1:])]\n\
    \        extension := extension[:len(extension)-len(extension[len(extension)-1:])]\n\
    \        extension := extension[:len(extension)-len(extension[len(extension)-1:])]\n\
    \        extension := extension[:len(extension)-len(extension[len(extension)-1:])]\n\
    \        extension := extension[:len(extension)-len(extension[len(extension)-1:])]\n\
    \        extension := extension[:len(extension)-len(extension[len(extension)-1:])]\n\
    \        extension := extension[:len(extension)-len(extension[len(extension)-1:])]\n\
    \        extension := extension[:len(extension)-len(extension[len(extension)-1:])]\n\
    \        extension := extension[:len(extension)-len(extension[len(extension)-1:])]\n\
    \        extension := extension[:len(extension)-len(extension[len(extension)-1:])]\n\
    \        extension := extension[:len(extension)-len(extension[len(extension)-1:])]\n\
    \nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpc9375z47_test.go:55:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074952
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return \"\"\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpclu215ww_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    var strongest_extension string\n\
    \    var max_strength int = -1\n    for _, extension := range extensions {\n \
    \       extension := extension\n        extension := extension[:len(extension)-len(extension[len(extension)-1:])]\n\
    \        extension := extension[:len(extension)-len(extension[len(extension)-1:])]\n\
    \        extension := extension[:len(extension)-len(extension[len(extension)-1:])]\n\
    \        extension := extension[:len(extension)-len(extension[len(extension)-1:])]\n\
    \        extension := extension[:len(extension)-len(extension[len(extension)-1:])]\n\
    \        extension := extension[:len(extension)-len(extension[len(extension)-1:])]\n\
    \        extension := extension[:len(extension)-len(extension[len(extension)-1:])]\n\
    \        extension := extension[:len(extension)-len(extension[len(extension)-1:])]\n\
    \        extension := extension[:len(extension)-len(extension[len(extension)-1:])]\n\
    \        extension := extension[:len(extension)-len(extension[len(extension)-1:])]\n\
    \        extension := extension[:len(extension)-len(extension[len(extension)-1:])]\n\
    \        extension := extension[:len(extension)-len(extension[len(extension)-1:])]\n\
    \        extension := extension[:len(extension)-len(extension[len(extension)-1:])]\n\
    \        extension := extension[:len(extension)-len(extension[len(extension)-1:])]\n\
    \        extension := extension[:len(extension)-len(extension[len(extension)-1:])]\n\
    \        extension := extension[:len(extension)-len(extension[len(extension)-1:])]\n\
    \        extension := extension[:len(extension)-len(extension[len(extension)-1:])]\n\
    \        extension := extension[:len(extension)-len(extension[len(extension)-1:])]\n\
    \        extension := extension[:len(extension)-len(extension[len(extension)-1:])]\n\
    \        extension := extension[:len(extension)-len(extension[len(extension)-1:])]\n\
    \        extension := extension[:len(extension)-len(extension[len(extension)-1:])]\n\
    \        extension := extension[:len(extension)-len(extension[len(extension)-1:])]\n\
    \        extension := extension[:len(extension)-len(extension[len(extension)-1:])]\n\
    \        extension := extension[:len(extension)-len(extension[len(extension)-1:])]\n\
    \        extension := extension[:len(extension)-len(extension[len(extension)-1:])]\n\
    \        extension := extension[:len(extension)-len(extension[len(extension)-1:])]\n\
    \        extension := extension[:len(extension)-len(extension[len(extension)-1:])]\n\
    func TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp4xi36vkw_test.go:54:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074952
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return class_name\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'Watashi.eIGHt8OKe', got 'Watashi'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got 'Boku123'\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE'\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n \
    \       tmp8oo0jeyv_test.go:50: expected 'K.TAR', got 'K'\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected '__HAHA.123', got '__HAHA'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected 'YameRore.okIWILL123', got 'YameRore'\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'finNNalLLly.WoW', got 'finNNalLLly'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected '_.Bb', got '_'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'Sp.671235', got 'Sp'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Write your code here\n    \n \
    \   \n    return class_name\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n\
    \  candidate := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmp5sud32yq_test.go:50: expected 'Watashi.eIGHt8OKe', got 'Watashi'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmp5sud32yq_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got 'Boku123'\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmp5sud32yq_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE'\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n \
    \       tmp5sud32yq_test.go:50: expected 'K.TAR', got 'K'\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmp5sud32yq_test.go:50: expected '__HAHA.123', got '__HAHA'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmp5sud32yq_test.go:50:\
    \ expected 'YameRore.okIWILL123', got 'YameRore'\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmp5sud32yq_test.go:50: expected 'finNNalLLly.WoW', got 'finNNalLLly'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmp5sud32yq_test.go:50:\
    \ expected '_.Bb', got '_'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmp5sud32yq_test.go:50: expected 'Sp.671235', got 'Sp'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return class_name\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'Watashi.eIGHt8OKe', got 'Watashi'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got 'Boku123'\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE'\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n \
    \       tmp8oo0jeyv_test.go:50: expected 'K.TAR', got 'K'\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected '__HAHA.123', got '__HAHA'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected 'YameRore.okIWILL123', got 'YameRore'\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'finNNalLLly.WoW', got 'finNNalLLly'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected '_.Bb', got '_'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'Sp.671235', got 'Sp'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return class_name\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'Watashi.eIGHt8OKe', got 'Watashi'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got 'Boku123'\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE'\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n \
    \       tmp8oo0jeyv_test.go:50: expected 'K.TAR', got 'K'\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected '__HAHA.123', got '__HAHA'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected 'YameRore.okIWILL123', got 'YameRore'\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'finNNalLLly.WoW', got 'finNNalLLly'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected '_.Bb', got '_'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'Sp.671235', got 'Sp'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    var max_strength int = -1\n    var\
    \ max_extension string = \"\"\n    for _, extension := range extensions {\n  \
    \      extension := extension\n        extension := extension[:len(extension)-len(extension)%cap(extension)]\n\
    \        extension := extension[:len(extension)-len(extension)%cap(extension)]\n\
    \        extension := extension[:len(extension)-len(extension)%cap(extension)]\n\
    \        extension := extension[:len(extension)-len(extension)%cap(extension)]\n\
    \        extension := extension[:len(extension)-len(extension)%cap(extension)]\n\
    \        extension := extension[:len(extension)-len(extension)%cap(extension)]\n\
    \        extension := extension[:len(extension)-len(extension)%cap(extension)]\n\
    \        extension := extension[:len(extension)-len(extension)%cap(extension)]\n\
    \        extension := extension[:len(extension)-len(extension)%cap(extension)]\n\
    \        extension := extension[:len(extension)-len(extension)%cap(extension)]\n\
    \        extension := extension[:len(extension)-len(extension)%cap(extension)]\n\
    \        extension := extension[:len(extension)-len(extension)%cap(extension)]\n\
    \        extension := extension[:len(extension)-len(extension)%cap(extension)]\n\
    \        extension := extension[:len(extension)-len(extension)%cap(extension)]\n\
    \        extension := extension[:len(extension)-len(extension)%cap(extension)]\n\
    \        extension := extension[:len(extension)-len(extension)%cap(extension)]\n\
    \        extension := extension[:len(extension)-len(extension)%cap(extension)]\n\
    \        extension := extension[:len(extension)-len(extension)%cap(extension)]\n\
    \        extension := extension[:len(extension)-len(extension)%cap(extension)]\n\
    \        extension := extension[:len(extension)-len(extension)%cap(extension)]\n\
    \        extension := extension[:len(extension)-len(extension)%cap(extension)]\n\
    \        extension := extension[:len(extension)-len(extension)%cap(extension)]\n\
    \        extension := extension[:len(extension)-len(extension)%cap(extension)]\n\
    \        extension := extension[:len(extension)-len(extension)%cap(extension)]\n\
    \        extension := extension[:len(extension)-len(extension)%cap(extension)]\n\
    \        extension := extension[:len(extension)-len(extension)%cap(extension)]\n\
    \        extension := extension[:len(extension)-len(extension)%cap(extension)]\n\
    \nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpc96rrilh_test.go:55:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074952
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return \"\"\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpclu215ww_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Write your code here\n    \n \
    \   \n    return \"\"\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpyu4w2ykv_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpyu4w2ykv_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpyu4w2ykv_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpyu4w2ykv_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpyu4w2ykv_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpyu4w2ykv_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpyu4w2ykv_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpyu4w2ykv_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpyu4w2ykv_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return class_name\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'Watashi.eIGHt8OKe', got 'Watashi'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got 'Boku123'\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE'\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n \
    \       tmp8oo0jeyv_test.go:50: expected 'K.TAR', got 'K'\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected '__HAHA.123', got '__HAHA'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected 'YameRore.okIWILL123', got 'YameRore'\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'finNNalLLly.WoW', got 'finNNalLLly'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected '_.Bb', got '_'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'Sp.671235', got 'Sp'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Write your code here\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \nfunc TestStrongest_Extension(t *testing.T)\
    \ {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpfz3xqgek_test.go:278:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074952
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Write your code here\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \nfunc TestStrongest_Extension(t *testing.T)\
    \ {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpfz3xqgek_test.go:278:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074952
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return class_name\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'Watashi.eIGHt8OKe', got 'Watashi'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got 'Boku123'\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE'\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n \
    \       tmp8oo0jeyv_test.go:50: expected 'K.TAR', got 'K'\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected '__HAHA.123', got '__HAHA'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected 'YameRore.okIWILL123', got 'YameRore'\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'finNNalLLly.WoW', got 'finNNalLLly'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected '_.Bb', got '_'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'Sp.671235', got 'Sp'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    // Initialize\
    \ a map of extensions indexed by their strength\n    extensions_map := make(map[string]int)\n\
    \    for _, extension := range extensions {\n        extensions_map[extension]\
    \ = extensions_map[extension] + 1\n    }\n\n    // Initialize a map of extensions\
    \ indexed by their strength\n    sorted_extensions_map := make(map[string]int)\n\
    \    for extension, count := range extensions_map {\n        sorted_extensions_map[extension]\
    \ = count\n    }\n\n    // Initialize a map of extensions indexed by their strength\n\
    \    sorted_extensions_map = sort_extensions_by_strength(sorted_extensions_map)\n\
    \n    // Initialize a map of extensions indexed by their strength\n    sorted_extensions_map\
    \ = sort_extensions_by_strength(sorted_extensions_map)\n\n    // Initialize a\
    \ map of extensions indexed by their strength\n    sorted_extensions_map = sort_extensions_by_strength(sorted_extensions_map)\n\
    \n    // Initialize a map of extensions indexed by their strength\n    sorted_extensions_map\
    \ = sort_extensions_by_strength(sorted_extensions_map)\n\n    // Initialize a\
    \ map of extensions indexed by their strength\n    sorted_extensions_map = sort_extensions_by_strength(sorted_extensions_map)\n\
    \n    // Initialize a map of extensions indexed by their strength\n    sorted_extensions_map\
    \ = sort_extensions_by_strength(sorted_extensions_map)\n\n    // Initialize a\
    \ map of extensions indexed by their strength\n    sorted_extensions_map = sort_extensions_by_strength(sorted_extensions_map)\n\
    \n    // Initialize a map of extensions indexed by their strength\n    sorted_extensions_map\
    \ = sort_extensions_by_strength(sorted_extensions_map)\n\n    // Initialize a\
    \ map of extensions indexed by their strength\n    sorted_extensions_map = sort_extensions_by_strength(sorted_extensions_map)\n\
    \n    // Initialize a map of extensions indexed by their strength\n    sorted_extensions_map\
    \ = sort_extensions_by_strength(sorted_extensions_map)\n\n    // Initialize a\
    \ map of extensions indexed by their strength\n    sorted_extensions_map = sort_extensions_by_strength(sorted_extensions_map)\n\
    \n    // Initialize a map of extensions indexed by their strength\n    sorted_extensions_map\
    \ = sort_extensions_by_strength(sorted_extensions_map)\n\n    // Initialize a\
    \ map of extensions indexed by their strength\n    sorted_extensions_map = sort_extensions_by_strength(sorted_extensions_map)\n\
    \n    // Initialize a map of extensions indexed by their strength\n    sorted_extensions_map\
    \ = sort_extensions_by_strength(sorted_extensions_map)\n\n    // Initialize a\
    \ map of extensions indexed by their strength\n    sorted_extensions_map = sort_extensions_by_strength(sorted_extensions_map)\n\
    \n    // Initialize a map of extension\nfunc TestStrongest_Extension(t *testing.T)\
    \ {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpd50b9oy3_test.go:83:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074952
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    // Your\
    \ code here\n    \n    // Your code here\n    \n    // Your code here\n    \n\
    \    // Your code here\n    \n    // Your code here\n    \n    // Your code here\n\
    \    \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // \nfunc\
    \ TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpk6h_90_d_test.go:170:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074952
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return class_name\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'Watashi.eIGHt8OKe', got 'Watashi'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got 'Boku123'\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE'\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n \
    \       tmp8oo0jeyv_test.go:50: expected 'K.TAR', got 'K'\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected '__HAHA.123', got '__HAHA'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected 'YameRore.okIWILL123', got 'YameRore'\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'finNNalLLly.WoW', got 'finNNalLLly'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected '_.Bb', got '_'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'Sp.671235', got 'Sp'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return class_name\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'Watashi.eIGHt8OKe', got 'Watashi'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got 'Boku123'\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE'\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n \
    \       tmp8oo0jeyv_test.go:50: expected 'K.TAR', got 'K'\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected '__HAHA.123', got '__HAHA'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected 'YameRore.okIWILL123', got 'YameRore'\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'finNNalLLly.WoW', got 'finNNalLLly'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected '_.Bb', got '_'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'Sp.671235', got 'Sp'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return class_name\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'Watashi.eIGHt8OKe', got 'Watashi'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got 'Boku123'\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE'\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n \
    \       tmp8oo0jeyv_test.go:50: expected 'K.TAR', got 'K'\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected '__HAHA.123', got '__HAHA'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected 'YameRore.okIWILL123', got 'YameRore'\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'finNNalLLly.WoW', got 'finNNalLLly'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected '_.Bb', got '_'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'Sp.671235', got 'Sp'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    // Your\
    \ code here\n    \n    // Your code here\n    \n    // Your code here\n    \n\
    \    // Your code here\n    \n    // Your code here\n    \n    // Your code here\n\
    \    \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // \nfunc\
    \ TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpk6h_90_d_test.go:170:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074952
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    return\
    \ class_name\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate :=\
    \ Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpt8ubc5p0_test.go:49: expected 'Watashi.eIGHt8OKe', got 'Watashi'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpt8ubc5p0_test.go:49:\
    \ expected 'Boku123.YEs.WeCaNe', got 'Boku123'\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpt8ubc5p0_test.go:49: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE'\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n \
    \       tmpt8ubc5p0_test.go:49: expected 'K.TAR', got 'K'\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpt8ubc5p0_test.go:49: expected '__HAHA.123', got '__HAHA'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpt8ubc5p0_test.go:49:\
    \ expected 'YameRore.okIWILL123', got 'YameRore'\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpt8ubc5p0_test.go:49: expected 'finNNalLLly.WoW', got 'finNNalLLly'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpt8ubc5p0_test.go:49:\
    \ expected '_.Bb', got '_'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpt8ubc5p0_test.go:49: expected 'Sp.671235', got 'Sp'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return class_name\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'Watashi.eIGHt8OKe', got 'Watashi'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got 'Boku123'\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE'\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n \
    \       tmp8oo0jeyv_test.go:50: expected 'K.TAR', got 'K'\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected '__HAHA.123', got '__HAHA'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected 'YameRore.okIWILL123', got 'YameRore'\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'finNNalLLly.WoW', got 'finNNalLLly'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected '_.Bb', got '_'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'Sp.671235', got 'Sp'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    return\
    \ class_name\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate :=\
    \ Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpt8ubc5p0_test.go:49: expected 'Watashi.eIGHt8OKe', got 'Watashi'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpt8ubc5p0_test.go:49:\
    \ expected 'Boku123.YEs.WeCaNe', got 'Boku123'\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpt8ubc5p0_test.go:49: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE'\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n \
    \       tmpt8ubc5p0_test.go:49: expected 'K.TAR', got 'K'\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpt8ubc5p0_test.go:49: expected '__HAHA.123', got '__HAHA'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpt8ubc5p0_test.go:49:\
    \ expected 'YameRore.okIWILL123', got 'YameRore'\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpt8ubc5p0_test.go:49: expected 'finNNalLLly.WoW', got 'finNNalLLly'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpt8ubc5p0_test.go:49:\
    \ expected '_.Bb', got '_'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpt8ubc5p0_test.go:49: expected 'Sp.671235', got 'Sp'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Write your code here\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \nfunc TestStrongest_Extension(t *testing.T)\
    \ {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpfz3xqgek_test.go:278:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074952
- exit_code: 2
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    // Initialize\
    \ a map of extensions to their strength\n    extension_map := make(map[string]int)\n\
    \    \n    // Iterate over the list of extensions\n    for _, extension := range\
    \ extensions {\n        // Get the number of uppercase letters in the extension\n\
    \        cap := len(extension) - len(extension.ToUpper())\n        // Get the\
    \ number of lowercase letters in the extension\n        sm := len(extension) -\
    \ len(extension.ToLower())\n        // Get the strength of the extension\n   \
    \     strength := cap - sm\n        // Add the extension to the map if it doesn't\
    \ exist or update its strength\n        if _, ok := extension_map[extension];\
    \ !ok {\n            extension_map[extension] = strength\n        } else {\n \
    \           extension_map[extension] = extension_map[extension] + strength\n \
    \       }\n    }\n    \n    // Sort the map by strength\n    sort.Sort(sort.Reverse(sort.IntSlice(extension_map)))\n\
    \    \n    // Get the strongest extension\n    extension := extension_map[extension_map[0]]\n\
    \    \n    // Return the class name with the strongest extension\n    return class_name\
    \ + extension\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpve9kfwwl_test.go:31:47: extension.ToUpper undefined (type string has no
    field or method ToUpper)

    /tmp/tmpve9kfwwl_test.go:33:46: extension.ToLower undefined (type string has no
    field or method ToLower)

    /tmp/tmpve9kfwwl_test.go:45:5: undefined: sort

    /tmp/tmpve9kfwwl_test.go:48:32: cannot use extension_map[0] (map index expression
    of type int) as type string in map index

    /tmp/tmpve9kfwwl_test.go:48:46: cannot use 0 (untyped int constant) as string
    value in map index

    /tmp/tmpve9kfwwl_test.go:51:12: invalid operation: class_name + extension (mismatched
    types string and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Write your code here\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \nfunc TestStrongest_Extension(t *testing.T)\
    \ {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpfz3xqgek_test.go:278:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074952
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return class_name\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'Watashi.eIGHt8OKe', got 'Watashi'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got 'Boku123'\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE'\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n \
    \       tmp8oo0jeyv_test.go:50: expected 'K.TAR', got 'K'\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected '__HAHA.123', got '__HAHA'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected 'YameRore.okIWILL123', got 'YameRore'\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'finNNalLLly.WoW', got 'finNNalLLly'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected '_.Bb', got '_'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'Sp.671235', got 'Sp'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Write your code here\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \nfunc TestStrongest_Extension(t *testing.T)\
    \ {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpfz3xqgek_test.go:278:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074952
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Write your code here\n    \n \
    \   return \"\"\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmphpk_9tpq_test.go:49: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmphpk_9tpq_test.go:49:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmphpk_9tpq_test.go:49: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmphpk_9tpq_test.go:49:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmphpk_9tpq_test.go:49: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmphpk_9tpq_test.go:49:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmphpk_9tpq_test.go:49: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmphpk_9tpq_test.go:49:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmphpk_9tpq_test.go:49: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return \"\"\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpclu215ww_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Write your code here\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \nfunc TestStrongest_Extension(t *testing.T)\
    \ {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpfz3xqgek_test.go:278:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074952
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    return\
    \ \"\"\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmp4esb3i7w_test.go:49: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmp4esb3i7w_test.go:49:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmp4esb3i7w_test.go:49: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmp4esb3i7w_test.go:49:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmp4esb3i7w_test.go:49: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmp4esb3i7w_test.go:49:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmp4esb3i7w_test.go:49: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmp4esb3i7w_test.go:49:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmp4esb3i7w_test.go:49: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   \n    return class_name\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n\
    \  candidate := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpxtle6o27_test.go:51: expected 'Watashi.eIGHt8OKe', got 'Watashi'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpxtle6o27_test.go:51:\
    \ expected 'Boku123.YEs.WeCaNe', got 'Boku123'\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpxtle6o27_test.go:51: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE'\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n \
    \       tmpxtle6o27_test.go:51: expected 'K.TAR', got 'K'\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpxtle6o27_test.go:51: expected '__HAHA.123', got '__HAHA'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpxtle6o27_test.go:51:\
    \ expected 'YameRore.okIWILL123', got 'YameRore'\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpxtle6o27_test.go:51: expected 'finNNalLLly.WoW', got 'finNNalLLly'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpxtle6o27_test.go:51:\
    \ expected '_.Bb', got '_'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpxtle6o27_test.go:51: expected 'Sp.671235', got 'Sp'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Write your code here\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \nfunc TestStrongest_Extension(t *testing.T)\
    \ {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpfz3xqgek_test.go:278:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074952
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Write your code here\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \nfunc TestStrongest_Extension(t *testing.T)\
    \ {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpfz3xqgek_test.go:278:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074952
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    // Your\
    \ code here\n    \n    // Your code here\n    \n    // Your code here\n    \n\
    \    // Your code here\n    \n    // Your code here\n    \n    // Your code here\n\
    \    \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // \nfunc\
    \ TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpk6h_90_d_test.go:170:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074952
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \nfunc TestStrongest_Extension(t *testing.T) {\n\
    \  candidate := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpy_gbvp82_test.go:278:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074952
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return \"\"\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpclu215ww_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return class_name\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'Watashi.eIGHt8OKe', got 'Watashi'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got 'Boku123'\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE'\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n \
    \       tmp8oo0jeyv_test.go:50: expected 'K.TAR', got 'K'\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected '__HAHA.123', got '__HAHA'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected 'YameRore.okIWILL123', got 'YameRore'\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'finNNalLLly.WoW', got 'finNNalLLly'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected '_.Bb', got '_'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'Sp.671235', got 'Sp'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return class_name\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'Watashi.eIGHt8OKe', got 'Watashi'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got 'Boku123'\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE'\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n \
    \       tmp8oo0jeyv_test.go:50: expected 'K.TAR', got 'K'\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected '__HAHA.123', got '__HAHA'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected 'YameRore.okIWILL123', got 'YameRore'\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'finNNalLLly.WoW', got 'finNNalLLly'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected '_.Bb', got '_'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'Sp.671235', got 'Sp'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return \"\"\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpclu215ww_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Write your code here\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \nfunc TestStrongest_Extension(t *testing.T)\
    \ {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpfz3xqgek_test.go:278:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074952
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return class_name\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'Watashi.eIGHt8OKe', got 'Watashi'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got 'Boku123'\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE'\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n \
    \       tmp8oo0jeyv_test.go:50: expected 'K.TAR', got 'K'\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected '__HAHA.123', got '__HAHA'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected 'YameRore.okIWILL123', got 'YameRore'\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'finNNalLLly.WoW', got 'finNNalLLly'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected '_.Bb', got '_'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'Sp.671235', got 'Sp'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return \"\"\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpclu215ww_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return \"\"\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpclu215ww_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return \"\"\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpclu215ww_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    return\
    \ class_name\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate :=\
    \ Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpt8ubc5p0_test.go:49: expected 'Watashi.eIGHt8OKe', got 'Watashi'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpt8ubc5p0_test.go:49:\
    \ expected 'Boku123.YEs.WeCaNe', got 'Boku123'\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpt8ubc5p0_test.go:49: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE'\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n \
    \       tmpt8ubc5p0_test.go:49: expected 'K.TAR', got 'K'\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpt8ubc5p0_test.go:49: expected '__HAHA.123', got '__HAHA'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpt8ubc5p0_test.go:49:\
    \ expected 'YameRore.okIWILL123', got 'YameRore'\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpt8ubc5p0_test.go:49: expected 'finNNalLLly.WoW', got 'finNNalLLly'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpt8ubc5p0_test.go:49:\
    \ expected '_.Bb', got '_'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpt8ubc5p0_test.go:49: expected 'Sp.671235', got 'Sp'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    return\
    \ class_name\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate :=\
    \ Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpt8ubc5p0_test.go:49: expected 'Watashi.eIGHt8OKe', got 'Watashi'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpt8ubc5p0_test.go:49:\
    \ expected 'Boku123.YEs.WeCaNe', got 'Boku123'\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpt8ubc5p0_test.go:49: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE'\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n \
    \       tmpt8ubc5p0_test.go:49: expected 'K.TAR', got 'K'\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpt8ubc5p0_test.go:49: expected '__HAHA.123', got '__HAHA'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpt8ubc5p0_test.go:49:\
    \ expected 'YameRore.okIWILL123', got 'YameRore'\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpt8ubc5p0_test.go:49: expected 'finNNalLLly.WoW', got 'finNNalLLly'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpt8ubc5p0_test.go:49:\
    \ expected '_.Bb', got '_'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpt8ubc5p0_test.go:49: expected 'Sp.671235', got 'Sp'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 2
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    // Initialize\
    \ a map of extensions to their strength\n    extension_map := make(map[string]int)\n\
    \    for _, extension := range extensions {\n        extension_map[extension]\
    \ = -1\n    }\n    \n    // Iterate through the extensions list\n    for _, extension\
    \ := range extensions {\n        // Get the number of uppercase letters in the\
    \ extension\n        cap := 0\n        for _, letter := range extension {\n  \
    \          if letter == 'A' || letter == 'B' || letter == 'C' || letter == 'D'\
    \ || letter == 'E' || letter == 'F' || letter == 'G' || letter == 'H' || letter\
    \ == 'I' || letter == 'J' || letter == 'K' || letter == 'L' || letter == 'M' ||\
    \ letter == 'N' || letter == 'O' || letter == 'P' || letter == 'Q' || letter ==\
    \ 'R' || letter == 'S' || letter == 'T' || letter == 'U' || letter == 'V' || letter\
    \ == 'W' || letter == 'X' || letter == 'Y' || letter == 'Z' {\n              \
    \  cap++\n            }\n        }\n        \n        // Get the number of lowercase\
    \ letters in the extension\n        sm := 0\n        for _, letter := range extension\
    \ {\n            if letter == 'a' || letter == 'b' || letter == 'c' || letter\
    \ == 'd' || letter == 'e' || letter == 'f' || letter == 'g' || letter == 'h' ||\
    \ letter == 'i' || letter == 'j' || letter == 'k' || letter == 'l' || letter ==\
    \ 'm' || letter == 'n' || letter == 'o' || letter == 'p' || letter == 'q' || letter\
    \ == 'r' || letter == 's' || letter == 't' || letter == 'u' || letter == 'v' ||\
    \ letter == 'w' || letter == 'x' || letter == 'y' || letter == 'z' {\n       \
    \         sm++\n            }\n        }\n        \n        // Calculate the strength\
    \ of the extension\n        strength := cap - sm\n        \n        // Update\
    \ the map with the extension's strength\n        extension_map[extension] = strength\n\
    \    }\n    \n    // Sort the map by strength\n    sort.Sort(sort.Reverse(extension_map))\n\
    \    \n    // Get the strongest extension\n    extension := \"\"\n    for extension,\
    \ strength := range extension_map {\n        if strength == 0 {\n            break\n\
    \        }\n    }\n    \n    // Return the extension\n    return class_name +\
    \ \".\" + extension\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4uhg4lcj_test.go:57:5: undefined: sort

    /tmp/tmp4uhg4lcj_test.go:61:9: extension declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074952
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Write your code here\n    \n \
    \   \n    return \"\"\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpyu4w2ykv_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpyu4w2ykv_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpyu4w2ykv_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpyu4w2ykv_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpyu4w2ykv_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpyu4w2ykv_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpyu4w2ykv_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpyu4w2ykv_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpyu4w2ykv_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    return\
    \ class_name\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate :=\
    \ Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpt8ubc5p0_test.go:49: expected 'Watashi.eIGHt8OKe', got 'Watashi'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpt8ubc5p0_test.go:49:\
    \ expected 'Boku123.YEs.WeCaNe', got 'Boku123'\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpt8ubc5p0_test.go:49: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE'\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n \
    \       tmpt8ubc5p0_test.go:49: expected 'K.TAR', got 'K'\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpt8ubc5p0_test.go:49: expected '__HAHA.123', got '__HAHA'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpt8ubc5p0_test.go:49:\
    \ expected 'YameRore.okIWILL123', got 'YameRore'\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpt8ubc5p0_test.go:49: expected 'finNNalLLly.WoW', got 'finNNalLLly'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpt8ubc5p0_test.go:49:\
    \ expected '_.Bb', got '_'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpt8ubc5p0_test.go:49: expected 'Sp.671235', got 'Sp'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return class_name\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'Watashi.eIGHt8OKe', got 'Watashi'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got 'Boku123'\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE'\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n \
    \       tmp8oo0jeyv_test.go:50: expected 'K.TAR', got 'K'\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected '__HAHA.123', got '__HAHA'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected 'YameRore.okIWILL123', got 'YameRore'\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'finNNalLLly.WoW', got 'finNNalLLly'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected '_.Bb', got '_'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'Sp.671235', got 'Sp'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Write your code here\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \nfunc TestStrongest_Extension(t *testing.T)\
    \ {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpfz3xqgek_test.go:278:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074952
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Write your code here\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \nfunc TestStrongest_Extension(t *testing.T)\
    \ {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpfz3xqgek_test.go:278:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074952
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return class_name\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'Watashi.eIGHt8OKe', got 'Watashi'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got 'Boku123'\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE'\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n \
    \       tmp8oo0jeyv_test.go:50: expected 'K.TAR', got 'K'\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected '__HAHA.123', got '__HAHA'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected 'YameRore.okIWILL123', got 'YameRore'\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'finNNalLLly.WoW', got 'finNNalLLly'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected '_.Bb', got '_'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'Sp.671235', got 'Sp'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return class_name\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'Watashi.eIGHt8OKe', got 'Watashi'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got 'Boku123'\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE'\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n \
    \       tmp8oo0jeyv_test.go:50: expected 'K.TAR', got 'K'\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected '__HAHA.123', got '__HAHA'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected 'YameRore.okIWILL123', got 'YameRore'\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'finNNalLLly.WoW', got 'finNNalLLly'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected '_.Bb', got '_'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'Sp.671235', got 'Sp'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    return\
    \ class_name\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate :=\
    \ Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpt8ubc5p0_test.go:49: expected 'Watashi.eIGHt8OKe', got 'Watashi'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpt8ubc5p0_test.go:49:\
    \ expected 'Boku123.YEs.WeCaNe', got 'Boku123'\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpt8ubc5p0_test.go:49: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE'\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n \
    \       tmpt8ubc5p0_test.go:49: expected 'K.TAR', got 'K'\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpt8ubc5p0_test.go:49: expected '__HAHA.123', got '__HAHA'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpt8ubc5p0_test.go:49:\
    \ expected 'YameRore.okIWILL123', got 'YameRore'\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpt8ubc5p0_test.go:49: expected 'finNNalLLly.WoW', got 'finNNalLLly'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpt8ubc5p0_test.go:49:\
    \ expected '_.Bb', got '_'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpt8ubc5p0_test.go:49: expected 'Sp.671235', got 'Sp'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return class_name\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'Watashi.eIGHt8OKe', got 'Watashi'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got 'Boku123'\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE'\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n \
    \       tmp8oo0jeyv_test.go:50: expected 'K.TAR', got 'K'\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected '__HAHA.123', got '__HAHA'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected 'YameRore.okIWILL123', got 'YameRore'\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'finNNalLLly.WoW', got 'finNNalLLly'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected '_.Bb', got '_'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'Sp.671235', got 'Sp'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Write your code here\n    \n \
    \   \n    return \"\"\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpyu4w2ykv_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpyu4w2ykv_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpyu4w2ykv_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpyu4w2ykv_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpyu4w2ykv_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpyu4w2ykv_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpyu4w2ykv_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpyu4w2ykv_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpyu4w2ykv_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return class_name\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'Watashi.eIGHt8OKe', got 'Watashi'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got 'Boku123'\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE'\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n \
    \       tmp8oo0jeyv_test.go:50: expected 'K.TAR', got 'K'\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected '__HAHA.123', got '__HAHA'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected 'YameRore.okIWILL123', got 'YameRore'\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'finNNalLLly.WoW', got 'finNNalLLly'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected '_.Bb', got '_'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'Sp.671235', got 'Sp'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return \"\"\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpclu215ww_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Write your code here\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \nfunc TestStrongest_Extension(t *testing.T)\
    \ {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpfz3xqgek_test.go:278:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074952
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    // Your\
    \ code here\n    \n    // Your code here\n    \n    // Your code here\n    \n\
    \    // Your code here\n    \n    // Your code here\n    \n    // Your code here\n\
    \    \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // \nfunc\
    \ TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpk6h_90_d_test.go:170:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074952
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return \"\"\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpclu215ww_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return class_name\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'Watashi.eIGHt8OKe', got 'Watashi'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got 'Boku123'\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE'\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n \
    \       tmp8oo0jeyv_test.go:50: expected 'K.TAR', got 'K'\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected '__HAHA.123', got '__HAHA'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected 'YameRore.okIWILL123', got 'YameRore'\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'finNNalLLly.WoW', got 'finNNalLLly'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected '_.Bb', got '_'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'Sp.671235', got 'Sp'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return \"\"\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpclu215ww_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return class_name\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'Watashi.eIGHt8OKe', got 'Watashi'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got 'Boku123'\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE'\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n \
    \       tmp8oo0jeyv_test.go:50: expected 'K.TAR', got 'K'\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected '__HAHA.123', got '__HAHA'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected 'YameRore.okIWILL123', got 'YameRore'\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'finNNalLLly.WoW', got 'finNNalLLly'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected '_.Bb', got '_'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'Sp.671235', got 'Sp'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    return\
    \ class_name\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate :=\
    \ Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpt8ubc5p0_test.go:49: expected 'Watashi.eIGHt8OKe', got 'Watashi'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpt8ubc5p0_test.go:49:\
    \ expected 'Boku123.YEs.WeCaNe', got 'Boku123'\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpt8ubc5p0_test.go:49: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE'\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n \
    \       tmpt8ubc5p0_test.go:49: expected 'K.TAR', got 'K'\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpt8ubc5p0_test.go:49: expected '__HAHA.123', got '__HAHA'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpt8ubc5p0_test.go:49:\
    \ expected 'YameRore.okIWILL123', got 'YameRore'\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpt8ubc5p0_test.go:49: expected 'finNNalLLly.WoW', got 'finNNalLLly'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpt8ubc5p0_test.go:49:\
    \ expected '_.Bb', got '_'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpt8ubc5p0_test.go:49: expected 'Sp.671235', got 'Sp'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Write your code here\n    \n \
    \   \n    return \"\"\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpyu4w2ykv_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpyu4w2ykv_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpyu4w2ykv_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpyu4w2ykv_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpyu4w2ykv_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpyu4w2ykv_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpyu4w2ykv_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpyu4w2ykv_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpyu4w2ykv_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return \"\"\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpclu215ww_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Write your code here\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \nfunc TestStrongest_Extension(t *testing.T)\
    \ {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpfz3xqgek_test.go:278:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074952
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return \"\"\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpclu215ww_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return \"\"\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpclu215ww_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    return\
    \ class_name\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate :=\
    \ Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpt8ubc5p0_test.go:49: expected 'Watashi.eIGHt8OKe', got 'Watashi'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpt8ubc5p0_test.go:49:\
    \ expected 'Boku123.YEs.WeCaNe', got 'Boku123'\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpt8ubc5p0_test.go:49: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE'\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n \
    \       tmpt8ubc5p0_test.go:49: expected 'K.TAR', got 'K'\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpt8ubc5p0_test.go:49: expected '__HAHA.123', got '__HAHA'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpt8ubc5p0_test.go:49:\
    \ expected 'YameRore.okIWILL123', got 'YameRore'\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpt8ubc5p0_test.go:49: expected 'finNNalLLly.WoW', got 'finNNalLLly'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpt8ubc5p0_test.go:49:\
    \ expected '_.Bb', got '_'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpt8ubc5p0_test.go:49: expected 'Sp.671235', got 'Sp'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return class_name\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'Watashi.eIGHt8OKe', got 'Watashi'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got 'Boku123'\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE'\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n \
    \       tmp8oo0jeyv_test.go:50: expected 'K.TAR', got 'K'\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected '__HAHA.123', got '__HAHA'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected 'YameRore.okIWILL123', got 'YameRore'\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'finNNalLLly.WoW', got 'finNNalLLly'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected '_.Bb', got '_'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'Sp.671235', got 'Sp'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return \"\"\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpclu215ww_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    // Your\
    \ code here\n    \n    // Your code here\n    \n    // Your code here\n    \n\
    \    // Your code here\n    \n    // Your code here\n    \n    // Your code here\n\
    \    \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // \nfunc\
    \ TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpk6h_90_d_test.go:170:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074952
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \nfunc TestStrongest_Extension(t *testing.T) {\n\
    \  candidate := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpy_gbvp82_test.go:278:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074952
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return class_name\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'Watashi.eIGHt8OKe', got 'Watashi'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got 'Boku123'\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE'\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n \
    \       tmp8oo0jeyv_test.go:50: expected 'K.TAR', got 'K'\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected '__HAHA.123', got '__HAHA'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected 'YameRore.okIWILL123', got 'YameRore'\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'finNNalLLly.WoW', got 'finNNalLLly'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected '_.Bb', got '_'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'Sp.671235', got 'Sp'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    return\
    \ \"\"\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmp4esb3i7w_test.go:49: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmp4esb3i7w_test.go:49:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmp4esb3i7w_test.go:49: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmp4esb3i7w_test.go:49:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmp4esb3i7w_test.go:49: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmp4esb3i7w_test.go:49:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmp4esb3i7w_test.go:49: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmp4esb3i7w_test.go:49:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmp4esb3i7w_test.go:49: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    return\
    \ \"\"\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmp4esb3i7w_test.go:49: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmp4esb3i7w_test.go:49:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmp4esb3i7w_test.go:49: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmp4esb3i7w_test.go:49:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmp4esb3i7w_test.go:49: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmp4esb3i7w_test.go:49:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmp4esb3i7w_test.go:49: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmp4esb3i7w_test.go:49:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmp4esb3i7w_test.go:49: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return \"\"\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpclu215ww_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return \"\"\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpclu215ww_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \nfunc TestStrongest_Extension(t *testing.T) {\n\
    \  candidate := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpy_gbvp82_test.go:278:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074952
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return class_name\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'Watashi.eIGHt8OKe', got 'Watashi'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got 'Boku123'\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE'\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n \
    \       tmp8oo0jeyv_test.go:50: expected 'K.TAR', got 'K'\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected '__HAHA.123', got '__HAHA'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected 'YameRore.okIWILL123', got 'YameRore'\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'finNNalLLly.WoW', got 'finNNalLLly'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected '_.Bb', got '_'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'Sp.671235', got 'Sp'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return \"\"\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpclu215ww_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    return\
    \ class_name\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate :=\
    \ Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpt8ubc5p0_test.go:49: expected 'Watashi.eIGHt8OKe', got 'Watashi'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpt8ubc5p0_test.go:49:\
    \ expected 'Boku123.YEs.WeCaNe', got 'Boku123'\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpt8ubc5p0_test.go:49: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE'\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n \
    \       tmpt8ubc5p0_test.go:49: expected 'K.TAR', got 'K'\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpt8ubc5p0_test.go:49: expected '__HAHA.123', got '__HAHA'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpt8ubc5p0_test.go:49:\
    \ expected 'YameRore.okIWILL123', got 'YameRore'\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpt8ubc5p0_test.go:49: expected 'finNNalLLly.WoW', got 'finNNalLLly'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpt8ubc5p0_test.go:49:\
    \ expected '_.Bb', got '_'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpt8ubc5p0_test.go:49: expected 'Sp.671235', got 'Sp'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return class_name\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'Watashi.eIGHt8OKe', got 'Watashi'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got 'Boku123'\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE'\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n \
    \       tmp8oo0jeyv_test.go:50: expected 'K.TAR', got 'K'\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected '__HAHA.123', got '__HAHA'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected 'YameRore.okIWILL123', got 'YameRore'\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'finNNalLLly.WoW', got 'finNNalLLly'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected '_.Bb', got '_'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'Sp.671235', got 'Sp'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return \"\"\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpclu215ww_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return class_name\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'Watashi.eIGHt8OKe', got 'Watashi'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got 'Boku123'\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE'\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n \
    \       tmp8oo0jeyv_test.go:50: expected 'K.TAR', got 'K'\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected '__HAHA.123', got '__HAHA'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected 'YameRore.okIWILL123', got 'YameRore'\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'finNNalLLly.WoW', got 'finNNalLLly'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected '_.Bb', got '_'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'Sp.671235', got 'Sp'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    var strongest_extension string\n\
    \    var strength int\n    var i int\n    for i = 0; i < len(extensions); i++\
    \ {\n        extension := extensions[i]\n        cap := 0\n        sm := 0\n \
    \       for j := 0; j < len(extension); j++ {\n            if extension[j] ==\
    \ extension[j] {\n                cap++\n            } else {\n              \
    \  sm++\n            }\n        }\n        strength = cap - sm\n        if strength\
    \ > 0 {\n            strongest_extension = class_name + extensions[i]\n      \
    \      break\n        }\n    }\n    if strongest_extension == \"\" {\n       \
    \ fmt.Println(\"No strongest extension found\")\n    }\n    return strongest_extension\n\
    }\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpdw5mhjje_test.go:70: expected 'Watashi.eIGHt8OKe', got 'WatashitEN'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpdw5mhjje_test.go:70:\
    \ expected 'Boku123.YEs.WeCaNe', got 'Boku123nani'\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpdw5mhjje_test.go:70: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHEREt'\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n\
    \        tmpdw5mhjje_test.go:70: expected 'K.TAR', got 'KTa'\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpdw5mhjje_test.go:70: expected '__HAHA.123', got '__HAHATab'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpdw5mhjje_test.go:70:\
    \ expected 'YameRore.okIWILL123', got 'YameRoreHhAas'\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpdw5mhjje_test.go:70: expected 'finNNalLLly.WoW', got 'finNNalLLlyDie'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpdw5mhjje_test.go:70:\
    \ expected '_.Bb', got '_Bb'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpdw5mhjje_test.go:70: expected 'Sp.671235', got 'Sp671235'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return \"\"\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpclu215ww_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return \"\"\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpclu215ww_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Write your code here\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \nfunc TestStrongest_Extension(t *testing.T)\
    \ {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpfz3xqgek_test.go:278:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074952
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return class_name\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'Watashi.eIGHt8OKe', got 'Watashi'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got 'Boku123'\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE'\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n \
    \       tmp8oo0jeyv_test.go:50: expected 'K.TAR', got 'K'\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected '__HAHA.123', got '__HAHA'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected 'YameRore.okIWILL123', got 'YameRore'\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'finNNalLLly.WoW', got 'finNNalLLly'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected '_.Bb', got '_'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'Sp.671235', got 'Sp'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Write your code here\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \nfunc TestStrongest_Extension(t *testing.T)\
    \ {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpfz3xqgek_test.go:278:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074952
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Write your code here\n    \n \
    \   \n    return \"\"\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpyu4w2ykv_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpyu4w2ykv_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpyu4w2ykv_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpyu4w2ykv_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpyu4w2ykv_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpyu4w2ykv_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpyu4w2ykv_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpyu4w2ykv_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpyu4w2ykv_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Write your code here\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \nfunc TestStrongest_Extension(t *testing.T)\
    \ {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpfz3xqgek_test.go:278:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074952
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Write your code here\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \nfunc TestStrongest_Extension(t *testing.T)\
    \ {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpfz3xqgek_test.go:278:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074952
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    return\
    \ class_name\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate :=\
    \ Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpt8ubc5p0_test.go:49: expected 'Watashi.eIGHt8OKe', got 'Watashi'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpt8ubc5p0_test.go:49:\
    \ expected 'Boku123.YEs.WeCaNe', got 'Boku123'\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpt8ubc5p0_test.go:49: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE'\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n \
    \       tmpt8ubc5p0_test.go:49: expected 'K.TAR', got 'K'\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpt8ubc5p0_test.go:49: expected '__HAHA.123', got '__HAHA'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpt8ubc5p0_test.go:49:\
    \ expected 'YameRore.okIWILL123', got 'YameRore'\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpt8ubc5p0_test.go:49: expected 'finNNalLLly.WoW', got 'finNNalLLly'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpt8ubc5p0_test.go:49:\
    \ expected '_.Bb', got '_'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpt8ubc5p0_test.go:49: expected 'Sp.671235', got 'Sp'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 2
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    var max_strength int = -1\n    var\
    \ max_extension string = \"\"\n    for _, extension := range extensions {\n  \
    \      strength := count_uppercase_letters(extension) - count_lowercase_letters(extension)\n\
    \        if strength > max_strength {\n            max_strength = strength\n \
    \           max_extension = extension\n        }\n    }\n    return class_name\
    \ + \".\" + max_extension\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n\
    \  candidate := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpti337mv9_test.go:26:21: undefined: count_uppercase_letters

    /tmp/tmpti337mv9_test.go:26:58: undefined: count_lowercase_letters

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    // Your\
    \ code here\n    \n    // Your code here\n    \n    // Your code here\n    \n\
    \    // Your code here\n    \n    // Your code here\n    \n    // Your code here\n\
    \    \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // \nfunc\
    \ TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpk6h_90_d_test.go:170:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074952
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return class_name\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'Watashi.eIGHt8OKe', got 'Watashi'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got 'Boku123'\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE'\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n \
    \       tmp8oo0jeyv_test.go:50: expected 'K.TAR', got 'K'\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected '__HAHA.123', got '__HAHA'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected 'YameRore.okIWILL123', got 'YameRore'\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'finNNalLLly.WoW', got 'finNNalLLly'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected '_.Bb', got '_'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'Sp.671235', got 'Sp'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return \"\"\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpclu215ww_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return class_name\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'Watashi.eIGHt8OKe', got 'Watashi'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got 'Boku123'\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE'\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n \
    \       tmp8oo0jeyv_test.go:50: expected 'K.TAR', got 'K'\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected '__HAHA.123', got '__HAHA'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected 'YameRore.okIWILL123', got 'YameRore'\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'finNNalLLly.WoW', got 'finNNalLLly'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected '_.Bb', got '_'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'Sp.671235', got 'Sp'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return class_name\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'Watashi.eIGHt8OKe', got 'Watashi'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got 'Boku123'\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE'\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n \
    \       tmp8oo0jeyv_test.go:50: expected 'K.TAR', got 'K'\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected '__HAHA.123', got '__HAHA'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected 'YameRore.okIWILL123', got 'YameRore'\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'finNNalLLly.WoW', got 'finNNalLLly'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected '_.Bb', got '_'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'Sp.671235', got 'Sp'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    return\
    \ class_name\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate :=\
    \ Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpt8ubc5p0_test.go:49: expected 'Watashi.eIGHt8OKe', got 'Watashi'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpt8ubc5p0_test.go:49:\
    \ expected 'Boku123.YEs.WeCaNe', got 'Boku123'\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpt8ubc5p0_test.go:49: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE'\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n \
    \       tmpt8ubc5p0_test.go:49: expected 'K.TAR', got 'K'\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpt8ubc5p0_test.go:49: expected '__HAHA.123', got '__HAHA'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpt8ubc5p0_test.go:49:\
    \ expected 'YameRore.okIWILL123', got 'YameRore'\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpt8ubc5p0_test.go:49: expected 'finNNalLLly.WoW', got 'finNNalLLly'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpt8ubc5p0_test.go:49:\
    \ expected '_.Bb', got '_'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpt8ubc5p0_test.go:49: expected 'Sp.671235', got 'Sp'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return class_name\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'Watashi.eIGHt8OKe', got 'Watashi'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got 'Boku123'\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE'\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n \
    \       tmp8oo0jeyv_test.go:50: expected 'K.TAR', got 'K'\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected '__HAHA.123', got '__HAHA'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected 'YameRore.okIWILL123', got 'YameRore'\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'finNNalLLly.WoW', got 'finNNalLLly'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected '_.Bb', got '_'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'Sp.671235', got 'Sp'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return class_name\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'Watashi.eIGHt8OKe', got 'Watashi'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got 'Boku123'\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE'\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n \
    \       tmp8oo0jeyv_test.go:50: expected 'K.TAR', got 'K'\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected '__HAHA.123', got '__HAHA'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected 'YameRore.okIWILL123', got 'YameRore'\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'finNNalLLly.WoW', got 'finNNalLLly'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected '_.Bb', got '_'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'Sp.671235', got 'Sp'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return class_name\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'Watashi.eIGHt8OKe', got 'Watashi'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got 'Boku123'\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE'\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n \
    \       tmp8oo0jeyv_test.go:50: expected 'K.TAR', got 'K'\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected '__HAHA.123', got '__HAHA'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected 'YameRore.okIWILL123', got 'YameRore'\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'finNNalLLly.WoW', got 'finNNalLLly'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected '_.Bb', got '_'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'Sp.671235', got 'Sp'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return \"\"\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpclu215ww_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    return\
    \ class_name\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate :=\
    \ Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpt8ubc5p0_test.go:49: expected 'Watashi.eIGHt8OKe', got 'Watashi'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpt8ubc5p0_test.go:49:\
    \ expected 'Boku123.YEs.WeCaNe', got 'Boku123'\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpt8ubc5p0_test.go:49: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE'\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n \
    \       tmpt8ubc5p0_test.go:49: expected 'K.TAR', got 'K'\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpt8ubc5p0_test.go:49: expected '__HAHA.123', got '__HAHA'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpt8ubc5p0_test.go:49:\
    \ expected 'YameRore.okIWILL123', got 'YameRore'\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpt8ubc5p0_test.go:49: expected 'finNNalLLly.WoW', got 'finNNalLLly'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpt8ubc5p0_test.go:49:\
    \ expected '_.Bb', got '_'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpt8ubc5p0_test.go:49: expected 'Sp.671235', got 'Sp'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return class_name\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'Watashi.eIGHt8OKe', got 'Watashi'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got 'Boku123'\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE'\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n \
    \       tmp8oo0jeyv_test.go:50: expected 'K.TAR', got 'K'\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected '__HAHA.123', got '__HAHA'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected 'YameRore.okIWILL123', got 'YameRore'\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'finNNalLLly.WoW', got 'finNNalLLly'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected '_.Bb', got '_'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'Sp.671235', got 'Sp'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return class_name\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'Watashi.eIGHt8OKe', got 'Watashi'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got 'Boku123'\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE'\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n \
    \       tmp8oo0jeyv_test.go:50: expected 'K.TAR', got 'K'\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected '__HAHA.123', got '__HAHA'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected 'YameRore.okIWILL123', got 'YameRore'\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'finNNalLLly.WoW', got 'finNNalLLly'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected '_.Bb', got '_'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'Sp.671235', got 'Sp'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return \"\"\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpclu215ww_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    // Your\
    \ code here\n    \n    // Your code here\n    \n    // Your code here\n    \n\
    \    // Your code here\n    \n    // Your code here\n    \n    // Your code here\n\
    \    \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // \nfunc\
    \ TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpk6h_90_d_test.go:170:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074952
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    return\
    \ \"\"\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmp4esb3i7w_test.go:49: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmp4esb3i7w_test.go:49:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmp4esb3i7w_test.go:49: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmp4esb3i7w_test.go:49:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmp4esb3i7w_test.go:49: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmp4esb3i7w_test.go:49:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmp4esb3i7w_test.go:49: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmp4esb3i7w_test.go:49:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmp4esb3i7w_test.go:49: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return \"\"\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpclu215ww_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 2
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    var strongest_extension string\n\
    \    var strength int\n    var class_name string\n    var extension_name string\n\
    \    var extension_strength int\n    var i int\n    for i = 0; i < len(extensions);\
    \ i++ {\n        class_name = class_name[:len(class_name)-len(extensions[i])]\n\
    \        extension_name = extensions[i]\n        extension_strength = count_letters(extension_name)\n\
    \        if extension_strength > strength {\n            strongest_extension =\
    \ class_name\n            strength = extension_strength\n        }\n    }\n  \
    \  return strongest_extension\n}\n\nfunc TestStrongest_Extension(t *testing.T)\
    \ {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0f2ri9ll_test.go:25:9:\
    \ class_name redeclared in this block\n\t/tmp/tmp0f2ri9ll_test.go:22:26: other\
    \ declaration of class_name\n/tmp/tmp0f2ri9ll_test.go:32:30: undefined: count_letters\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074952
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return class_name\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'Watashi.eIGHt8OKe', got 'Watashi'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got 'Boku123'\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE'\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n \
    \       tmp8oo0jeyv_test.go:50: expected 'K.TAR', got 'K'\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected '__HAHA.123', got '__HAHA'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected 'YameRore.okIWILL123', got 'YameRore'\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'finNNalLLly.WoW', got 'finNNalLLly'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected '_.Bb', got '_'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'Sp.671235', got 'Sp'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return \"\"\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpclu215ww_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Write your code here\n    \n \
    \   \n    return \"\"\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpyu4w2ykv_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpyu4w2ykv_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpyu4w2ykv_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpyu4w2ykv_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpyu4w2ykv_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpyu4w2ykv_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpyu4w2ykv_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpyu4w2ykv_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpyu4w2ykv_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Write your code here\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \nfunc TestStrongest_Extension(t *testing.T)\
    \ {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpfz3xqgek_test.go:278:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074952
- exit_code: 2
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    // Initialize\
    \ a map of extensions to their strength\n    extension_map := make(map[string]int)\n\
    \    for _, extension := range extensions {\n        extension_map[extension]\
    \ = -1\n    }\n    \n    // Iterate through the extensions and find the strongest\
    \ one\n    for _, extension := range extensions {\n        extension_map[extension]\
    \ = -1\n        for _, extension := range extensions {\n            if extension_map[extension]\
    \ > extension_map[extension] {\n                extension_map[extension] = extension_map[extension]\
    \ + 1\n            }\n        }\n    }\n    \n    // Return the class name with\
    \ the strongest extension\n    return class_name + \".\" + extensions[extension_map[extensions]]\n\
    }\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6q1bi7jo_test.go:42:56: cannot use extensions (variable of type []string)
    as type string in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074952
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    return\
    \ class_name\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate :=\
    \ Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpt8ubc5p0_test.go:49: expected 'Watashi.eIGHt8OKe', got 'Watashi'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpt8ubc5p0_test.go:49:\
    \ expected 'Boku123.YEs.WeCaNe', got 'Boku123'\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpt8ubc5p0_test.go:49: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE'\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n \
    \       tmpt8ubc5p0_test.go:49: expected 'K.TAR', got 'K'\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpt8ubc5p0_test.go:49: expected '__HAHA.123', got '__HAHA'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpt8ubc5p0_test.go:49:\
    \ expected 'YameRore.okIWILL123', got 'YameRore'\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpt8ubc5p0_test.go:49: expected 'finNNalLLly.WoW', got 'finNNalLLly'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpt8ubc5p0_test.go:49:\
    \ expected '_.Bb', got '_'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpt8ubc5p0_test.go:49: expected 'Sp.671235', got 'Sp'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \nfunc TestStrongest_Extension(t *testing.T) {\n\
    \  candidate := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpy_gbvp82_test.go:278:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074952
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return class_name\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'Watashi.eIGHt8OKe', got 'Watashi'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got 'Boku123'\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE'\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n \
    \       tmp8oo0jeyv_test.go:50: expected 'K.TAR', got 'K'\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected '__HAHA.123', got '__HAHA'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected 'YameRore.okIWILL123', got 'YameRore'\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'finNNalLLly.WoW', got 'finNNalLLly'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected '_.Bb', got '_'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'Sp.671235', got 'Sp'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return \"\"\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpclu215ww_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    return\
    \ class_name\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate :=\
    \ Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpt8ubc5p0_test.go:49: expected 'Watashi.eIGHt8OKe', got 'Watashi'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpt8ubc5p0_test.go:49:\
    \ expected 'Boku123.YEs.WeCaNe', got 'Boku123'\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpt8ubc5p0_test.go:49: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE'\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n \
    \       tmpt8ubc5p0_test.go:49: expected 'K.TAR', got 'K'\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpt8ubc5p0_test.go:49: expected '__HAHA.123', got '__HAHA'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpt8ubc5p0_test.go:49:\
    \ expected 'YameRore.okIWILL123', got 'YameRore'\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpt8ubc5p0_test.go:49: expected 'finNNalLLly.WoW', got 'finNNalLLly'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpt8ubc5p0_test.go:49:\
    \ expected '_.Bb', got '_'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpt8ubc5p0_test.go:49: expected 'Sp.671235', got 'Sp'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return class_name\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'Watashi.eIGHt8OKe', got 'Watashi'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got 'Boku123'\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE'\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n \
    \       tmp8oo0jeyv_test.go:50: expected 'K.TAR', got 'K'\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected '__HAHA.123', got '__HAHA'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected 'YameRore.okIWILL123', got 'YameRore'\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'finNNalLLly.WoW', got 'finNNalLLly'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected '_.Bb', got '_'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'Sp.671235', got 'Sp'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return \"\"\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpclu215ww_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    // Your\
    \ code here\n    \n    // Your code here\n    \n    // Your code here\n    \n\
    \    // Your code here\n    \n    // Your code here\n    \n    // Your code here\n\
    \    \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // \nfunc\
    \ TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpk6h_90_d_test.go:170:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074952
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return \"\"\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpclu215ww_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return \"\"\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpclu215ww_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return class_name\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'Watashi.eIGHt8OKe', got 'Watashi'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got 'Boku123'\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE'\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n \
    \       tmp8oo0jeyv_test.go:50: expected 'K.TAR', got 'K'\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected '__HAHA.123', got '__HAHA'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected 'YameRore.okIWILL123', got 'YameRore'\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'finNNalLLly.WoW', got 'finNNalLLly'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected '_.Bb', got '_'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'Sp.671235', got 'Sp'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Write your code here\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \nfunc TestStrongest_Extension(t *testing.T)\
    \ {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpfz3xqgek_test.go:278:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074952
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return class_name\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'Watashi.eIGHt8OKe', got 'Watashi'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got 'Boku123'\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE'\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n \
    \       tmp8oo0jeyv_test.go:50: expected 'K.TAR', got 'K'\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected '__HAHA.123', got '__HAHA'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected 'YameRore.okIWILL123', got 'YameRore'\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'finNNalLLly.WoW', got 'finNNalLLly'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected '_.Bb', got '_'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'Sp.671235', got 'Sp'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return \"\"\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpclu215ww_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return class_name\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'Watashi.eIGHt8OKe', got 'Watashi'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got 'Boku123'\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE'\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n \
    \       tmp8oo0jeyv_test.go:50: expected 'K.TAR', got 'K'\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected '__HAHA.123', got '__HAHA'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected 'YameRore.okIWILL123', got 'YameRore'\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'finNNalLLly.WoW', got 'finNNalLLly'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected '_.Bb', got '_'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'Sp.671235', got 'Sp'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return class_name\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'Watashi.eIGHt8OKe', got 'Watashi'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got 'Boku123'\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE'\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n \
    \       tmp8oo0jeyv_test.go:50: expected 'K.TAR', got 'K'\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected '__HAHA.123', got '__HAHA'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected 'YameRore.okIWILL123', got 'YameRore'\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'finNNalLLly.WoW', got 'finNNalLLly'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected '_.Bb', got '_'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'Sp.671235', got 'Sp'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    // Your\
    \ code here\n    \n    // Your code here\n    \n    // Your code here\n    \n\
    \    // Your code here\n    \n    // Your code here\n    \n    // Your code here\n\
    \    \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // \nfunc\
    \ TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpk6h_90_d_test.go:170:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074952
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    return\
    \ \"\"\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmp4esb3i7w_test.go:49: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmp4esb3i7w_test.go:49:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmp4esb3i7w_test.go:49: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmp4esb3i7w_test.go:49:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmp4esb3i7w_test.go:49: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmp4esb3i7w_test.go:49:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmp4esb3i7w_test.go:49: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmp4esb3i7w_test.go:49:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmp4esb3i7w_test.go:49: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return class_name\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'Watashi.eIGHt8OKe', got 'Watashi'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got 'Boku123'\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE'\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n \
    \       tmp8oo0jeyv_test.go:50: expected 'K.TAR', got 'K'\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected '__HAHA.123', got '__HAHA'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected 'YameRore.okIWILL123', got 'YameRore'\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'finNNalLLly.WoW', got 'finNNalLLly'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected '_.Bb', got '_'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'Sp.671235', got 'Sp'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Write your code here\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \nfunc TestStrongest_Extension(t *testing.T)\
    \ {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpfz3xqgek_test.go:278:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074952
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    // Write\
    \ your code here\n    \n    return \"\"\n}\n\nfunc TestStrongest_Extension(t *testing.T)\
    \ {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpaenh0mof_test.go:51: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpaenh0mof_test.go:51:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpaenh0mof_test.go:51: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpaenh0mof_test.go:51:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpaenh0mof_test.go:51: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpaenh0mof_test.go:51:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpaenh0mof_test.go:51: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpaenh0mof_test.go:51:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpaenh0mof_test.go:51: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return \"\"\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpclu215ww_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return \"\"\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpclu215ww_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 2
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    // Initialize\
    \ a map of extensions to their strength\n    extension_map := make(map[string]int)\n\
    \    for _, extension := range extensions {\n        extension_map[extension]\
    \ = -1\n    }\n    \n    // Iterate through the extensions and find the strongest\
    \ one\n    for _, extension := range extensions {\n        extension_map[extension]\
    \ = -1\n        for _, extension := range extensions {\n            if extension_map[extension]\
    \ > extension_map[extension] {\n                extension_map[extension] = extension_map[extension]\
    \ + 1\n            }\n        }\n    }\n    \n    // Iterate through the map and\
    \ find the strongest extension\n    for key, value := range extension_map {\n\
    \        if value == 0 {\n            return class_name\n        }\n    }\n  \
    \  return \"\"\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmph_iwgyzz_test.go:42:9: key declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return \"\"\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpclu215ww_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Write your code here\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \nfunc TestStrongest_Extension(t *testing.T)\
    \ {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpfz3xqgek_test.go:278:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074952
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    return\
    \ class_name\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate :=\
    \ Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpt8ubc5p0_test.go:49: expected 'Watashi.eIGHt8OKe', got 'Watashi'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpt8ubc5p0_test.go:49:\
    \ expected 'Boku123.YEs.WeCaNe', got 'Boku123'\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpt8ubc5p0_test.go:49: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE'\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n \
    \       tmpt8ubc5p0_test.go:49: expected 'K.TAR', got 'K'\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpt8ubc5p0_test.go:49: expected '__HAHA.123', got '__HAHA'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpt8ubc5p0_test.go:49:\
    \ expected 'YameRore.okIWILL123', got 'YameRore'\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpt8ubc5p0_test.go:49: expected 'finNNalLLly.WoW', got 'finNNalLLly'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpt8ubc5p0_test.go:49:\
    \ expected '_.Bb', got '_'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpt8ubc5p0_test.go:49: expected 'Sp.671235', got 'Sp'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return class_name\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'Watashi.eIGHt8OKe', got 'Watashi'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got 'Boku123'\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE'\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n \
    \       tmp8oo0jeyv_test.go:50: expected 'K.TAR', got 'K'\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected '__HAHA.123', got '__HAHA'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected 'YameRore.okIWILL123', got 'YameRore'\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'finNNalLLly.WoW', got 'finNNalLLly'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected '_.Bb', got '_'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'Sp.671235', got 'Sp'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return class_name\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'Watashi.eIGHt8OKe', got 'Watashi'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got 'Boku123'\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE'\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n \
    \       tmp8oo0jeyv_test.go:50: expected 'K.TAR', got 'K'\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected '__HAHA.123', got '__HAHA'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected 'YameRore.okIWILL123', got 'YameRore'\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'finNNalLLly.WoW', got 'finNNalLLly'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected '_.Bb', got '_'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'Sp.671235', got 'Sp'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 2
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n}\n\
    \nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplfggb89k_test.go:26:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return class_name\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'Watashi.eIGHt8OKe', got 'Watashi'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got 'Boku123'\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE'\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n \
    \       tmp8oo0jeyv_test.go:50: expected 'K.TAR', got 'K'\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected '__HAHA.123', got '__HAHA'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected 'YameRore.okIWILL123', got 'YameRore'\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'finNNalLLly.WoW', got 'finNNalLLly'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected '_.Bb', got '_'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'Sp.671235', got 'Sp'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Write your code here\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \nfunc TestStrongest_Extension(t *testing.T)\
    \ {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpfz3xqgek_test.go:278:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074952
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return \"\"\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpclu215ww_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 2
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    var max_strength int = -1\n    var\
    \ max_extension string = \"\"\n    for _, extension := range extensions {\n  \
    \      strength := count_uppercase_letters(extension) - count_lowercase_letters(extension)\n\
    \        if strength > max_strength {\n            max_strength = strength\n \
    \           max_extension = extension\n        }\n    }\n    return class_name\
    \ + \".\" + max_extension\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n\
    \  candidate := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpti337mv9_test.go:26:21: undefined: count_uppercase_letters

    /tmp/tmpti337mv9_test.go:26:58: undefined: count_lowercase_letters

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074953
- exit_code: 2
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Write your code here\n    \n \
    \   // Initialize a map to store extension strengths\n    extension := make(map[string]int)\n\
    \    \n    // Iterate over each extension\n    for _, extension := range extensions\
    \ {\n        // Iterate over each character in the extension\n        for _, character\
    \ := range extension {\n            // If the character is a capital letter, increment\
    \ the strength\n            if character == string('A') {\n                extension[extension]\
    \ += 1 \n            }\n            // If the character is a lowercase letter,\
    \ decrement the strength\n            if character == string('a'){\n         \
    \       extension[extension] -= 1\n            }\n        }\n    }\n    \n   \
    \ // Sort the extensions by strength\n    sort.Sort(sort.Reverse(extension))\n\
    \    \n    // Get the strongest extension\n    extension := extension[0]\n   \
    \ \n    // Return the class name with the strongest extension\n    return class_name\
    \ + \".\" + extension\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprbhk8vq3_test.go:33:29: invalid operation: character == string(''A'')
    (mismatched types rune and string)

    /tmp/tmprbhk8vq3_test.go:34:17: cannot assign to extension[extension] (value of
    type byte)

    /tmp/tmprbhk8vq3_test.go:34:27: invalid argument: index extension (variable of
    type string) must be integer

    /tmp/tmprbhk8vq3_test.go:37:29: invalid operation: character == string(''a'')
    (mismatched types rune and string)

    /tmp/tmprbhk8vq3_test.go:38:17: cannot assign to extension[extension] (value of
    type byte)

    /tmp/tmprbhk8vq3_test.go:38:27: invalid argument: index extension (variable of
    type string) must be integer

    /tmp/tmprbhk8vq3_test.go:44:5: undefined: sort

    /tmp/tmprbhk8vq3_test.go:47:15: no new variables on left side of :=

    /tmp/tmprbhk8vq3_test.go:47:18: cannot use extension[0] (map index expression
    of type int) as type map[string]int in assignment

    /tmp/tmprbhk8vq3_test.go:47:28: cannot use 0 (untyped int constant) as string
    value in map index

    /tmp/tmprbhk8vq3_test.go:47:15: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Write your code here\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \nfunc TestStrongest_Extension(t *testing.T)\
    \ {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpfz3xqgek_test.go:278:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074952
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Write your code here\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \nfunc TestStrongest_Extension(t *testing.T)\
    \ {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpfz3xqgek_test.go:278:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074952
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Write your code here\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \nfunc TestStrongest_Extension(t *testing.T)\
    \ {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpfz3xqgek_test.go:278:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074952
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \nfunc TestStrongest_Extension(t *testing.T) {\n\
    \  candidate := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpy_gbvp82_test.go:278:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074952
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    var max_strength int = -1\n    var\
    \ max_extension string = \"\"\n    for _, extension := range extensions {\n  \
    \      extension := extension\n        extension := extension[:len(extension)-len(extension[len(extension)-1:])]\n\
    \        extension := extension[:len(extension)-len(extension[len(extension)-1:])]\n\
    \        extension := extension[:len(extension)-len(extension[len(extension)-1:])]\n\
    \        extension := extension[:len(extension)-len(extension[len(extension)-1:])]\n\
    \        extension := extension[:len(extension)-len(extension[len(extension)-1:])]\n\
    \        extension := extension[:len(extension)-len(extension[len(extension)-1:])]\n\
    \        extension := extension[:len(extension)-len(extension[len(extension)-1:])]\n\
    \        extension := extension[:len(extension)-len(extension[len(extension)-1:])]\n\
    \        extension := extension[:len(extension)-len(extension[len(extension)-1:])]\n\
    \        extension := extension[:len(extension)-len(extension[len(extension)-1:])]\n\
    \        extension := extension[:len(extension)-len(extension[len(extension)-1:])]\n\
    \        extension := extension[:len(extension)-len(extension[len(extension)-1:])]\n\
    \        extension := extension[:len(extension)-len(extension[len(extension)-1:])]\n\
    \        extension := extension[:len(extension)-len(extension[len(extension)-1:])]\n\
    \        extension := extension[:len(extension)-len(extension[len(extension)-1:])]\n\
    \        extension := extension[:len(extension)-len(extension[len(extension)-1:])]\n\
    \        extension := extension[:len(extension)-len(extension[len(extension)-1:])]\n\
    \        extension := extension[:len(extension)-len(extension[len(extension)-1:])]\n\
    \        extension := extension[:len(extension)-len(extension[len(extension)-1:])]\n\
    \        extension := extension[:len(extension)-len(extension[len(extension)-1:])]\n\
    \        extension := extension[:len(extension)-len(extension[len(extension)-1:])]\n\
    \        extension := extension[:len(extension)-len(extension[len(extension)-1:])]\n\
    \        extension := extension[:len(extension)-len(extension[len(extension)-1:])]\n\
    \        extension := extension[:len(extension)-len(extension[len(extension)-1:])]\n\
    \        extension := extension[:len(extension)-len(extension[len(extension)-1:])]\n\
    \        extension := extension[:len(extension)-len(extension[len(extension)-1:])]\n\
    \        extension := extension[:len(extension)-len(extension[len(extension)-1:])]\n\
    \nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpc9375z47_test.go:55:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074952
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return \"\"\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpclu215ww_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return class_name\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'Watashi.eIGHt8OKe', got 'Watashi'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got 'Boku123'\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE'\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n \
    \       tmp8oo0jeyv_test.go:50: expected 'K.TAR', got 'K'\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected '__HAHA.123', got '__HAHA'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected 'YameRore.okIWILL123', got 'YameRore'\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'finNNalLLly.WoW', got 'finNNalLLly'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected '_.Bb', got '_'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'Sp.671235', got 'Sp'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return \"\"\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpclu215ww_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return \"\"\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpclu215ww_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Write your code here\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \nfunc TestStrongest_Extension(t *testing.T)\
    \ {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpfz3xqgek_test.go:278:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074952
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \nfunc TestStrongest_Extension(t *testing.T) {\n\
    \  candidate := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpy_gbvp82_test.go:278:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074952
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Write your code here\n    \n \
    \   \n    return \"\"\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpyu4w2ykv_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpyu4w2ykv_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpyu4w2ykv_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpyu4w2ykv_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpyu4w2ykv_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpyu4w2ykv_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpyu4w2ykv_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpyu4w2ykv_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpyu4w2ykv_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 2
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    // Initialize\
    \ a map to store the extension strength\n    m := make(map[string]int)\n    \n\
    \    // Iterate over the extensions and update the map\n    for _, extension :=\
    \ range extensions {\n        c := extension[0]\n        s := extension[1]\n \
    \       \n        // Update the map\n        m[extension] = m[extension] + c -\
    \ s\n    }\n    \n    // Sort the map by strength\n    sort.Sort(sort.Reverse(sort.IntSlice(m)))\n\
    \    \n    // Return the first extension\n    for _, extension := range m {\n\
    \        if m[extension] == 0 {\n            return class_name + extension\n \
    \       }\n    }\n    \n    // No extensions found\n    return class_name\n}\n\
    \nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkxfjdx7h_test.go:34:24: invalid operation: m[extension] + c (mismatched
    types int and byte)

    /tmp/tmpkxfjdx7h_test.go:38:5: undefined: sort

    /tmp/tmpkxfjdx7h_test.go:42:14: cannot use extension (variable of type int) as
    type string in map index

    /tmp/tmpkxfjdx7h_test.go:43:20: invalid operation: class_name + extension (mismatched
    types string and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return \"\"\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpclu215ww_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return class_name\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'Watashi.eIGHt8OKe', got 'Watashi'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got 'Boku123'\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE'\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n \
    \       tmp8oo0jeyv_test.go:50: expected 'K.TAR', got 'K'\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected '__HAHA.123', got '__HAHA'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected 'YameRore.okIWILL123', got 'YameRore'\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'finNNalLLly.WoW', got 'finNNalLLly'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmp8oo0jeyv_test.go:50:\
    \ expected '_.Bb', got '_'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmp8oo0jeyv_test.go:50: expected 'Sp.671235', got 'Sp'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return \"\"\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpclu215ww_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return \"\"\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpclu215ww_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpclu215ww_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpclu215ww_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Write your code here\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \nfunc TestStrongest_Extension(t *testing.T)\
    \ {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpfz3xqgek_test.go:278:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074952
