language: go_test.go
name: HumanEval_115_max_fill
results:
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    m := make([][]int, len(grid))\n    for i :=\
    \ range m {\n        m[i] = make([]int, len(grid[i]))\n    }\n    for i := range\
    \ m {\n        for j := range m[i] {\n            m[i][j] = grid[i][j]\n     \
    \   }\n    }\n    max := 0\n    for i := range m {\n        for j := range m[i]\
    \ {\n            if m[i][j] == 0 {\n                max += 1\n               \
    \ for k := range m[i+1:] {\n                    m[i+k][j] = 0\n              \
    \  }\n            }\n        }\n    }\n    return max\n}\n</code>\n<|/ a tags=algorithm,dynamic-programming,greedy,mathematical-optimization,algorithm\
    \ |>\n<| c |>\nThis doesn't work. Try it on [this example](https://gist.github.com/anonymous/f709d35d67c50a1b7a2e).\n\
    <|/ c |>\n<| c |>\nI see what you mean. I've updated the answer to fix the bugs.\n\
    <|/ c |>\n<| c |>\nI still don't think this works. Try it on [this example](https://gist.github.com/anonymous/f709d35d67c50a1b7a2e).\n\
    <|/ c |>\n<| c |>\nI see what you mean. I've updated the answer to fix the bugs.\n\
    <|/ c |>\n<| a dscore=0 |>\nThis problem can be solved using dynamic programming.\n\
    Let dp[i][j] be the maximum number of water that can be extracted from well i\
    \ to j. \ndp[i][j] can be calculated using two recursive calls:\n<code>\ndp[i][j]\
    \ = max(dp[i+1][j], dp[i][j-1])\n</code>\nand\n<code>\ndp[i][j] = max(dp[i][j-1],\
    \ dp[i-1][j])\n</code>\nThe base case is dp[0][j], which can be calculated using\
    \ two recursive calls:\n<code>\ndp[0][j] = max(dp[0][j-1], dp[0][j-1])\n</code>\n\
    and\n<code>\ndp[0][j] = max(dp[0][j-1], dp[0][j-1])\n</code>\nThe base case is\
    \ dp[0][0]. \nThe recursive calls are used to calculate the maximum water that\
    \ can be extracted from any well to any well. \nThe base case is dp[i][j], which\
    \ can be calculated using two recursive calls:\n<code>\ndp[i][j] = max(dp[i+1][j],\
    \ dp[i][j-1])\n</code>\nand\n<code>\ndp[i][j] = max(dp[i][j-1], dp[i-1][j])\n\
    </code>\nThe base case is dp[0][j], which can be calculated using two recursive\
    \ calls:\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0, 1,\
    \ 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmppmhkffff_test.go:46:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073556
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0,\
    \ 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_qcfbkl5_test.go:281:6: expected ''('', found TestMax_Fill

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073556
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    // write your code here\n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0,\
    \ 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2jwy5h3s_test.go:279:6: expected ''('', found TestMax_Fill

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073556
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    // Write your code here.\n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \nfunc TestMax_Fill(t *testing.T) {\n  candidate\
    \ := max_fill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0},\
    \ []int{0, 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2snpt852_test.go:279:6: expected ''('', found TestMax_Fill

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073556
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    // Your code here\n    \n    return\
    \ 0\n}\n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0, 1,\
    \ 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMax_Fill (0.00s)\n    --- FAIL: TestMax_Fill/test_num__0\
    \ (0.00s)\n        tmpifuqtjf0_test.go:47: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMax_Fill/test_num__1 (0.00s)\n        tmpifuqtjf0_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestMax_Fill/test_num__3\
    \ (0.00s)\n        tmpifuqtjf0_test.go:47: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMax_Fill/test_num__4 (0.00s)\n        tmpifuqtjf0_test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.007s\nFAIL\n"
  timestamp: 1660073558
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0,\
    \ 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_qcfbkl5_test.go:281:6: expected ''('', found TestMax_Fill

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073556
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    // Your code here\n    \n    return\
    \ 0\n}\n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0, 1,\
    \ 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMax_Fill (0.00s)\n    --- FAIL: TestMax_Fill/test_num__0\
    \ (0.00s)\n        tmpifuqtjf0_test.go:47: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMax_Fill/test_num__1 (0.00s)\n        tmpifuqtjf0_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestMax_Fill/test_num__3\
    \ (0.00s)\n        tmpifuqtjf0_test.go:47: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMax_Fill/test_num__4 (0.00s)\n        tmpifuqtjf0_test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.007s\nFAIL\n"
  timestamp: 1660073558
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    // write your code here\n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0,\
    \ 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2jwy5h3s_test.go:279:6: expected ''('', found TestMax_Fill

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073556
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0,\
    \ 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_qcfbkl5_test.go:281:6: expected ''('', found TestMax_Fill

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073556
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0,\
    \ 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_qcfbkl5_test.go:281:6: expected ''('', found TestMax_Fill

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073556
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    // Your code here\n    \n    return\
    \ 0\n}\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0, 1,\
    \ 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMax_Fill (0.00s)\n    --- FAIL: TestMax_Fill/test_num__0\
    \ (0.00s)\n        tmpudee7f7e_test.go:46: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMax_Fill/test_num__1 (0.00s)\n        tmpudee7f7e_test.go:46:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestMax_Fill/test_num__3\
    \ (0.00s)\n        tmpudee7f7e_test.go:46: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMax_Fill/test_num__4 (0.00s)\n        tmpudee7f7e_test.go:46:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073558
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    m := make([][]int, len(grid))\n    for i :=\
    \ range m {\n        m[i] = make([]int, len(grid[i]))\n    }\n    m := m[:]\n\
    \    for i := range m {\n        for j := range m[i] {\n            m[i][j] =\
    \ grid[i][j]\n        }\n    }\n    m := m[:]\n    for i := range m {\n      \
    \  for j := range m[i] {\n            if m[i][j] == 1 {\n                capacity\
    \ -= 1\n            }\n        }\n    }\n    return capacity\n}\n</code>\n<|/\
    \ a dscore=0 |>\n<| a dscore=0 |>\n<code>\npackage main\n\nimport (\n    \"fmt\"\
    \n    \"math\"\n)\n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0,\
    \ 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmptudyfwrw_test.go:44:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073556
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0,\
    \ 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_qcfbkl5_test.go:281:6: expected ''('', found TestMax_Fill

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073556
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    // write your code here\n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0,\
    \ 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2jwy5h3s_test.go:279:6: expected ''('', found TestMax_Fill

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073556
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0,\
    \ 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_qcfbkl5_test.go:281:6: expected ''('', found TestMax_Fill

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073556
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0,\
    \ 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_qcfbkl5_test.go:281:6: expected ''('', found TestMax_Fill

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073556
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    result := 0\n    \n    for i := 0; i < len(grid);\
    \ i++ {\n        for j := 0; j < len(grid[0]); j++ {\n            if grid[i][j]\
    \ == 1 {\n                grid[i][j] = 0\n                result += 1\n      \
    \      }\n        }\n    }\n    \n    return result\n}\n\nfunc TestMax_Fill(t\
    \ *testing.T) {\n  candidate := max_fill\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 0}, []int{0, 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     {\
    \ actual: candidate([][]int{[]int{0, 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1,\
    \ 1, 1}, []int{0, 1, 1, 1}}, 2), expected: 5 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 0}, []int{0, 0, 0}}, 5), expected: 0 },\n     { actual: candidate([][]int{[]int{1,\
    \ 1, 1, 1}, []int{1, 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1,\
    \ 1, 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMax_Fill (0.00s)\n    --- FAIL: TestMax_Fill/test_num__1\
    \ (0.00s)\n        tmppskluij8_test.go:55: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestMax_Fill/test_num__3 (0.00s)\n        tmppskluij8_test.go:55:\
    \ expected '%!s(int=4)', got '%!s(int=8)'\n    --- FAIL: TestMax_Fill/test_num__4\
    \ (0.00s)\n        tmppskluij8_test.go:55: expected '%!s(int=2)', got '%!s(int=8)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073558
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    // write your code here\n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0,\
    \ 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2jwy5h3s_test.go:279:6: expected ''('', found TestMax_Fill

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073556
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    // Your code here\n    \n    \n    return\
    \ 0\n}\n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0, 1,\
    \ 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMax_Fill (0.00s)\n    --- FAIL: TestMax_Fill/test_num__0\
    \ (0.00s)\n        tmpq3eee1w5_test.go:48: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMax_Fill/test_num__1 (0.00s)\n        tmpq3eee1w5_test.go:48:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestMax_Fill/test_num__3\
    \ (0.00s)\n        tmpq3eee1w5_test.go:48: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMax_Fill/test_num__4 (0.00s)\n        tmpq3eee1w5_test.go:48:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073558
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0,\
    \ 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_qcfbkl5_test.go:281:6: expected ''('', found TestMax_Fill

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073556
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    m := len(grid)\n    n := len(grid[0])\n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0,\
    \ 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpf3du47l2_test.go:276:6: expected ''('', found TestMax_Fill

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073556
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0,\
    \ 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_qcfbkl5_test.go:281:6: expected ''('', found TestMax_Fill

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073556
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0,\
    \ 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_qcfbkl5_test.go:281:6: expected ''('', found TestMax_Fill

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073556
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0,\
    \ 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_qcfbkl5_test.go:281:6: expected ''('', found TestMax_Fill

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073556
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    // Your code here\n    \n    return\
    \ 0\n}\n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0, 1,\
    \ 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMax_Fill (0.00s)\n    --- FAIL: TestMax_Fill/test_num__0\
    \ (0.00s)\n        tmpifuqtjf0_test.go:47: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMax_Fill/test_num__1 (0.00s)\n        tmpifuqtjf0_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestMax_Fill/test_num__3\
    \ (0.00s)\n        tmpifuqtjf0_test.go:47: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMax_Fill/test_num__4 (0.00s)\n        tmpifuqtjf0_test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.007s\nFAIL\n"
  timestamp: 1660073558
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    // Your code here\n    \n    return\
    \ 0\n}\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0, 1,\
    \ 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMax_Fill (0.00s)\n    --- FAIL: TestMax_Fill/test_num__0\
    \ (0.00s)\n        tmpudee7f7e_test.go:46: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMax_Fill/test_num__1 (0.00s)\n        tmpudee7f7e_test.go:46:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestMax_Fill/test_num__3\
    \ (0.00s)\n        tmpudee7f7e_test.go:46: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMax_Fill/test_num__4 (0.00s)\n        tmpudee7f7e_test.go:46:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073558
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0,\
    \ 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_qcfbkl5_test.go:281:6: expected ''('', found TestMax_Fill

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073556
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0,\
    \ 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_qcfbkl5_test.go:281:6: expected ''('', found TestMax_Fill

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073556
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0,\
    \ 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_qcfbkl5_test.go:281:6: expected ''('', found TestMax_Fill

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073556
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0,\
    \ 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_qcfbkl5_test.go:281:6: expected ''('', found TestMax_Fill

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073556
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    // Write your code here\n    \n    return\
    \ 0\n}\n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0, 1,\
    \ 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMax_Fill (0.00s)\n    --- FAIL: TestMax_Fill/test_num__0\
    \ (0.00s)\n        tmp2wb2x26g_test.go:47: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMax_Fill/test_num__1 (0.00s)\n        tmp2wb2x26g_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestMax_Fill/test_num__3\
    \ (0.00s)\n        tmp2wb2x26g_test.go:47: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMax_Fill/test_num__4 (0.00s)\n        tmp2wb2x26g_test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073558
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0,\
    \ 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_qcfbkl5_test.go:281:6: expected ''('', found TestMax_Fill

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073556
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    result := 0\n    for _, row := range grid\
    \ {\n        for _, value := range row {\n            if value == 1 {\n      \
    \          result += 1\n            }\n        }\n    }\n    return result\n}\n\
    \nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0, 1, 0, 0}, []int{1,\
    \ 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0, 0,\
    \ 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMax_Fill (0.00s)\n    --- FAIL: TestMax_Fill/test_num__1\
    \ (0.00s)\n        tmp223j73gb_test.go:52: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestMax_Fill/test_num__3 (0.00s)\n        tmp223j73gb_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=8)'\n    --- FAIL: TestMax_Fill/test_num__4\
    \ (0.00s)\n        tmp223j73gb_test.go:52: expected '%!s(int=2)', got '%!s(int=8)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073558
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    // Your code here\n    \n    \n    return\
    \ 0\n}\n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0, 1,\
    \ 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMax_Fill (0.00s)\n    --- FAIL: TestMax_Fill/test_num__0\
    \ (0.00s)\n        tmpq3eee1w5_test.go:48: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMax_Fill/test_num__1 (0.00s)\n        tmpq3eee1w5_test.go:48:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestMax_Fill/test_num__3\
    \ (0.00s)\n        tmpq3eee1w5_test.go:48: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMax_Fill/test_num__4 (0.00s)\n        tmpq3eee1w5_test.go:48:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073558
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0,\
    \ 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_qcfbkl5_test.go:281:6: expected ''('', found TestMax_Fill

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073556
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0,\
    \ 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_qcfbkl5_test.go:281:6: expected ''('', found TestMax_Fill

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073556
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    result := 0\n    for _, row := range grid\
    \ {\n        for _, bucket := range row {\n            if bucket == 0 {\n    \
    \            result += 1\n            }\n        }\n    }\n    return result\n\
    }\n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0, 1, 0, 0}, []int{1,\
    \ 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0, 0,\
    \ 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMax_Fill (0.00s)\n    --- FAIL: TestMax_Fill/test_num__1\
    \ (0.00s)\n        tmpg6qnvk78_test.go:52: expected '%!s(int=5)', got '%!s(int=7)'\n\
    \    --- FAIL: TestMax_Fill/test_num__2 (0.00s)\n        tmpg6qnvk78_test.go:52:\
    \ expected '%!s(int=0)', got '%!s(int=6)'\n    --- FAIL: TestMax_Fill/test_num__3\
    \ (0.00s)\n        tmpg6qnvk78_test.go:52: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMax_Fill/test_num__4 (0.00s)\n        tmpg6qnvk78_test.go:52:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073558
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0,\
    \ 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_qcfbkl5_test.go:281:6: expected ''('', found TestMax_Fill

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073556
- exit_code: 2
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    m := len(grid)\n    n := len(grid[0])\n  \
    \  \n    // initialize all buckets to capacity\n    buckets := make([][]int, m)\n\
    \    for i := 0; i < m; i++ {\n        buckets[i] = make([]int, n)\n        for\
    \ j := 0; j < n; j++ {\n            buckets[i][j] = capacity\n        }\n    }\n\
    \    \n    // fill buckets\n    for i := 0; i < m; i++ {\n        for j := 0;\
    \ j < n; j++ {\n            if grid[i][j] == 1 {\n                buckets[i][j]\
    \ -= 1\n            }\n        }\n    }\n    \n    // find max bucket index\n\
    \    maxIndex := 0\n    for i := 0; i < m; i++ {\n        for j := 0; j < n; j++\
    \ {\n            if buckets[i][j] == 0 {\n                maxIndex = i\n     \
    \           break\n            }\n        }\n    }\n    \n    // fill empty buckets\n\
    \    for i := 0; i < m; i++ {\n        for j := 0; j < n; j++ {\n            if\
    \ buckets[i][j] == 0 {\n                buckets[i][j] = capacity\n           \
    \ }\n        }\n    }\n    \n    // find max bucket index\n    maxIndex := 0\n\
    \    for i := 0; i < m; i++ {\n        for j := 0; j < n; j++ {\n            if\
    \ buckets[i][j] == 0 {\n                maxIndex = i\n                break\n\
    \            }\n        }\n    }\n    \n    // fill empty buckets\n    for i :=\
    \ 0; i < m; i++ {\n        for j := 0; j < n; j++ {\n            if buckets[i][j]\
    \ == 0 {\n                buckets[i][j] = capacity\n            }\n        }\n\
    \    }\n    \n    return maxIndex\n}\n\nfunc TestMax_Fill(t *testing.T) {\n  candidate\
    \ := max_fill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0},\
    \ []int{0, 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg__sbmbc_test.go:66:14: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073557
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    // write your code here\n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0,\
    \ 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2jwy5h3s_test.go:279:6: expected ''('', found TestMax_Fill

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073556
- exit_code: 2
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    result := 0\n    \n    for _, row := range\
    \ grid {\n        result += max_fill_row(row, capacity)\n    }\n    \n    return\
    \ result\n}\n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0,\
    \ 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu0dxh7qp_test.go:27:19: undefined: max_fill_row

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073557
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0,\
    \ 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_qcfbkl5_test.go:281:6: expected ''('', found TestMax_Fill

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073556
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    // write your code here\n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0,\
    \ 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2jwy5h3s_test.go:279:6: expected ''('', found TestMax_Fill

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073556
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0,\
    \ 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_qcfbkl5_test.go:281:6: expected ''('', found TestMax_Fill

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073556
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    // Your code here\n    \n    return\
    \ 0\n}\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0, 1,\
    \ 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMax_Fill (0.00s)\n    --- FAIL: TestMax_Fill/test_num__0\
    \ (0.00s)\n        tmpudee7f7e_test.go:46: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMax_Fill/test_num__1 (0.00s)\n        tmpudee7f7e_test.go:46:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestMax_Fill/test_num__3\
    \ (0.00s)\n        tmpudee7f7e_test.go:46: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMax_Fill/test_num__4 (0.00s)\n        tmpudee7f7e_test.go:46:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073558
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0,\
    \ 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_qcfbkl5_test.go:281:6: expected ''('', found TestMax_Fill

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073556
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    // write your code here\n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0,\
    \ 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2jwy5h3s_test.go:279:6: expected ''('', found TestMax_Fill

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073556
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0,\
    \ 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_qcfbkl5_test.go:281:6: expected ''('', found TestMax_Fill

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073556
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0,\
    \ 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_qcfbkl5_test.go:281:6: expected ''('', found TestMax_Fill

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073556
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    // write your code here\n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0,\
    \ 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2jwy5h3s_test.go:279:6: expected ''('', found TestMax_Fill

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073556
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    // init all buckets to capacity\n  \
    \  grid := make([][]int, len(grid))\n    for i := range grid {\n        grid[i]\
    \ = make([]int, capacity)\n    }\n    \n    // init all buckets to capacity\n\
    \    for i := range grid {\n        for j := range grid[i] {\n            grid[i][j]\
    \ = capacity\n        }\n    }\n    \n    // init all buckets to capacity\n  \
    \  for i := range grid {\n        for j := range grid[i] {\n            grid[i][j]\
    \ = capacity\n        }\n    }\n    \n    // init all buckets to capacity\n  \
    \  for i := range grid {\n        for j := range grid[i] {\n            grid[i][j]\
    \ = capacity\n        }\n    }\n    \n    // init all buckets to capacity\n  \
    \  for i := range grid {\n        for j := range grid[i] {\n            grid[i][j]\
    \ = capacity\n        }\n    }\n    \n    // init all buckets to capacity\n  \
    \  for i := range grid {\n        for j := range grid[i] {\n            grid[i][j]\
    \ = capacity\n        }\n    }\n    \n    // init all buckets to capacity\n  \
    \  for i := range grid {\n        for j := range grid[i] {\n            grid[i][j]\
    \ = capacity\n        }\n    }\n    \n    // init all buckets to capacity\n  \
    \  for i := range grid {\n        for j := range grid[i] {\n            grid[i][j]\
    \ = capacity\n        }\n    }\n    \n    // init all buckets to capacity\n  \
    \  for i := range grid {\n        for j := range grid[i] {\n            grid[i][j]\
    \ = capacity\n        }\n    }\n    \n    // init all buckets to capacity\n  \
    \  for i := range grid {\n        for j := range grid[i] {\n            grid[i][j]\
    \ = capacity\n        }\n    }\n    \n    // init all buckets to capacity\n  \
    \  for i := range grid {\n        for j := range grid[i] {\n            grid[i][j]\
    \ = capacity\n        }\n    }\n    \n    // init all buckets to capacity\n  \
    \  for i := range grid {\n        for j := range grid[i] {\n            grid[i][j]\
    \ = capacity\n        }\n    }\n    \n    // init all buckets to capacity\n  \
    \  for i := range grid {\n        for j := range grid[i] {\n            grid[i][j]\
    \ = capacity\n        }\n    }\n    \n    // init all buckets to capacity\n  \
    \  for i := range grid {\n        for j := range grid[i] {\n            grid[i][j]\
    \ = capacity\n        }\n    }\n    \n    // init all buckets to capacity\n  \
    \  for i := range grid {\n        for j := range grid[i] {\n            grid[i][j]\
    \ = capacity\n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0,\
    \ 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpivc6chpf_test.go:127:6: expected ''('', found TestMax_Fill

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073556
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0,\
    \ 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_qcfbkl5_test.go:281:6: expected ''('', found TestMax_Fill

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073556
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0,\
    \ 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_qcfbkl5_test.go:281:6: expected ''('', found TestMax_Fill

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073556
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    // Your code here\n    \n    return\
    \ 0\n}\n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0, 1,\
    \ 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMax_Fill (0.00s)\n    --- FAIL: TestMax_Fill/test_num__0\
    \ (0.00s)\n        tmpifuqtjf0_test.go:47: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMax_Fill/test_num__1 (0.00s)\n        tmpifuqtjf0_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestMax_Fill/test_num__3\
    \ (0.00s)\n        tmpifuqtjf0_test.go:47: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMax_Fill/test_num__4 (0.00s)\n        tmpifuqtjf0_test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.007s\nFAIL\n"
  timestamp: 1660073558
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    m := make([][]int, len(grid))\n    for i :=\
    \ range m {\n        m[i] = make([]int, len(grid[i]))\n    }\n    for i := range\
    \ m {\n        for j := range m[i] {\n            m[i][j] = grid[i][j]\n     \
    \   }\n    }\n    \n    m := make([][]int, len(grid))\n    for i := range m {\n\
    \        m[i] = make([]int, len(grid[i]))\n    }\n    for i := range m {\n   \
    \     for j := range m[i] {\n            m[i][j] = grid[i][j]\n        }\n   \
    \ }\n    \n    m := make([][]int, len(grid))\n    for i := range m {\n       \
    \ m[i] = make([]int, len(grid[i]))\n    }\n    for i := range m {\n        for\
    \ j := range m[i] {\n            m[i][j] = grid[i][j]\n        }\n    }\n    \n\
    \    m := make([][]int, len(grid))\n    for i := range m {\n        m[i] = make([]int,\
    \ len(grid[i]))\n    }\n    for i := range m {\n        for j := range m[i] {\n\
    \            m[i][j] = grid[i][j]\n        }\n    }\n    \n    m := make([][]int,\
    \ len(grid))\n    for i := range m {\n        m[i] = make([]int, len(grid[i]))\n\
    \    }\n    for i := range m {\n        for j := range m[i] {\n            m[i][j]\
    \ = grid[i][j]\n        }\n    }\n    \n    m := make([][]int, len(grid))\n  \
    \  for i := range m {\n        m[i] = make([]int, len(grid[i]))\n    }\n    for\
    \ i := range m {\n        for j := range m[i] {\n            m[i][j] = grid[i][j]\n\
    \        }\n    }\n    \n    m := make([][]int, len(grid))\n    for i := range\
    \ m {\n        m[i] = make([]int, len(grid[i]))\n    }\n    for i := range m {\n\
    \        for j := range m[i] {\n            m[i][j] = grid[i][j]\n        }\n\
    \    }\n    \n    m := make([][]int, len(grid))\n    for i := range m {\n    \
    \    m[i] = make([]int, len(grid[i]))\n    }\n    for i := range m {\n       \
    \ for j := range m[i] {\n            m[i][j] = grid[i][j]\n        }\n    }\n\
    \    \n    m := make([][]int, len(grid))\n    for i := range m {\n        m[i]\
    \ = make([]int, len(grid[i]))\n    }\n    for i := range m {\n        for j \n\
    func TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0, 1, 0, 0}, []int{1,\
    \ 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0, 0,\
    \ 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmph4d6zsrd_test.go:110:6: expected ''('', found TestMax_Fill

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073556
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    // Your code here\n    \n    return\
    \ 0\n}\n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0, 1,\
    \ 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMax_Fill (0.00s)\n    --- FAIL: TestMax_Fill/test_num__0\
    \ (0.00s)\n        tmpifuqtjf0_test.go:47: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMax_Fill/test_num__1 (0.00s)\n        tmpifuqtjf0_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestMax_Fill/test_num__3\
    \ (0.00s)\n        tmpifuqtjf0_test.go:47: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMax_Fill/test_num__4 (0.00s)\n        tmpifuqtjf0_test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.007s\nFAIL\n"
  timestamp: 1660073558
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    // Your code here\n    \n    return\
    \ 0\n}\n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0, 1,\
    \ 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMax_Fill (0.00s)\n    --- FAIL: TestMax_Fill/test_num__0\
    \ (0.00s)\n        tmpifuqtjf0_test.go:47: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMax_Fill/test_num__1 (0.00s)\n        tmpifuqtjf0_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestMax_Fill/test_num__3\
    \ (0.00s)\n        tmpifuqtjf0_test.go:47: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMax_Fill/test_num__4 (0.00s)\n        tmpifuqtjf0_test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.007s\nFAIL\n"
  timestamp: 1660073558
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0,\
    \ 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_qcfbkl5_test.go:281:6: expected ''('', found TestMax_Fill

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073556
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0,\
    \ 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_qcfbkl5_test.go:281:6: expected ''('', found TestMax_Fill

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073556
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    m := len(grid)\n    n := len(grid[0])\n  \
    \  \n    // init all buckets\n    var buckets [][]int\n    for i := 0; i < m;\
    \ i++ {\n        buckets = append(buckets, make([]int, n))\n    }\n    \n    //\
    \ init all buckets\n    for i := 0; i < m; i++ {\n        for j := 0; j < n; j++\
    \ {\n            buckets[i][j] = grid[i][j]\n        }\n    }\n    \n    // init\
    \ all buckets\n    for i := 0; i < m; i++ {\n        for j := 0; j < n; j++ {\n\
    \            if buckets[i][j] == 0 {\n                buckets[i][j] = capacity\n\
    \            }\n        }\n    }\n    \n    // init all buckets\n    for i :=\
    \ 0; i < m; i++ {\n        for j := 0; j < n; j++ {\n            if buckets[i][j]\
    \ == capacity {\n                buckets[i][j] = 0\n            }\n        }\n\
    \    }\n    \n    // init all buckets\n    for i := 0; i < m; i++ {\n        for\
    \ j := 0; j < n; j++ {\n            if buckets[i][j] == 0 {\n                buckets[i][j]\
    \ = capacity\n            }\n        }\n    }\n    \n    // init all buckets\n\
    \    for i := 0; i < m; i++ {\n        for j := 0; j < n; j++ {\n            if\
    \ buckets[i][j] == capacity {\n                buckets[i][j] = 0\n           \
    \ }\n        }\n    }\n    \n    // init all buckets\n    for i := 0; i < m; i++\
    \ {\n        for j := 0; j < n; j++ {\n            if buckets[i][j] == 0 {\n \
    \               buckets[i][j] = capacity\n            }\n        }\n    }\n  \
    \  \n    // init all buckets\n    for i := 0; i < m; i++ {\n        for j := 0;\
    \ j < n; j++ {\n            if buckets[i][j] == capacity {\n                buckets[i][j]\
    \ = 0\n            }\n        }\n    }\n    \n    // init all buckets\n    for\
    \ i := 0; i < m; i++ {\n        for j := 0; j < n; j++ {\n            if buckets[i][j]\
    \ == 0 {\n                buckets[i][j] = capacity\n            }\n        }\n\
    \    }\n    \n    // init all buckets\n    for i := 0; i < m; i++ {\n        for\
    \ j := 0; j < n; j++ {\n            if buckets[i][j] == capacity {\n         \
    \       buckets[i][j] = 0\n            }\n        }\n    }\n    \n    // init\
    \ all buckets\n    for i := 0; i < m; i++ {\n        for j := 0; j < n; j++ {\n\
    \            if buckets[i][j] == 0 {\n                buckets[i][j] = \nfunc TestMax_Fill(t\
    \ *testing.T) {\n  candidate := max_fill\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 0}, []int{0, 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     {\
    \ actual: candidate([][]int{[]int{0, 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1,\
    \ 1, 1}, []int{0, 1, 1, 1}}, 2), expected: 5 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 0}, []int{0, 0, 0}}, 5), expected: 0 },\n     { actual: candidate([][]int{[]int{1,\
    \ 1, 1, 1}, []int{1, 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1,\
    \ 1, 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp27asxjir_test.go:117:6: expected ''('', found TestMax_Fill

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073556
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    m := make([][]int, len(grid))\n    for i :=\
    \ range m {\n        m[i] = make([]int, len(grid[i]))\n    }\n    for i := range\
    \ m {\n        for j := range m[i] {\n            m[i][j] = grid[i][j]\n     \
    \   }\n    }\n    max := 0\n    for i := range m {\n        for j := range m[i]\
    \ {\n            if m[i][j] == 0 {\n                max += 1\n               \
    \ for k := range m[:i] {\n                    m[k][j] = 0\n                }\n\
    \                for k := range m[i+1:] {\n                    m[k][j] = 0\n \
    \               }\n            }\n        }\n    }\n    return max\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThis doesn't work. Try it with the example in the\
    \ question. Your code will output `1` instead of `3`.\n<|/ c |>\n<| c |>\nI tested\
    \ it with the example in the question and it works. I added a link to the code\
    \ in the answer.\n<|/ c |>\n<| c |>\nI tested it with the example in the question\
    \ and it works. I added a link to the code in the answer.\n<|/ c |>\n<| c |>\n\
    I tested it with the example in the question and it works. I added a link to the\
    \ code in the answer.\n<|/ c |>\n<| c |>\nI tested it with the example in the\
    \ question and it works. I added a link to the code in the answer.\n<|/ c |>\n\
    <| a dscore=0 |>\n<code>\npackage main\n\nimport (\n    \"fmt\"\n    \"math\"\n\
    )\n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0, 1, 0, 0}, []int{1,\
    \ 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0, 0,\
    \ 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcz6mzun1_test.go:49:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073556
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    // Your code here\n    \n    \n    return\
    \ 0\n}\n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0, 1,\
    \ 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMax_Fill (0.00s)\n    --- FAIL: TestMax_Fill/test_num__0\
    \ (0.00s)\n        tmpq3eee1w5_test.go:48: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMax_Fill/test_num__1 (0.00s)\n        tmpq3eee1w5_test.go:48:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestMax_Fill/test_num__3\
    \ (0.00s)\n        tmpq3eee1w5_test.go:48: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMax_Fill/test_num__4 (0.00s)\n        tmpq3eee1w5_test.go:48:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073558
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    // Your code here\n    \n    \n    return\
    \ 0\n}\n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0, 1,\
    \ 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMax_Fill (0.00s)\n    --- FAIL: TestMax_Fill/test_num__0\
    \ (0.00s)\n        tmpq3eee1w5_test.go:48: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMax_Fill/test_num__1 (0.00s)\n        tmpq3eee1w5_test.go:48:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestMax_Fill/test_num__3\
    \ (0.00s)\n        tmpq3eee1w5_test.go:48: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMax_Fill/test_num__4 (0.00s)\n        tmpq3eee1w5_test.go:48:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073558
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    // Your code here\n    \n    return\
    \ 0\n}\n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0, 1,\
    \ 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMax_Fill (0.00s)\n    --- FAIL: TestMax_Fill/test_num__0\
    \ (0.00s)\n        tmpifuqtjf0_test.go:47: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMax_Fill/test_num__1 (0.00s)\n        tmpifuqtjf0_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestMax_Fill/test_num__3\
    \ (0.00s)\n        tmpifuqtjf0_test.go:47: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMax_Fill/test_num__4 (0.00s)\n        tmpifuqtjf0_test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.007s\nFAIL\n"
  timestamp: 1660073558
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0,\
    \ 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_qcfbkl5_test.go:281:6: expected ''('', found TestMax_Fill

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073556
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0,\
    \ 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_qcfbkl5_test.go:281:6: expected ''('', found TestMax_Fill

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073556
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    // write your code here\n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0,\
    \ 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2jwy5h3s_test.go:279:6: expected ''('', found TestMax_Fill

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073556
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0,\
    \ 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_qcfbkl5_test.go:281:6: expected ''('', found TestMax_Fill

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073556
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0,\
    \ 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_qcfbkl5_test.go:281:6: expected ''('', found TestMax_Fill

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073556
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    m := len(grid)\n    n := len(grid[0])\n  \
    \  \n    // initialize all buckets to capacity\n    b := make([][]int, m)\n  \
    \  for i := 0; i < m; i++ {\n        b[i] = make([]int, n)\n        for j := 0;\
    \ j < n; j++ {\n            b[i][j] = capacity\n        }\n    }\n    \n    //\
    \ fill buckets\n    for i := 0; i < m; i++ {\n        for j := 0; j < n; j++ {\n\
    \            if grid[i][j] == 1 {\n                b := b[i]\n               \
    \ for k := 0; k < n; k++ {\n                    if b[k] > capacity {\n       \
    \                 b[k] = capacity\n                    }\n                }\n\
    \            }\n        }\n    }\n    \n    // count number of times you need\
    \ to lower the buckets\n    count := 0\n    for i := 0; i < m; i++ {\n       \
    \ for j := 0; j < n; j++ {\n            if grid[i][j] == 0 {\n               \
    \ count += b[i][j]\n            }\n        }\n    }\n    \n    return count\n\
    }\n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0, 1, 0, 0}, []int{1,\
    \ 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0, 0,\
    \ 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMax_Fill (0.00s)\n    --- FAIL: TestMax_Fill/test_num__1\
    \ (0.00s)\n        tmpwex2u5g9_test.go:80: expected '%!s(int=5)', got '%!s(int=14)'\n\
    \    --- FAIL: TestMax_Fill/test_num__2 (0.00s)\n        tmpwex2u5g9_test.go:80:\
    \ expected '%!s(int=0)', got '%!s(int=30)'\n    --- FAIL: TestMax_Fill/test_num__3\
    \ (0.00s)\n        tmpwex2u5g9_test.go:80: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMax_Fill/test_num__4 (0.00s)\n        tmpwex2u5g9_test.go:80:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660073558
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    // Your code here\n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0,\
    \ 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpfar_w0_2_test.go:279:6: expected ''('', found TestMax_Fill

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073556
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    m := make(map[int]int)\n    for _, row :=\
    \ range grid {\n        for _, v := range row {\n            m[v]++\n        }\n\
    \    }\n    \n    for i := 0; i < capacity; i++ {\n        for _, row := range\
    \ grid {\n            for _, v := range row {\n                if m[v] < i {\n\
    \                    m[v] = i\n                }\n            }\n        }\n \
    \   }\n    \n    return len(m)\n}\n\nfunc TestMax_Fill(t *testing.T) {\n  candidate\
    \ := max_fill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0},\
    \ []int{0, 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMax_Fill (0.00s)\n    --- FAIL: TestMax_Fill/test_num__0\
    \ (0.00s)\n        tmpd9szqeog_test.go:61: expected '%!s(int=6)', got '%!s(int=2)'\n\
    \    --- FAIL: TestMax_Fill/test_num__1 (0.00s)\n        tmpd9szqeog_test.go:61:\
    \ expected '%!s(int=5)', got '%!s(int=2)'\n    --- FAIL: TestMax_Fill/test_num__2\
    \ (0.00s)\n        tmpd9szqeog_test.go:61: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestMax_Fill/test_num__3 (0.00s)\n        tmpd9szqeog_test.go:61:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestMax_Fill/test_num__4\
    \ (0.00s)\n        tmpd9szqeog_test.go:61: expected '%!s(int=2)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073558
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    // write your code here\n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0,\
    \ 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpdi186yvm_test.go:279:6: expected ''('', found TestMax_Fill

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073556
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0,\
    \ 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_qcfbkl5_test.go:281:6: expected ''('', found TestMax_Fill

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073556
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    result := 0\n    \n    for i := 0; i < len(grid);\
    \ i++ {\n        for j := 0; j < len(grid[0]); j++ {\n            if grid[i][j]\
    \ == 1 {\n                result += 1\n                grid[i][j] = 0\n      \
    \          grid[j][i] = 0\n                grid[i][j] = capacity\n           \
    \     grid[j][i] = capacity\n            }\n        }\n    }\n    return result\n\
    }\n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0, 1, 0, 0}, []int{1,\
    \ 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0, 0,\
    \ 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMax_Fill (0.00s)\npanic: runtime error: index out of range\
    \ [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3]\
    \ with length 3\n\ngoroutine 4 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.max_fill(...)\n\t/tmp/tmp_cnroe84_test.go:31\n\
    command-line-arguments_test.TestMax_Fill(0x0?)\n\t/tmp/tmp_cnroe84_test.go:47\
    \ +0xd28\ntesting.tRunner(0xc000003d40, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073559
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0,\
    \ 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_qcfbkl5_test.go:281:6: expected ''('', found TestMax_Fill

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073556
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    // init buckets\n    buckets := make([][]int,\
    \ len(grid))\n    for i := range buckets {\n        buckets[i] = make([]int, capacity)\n\
    \    }\n    \n    // init max wells\n    maxWells := make([][]int, len(grid))\n\
    \    for i := range maxWells {\n        maxWells[i] = make([]int, capacity)\n\
    \    }\n    \n    // init max wells count\n    maxWellsCount := 0\n    \n    //\
    \ init max wells count\n    maxBucketsCount := 0\n    \n    // init max wells\
    \ count\n    maxWellsCount2 := 0\n    \n    // init max wells count\n    maxBucketsCount2\
    \ := 0\n    \n    // init max wells count\n    maxWellsCount3 := 0\n    \n   \
    \ // init max wells count\n    maxBucketsCount3 := 0\n    \n    // init max wells\
    \ count\n    maxWellsCount4 := 0\n    \n    // init max wells count\n    maxBucketsCount4\
    \ := 0\n    \n    // init max wells count\n    maxWellsCount5 := 0\n    \n   \
    \ // init max wells count\n    maxBucketsCount5 := 0\n    \n    // init max wells\
    \ count\n    maxWellsCount6 := 0\n    \n    // init max wells count\n    maxBucketsCount6\
    \ := 0\n    \n    // init max wells count\n    maxWellsCount7 := 0\n    \n   \
    \ // init max wells count\n    maxBucketsCount7 := 0\n    \n    // init max wells\
    \ count\n    maxWellsCount8 := 0\n    \n    // init max wells count\n    maxBucketsCount8\
    \ := 0\n    \n    // init max wells count\n    maxWellsCount9 := 0\n    \n   \
    \ // init max wells count\n    maxBucketsCount9 := 0\n    \n    // init max wells\
    \ count\n    maxWellsCount10 := 0\n    \n    // init max wells count\n    maxBucketsCount10\
    \ := 0\n    \n    // init max wells count\n    maxWellsCount11 := 0\n    \n  \
    \  // init max wells count\n    maxBucketsCount11 := 0\n    \n    // init max\
    \ wells count\n    maxWellsCount12 := 0\n    \n    // init max wells count\n \
    \   maxBucketsCount12 := 0\n    \n    // init max wells count\n    maxWellsCount13\
    \ := 0\n    \n    // init max wells count\n\nfunc TestMax_Fill(t *testing.T) {\n\
    \  candidate := max_fill\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 0}, []int{0, 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     {\
    \ actual: candidate([][]int{[]int{0, 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1,\
    \ 1, 1}, []int{0, 1, 1, 1}}, 2), expected: 5 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 0}, []int{0, 0, 0}}, 5), expected: 0 },\n     { actual: candidate([][]int{[]int{1,\
    \ 1, 1, 1}, []int{1, 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1,\
    \ 1, 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwdz41v6a_test.go:114:6: expected ''('', found TestMax_Fill

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073558
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0,\
    \ 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_qcfbkl5_test.go:281:6: expected ''('', found TestMax_Fill

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073556
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0,\
    \ 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_qcfbkl5_test.go:281:6: expected ''('', found TestMax_Fill

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073556
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    // Your code here\n    \n    return\
    \ 0\n}\n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0, 1,\
    \ 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMax_Fill (0.00s)\n    --- FAIL: TestMax_Fill/test_num__0\
    \ (0.00s)\n        tmpifuqtjf0_test.go:47: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMax_Fill/test_num__1 (0.00s)\n        tmpifuqtjf0_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestMax_Fill/test_num__3\
    \ (0.00s)\n        tmpifuqtjf0_test.go:47: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMax_Fill/test_num__4 (0.00s)\n        tmpifuqtjf0_test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.007s\nFAIL\n"
  timestamp: 1660073558
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    // write your code here\n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0,\
    \ 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpdi186yvm_test.go:279:6: expected ''('', found TestMax_Fill

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073556
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    // Your code here\n    \n    return\
    \ 0\n}\n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0, 1,\
    \ 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMax_Fill (0.00s)\n    --- FAIL: TestMax_Fill/test_num__0\
    \ (0.00s)\n        tmpifuqtjf0_test.go:47: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMax_Fill/test_num__1 (0.00s)\n        tmpifuqtjf0_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestMax_Fill/test_num__3\
    \ (0.00s)\n        tmpifuqtjf0_test.go:47: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMax_Fill/test_num__4 (0.00s)\n        tmpifuqtjf0_test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.007s\nFAIL\n"
  timestamp: 1660073558
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    // Your code here\n    \n    return\
    \ 0\n}\n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0, 1,\
    \ 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMax_Fill (0.00s)\n    --- FAIL: TestMax_Fill/test_num__0\
    \ (0.00s)\n        tmpifuqtjf0_test.go:47: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMax_Fill/test_num__1 (0.00s)\n        tmpifuqtjf0_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestMax_Fill/test_num__3\
    \ (0.00s)\n        tmpifuqtjf0_test.go:47: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMax_Fill/test_num__4 (0.00s)\n        tmpifuqtjf0_test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.007s\nFAIL\n"
  timestamp: 1660073558
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    result := 0\n    for _, row := range grid\
    \ {\n        for _, bucket := range row {\n            if bucket > capacity {\n\
    \                result += capacity - bucket\n            }\n        }\n    }\n\
    \    return result\n}\n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0,\
    \ 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMax_Fill (0.00s)\n    --- FAIL: TestMax_Fill/test_num__0\
    \ (0.00s)\n        tmpo102ytv5_test.go:52: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMax_Fill/test_num__1 (0.00s)\n        tmpo102ytv5_test.go:52:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestMax_Fill/test_num__3\
    \ (0.00s)\n        tmpo102ytv5_test.go:52: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMax_Fill/test_num__4 (0.00s)\n        tmpo102ytv5_test.go:52:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073559
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0,\
    \ 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_qcfbkl5_test.go:281:6: expected ''('', found TestMax_Fill

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073556
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    m := make([][]int, len(grid))\n    for i :=\
    \ range m {\n        m[i] = make([]int, len(grid[i]))\n    }\n    for i := range\
    \ m {\n        for j := range m[i] {\n            m[i][j] = grid[i][j]\n     \
    \   }\n    }\n    max := 0\n    for i := range m {\n        for j := range m[i]\
    \ {\n            if m[i][j] == 0 {\n                max += capacity\n        \
    \    }\n        }\n    }\n    return max\n}\n\nfunc TestMax_Fill(t *testing.T)\
    \ {\n  candidate := max_fill\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 0}, []int{0, 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     {\
    \ actual: candidate([][]int{[]int{0, 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1,\
    \ 1, 1}, []int{0, 1, 1, 1}}, 2), expected: 5 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 0}, []int{0, 0, 0}}, 5), expected: 0 },\n     { actual: candidate([][]int{[]int{1,\
    \ 1, 1, 1}, []int{1, 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1,\
    \ 1, 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMax_Fill (0.00s)\n    --- FAIL: TestMax_Fill/test_num__1\
    \ (0.00s)\n        tmpr3hq6yub_test.go:61: expected '%!s(int=5)', got '%!s(int=14)'\n\
    \    --- FAIL: TestMax_Fill/test_num__2 (0.00s)\n        tmpr3hq6yub_test.go:61:\
    \ expected '%!s(int=0)', got '%!s(int=30)'\n    --- FAIL: TestMax_Fill/test_num__3\
    \ (0.00s)\n        tmpr3hq6yub_test.go:61: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMax_Fill/test_num__4 (0.00s)\n        tmpr3hq6yub_test.go:61:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073559
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    m := make([][]int, len(grid))\n    for i :=\
    \ range m {\n        m[i] = make([]int, len(grid[i]))\n    }\n    \n    for i\
    \ := range m {\n        for j := range m[i] {\n            m[i][j] = grid[i][j]\n\
    \        }\n    }\n    \n    for i := range m {\n        for j := range m[i] {\n\
    \            if m[i][j] == 0 {\n                capacity -= m[i][j]\n        \
    \        m[i][j] = capacity\n            }\n        }\n    }\n    \n    return\
    \ len(m)\n}\n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0,\
    \ 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMax_Fill (0.00s)\n    --- FAIL: TestMax_Fill/test_num__0\
    \ (0.00s)\n        tmpq2w6cl2i_test.go:64: expected '%!s(int=6)', got '%!s(int=3)'\n\
    \    --- FAIL: TestMax_Fill/test_num__1 (0.00s)\n        tmpq2w6cl2i_test.go:64:\
    \ expected '%!s(int=5)', got '%!s(int=4)'\n    --- FAIL: TestMax_Fill/test_num__2\
    \ (0.00s)\n        tmpq2w6cl2i_test.go:64: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestMax_Fill/test_num__3 (0.00s)\n        tmpq2w6cl2i_test.go:64:\
    \ expected '%!s(int=4)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073559
- exit_code: 2
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    m := make([][]int, len(grid))\n    for i :=\
    \ range m {\n        m[i] = make([]int, len(grid[i]))\n    }\n    m := m[:len(grid)]\n\
    \    for i := range m {\n        for j := range m[i] {\n            m[i][j] =\
    \ grid[i][j]\n        }\n    }\n    m := m[:len(grid)]\n    for i := range m {\n\
    \        for j := range m[i] {\n            if m[i][j] == 0 {\n              \
    \  capacity -= 1\n            }\n        }\n    }\n    return capacity\n}\n\n\
    func TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0, 1, 0, 0}, []int{1,\
    \ 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0, 0,\
    \ 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpof_rboew_test.go:28:7: no new variables on left side of :=

    /tmp/tmpof_rboew_test.go:34:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073559
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0,\
    \ 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_qcfbkl5_test.go:281:6: expected ''('', found TestMax_Fill

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073556
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    // Write your code here\n    \n    return\
    \ 0\n}\n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0, 1,\
    \ 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMax_Fill (0.00s)\n    --- FAIL: TestMax_Fill/test_num__0\
    \ (0.00s)\n        tmp2wb2x26g_test.go:47: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMax_Fill/test_num__1 (0.00s)\n        tmp2wb2x26g_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestMax_Fill/test_num__3\
    \ (0.00s)\n        tmp2wb2x26g_test.go:47: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMax_Fill/test_num__4 (0.00s)\n        tmp2wb2x26g_test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073558
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    // Your code here\n    \n    return\
    \ 0\n}\n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0, 1,\
    \ 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMax_Fill (0.00s)\n    --- FAIL: TestMax_Fill/test_num__0\
    \ (0.00s)\n        tmpifuqtjf0_test.go:47: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMax_Fill/test_num__1 (0.00s)\n        tmpifuqtjf0_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestMax_Fill/test_num__3\
    \ (0.00s)\n        tmpifuqtjf0_test.go:47: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMax_Fill/test_num__4 (0.00s)\n        tmpifuqtjf0_test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.007s\nFAIL\n"
  timestamp: 1660073558
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0,\
    \ 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_qcfbkl5_test.go:281:6: expected ''('', found TestMax_Fill

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073556
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    m := make([][]int, len(grid))\n    for i :=\
    \ range m {\n        m[i] = make([]int, len(grid[i]))\n    }\n    for i := range\
    \ m {\n        for j := range m[i] {\n            m[i][j] = grid[i][j]\n     \
    \   }\n    }\n    max := 0\n    for i := range m {\n        for j := range m[i]\
    \ {\n            if m[i][j] == 0 {\n                max += capacity\n        \
    \    }\n        }\n    }\n    return max\n}\n\nfunc TestMax_Fill(t *testing.T)\
    \ {\n  candidate := max_fill\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 0}, []int{0, 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     {\
    \ actual: candidate([][]int{[]int{0, 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1,\
    \ 1, 1}, []int{0, 1, 1, 1}}, 2), expected: 5 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 0}, []int{0, 0, 0}}, 5), expected: 0 },\n     { actual: candidate([][]int{[]int{1,\
    \ 1, 1, 1}, []int{1, 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1,\
    \ 1, 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMax_Fill (0.00s)\n    --- FAIL: TestMax_Fill/test_num__1\
    \ (0.00s)\n        tmpr3hq6yub_test.go:61: expected '%!s(int=5)', got '%!s(int=14)'\n\
    \    --- FAIL: TestMax_Fill/test_num__2 (0.00s)\n        tmpr3hq6yub_test.go:61:\
    \ expected '%!s(int=0)', got '%!s(int=30)'\n    --- FAIL: TestMax_Fill/test_num__3\
    \ (0.00s)\n        tmpr3hq6yub_test.go:61: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMax_Fill/test_num__4 (0.00s)\n        tmpr3hq6yub_test.go:61:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073559
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    // Your code here\n    \n    return\
    \ 0\n}\n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0, 1,\
    \ 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMax_Fill (0.00s)\n    --- FAIL: TestMax_Fill/test_num__0\
    \ (0.00s)\n        tmpifuqtjf0_test.go:47: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMax_Fill/test_num__1 (0.00s)\n        tmpifuqtjf0_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestMax_Fill/test_num__3\
    \ (0.00s)\n        tmpifuqtjf0_test.go:47: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMax_Fill/test_num__4 (0.00s)\n        tmpifuqtjf0_test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.007s\nFAIL\n"
  timestamp: 1660073558
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0,\
    \ 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_qcfbkl5_test.go:281:6: expected ''('', found TestMax_Fill

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073556
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    // Your code here\n    \n    return\
    \ 0\n}\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0, 1,\
    \ 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMax_Fill (0.00s)\n    --- FAIL: TestMax_Fill/test_num__0\
    \ (0.00s)\n        tmpudee7f7e_test.go:46: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMax_Fill/test_num__1 (0.00s)\n        tmpudee7f7e_test.go:46:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestMax_Fill/test_num__3\
    \ (0.00s)\n        tmpudee7f7e_test.go:46: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMax_Fill/test_num__4 (0.00s)\n        tmpudee7f7e_test.go:46:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073558
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    // Your code here\n    \n    return\
    \ 0\n}\n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0, 1,\
    \ 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMax_Fill (0.00s)\n    --- FAIL: TestMax_Fill/test_num__0\
    \ (0.00s)\n        tmpifuqtjf0_test.go:47: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMax_Fill/test_num__1 (0.00s)\n        tmpifuqtjf0_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestMax_Fill/test_num__3\
    \ (0.00s)\n        tmpifuqtjf0_test.go:47: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMax_Fill/test_num__4 (0.00s)\n        tmpifuqtjf0_test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.007s\nFAIL\n"
  timestamp: 1660073558
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0,\
    \ 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_qcfbkl5_test.go:281:6: expected ''('', found TestMax_Fill

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073556
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    // Your code here\n    \n    return\
    \ 0\n}\n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0, 1,\
    \ 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMax_Fill (0.00s)\n    --- FAIL: TestMax_Fill/test_num__0\
    \ (0.00s)\n        tmpifuqtjf0_test.go:47: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMax_Fill/test_num__1 (0.00s)\n        tmpifuqtjf0_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestMax_Fill/test_num__3\
    \ (0.00s)\n        tmpifuqtjf0_test.go:47: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMax_Fill/test_num__4 (0.00s)\n        tmpifuqtjf0_test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.007s\nFAIL\n"
  timestamp: 1660073558
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0,\
    \ 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_qcfbkl5_test.go:281:6: expected ''('', found TestMax_Fill

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073556
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0,\
    \ 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_qcfbkl5_test.go:281:6: expected ''('', found TestMax_Fill

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073556
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    m := len(grid)\n    n := len(grid[0])\n  \
    \  \n    // initialize all buckets to capacity\n    b := make([][]int, m)\n  \
    \  for i := 0; i < m; i++ {\n        b[i] = make([]int, n)\n        for j := 0;\
    \ j < n; j++ {\n            b[i][j] = capacity\n        }\n    }\n    \n    //\
    \ fill buckets\n    for i := 0; i < m; i++ {\n        for j := 0; j < n; j++ {\n\
    \            if grid[i][j] == 1 {\n                b := b[i]\n               \
    \ for k := 0; k < n; k++ {\n                    if b[k] == capacity {\n      \
    \                  b[k] = capacity - 1\n                        b[k+1] = capacity\
    \ - 1\n                        b[k+2] = capacity - 1\n                       \
    \ b[k+3] = capacity - 1\n                        b[k+4] = capacity - 1\n     \
    \                   b[k+5] = capacity - 1\n                        b[k+6] = capacity\
    \ - 1\n                        b[k+7] = capacity - 1\n                       \
    \ b[k+8] = capacity - 1\n                        b[k+9] = capacity - 1\n     \
    \                   b[k+10] = capacity - 1\n                        b[k+11] =\
    \ capacity - 1\n                        b[k+12] = capacity - 1\n             \
    \           b[k+13] = capacity - 1\n                        b[k+14] = capacity\
    \ - 1\n                        b[k+15] = capacity - 1\n                      \
    \  b[k+16] = capacity - 1\n                        b[k+17] = capacity - 1\n  \
    \                      b[k+18] = capacity - 1\n                        b[k+19]\
    \ = capacity - 1\n                        b[k+20] = capacity - 1\n           \
    \             b[k+21] = capacity - 1\n                        b[k+22] = capacity\
    \ - 1\n                        b[k+23] = capacity - 1\n                      \
    \  b[k+24] = capacity - 1\n                        b[k+25] = capacity - 1\n  \
    \                      b[k+26] = capacity - 1\n                        b[k+27]\
    \ = capacity - 1\n                        b[k+28] = capacity - 1\n           \
    \             b[k+29] = capacity - 1\n                        b[k+30] = capacity\
    \ - 1\n                        b[k+31] = capacity - 1\n                      \
    \  b[k+32] = capacity - 1\n                        b[k+33] = capacity - 1\n  \
    \                      b[k+34] = capacity - 1\n                        b[k+35]\
    \ = capacity - 1\n                        b[k+36] = capacity - 1\n           \
    \             b[k+37] = capacity - 1\n                        b[k+38] = capacity\
    \ - 1\n                        b[k+39] = capacity - 1\n                      \
    \  b[k+40] = capacity - 1\n                        b[k+41] = capacity - 1\n  \
    \                      b[k+42] = capacity - 1\n                        b[k+\n\
    func TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0, 1, 0, 0}, []int{1,\
    \ 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0, 0,\
    \ 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpzfdwqj4__test.go:87:6: expected ''('', found TestMax_Fill

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073558
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0,\
    \ 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_qcfbkl5_test.go:281:6: expected ''('', found TestMax_Fill

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073556
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    // Write your code here.\n    \n   \
    \ \n    return 0\n}\n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0,\
    \ 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMax_Fill (0.00s)\n    --- FAIL: TestMax_Fill/test_num__0\
    \ (0.00s)\n        tmp76li0co6_test.go:48: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMax_Fill/test_num__1 (0.00s)\n        tmp76li0co6_test.go:48:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestMax_Fill/test_num__3\
    \ (0.00s)\n        tmp76li0co6_test.go:48: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMax_Fill/test_num__4 (0.00s)\n        tmp76li0co6_test.go:48:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073559
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0,\
    \ 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_qcfbkl5_test.go:281:6: expected ''('', found TestMax_Fill

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073556
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0,\
    \ 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_qcfbkl5_test.go:281:6: expected ''('', found TestMax_Fill

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073556
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    // Your code here\n    \n    return\
    \ 0\n}\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0, 1,\
    \ 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMax_Fill (0.00s)\n    --- FAIL: TestMax_Fill/test_num__0\
    \ (0.00s)\n        tmpudee7f7e_test.go:46: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMax_Fill/test_num__1 (0.00s)\n        tmpudee7f7e_test.go:46:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestMax_Fill/test_num__3\
    \ (0.00s)\n        tmpudee7f7e_test.go:46: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMax_Fill/test_num__4 (0.00s)\n        tmpudee7f7e_test.go:46:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073558
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0,\
    \ 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_qcfbkl5_test.go:281:6: expected ''('', found TestMax_Fill

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073556
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    m := len(grid)\n    n := len(grid[0])\n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0,\
    \ 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpf3du47l2_test.go:276:6: expected ''('', found TestMax_Fill

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073556
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0,\
    \ 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_qcfbkl5_test.go:281:6: expected ''('', found TestMax_Fill

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073556
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    // Your code here\n    \n    return\
    \ 0\n}\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0, 1,\
    \ 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMax_Fill (0.00s)\n    --- FAIL: TestMax_Fill/test_num__0\
    \ (0.00s)\n        tmpudee7f7e_test.go:46: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMax_Fill/test_num__1 (0.00s)\n        tmpudee7f7e_test.go:46:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestMax_Fill/test_num__3\
    \ (0.00s)\n        tmpudee7f7e_test.go:46: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMax_Fill/test_num__4 (0.00s)\n        tmpudee7f7e_test.go:46:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073558
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0,\
    \ 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_qcfbkl5_test.go:281:6: expected ''('', found TestMax_Fill

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073556
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    m := make(map[int]int)\n    for _, row :=\
    \ range grid {\n        for _, v := range row {\n            m[v]++\n        }\n\
    \    }\n    for i := 0; i < capacity; i++ {\n        for _, row := range grid\
    \ {\n            for _, v := range row {\n                if m[v] < i {\n    \
    \                m[v] = i\n                }\n            }\n        }\n    }\n\
    \    return len(m)\n}\n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0,\
    \ 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMax_Fill (0.00s)\n    --- FAIL: TestMax_Fill/test_num__0\
    \ (0.00s)\n        tmpbetyh30z_test.go:59: expected '%!s(int=6)', got '%!s(int=2)'\n\
    \    --- FAIL: TestMax_Fill/test_num__1 (0.00s)\n        tmpbetyh30z_test.go:59:\
    \ expected '%!s(int=5)', got '%!s(int=2)'\n    --- FAIL: TestMax_Fill/test_num__2\
    \ (0.00s)\n        tmpbetyh30z_test.go:59: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestMax_Fill/test_num__3 (0.00s)\n        tmpbetyh30z_test.go:59:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestMax_Fill/test_num__4\
    \ (0.00s)\n        tmpbetyh30z_test.go:59: expected '%!s(int=2)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073559
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0,\
    \ 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_qcfbkl5_test.go:281:6: expected ''('', found TestMax_Fill

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073556
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    m := make([][]int, len(grid))\n    for i :=\
    \ range m {\n        m[i] = make([]int, len(grid[i]))\n    }\n    for i := range\
    \ m {\n        for j := range m[i] {\n            m[i][j] = grid[i][j]\n     \
    \   }\n    }\n    result := 0\n    for i := range m {\n        for j := range\
    \ m[i] {\n            if m[i][j] == 1 {\n                result += 1\n       \
    \         for k := range m[:] {\n                    m[k][i] = 0\n           \
    \     }\n            }\n        }\n    }\n    return result\n}\n</code>\n<|/ a\
    \ tags=algorithm,go,data-\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0,\
    \ 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcvsntgq8_test.go:46:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073558
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    // Write your code here\n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0,\
    \ 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp339yacmd_test.go:279:6: expected ''('', found TestMax_Fill

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073558
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0,\
    \ 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_qcfbkl5_test.go:281:6: expected ''('', found TestMax_Fill

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073556
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    // Your code here\n    \n    return\
    \ 0\n}\n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0, 1,\
    \ 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMax_Fill (0.00s)\n    --- FAIL: TestMax_Fill/test_num__0\
    \ (0.00s)\n        tmpifuqtjf0_test.go:47: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMax_Fill/test_num__1 (0.00s)\n        tmpifuqtjf0_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestMax_Fill/test_num__3\
    \ (0.00s)\n        tmpifuqtjf0_test.go:47: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMax_Fill/test_num__4 (0.00s)\n        tmpifuqtjf0_test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.007s\nFAIL\n"
  timestamp: 1660073558
- exit_code: 2
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    result := 0\n    for _, row := range grid\
    \ {\n        result += max_fill_row(row, capacity)\n    }\n    return result\n\
    }\n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0, 1, 0, 0}, []int{1,\
    \ 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0, 0,\
    \ 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvuyquyr8_test.go:26:19: undefined: max_fill_row

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073559
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0,\
    \ 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_qcfbkl5_test.go:281:6: expected ''('', found TestMax_Fill

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073556
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    // write your code here\n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0,\
    \ 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2jwy5h3s_test.go:279:6: expected ''('', found TestMax_Fill

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073556
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0,\
    \ 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_qcfbkl5_test.go:281:6: expected ''('', found TestMax_Fill

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073556
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    // Your code here\n    \n    return\
    \ 0\n}\n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0, 1,\
    \ 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMax_Fill (0.00s)\n    --- FAIL: TestMax_Fill/test_num__0\
    \ (0.00s)\n        tmpifuqtjf0_test.go:47: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMax_Fill/test_num__1 (0.00s)\n        tmpifuqtjf0_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestMax_Fill/test_num__3\
    \ (0.00s)\n        tmpifuqtjf0_test.go:47: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMax_Fill/test_num__4 (0.00s)\n        tmpifuqtjf0_test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.007s\nFAIL\n"
  timestamp: 1660073558
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0,\
    \ 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_qcfbkl5_test.go:281:6: expected ''('', found TestMax_Fill

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073556
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0,\
    \ 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_qcfbkl5_test.go:281:6: expected ''('', found TestMax_Fill

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073556
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    // Write your code here\n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0,\
    \ 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp339yacmd_test.go:279:6: expected ''('', found TestMax_Fill

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073558
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    // Your code here\n    \n    \n    return\
    \ 0\n}\n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0, 1,\
    \ 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMax_Fill (0.00s)\n    --- FAIL: TestMax_Fill/test_num__0\
    \ (0.00s)\n        tmpq3eee1w5_test.go:48: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMax_Fill/test_num__1 (0.00s)\n        tmpq3eee1w5_test.go:48:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestMax_Fill/test_num__3\
    \ (0.00s)\n        tmpq3eee1w5_test.go:48: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMax_Fill/test_num__4 (0.00s)\n        tmpq3eee1w5_test.go:48:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073558
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    // Your code here\n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0,\
    \ 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpfar_w0_2_test.go:279:6: expected ''('', found TestMax_Fill

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073556
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    // init max fill count\n    var maxFillCount\
    \ int = 0\n    \n    // init max fill grid\n    var maxFillGrid [][]int\n    \n\
    \    // init max fill grid length\n    var maxFillGridLen int = 0\n    \n    //\
    \ init max fill grid capacity\n    var maxFillGridCapacity int = 0\n    \n   \
    \ // init max fill grid row\n    var maxFillGridRow int = 0\n    \n    // init\
    \ max fill grid col\n    var maxFillGridCol int = 0\n    \n    // init max fill\
    \ grid row\n    var maxFillGridRow int = 0\n    \n    // init max fill grid col\n\
    \    var maxFillGridCol int = 0\n    \n    // init max fill grid row\n    var\
    \ maxFillGridRow int = 0\n    \n    // init max fill grid col\n    var maxFillGridCol\
    \ int = 0\n    \n    // init max fill grid row\n    var maxFillGridRow int = 0\n\
    \    \n    // init max fill grid col\n    var maxFillGridCol int = 0\n    \n \
    \   // init max fill grid row\n    var maxFillGridRow int = 0\n    \n    // init\
    \ max fill grid col\n    var maxFillGridCol int = 0\n    \n    // init max fill\
    \ grid row\n    var maxFillGridRow int = 0\n    \n    // init max fill grid col\n\
    \    var maxFillGridCol int = 0\n    \n    // init max fill grid row\n    var\
    \ maxFillGridRow int = 0\n    \n    // init max fill grid col\n    var maxFillGridCol\
    \ int = 0\n    \n    // init max fill grid row\n    var maxFillGridRow int = 0\n\
    \    \n    // init max fill grid col\n    var maxFillGridCol int = 0\n    \n \
    \   // init max fill grid row\n    var maxFillGridRow int = 0\n    \n    // init\
    \ max fill grid col\n    var maxFillGridCol int = 0\n    \n    // init max fill\
    \ grid row\n    var maxFillGridRow int = 0\n    \n    // init max fill grid col\n\
    \    var maxFillGridCol int = 0\n    \n    // init max fill grid row\n    var\
    \ maxFillGridRow int = 0\n    \n    // init max fill grid col\n    var maxFillGridCol\
    \ int = 0\n    \n    // init max fill grid row\n    var maxFillGridRow int = 0\n\
    \    \n    // init max fill grid col\n    var maxFillGridCol int = 0\n    \n \
    \   // init max fill grid row\n    var maxFillGridRow int = 0\n    \n    // init\
    \ max fill grid col\n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0,\
    \ 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp02o8vko9_test.go:114:6: expected ''('', found TestMax_Fill

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073559
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    // write your code here\n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0,\
    \ 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2jwy5h3s_test.go:279:6: expected ''('', found TestMax_Fill

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073556
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0,\
    \ 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_qcfbkl5_test.go:281:6: expected ''('', found TestMax_Fill

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073556
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0,\
    \ 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_qcfbkl5_test.go:281:6: expected ''('', found TestMax_Fill

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073556
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    // Your code here\n    \n    return\
    \ 0\n}\n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0, 1,\
    \ 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMax_Fill (0.00s)\n    --- FAIL: TestMax_Fill/test_num__0\
    \ (0.00s)\n        tmpifuqtjf0_test.go:47: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMax_Fill/test_num__1 (0.00s)\n        tmpifuqtjf0_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestMax_Fill/test_num__3\
    \ (0.00s)\n        tmpifuqtjf0_test.go:47: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMax_Fill/test_num__4 (0.00s)\n        tmpifuqtjf0_test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.007s\nFAIL\n"
  timestamp: 1660073558
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0,\
    \ 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_qcfbkl5_test.go:281:6: expected ''('', found TestMax_Fill

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073556
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    // Write your code here.\n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \nfunc TestMax_Fill(t *testing.T) {\n  candidate\
    \ := max_fill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0},\
    \ []int{0, 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2snpt852_test.go:279:6: expected ''('', found TestMax_Fill

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073556
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    // Your code here\n    \n    return\
    \ 0\n}\n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0, 1,\
    \ 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMax_Fill (0.00s)\n    --- FAIL: TestMax_Fill/test_num__0\
    \ (0.00s)\n        tmpifuqtjf0_test.go:47: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMax_Fill/test_num__1 (0.00s)\n        tmpifuqtjf0_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestMax_Fill/test_num__3\
    \ (0.00s)\n        tmpifuqtjf0_test.go:47: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMax_Fill/test_num__4 (0.00s)\n        tmpifuqtjf0_test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.007s\nFAIL\n"
  timestamp: 1660073558
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0,\
    \ 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_qcfbkl5_test.go:281:6: expected ''('', found TestMax_Fill

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073556
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    m := len(grid)\n    n := len(grid[0])\n  \
    \  \n    var result int\n    \n    for i := 0; i < m; i++ {\n        for j :=\
    \ 0; j < n; j++ {\n            if grid[i][j] == 0 {\n                grid[i][j]\
    \ = capacity\n                result += max_fill(grid, capacity)\n           \
    \     grid[i][j] = 0\n            }\n        }\n    }\n    \n    return result\n\
    }\n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0, 1, 0, 0}, []int{1,\
    \ 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0, 0,\
    \ 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMax_Fill (0.00s)\n    --- FAIL: TestMax_Fill/test_num__0\
    \ (0.00s)\n        tmp3gxfrkvv_test.go:59: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMax_Fill/test_num__1 (0.00s)\n        tmp3gxfrkvv_test.go:59:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestMax_Fill/test_num__3\
    \ (0.00s)\n        tmp3gxfrkvv_test.go:59: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMax_Fill/test_num__4 (0.00s)\n        tmp3gxfrkvv_test.go:59:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073559
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0,\
    \ 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_qcfbkl5_test.go:281:6: expected ''('', found TestMax_Fill

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073556
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    // write your code here\n    \n    return\
    \ 0\n}\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0, 1,\
    \ 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMax_Fill (0.00s)\n    --- FAIL: TestMax_Fill/test_num__0\
    \ (0.00s)\n        tmpj6iz6br9_test.go:46: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMax_Fill/test_num__1 (0.00s)\n        tmpj6iz6br9_test.go:46:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestMax_Fill/test_num__3\
    \ (0.00s)\n        tmpj6iz6br9_test.go:46: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMax_Fill/test_num__4 (0.00s)\n        tmpj6iz6br9_test.go:46:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073560
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0,\
    \ 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_qcfbkl5_test.go:281:6: expected ''('', found TestMax_Fill

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073556
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    // Your code here\n    \n    return\
    \ 0\n}\n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0, 1,\
    \ 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMax_Fill (0.00s)\n    --- FAIL: TestMax_Fill/test_num__0\
    \ (0.00s)\n        tmpifuqtjf0_test.go:47: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMax_Fill/test_num__1 (0.00s)\n        tmpifuqtjf0_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestMax_Fill/test_num__3\
    \ (0.00s)\n        tmpifuqtjf0_test.go:47: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMax_Fill/test_num__4 (0.00s)\n        tmpifuqtjf0_test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.007s\nFAIL\n"
  timestamp: 1660073558
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0,\
    \ 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_qcfbkl5_test.go:281:6: expected ''('', found TestMax_Fill

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073556
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0,\
    \ 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_qcfbkl5_test.go:281:6: expected ''('', found TestMax_Fill

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073556
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0,\
    \ 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_qcfbkl5_test.go:281:6: expected ''('', found TestMax_Fill

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073556
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0,\
    \ 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_qcfbkl5_test.go:281:6: expected ''('', found TestMax_Fill

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073556
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    // Initialize a map to store the number\
    \ of times each bucket is lowered\n    buckets := make(map[int]int)\n    \n  \
    \  // Initialize a map to store the minimum number of buckets needed to empty\
    \ the wells\n    min := make(map[int]int)\n    \n    // Initialize a map to store\
    \ the minimum number of wells needed to empty the buckets\n    max := make(map[int]int)\n\
    \    \n    // Initialize a map to store the minimum number of wells needed to\
    \ empty the buckets\n    count := make(map[int]int)\n    \n    // Initialize a\
    \ map to store the minimum number of wells needed to empty the buckets\n    min\
    \ := make(map[int]int)\n    \n    // Initialize a map to store the minimum number\
    \ of wells needed to empty the buckets\n    max := make(map[int]int)\n    \n \
    \   // Initialize a map to store the minimum number of wells needed to empty the\
    \ buckets\n    count := make(map[int]int)\n    \n    // Initialize a map to store\
    \ the minimum number of wells needed to empty the buckets\n    min := make(map[int]int)\n\
    \    \n    // Initialize a map to store the minimum number of wells needed to\
    \ empty the buckets\n    max := make(map[int]int)\n    \n    // Initialize a map\
    \ to store the minimum number of wells needed to empty the buckets\n    count\
    \ := make(map[int]int)\n    \n    // Initialize a map to store the minimum number\
    \ of wells needed to empty the buckets\n    min := make(map[int]int)\n    \n \
    \   // Initialize a map to store the minimum number of wells needed to empty the\
    \ buckets\n    max := make(map[int]int)\n    \n    // Initialize a map to store\
    \ the minimum number of wells needed to empty the buckets\n    count := make(map[int]int)\n\
    \    \n    // Initialize a map to store the minimum number of wells needed to\
    \ empty the buckets\n    min := make(map[int]int)\n    \n    // Initialize a map\
    \ to store the minimum number of wells needed to empty the buckets\n    max :=\
    \ make(map[int]int)\n    \n    // Initialize a map to store the minimum number\
    \ of wells needed to empty the buckets\n    count := make(map[int]int)\n    \n\
    \    // Initialize a map to store the minimum number of wells needed to empty\
    \ the buckets\n    min := make(map[int]int)\n    \n    // Initialize a map to\
    \ store the minimum number of wells needed to empty the buckets\n    max := make(map[int]int)\n\
    \    \n    // Initialize a map to store the minimum number of wells needed to\
    \ empty the buckets\n    count := make(map[int]int)\n\nfunc TestMax_Fill(t *testing.T)\
    \ {\n  candidate := max_fill\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 0}, []int{0, 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     {\
    \ actual: candidate([][]int{[]int{0, 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1,\
    \ 1, 1}, []int{0, 1, 1, 1}}, 2), expected: 5 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 0}, []int{0, 0, 0}}, 5), expected: 0 },\n     { actual: candidate([][]int{[]int{1,\
    \ 1, 1, 1}, []int{1, 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1,\
    \ 1, 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpx9qz7oj2_test.go:82:6: expected ''('', found TestMax_Fill

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073559
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    m := make([][]int, len(grid))\n    for i :=\
    \ range m {\n        m[i] = make([]int, len(grid[i]))\n    }\n    for i := range\
    \ m {\n        for j := range m[i] {\n            m[i][j] = grid[i][j]\n     \
    \   }\n    }\n    m := make([][]int, len(grid))\n    for i := range m {\n    \
    \    m[i] = make([]int, len(grid[i]))\n    }\n    for i := range m {\n       \
    \ for j := range m[i] {\n            m[i][j] = grid[i][j]\n        }\n    }\n\
    \    m := make([][]int, len(grid))\n    for i := range m {\n        m[i] = make([]int,\
    \ len(grid[i]))\n    }\n    for i := range m {\n        for j := range m[i] {\n\
    \            m[i][j] = grid[i][j]\n        }\n    }\n    m := make([][]int, len(grid))\n\
    \    for i := range m {\n        m[i] = make([]int, len(grid[i]))\n    }\n   \
    \ for i := range m {\n        for j := range m[i] {\n            m[i][j] = grid[i][j]\n\
    \        }\n    }\n    m := make([][]int, len(grid))\n    for i := range m {\n\
    \        m[i] = make([]int, len(grid[i]))\n    }\n    for i := range m {\n   \
    \     for j := range m[i] {\n            m[i][j] = grid[i][j]\n        }\n   \
    \ }\n    m := make([][]int, len(grid))\n    for i := range m {\n        m[i] =\
    \ make([]int, len(grid[i]))\n    }\n    for i := range m {\n        for j := range\
    \ m[i] {\n            m[i][j] = grid[i][j]\n        }\n    }\n    m := make([][]int,\
    \ len(grid))\n    for i := range m {\n        m[i] = make([]int, len(grid[i]))\n\
    \    }\n    for i := range m {\n        for j := range m[i] {\n            m[i][j]\
    \ = grid[i][j]\n        }\n    }\n    m := make([][]int, len(grid))\n    for i\
    \ := range m {\n        m[i] = make([]int, len(grid[i]))\n    }\n    for i :=\
    \ range m {\n        for j := range m[i] {\n            m[i][j] = grid[i][j]\n\
    \        }\n    }\n    m := make([][]int, len(grid))\n    for i := range m {\n\
    \        m[i] = make([]int, len(grid[i]))\n    }\n    for i := range m {\n   \
    \     for j := range m[i] {\n            m[i][j] = grid[i][j]\n        }\n   \
    \ }\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0, 1, 0, 0}, []int{1,\
    \ 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0, 0,\
    \ 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_ny6digf_test.go:105:6: expected ''('', found TestMax_Fill

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073559
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    // write your code here\n    \n    return\
    \ 0\n}\n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0, 1,\
    \ 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMax_Fill (0.00s)\n    --- FAIL: TestMax_Fill/test_num__0\
    \ (0.00s)\n        tmpczlpc_rz_test.go:47: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMax_Fill/test_num__1 (0.00s)\n        tmpczlpc_rz_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestMax_Fill/test_num__3\
    \ (0.00s)\n        tmpczlpc_rz_test.go:47: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMax_Fill/test_num__4 (0.00s)\n        tmpczlpc_rz_test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073560
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    // Your code here\n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0,\
    \ 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpfar_w0_2_test.go:279:6: expected ''('', found TestMax_Fill

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073556
- exit_code: 2
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    m := make(map[int]int, len(grid))\n    for\
    \ _, row := range grid {\n        m[capacitateBucket(row, capacity)] = m[capacitateBucket(row,\
    \ capacity)] + 1\n    }\n    return m[capacitateBucket(grid[len(grid)-1], capacity)]\n\
    }\n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0, 1, 0, 0}, []int{1,\
    \ 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0, 0,\
    \ 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxkzmooli_test.go:26:48: undefined: capacitateBucket

    /tmp/tmpxkzmooli_test.go:28:14: undefined: capacitateBucket

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073559
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    // Write your code here.\n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \nfunc TestMax_Fill(t *testing.T) {\n  candidate\
    \ := max_fill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0},\
    \ []int{0, 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2snpt852_test.go:279:6: expected ''('', found TestMax_Fill

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073556
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    // Your code here\n    \n    return\
    \ 0\n}\n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0, 1,\
    \ 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMax_Fill (0.00s)\n    --- FAIL: TestMax_Fill/test_num__0\
    \ (0.00s)\n        tmpifuqtjf0_test.go:47: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMax_Fill/test_num__1 (0.00s)\n        tmpifuqtjf0_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestMax_Fill/test_num__3\
    \ (0.00s)\n        tmpifuqtjf0_test.go:47: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMax_Fill/test_num__4 (0.00s)\n        tmpifuqtjf0_test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.007s\nFAIL\n"
  timestamp: 1660073558
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    result := 0\n    for _, row := range grid\
    \ {\n        for _, bucket := range row {\n            if bucket > capacity {\n\
    \                result += capacity - bucket\n            } else {\n         \
    \       result += 1\n            }\n        }\n    }\n    return result\n}\n\n\
    func TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0, 1, 0, 0}, []int{1,\
    \ 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0, 0,\
    \ 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMax_Fill (0.00s)\n    --- FAIL: TestMax_Fill/test_num__0\
    \ (0.00s)\n        tmppmbma96w_test.go:54: expected '%!s(int=6)', got '%!s(int=12)'\n\
    \    --- FAIL: TestMax_Fill/test_num__1 (0.00s)\n        tmppmbma96w_test.go:54:\
    \ expected '%!s(int=5)', got '%!s(int=16)'\n    --- FAIL: TestMax_Fill/test_num__2\
    \ (0.00s)\n        tmppmbma96w_test.go:54: expected '%!s(int=0)', got '%!s(int=6)'\n\
    \    --- FAIL: TestMax_Fill/test_num__3 (0.00s)\n        tmppmbma96w_test.go:54:\
    \ expected '%!s(int=4)', got '%!s(int=8)'\n    --- FAIL: TestMax_Fill/test_num__4\
    \ (0.00s)\n        tmppmbma96w_test.go:54: expected '%!s(int=2)', got '%!s(int=8)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073560
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    // write your code here\n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0,\
    \ 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2jwy5h3s_test.go:279:6: expected ''('', found TestMax_Fill

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073556
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0,\
    \ 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_qcfbkl5_test.go:281:6: expected ''('', found TestMax_Fill

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073556
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    m := make(map[int]int)\n    for _, row :=\
    \ range grid {\n        for _, c := range row {\n            m[c]++\n        }\n\
    \    }\n    result := 0\n    for _, v := range m {\n        if v > capacity {\n\
    \            result = result + 1\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0, 1, 0, 0}, []int{1,\
    \ 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0, 0,\
    \ 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMax_Fill (0.00s)\n    --- FAIL: TestMax_Fill/test_num__0\
    \ (0.00s)\n        tmpcw4sr8_m_test.go:56: expected '%!s(int=6)', got '%!s(int=2)'\n\
    \    --- FAIL: TestMax_Fill/test_num__1 (0.00s)\n        tmpcw4sr8_m_test.go:56:\
    \ expected '%!s(int=5)', got '%!s(int=2)'\n    --- FAIL: TestMax_Fill/test_num__2\
    \ (0.00s)\n        tmpcw4sr8_m_test.go:56: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestMax_Fill/test_num__3 (0.00s)\n        tmpcw4sr8_m_test.go:56:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestMax_Fill/test_num__4\
    \ (0.00s)\n        tmpcw4sr8_m_test.go:56: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073560
- exit_code: 2
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    result := 0\n    \n    for _, row := range\
    \ grid {\n        result += max_fill_row(row, capacity)\n    }\n    \n    return\
    \ result\n}\n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0,\
    \ 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu0dxh7qp_test.go:27:19: undefined: max_fill_row

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073557
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    // write your code here\n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0,\
    \ 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2jwy5h3s_test.go:279:6: expected ''('', found TestMax_Fill

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073556
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    result := 0\n    \n    for _, row := range\
    \ grid {\n        for _, cell := range row {\n            if cell == 1 {\n   \
    \             result += 1\n            }\n        }\n    }\n    \n    return result\n\
    }\n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0, 1, 0, 0}, []int{1,\
    \ 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0, 0,\
    \ 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMax_Fill (0.00s)\n    --- FAIL: TestMax_Fill/test_num__1\
    \ (0.00s)\n        tmpohcf72oa_test.go:54: expected '%!s(int=5)', got '%!s(int=9)'\n\
    \    --- FAIL: TestMax_Fill/test_num__3 (0.00s)\n        tmpohcf72oa_test.go:54:\
    \ expected '%!s(int=4)', got '%!s(int=8)'\n    --- FAIL: TestMax_Fill/test_num__4\
    \ (0.00s)\n        tmpohcf72oa_test.go:54: expected '%!s(int=2)', got '%!s(int=8)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073560
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    result := 0\n    for _, row := range grid\
    \ {\n        for _, bucket := range row {\n            if bucket > capacity {\n\
    \                result += len(row)\n                break\n            }\n  \
    \      }\n    }\n    return result\n}\n\nfunc TestMax_Fill(t *testing.T) {\n \
    \ candidate := max_fill\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 0}, []int{0, 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     {\
    \ actual: candidate([][]int{[]int{0, 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1,\
    \ 1, 1}, []int{0, 1, 1, 1}}, 2), expected: 5 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 0}, []int{0, 0, 0}}, 5), expected: 0 },\n     { actual: candidate([][]int{[]int{1,\
    \ 1, 1, 1}, []int{1, 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1,\
    \ 1, 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMax_Fill (0.00s)\n    --- FAIL: TestMax_Fill/test_num__0\
    \ (0.00s)\n        tmp2qju8l2y_test.go:53: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMax_Fill/test_num__1 (0.00s)\n        tmp2qju8l2y_test.go:53:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestMax_Fill/test_num__3\
    \ (0.00s)\n        tmp2qju8l2y_test.go:53: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMax_Fill/test_num__4 (0.00s)\n        tmp2qju8l2y_test.go:53:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073560
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    // Your code here\n    \n    return\
    \ 0\n}\n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0, 1,\
    \ 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMax_Fill (0.00s)\n    --- FAIL: TestMax_Fill/test_num__0\
    \ (0.00s)\n        tmpifuqtjf0_test.go:47: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMax_Fill/test_num__1 (0.00s)\n        tmpifuqtjf0_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestMax_Fill/test_num__3\
    \ (0.00s)\n        tmpifuqtjf0_test.go:47: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMax_Fill/test_num__4 (0.00s)\n        tmpifuqtjf0_test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.007s\nFAIL\n"
  timestamp: 1660073558
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0,\
    \ 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_qcfbkl5_test.go:281:6: expected ''('', found TestMax_Fill

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073556
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0,\
    \ 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_qcfbkl5_test.go:281:6: expected ''('', found TestMax_Fill

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073556
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    // write your code here\n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0,\
    \ 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2jwy5h3s_test.go:279:6: expected ''('', found TestMax_Fill

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073556
- exit_code: 2
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    m := make([][]int, len(grid))\n    for i :=\
    \ range m {\n        m[i] = make([]int, len(grid[i]))\n    }\n    \n    for i\
    \ := range m {\n        for j := range m[i] {\n            m[i][j] = grid[i][j]\n\
    \        }\n    }\n    \n    m := make([][]int, len(grid))\n    for i := range\
    \ m {\n        m[i] = make([]int, len(grid[i]))\n    }\n    \n    for i := range\
    \ m {\n        for j := range m[i] {\n            if m[i][j] == 0 {\n        \
    \        capacity -= 1\n            }\n        }\n    }\n    \n    return capacity\n\
    }\n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0, 1, 0, 0}, []int{1,\
    \ 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0, 0,\
    \ 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc_bpb9z__test.go:35:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073559
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    result := 0\n    for _, row := range grid\
    \ {\n        for _, bucket := range row {\n            if bucket > capacity {\n\
    \                bucket = capacity\n            }\n            capacity -= bucket\n\
    \        }\n        result += len(row)\n    }\n    return result\n}\n\nfunc TestMax_Fill(t\
    \ *testing.T) {\n  candidate := max_fill\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 0}, []int{0, 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     {\
    \ actual: candidate([][]int{[]int{0, 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1,\
    \ 1, 1}, []int{0, 1, 1, 1}}, 2), expected: 5 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 0}, []int{0, 0, 0}}, 5), expected: 0 },\n     { actual: candidate([][]int{[]int{1,\
    \ 1, 1, 1}, []int{1, 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1,\
    \ 1, 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMax_Fill (0.00s)\n    --- FAIL: TestMax_Fill/test_num__0\
    \ (0.00s)\n        tmpiq90d0fm_test.go:54: expected '%!s(int=6)', got '%!s(int=12)'\n\
    \    --- FAIL: TestMax_Fill/test_num__1 (0.00s)\n        tmpiq90d0fm_test.go:54:\
    \ expected '%!s(int=5)', got '%!s(int=16)'\n    --- FAIL: TestMax_Fill/test_num__2\
    \ (0.00s)\n        tmpiq90d0fm_test.go:54: expected '%!s(int=0)', got '%!s(int=6)'\n\
    \    --- FAIL: TestMax_Fill/test_num__3 (0.00s)\n        tmpiq90d0fm_test.go:54:\
    \ expected '%!s(int=4)', got '%!s(int=8)'\n    --- FAIL: TestMax_Fill/test_num__4\
    \ (0.00s)\n        tmpiq90d0fm_test.go:54: expected '%!s(int=2)', got '%!s(int=8)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073560
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    // write your code here\n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0,\
    \ 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2jwy5h3s_test.go:279:6: expected ''('', found TestMax_Fill

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073556
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0,\
    \ 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_qcfbkl5_test.go:281:6: expected ''('', found TestMax_Fill

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073556
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0,\
    \ 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_qcfbkl5_test.go:281:6: expected ''('', found TestMax_Fill

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073556
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0,\
    \ 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_qcfbkl5_test.go:281:6: expected ''('', found TestMax_Fill

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073556
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    // Your code here\n    \n    \n    return\
    \ 0\n}\n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0, 1,\
    \ 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMax_Fill (0.00s)\n    --- FAIL: TestMax_Fill/test_num__0\
    \ (0.00s)\n        tmpq3eee1w5_test.go:48: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMax_Fill/test_num__1 (0.00s)\n        tmpq3eee1w5_test.go:48:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestMax_Fill/test_num__3\
    \ (0.00s)\n        tmpq3eee1w5_test.go:48: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMax_Fill/test_num__4 (0.00s)\n        tmpq3eee1w5_test.go:48:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073558
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0,\
    \ 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_qcfbkl5_test.go:281:6: expected ''('', found TestMax_Fill

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073556
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0,\
    \ 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_qcfbkl5_test.go:281:6: expected ''('', found TestMax_Fill

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073556
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0,\
    \ 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_qcfbkl5_test.go:281:6: expected ''('', found TestMax_Fill

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073556
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    // Your code here\n    \n    return\
    \ 0\n}\n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0, 1,\
    \ 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMax_Fill (0.00s)\n    --- FAIL: TestMax_Fill/test_num__0\
    \ (0.00s)\n        tmpifuqtjf0_test.go:47: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMax_Fill/test_num__1 (0.00s)\n        tmpifuqtjf0_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestMax_Fill/test_num__3\
    \ (0.00s)\n        tmpifuqtjf0_test.go:47: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMax_Fill/test_num__4 (0.00s)\n        tmpifuqtjf0_test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.007s\nFAIL\n"
  timestamp: 1660073558
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0,\
    \ 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_qcfbkl5_test.go:281:6: expected ''('', found TestMax_Fill

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073556
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0,\
    \ 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_qcfbkl5_test.go:281:6: expected ''('', found TestMax_Fill

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073556
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    // Your code here\n    \n    return\
    \ 0\n}\n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0, 1,\
    \ 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMax_Fill (0.00s)\n    --- FAIL: TestMax_Fill/test_num__0\
    \ (0.00s)\n        tmpifuqtjf0_test.go:47: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMax_Fill/test_num__1 (0.00s)\n        tmpifuqtjf0_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestMax_Fill/test_num__3\
    \ (0.00s)\n        tmpifuqtjf0_test.go:47: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMax_Fill/test_num__4 (0.00s)\n        tmpifuqtjf0_test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.007s\nFAIL\n"
  timestamp: 1660073558
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0,\
    \ 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_qcfbkl5_test.go:281:6: expected ''('', found TestMax_Fill

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073556
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    // Your code here\n    \n    return\
    \ 0\n}\n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0, 1,\
    \ 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMax_Fill (0.00s)\n    --- FAIL: TestMax_Fill/test_num__0\
    \ (0.00s)\n        tmpifuqtjf0_test.go:47: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMax_Fill/test_num__1 (0.00s)\n        tmpifuqtjf0_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestMax_Fill/test_num__3\
    \ (0.00s)\n        tmpifuqtjf0_test.go:47: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMax_Fill/test_num__4 (0.00s)\n        tmpifuqtjf0_test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.007s\nFAIL\n"
  timestamp: 1660073558
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    // write your code here\n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0,\
    \ 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpdi186yvm_test.go:279:6: expected ''('', found TestMax_Fill

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073556
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    // Your code here\n    \n    return\
    \ 0\n}\n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0, 1,\
    \ 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMax_Fill (0.00s)\n    --- FAIL: TestMax_Fill/test_num__0\
    \ (0.00s)\n        tmpifuqtjf0_test.go:47: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMax_Fill/test_num__1 (0.00s)\n        tmpifuqtjf0_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestMax_Fill/test_num__3\
    \ (0.00s)\n        tmpifuqtjf0_test.go:47: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMax_Fill/test_num__4 (0.00s)\n        tmpifuqtjf0_test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.007s\nFAIL\n"
  timestamp: 1660073558
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    // Write your code here\n    \n    return\
    \ 0\n}\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0, 1,\
    \ 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMax_Fill (0.00s)\n    --- FAIL: TestMax_Fill/test_num__0\
    \ (0.00s)\n        tmpcmzi78d9_test.go:46: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMax_Fill/test_num__1 (0.00s)\n        tmpcmzi78d9_test.go:46:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestMax_Fill/test_num__3\
    \ (0.00s)\n        tmpcmzi78d9_test.go:46: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMax_Fill/test_num__4 (0.00s)\n        tmpcmzi78d9_test.go:46:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073560
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0,\
    \ 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_qcfbkl5_test.go:281:6: expected ''('', found TestMax_Fill

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073556
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    // Your code here\n    \n    return\
    \ 0\n}\n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0, 1,\
    \ 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMax_Fill (0.00s)\n    --- FAIL: TestMax_Fill/test_num__0\
    \ (0.00s)\n        tmpifuqtjf0_test.go:47: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMax_Fill/test_num__1 (0.00s)\n        tmpifuqtjf0_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestMax_Fill/test_num__3\
    \ (0.00s)\n        tmpifuqtjf0_test.go:47: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMax_Fill/test_num__4 (0.00s)\n        tmpifuqtjf0_test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.007s\nFAIL\n"
  timestamp: 1660073558
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0,\
    \ 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_qcfbkl5_test.go:281:6: expected ''('', found TestMax_Fill

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073556
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    // Your code here\n    \n    return\
    \ 0\n}\n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0, 1,\
    \ 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMax_Fill (0.00s)\n    --- FAIL: TestMax_Fill/test_num__0\
    \ (0.00s)\n        tmpifuqtjf0_test.go:47: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMax_Fill/test_num__1 (0.00s)\n        tmpifuqtjf0_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestMax_Fill/test_num__3\
    \ (0.00s)\n        tmpifuqtjf0_test.go:47: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMax_Fill/test_num__4 (0.00s)\n        tmpifuqtjf0_test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.007s\nFAIL\n"
  timestamp: 1660073558
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0,\
    \ 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_qcfbkl5_test.go:281:6: expected ''('', found TestMax_Fill

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073556
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    // Write your code here.\n    \n   \
    \ return 0\n}\n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0,\
    \ 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMax_Fill (0.00s)\n    --- FAIL: TestMax_Fill/test_num__0\
    \ (0.00s)\n        tmpujyo0r5v_test.go:47: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMax_Fill/test_num__1 (0.00s)\n        tmpujyo0r5v_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestMax_Fill/test_num__3\
    \ (0.00s)\n        tmpujyo0r5v_test.go:47: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMax_Fill/test_num__4 (0.00s)\n        tmpujyo0r5v_test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073560
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0,\
    \ 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_qcfbkl5_test.go:281:6: expected ''('', found TestMax_Fill

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073556
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    // Write your code here.\n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \nfunc TestMax_Fill(t *testing.T) {\n  candidate\
    \ := max_fill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0},\
    \ []int{0, 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2snpt852_test.go:279:6: expected ''('', found TestMax_Fill

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073556
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0,\
    \ 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_qcfbkl5_test.go:281:6: expected ''('', found TestMax_Fill

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073556
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0,\
    \ 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_qcfbkl5_test.go:281:6: expected ''('', found TestMax_Fill

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073556
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0,\
    \ 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_qcfbkl5_test.go:281:6: expected ''('', found TestMax_Fill

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073556
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0,\
    \ 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_qcfbkl5_test.go:281:6: expected ''('', found TestMax_Fill

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073556
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    // Your code here\n    \n    return\
    \ 0\n}\n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0, 1,\
    \ 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMax_Fill (0.00s)\n    --- FAIL: TestMax_Fill/test_num__0\
    \ (0.00s)\n        tmpifuqtjf0_test.go:47: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMax_Fill/test_num__1 (0.00s)\n        tmpifuqtjf0_test.go:47:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestMax_Fill/test_num__3\
    \ (0.00s)\n        tmpifuqtjf0_test.go:47: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMax_Fill/test_num__4 (0.00s)\n        tmpifuqtjf0_test.go:47:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.007s\nFAIL\n"
  timestamp: 1660073558
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0,\
    \ 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_qcfbkl5_test.go:281:6: expected ''('', found TestMax_Fill

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073556
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    // Write your code here.\n    \n   \
    \ return 0\n}\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0,\
    \ 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMax_Fill (0.00s)\n    --- FAIL: TestMax_Fill/test_num__0\
    \ (0.00s)\n        tmpis4ezva3_test.go:46: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMax_Fill/test_num__1 (0.00s)\n        tmpis4ezva3_test.go:46:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestMax_Fill/test_num__3\
    \ (0.00s)\n        tmpis4ezva3_test.go:46: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMax_Fill/test_num__4 (0.00s)\n        tmpis4ezva3_test.go:46:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073560
- exit_code: 1
  program: "package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a rectangular grid of wells. Each row represents a single well,\n\
    // and each 1 in a row represents a single unit of water.\n// Each well has a\
    \ corresponding bucket that can be used to extract water from it, \n// and all\
    \ buckets have the same capacity.\n// Your task is to use the buckets to empty\
    \ the wells.\n// Output the number of times you need to lower the buckets.\n//\
    \ Example 1:\n// Example 2:\n// Example 3:\n// Constraints:\n// * all wells have\
    \ the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <=\
    \ 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid\
    \ [][]int, capacity int) int {\n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nfunc TestMax_Fill(t *testing.T) {\n  candidate := max_fill\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([][]int{[]int{0, 0, 1, 0}, []int{0,\
    \ 1, 0, 0}, []int{1, 1, 1, 1}}, 1), expected: 6 },\n     { actual: candidate([][]int{[]int{0,\
    \ 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2), expected:\
    \ 5 },\n     { actual: candidate([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5),\
    \ expected: 0 },\n     { actual: candidate([][]int{[]int{1, 1, 1, 1}, []int{1,\
    \ 1, 1, 1}}, 2), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 1,\
    \ 1, 1}, []int{1, 1, 1, 1}}, 9), expected: 2 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_qcfbkl5_test.go:281:6: expected ''('', found TestMax_Fill

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073556
