language: go_test.go
name: HumanEval_7_filter_by_substring
results:
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu2cb6qt4_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    filtered := []string{}\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjbecbrcg_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074443
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    filtered := []string{}\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjbecbrcg_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074443
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    filtered := make([]string, 0)\n    for _, s := range strings {\n    \
    \    if strings.Contains(s, substring) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_By_Substring(t\
    \ *testing.T) {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]string{}, \"john\"), expected: []string{} },\n     {\
    \ actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n  \
    \   { actual: candidate([]string{\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"} },\n     { actual: candidate([]string{\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"}, \"run\"), expected: []string{\"grunt\", \"prune\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4tzdl7bg_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074443
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered_strings []string\n    for _, string := range strings {\n\
    \        if strings.Contains(string, substring) {\n            filtered_strings\
    \ = append(filtered_strings, string)\n        }\n    }\n    return filtered_strings\n\
    }\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\"\
    , \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpag52is5z_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074443
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    filtered := []string{}\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjbecbrcg_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074443
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    filtered := []string{}\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjbecbrcg_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074443
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu2cb6qt4_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    filtered := []string{}\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjbecbrcg_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074443
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    result := []string{}\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            result = append(result, s)\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkgnc5co0_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    filtered := make([]string, 0)\n    for _, s := range strings {\n    \
    \    if strings.Contains(s, substring) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_By_Substring(t\
    \ *testing.T) {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]string{}, \"john\"), expected: []string{} },\n     {\
    \ actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n  \
    \   { actual: candidate([]string{\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"} },\n     { actual: candidate([]string{\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"}, \"run\"), expected: []string{\"grunt\", \"prune\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4tzdl7bg_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074443
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    filtered := []string{}\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjbecbrcg_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074443
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu2cb6qt4_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    filteredStrings := []string{}\n    for _, s := range strings {\n    \
    \    if strings.Contains(s, substring) {\n            filteredStrings = append(filteredStrings,\
    \ s)\n        }\n    }\n    return filteredStrings\n}\n\nfunc TestFilter_By_Substring(t\
    \ *testing.T) {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]string{}, \"john\"), expected: []string{} },\n     {\
    \ actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n  \
    \   { actual: candidate([]string{\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"} },\n     { actual: candidate([]string{\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"}, \"run\"), expected: []string{\"grunt\", \"prune\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqmryrtn4_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074443
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    filteredStrings := []string{}\n    for _, string := range strings {\n\
    \        if strings.Contains(string, substring) {\n            filteredStrings\
    \ = append(filteredStrings, string)\n        }\n    }\n    return filteredStrings\n\
    }\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\"\
    , \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8qqrk1mg_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074443
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    filtered := []string{}\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjbecbrcg_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074443
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu2cb6qt4_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered_strings []string\n    for _, s := range strings {\n    \
    \    if strings.Contains(s, substring) {\n            filtered_strings = append(filtered_strings,\
    \ s)\n        }\n    }\n    return filtered_strings\n}\n\nfunc TestFilter_By_Substring(t\
    \ *testing.T) {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]string{}, \"john\"), expected: []string{} },\n     {\
    \ actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n  \
    \   { actual: candidate([]string{\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"} },\n     { actual: candidate([]string{\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"}, \"run\"), expected: []string{\"grunt\", \"prune\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyk94370l_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    filteredStrings := []string{}\n    for _, s := range strings {\n    \
    \    if strings.Contains(s, substring) {\n            filteredStrings = append(filteredStrings,\
    \ s)\n        }\n    }\n    return filteredStrings\n}\n\nfunc TestFilter_By_Substring(t\
    \ *testing.T) {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]string{}, \"john\"), expected: []string{} },\n     {\
    \ actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n  \
    \   { actual: candidate([]string{\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"} },\n     { actual: candidate([]string{\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"}, \"run\"), expected: []string{\"grunt\", \"prune\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqmryrtn4_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074443
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu2cb6qt4_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    filtered := []string{}\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjbecbrcg_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074443
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu2cb6qt4_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu2cb6qt4_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu2cb6qt4_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu2cb6qt4_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    filtered := []string{}\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjbecbrcg_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074443
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu2cb6qt4_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu2cb6qt4_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    result := []string{}\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            result = append(result, s)\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkgnc5co0_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu2cb6qt4_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu2cb6qt4_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu2cb6qt4_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu2cb6qt4_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    filtered := make([]string, 0)\n    for _, s := range strings {\n    \
    \    if strings.Contains(s, substring) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_By_Substring(t\
    \ *testing.T) {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]string{}, \"john\"), expected: []string{} },\n     {\
    \ actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n  \
    \   { actual: candidate([]string{\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"} },\n     { actual: candidate([]string{\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"}, \"run\"), expected: []string{\"grunt\", \"prune\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4tzdl7bg_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074443
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    filteredStrings := []string{}\n    for _, string := range strings {\n\
    \        if strings.Contains(string, substring) {\n            filteredStrings\
    \ = append(filteredStrings, string)\n        }\n    }\n    return filteredStrings\n\
    }\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\"\
    , \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8qqrk1mg_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074443
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    filtered := []string{}\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjbecbrcg_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074443
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    filtered := make([]string, 0)\n    for _, s := range strings {\n    \
    \    if strings.Contains(s, substring) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_By_Substring(t\
    \ *testing.T) {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]string{}, \"john\"), expected: []string{} },\n     {\
    \ actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n  \
    \   { actual: candidate([]string{\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"} },\n     { actual: candidate([]string{\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"}, \"run\"), expected: []string{\"grunt\", \"prune\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4tzdl7bg_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074443
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    filteredStrings := []string{}\n    for _, string := range strings {\n\
    \        if strings.Contains(string, substring) {\n            filteredStrings\
    \ = append(filteredStrings, string)\n        }\n    }\n    return filteredStrings\n\
    }\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\"\
    , \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8qqrk1mg_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074443
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    filteredStrings := []string{}\n    for _, string := range strings {\n\
    \        if strings.Contains(string, substring) {\n            filteredStrings\
    \ = append(filteredStrings, string)\n        }\n    }\n    return filteredStrings\n\
    }\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\"\
    , \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8qqrk1mg_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074443
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered_strings []string\n    for _, s := range strings {\n    \
    \    if strings.Contains(s, substring) {\n            filtered_strings = append(filtered_strings,\
    \ s)\n        }\n    }\n    return filtered_strings\n}\n\nfunc TestFilter_By_Substring(t\
    \ *testing.T) {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]string{}, \"john\"), expected: []string{} },\n     {\
    \ actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n  \
    \   { actual: candidate([]string{\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"} },\n     { actual: candidate([]string{\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"}, \"run\"), expected: []string{\"grunt\", \"prune\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyk94370l_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered_strings []string\n    for _, string := range strings {\n\
    \        if strings.Contains(string, substring) {\n            filtered_strings\
    \ = append(filtered_strings, string)\n        }\n    }\n    return filtered_strings\n\
    }\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\"\
    , \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpag52is5z_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074443
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu2cb6qt4_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    filtered := []string{}\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjbecbrcg_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074443
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    filtered := []string{}\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjbecbrcg_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074443
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    filtered := []string{}\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjbecbrcg_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074443
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    filtered := []string{}\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjbecbrcg_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074443
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    filtered := make([]string, 0)\n    for _, s := range strings {\n    \
    \    if strings.Contains(s, substring) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_By_Substring(t\
    \ *testing.T) {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]string{}, \"john\"), expected: []string{} },\n     {\
    \ actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n  \
    \   { actual: candidate([]string{\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"} },\n     { actual: candidate([]string{\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"}, \"run\"), expected: []string{\"grunt\", \"prune\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4tzdl7bg_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074443
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered_strings []string\n    for _, string := range strings {\n\
    \        if strings.Contains(string, substring) {\n            filtered_strings\
    \ = append(filtered_strings, string)\n        }\n    }\n    return filtered_strings\n\
    }\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\"\
    , \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpag52is5z_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074443
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu2cb6qt4_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    filtered := []string{}\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjbecbrcg_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074443
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu2cb6qt4_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered_strings []string\n    for _, s := range strings {\n    \
    \    if strings.Contains(s, substring) {\n            filtered_strings = append(filtered_strings,\
    \ s)\n        }\n    }\n    return filtered_strings\n}\n\nfunc TestFilter_By_Substring(t\
    \ *testing.T) {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]string{}, \"john\"), expected: []string{} },\n     {\
    \ actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n  \
    \   { actual: candidate([]string{\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"} },\n     { actual: candidate([]string{\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"}, \"run\"), expected: []string{\"grunt\", \"prune\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyk94370l_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    filtered := []string{}\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjbecbrcg_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074443
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu2cb6qt4_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    filtered := []string{}\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjbecbrcg_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074443
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    filtered := []string{}\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjbecbrcg_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074443
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    filtered := []string{}\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjbecbrcg_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074443
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    filtered := []string{}\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjbecbrcg_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074443
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    filtered := []string{}\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjbecbrcg_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074443
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    filtered := make([]string, 0)\n    for _, s := range strings {\n    \
    \    if strings.Contains(s, substring) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_By_Substring(t\
    \ *testing.T) {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]string{}, \"john\"), expected: []string{} },\n     {\
    \ actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n  \
    \   { actual: candidate([]string{\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"} },\n     { actual: candidate([]string{\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"}, \"run\"), expected: []string{\"grunt\", \"prune\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4tzdl7bg_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074443
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu2cb6qt4_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu2cb6qt4_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu2cb6qt4_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    filtered := []string{}\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjbecbrcg_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074443
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    result := []string{}\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            result = append(result, s)\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkgnc5co0_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    result := []string{}\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            result = append(result, s)\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkgnc5co0_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    filtered := make([]string, 0)\n    for _, s := range strings {\n    \
    \    if strings.Contains(s, substring) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_By_Substring(t\
    \ *testing.T) {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]string{}, \"john\"), expected: []string{} },\n     {\
    \ actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n  \
    \   { actual: candidate([]string{\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"} },\n     { actual: candidate([]string{\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"}, \"run\"), expected: []string{\"grunt\", \"prune\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4tzdl7bg_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074443
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu2cb6qt4_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    filtered := []string{}\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjbecbrcg_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074443
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    filtered := []string{}\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjbecbrcg_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074443
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    filtered := make([]string, 0)\n    for _, s := range strings {\n    \
    \    if strings.Contains(s, substring) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_By_Substring(t\
    \ *testing.T) {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]string{}, \"john\"), expected: []string{} },\n     {\
    \ actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n  \
    \   { actual: candidate([]string{\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"} },\n     { actual: candidate([]string{\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"}, \"run\"), expected: []string{\"grunt\", \"prune\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4tzdl7bg_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074443
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu2cb6qt4_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    filtered := []string{}\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjbecbrcg_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074443
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu2cb6qt4_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu2cb6qt4_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu2cb6qt4_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu2cb6qt4_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    filteredStrings := []string{}\n    for _, s := range strings {\n    \
    \    if strings.Contains(s, substring) {\n            filteredStrings = append(filteredStrings,\
    \ s)\n        }\n    }\n    return filteredStrings\n}\n\nfunc TestFilter_By_Substring(t\
    \ *testing.T) {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]string{}, \"john\"), expected: []string{} },\n     {\
    \ actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n  \
    \   { actual: candidate([]string{\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"} },\n     { actual: candidate([]string{\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"}, \"run\"), expected: []string{\"grunt\", \"prune\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqmryrtn4_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074443
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered_strings []string\n    for _, s := range strings {\n    \
    \    if strings.Contains(s, substring) {\n            filtered_strings = append(filtered_strings,\
    \ s)\n        }\n    }\n    return filtered_strings\n}\n\nfunc TestFilter_By_Substring(t\
    \ *testing.T) {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]string{}, \"john\"), expected: []string{} },\n     {\
    \ actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n  \
    \   { actual: candidate([]string{\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"} },\n     { actual: candidate([]string{\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"}, \"run\"), expected: []string{\"grunt\", \"prune\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyk94370l_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    filteredStrings := []string{}\n    for _, string := range strings {\n\
    \        if strings.Contains(string, substring) {\n            filteredStrings\
    \ = append(filteredStrings, string)\n        }\n    }\n    return filteredStrings\n\
    }\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\"\
    , \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8qqrk1mg_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074443
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu2cb6qt4_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    result := []string{}\n    for _, string := range strings {\n        if\
    \ strings.Contains(string, substring) {\n            result = append(result, string)\n\
    \        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Substring(t *testing.T)\
    \ {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp570wpq1f_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074443
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    filtered := make([]string, 0)\n    for _, s := range strings {\n    \
    \    if strings.Contains(s, substring) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_By_Substring(t\
    \ *testing.T) {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]string{}, \"john\"), expected: []string{} },\n     {\
    \ actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n  \
    \   { actual: candidate([]string{\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"} },\n     { actual: candidate([]string{\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"}, \"run\"), expected: []string{\"grunt\", \"prune\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4tzdl7bg_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074443
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu2cb6qt4_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered_strings []string\n    for _, s := range strings {\n    \
    \    if strings.Contains(s, substring) {\n            filtered_strings = append(filtered_strings,\
    \ s)\n        }\n    }\n    return filtered_strings\n}\n\nfunc TestFilter_By_Substring(t\
    \ *testing.T) {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]string{}, \"john\"), expected: []string{} },\n     {\
    \ actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n  \
    \   { actual: candidate([]string{\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"} },\n     { actual: candidate([]string{\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"}, \"run\"), expected: []string{\"grunt\", \"prune\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyk94370l_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu2cb6qt4_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    filtered := make([]string, 0)\n    for _, s := range strings {\n    \
    \    if strings.Contains(s, substring) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_By_Substring(t\
    \ *testing.T) {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]string{}, \"john\"), expected: []string{} },\n     {\
    \ actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n  \
    \   { actual: candidate([]string{\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"} },\n     { actual: candidate([]string{\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"}, \"run\"), expected: []string{\"grunt\", \"prune\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4tzdl7bg_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074443
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu2cb6qt4_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    filtered := []string{}\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjbecbrcg_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074443
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    filtered := []string{}\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjbecbrcg_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074443
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    filtered := []string{}\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjbecbrcg_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074443
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu2cb6qt4_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    filtered := []string{}\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjbecbrcg_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074443
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu2cb6qt4_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    filtered := make([]string, 0)\n    for _, s := range strings {\n    \
    \    if strings.Contains(s, substring) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_By_Substring(t\
    \ *testing.T) {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]string{}, \"john\"), expected: []string{} },\n     {\
    \ actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n  \
    \   { actual: candidate([]string{\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"} },\n     { actual: candidate([]string{\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"}, \"run\"), expected: []string{\"grunt\", \"prune\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4tzdl7bg_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074443
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    filtered := []string{}\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjbecbrcg_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074443
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    filtered := make([]string, 0)\n    for _, s := range strings {\n    \
    \    if strings.Contains(s, substring) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_By_Substring(t\
    \ *testing.T) {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]string{}, \"john\"), expected: []string{} },\n     {\
    \ actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n  \
    \   { actual: candidate([]string{\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"} },\n     { actual: candidate([]string{\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"}, \"run\"), expected: []string{\"grunt\", \"prune\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4tzdl7bg_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074443
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered_strings []string\n    for _, string := range strings {\n\
    \        if strings.Contains(string, substring) {\n            filtered_strings\
    \ = append(filtered_strings, string)\n        }\n    }\n    return filtered_strings\n\
    }\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\"\
    , \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpag52is5z_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074443
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    result := []string{}\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            result = append(result, s)\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkgnc5co0_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    result := []string{}\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            result = append(result, s)\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkgnc5co0_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    filtered := make([]string, 0)\n    for _, s := range strings {\n    \
    \    if strings.Contains(s, substring) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_By_Substring(t\
    \ *testing.T) {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]string{}, \"john\"), expected: []string{} },\n     {\
    \ actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n  \
    \   { actual: candidate([]string{\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"} },\n     { actual: candidate([]string{\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"}, \"run\"), expected: []string{\"grunt\", \"prune\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4tzdl7bg_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074443
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu2cb6qt4_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    filtered := []string{}\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjbecbrcg_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074443
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu2cb6qt4_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu2cb6qt4_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu2cb6qt4_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    filtered := []string{}\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjbecbrcg_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074443
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    result := []string{}\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            result = append(result, s)\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkgnc5co0_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu2cb6qt4_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered_strings []string\n    for _, string := range strings {\n\
    \        if strings.Contains(string, substring) {\n            filtered_strings\
    \ = append(filtered_strings, string)\n        }\n    }\n    return filtered_strings\n\
    }\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\"\
    , \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpag52is5z_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074443
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu2cb6qt4_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    filtered := []string{}\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjbecbrcg_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074443
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    filtered := []string{}\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjbecbrcg_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074443
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu2cb6qt4_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    filtered := make([]string, 0)\n    for _, s := range strings {\n    \
    \    if strings.Contains(s, substring) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_By_Substring(t\
    \ *testing.T) {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]string{}, \"john\"), expected: []string{} },\n     {\
    \ actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n  \
    \   { actual: candidate([]string{\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"} },\n     { actual: candidate([]string{\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"}, \"run\"), expected: []string{\"grunt\", \"prune\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4tzdl7bg_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074443
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu2cb6qt4_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu2cb6qt4_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    filtered := []string{}\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjbecbrcg_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074443
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    filteredStrings := []string{}\n    for _, s := range strings {\n    \
    \    if strings.Contains(s, substring) {\n            filteredStrings = append(filteredStrings,\
    \ s)\n        }\n    }\n    return filteredStrings\n}\n\nfunc TestFilter_By_Substring(t\
    \ *testing.T) {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]string{}, \"john\"), expected: []string{} },\n     {\
    \ actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n  \
    \   { actual: candidate([]string{\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"} },\n     { actual: candidate([]string{\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"}, \"run\"), expected: []string{\"grunt\", \"prune\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqmryrtn4_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074443
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    filteredStrings := []string{}\n    for _, string := range strings {\n\
    \        if strings.Contains(string, substring) {\n            filteredStrings\
    \ = append(filteredStrings, string)\n        }\n    }\n    return filteredStrings\n\
    }\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\"\
    , \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8qqrk1mg_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074443
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    result := []string{}\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            result = append(result, s)\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkgnc5co0_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered_strings []string\n    for _, s := range strings {\n    \
    \    if strings.Contains(s, substring) {\n            filtered_strings = append(filtered_strings,\
    \ s)\n        }\n    }\n    return filtered_strings\n}\n\nfunc TestFilter_By_Substring(t\
    \ *testing.T) {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]string{}, \"john\"), expected: []string{} },\n     {\
    \ actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n  \
    \   { actual: candidate([]string{\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"} },\n     { actual: candidate([]string{\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"}, \"run\"), expected: []string{\"grunt\", \"prune\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyk94370l_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered_strings []string\n    for _, s := range strings {\n    \
    \    if strings.Contains(s, substring) {\n            filtered_strings = append(filtered_strings,\
    \ s)\n        }\n    }\n    return filtered_strings\n}\n\nfunc TestFilter_By_Substring(t\
    \ *testing.T) {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]string{}, \"john\"), expected: []string{} },\n     {\
    \ actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n  \
    \   { actual: candidate([]string{\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"} },\n     { actual: candidate([]string{\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"}, \"run\"), expected: []string{\"grunt\", \"prune\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyk94370l_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    filtered := []string{}\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjbecbrcg_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074443
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu2cb6qt4_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu2cb6qt4_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    filtered := []string{}\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjbecbrcg_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074443
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    filtered := []string{}\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjbecbrcg_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074443
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered_strings []string\n    for _, string := range strings {\n\
    \        if strings.Contains(string, substring) {\n            filtered_strings\
    \ = append(filtered_strings, string)\n        }\n    }\n    return filtered_strings\n\
    }\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\"\
    , \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpag52is5z_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074443
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    filtered := []string{}\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjbecbrcg_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074443
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu2cb6qt4_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered_strings []string\n    for _, string := range strings {\n\
    \        if strings.Contains(string, substring) {\n            filtered_strings\
    \ = append(filtered_strings, string)\n        }\n    }\n    return filtered_strings\n\
    }\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\"\
    , \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpag52is5z_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074443
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    filtered := []string{}\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjbecbrcg_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074443
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    filtered := []string{}\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjbecbrcg_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074443
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu2cb6qt4_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    filtered := []string{}\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjbecbrcg_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074443
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu2cb6qt4_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu2cb6qt4_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    filtered := []string{}\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjbecbrcg_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074443
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu2cb6qt4_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu2cb6qt4_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    filtered := []string{}\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjbecbrcg_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074443
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    filteredStrings := []string{}\n    for _, string := range strings {\n\
    \        if strings.Contains(string, substring) {\n            filteredStrings\
    \ = append(filteredStrings, string)\n        }\n    }\n    return filteredStrings\n\
    }\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\"\
    , \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8qqrk1mg_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074443
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    filtered := []string{}\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjbecbrcg_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074443
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    filteredStrings := []string{}\n    for _, string := range strings {\n\
    \        if strings.Contains(string, substring) {\n            filteredStrings\
    \ = append(filteredStrings, string)\n        }\n    }\n    return filteredStrings\n\
    }\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\"\
    , \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8qqrk1mg_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074443
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    result := []string{}\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            result = append(result, s)\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkgnc5co0_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    filtered := []string{}\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjbecbrcg_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074443
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu2cb6qt4_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered_strings []string\n    for _, s := range strings {\n    \
    \    if strings.Contains(s, substring) {\n            filtered_strings = append(filtered_strings,\
    \ s)\n        }\n    }\n    return filtered_strings\n}\n\nfunc TestFilter_By_Substring(t\
    \ *testing.T) {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]string{}, \"john\"), expected: []string{} },\n     {\
    \ actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n  \
    \   { actual: candidate([]string{\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"} },\n     { actual: candidate([]string{\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"}, \"run\"), expected: []string{\"grunt\", \"prune\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyk94370l_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered_strings []string\n    for _, s := range strings {\n    \
    \    if strings.Contains(s, substring) {\n            filtered_strings = append(filtered_strings,\
    \ s)\n        }\n    }\n    return filtered_strings\n}\n\nfunc TestFilter_By_Substring(t\
    \ *testing.T) {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]string{}, \"john\"), expected: []string{} },\n     {\
    \ actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n  \
    \   { actual: candidate([]string{\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"} },\n     { actual: candidate([]string{\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"}, \"run\"), expected: []string{\"grunt\", \"prune\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyk94370l_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu2cb6qt4_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    filtered := []string{}\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjbecbrcg_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074443
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu2cb6qt4_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    result := []string{}\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            result = append(result, s)\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkgnc5co0_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    result := []string{}\n    for _, string := range strings {\n        if\
    \ strings.Contains(string, substring) {\n            result = append(result, string)\n\
    \        }\n    }\n    return result\n}\n\nfunc TestFilter_By_Substring(t *testing.T)\
    \ {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp570wpq1f_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074443
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    filtered := make([]string, 0)\n    for _, s := range strings {\n    \
    \    if strings.Contains(s, substring) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_By_Substring(t\
    \ *testing.T) {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]string{}, \"john\"), expected: []string{} },\n     {\
    \ actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n  \
    \   { actual: candidate([]string{\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"} },\n     { actual: candidate([]string{\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"}, \"run\"), expected: []string{\"grunt\", \"prune\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4tzdl7bg_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074443
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    filteredStrings := []string{}\n    for _, string := range strings {\n\
    \        if strings.Contains(string, substring) {\n            filteredStrings\
    \ = append(filteredStrings, string)\n        }\n    }\n    return filteredStrings\n\
    }\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\"\
    , \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8qqrk1mg_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074443
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    filtered := make([]string, 0)\n    for _, s := range strings {\n    \
    \    if strings.Contains(s, substring) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_By_Substring(t\
    \ *testing.T) {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]string{}, \"john\"), expected: []string{} },\n     {\
    \ actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n  \
    \   { actual: candidate([]string{\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"} },\n     { actual: candidate([]string{\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"}, \"run\"), expected: []string{\"grunt\", \"prune\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4tzdl7bg_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074443
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu2cb6qt4_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu2cb6qt4_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu2cb6qt4_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu2cb6qt4_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered_strings []string\n    for _, string := range strings {\n\
    \        if strings.Contains(string, substring) {\n            filtered_strings\
    \ = append(filtered_strings, string)\n        }\n    }\n    return filtered_strings\n\
    }\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\"\
    , \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpag52is5z_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074443
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    filtered := []string{}\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjbecbrcg_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074443
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu2cb6qt4_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu2cb6qt4_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    result := []string{}\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            result = append(result, s)\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkgnc5co0_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu2cb6qt4_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    filteredStrings := []string{}\n    for _, string := range strings {\n\
    \        if strings.Contains(string, substring) {\n            filteredStrings\
    \ = append(filteredStrings, string)\n        }\n    }\n    return filteredStrings\n\
    }\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\"\
    , \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8qqrk1mg_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074443
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    filtered := []string{}\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjbecbrcg_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074443
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu2cb6qt4_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu2cb6qt4_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu2cb6qt4_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu2cb6qt4_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    result := []string{}\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            result = append(result, s)\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkgnc5co0_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    filtered := []string{}\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjbecbrcg_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074443
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    filtered := []string{}\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjbecbrcg_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074443
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    filtered := []string{}\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjbecbrcg_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074443
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered_strings []string\n    for _, string := range strings {\n\
    \        if strings.Contains(string, substring) {\n            filtered_strings\
    \ = append(filtered_strings, string)\n        }\n    }\n    return filtered_strings\n\
    }\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\"\
    , \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpag52is5z_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074443
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    filtered := []string{}\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjbecbrcg_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074443
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    filtered := []string{}\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjbecbrcg_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074443
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu2cb6qt4_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu2cb6qt4_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu2cb6qt4_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    filteredStrings := []string{}\n    for _, string := range strings {\n\
    \        if strings.Contains(string, substring) {\n            filteredStrings\
    \ = append(filteredStrings, string)\n        }\n    }\n    return filteredStrings\n\
    }\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\"\
    , \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8qqrk1mg_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074443
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    filtered := []string{}\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjbecbrcg_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074443
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    filtered := []string{}\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjbecbrcg_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074443
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    filtered := []string{}\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjbecbrcg_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074443
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu2cb6qt4_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    filtered := []string{}\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjbecbrcg_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074443
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu2cb6qt4_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    filteredStrings := []string{}\n    for _, string := range strings {\n\
    \        if strings.Contains(string, substring) {\n            filteredStrings\
    \ = append(filteredStrings, string)\n        }\n    }\n    return filteredStrings\n\
    }\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\"\
    , \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8qqrk1mg_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074443
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    filtered := []string{}\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjbecbrcg_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074443
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    filteredStrings := []string{}\n    for _, string := range strings {\n\
    \        if strings.Contains(string, substring) {\n            filteredStrings\
    \ = append(filteredStrings, string)\n        }\n    }\n    return filteredStrings\n\
    }\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\"\
    , \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8qqrk1mg_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074443
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered_strings []string\n    for _, string := range strings {\n\
    \        if strings.Contains(string, substring) {\n            filtered_strings\
    \ = append(filtered_strings, string)\n        }\n    }\n    return filtered_strings\n\
    }\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\"\
    , \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpag52is5z_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074443
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered_strings []string\n    for _, string := range strings {\n\
    \        if strings.Contains(string, substring) {\n            filtered_strings\
    \ = append(filtered_strings, string)\n        }\n    }\n    return filtered_strings\n\
    }\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate := filter_by_substring\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{}, \"john\"), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"xxy\",\
    \ \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"\
    xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"grunt\"\
    , \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpag52is5z_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074443
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    filtered := make([]string, 0)\n    for _, s := range strings {\n    \
    \    if strings.Contains(s, substring) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered\n}\n\nfunc TestFilter_By_Substring(t\
    \ *testing.T) {\n  candidate := filter_by_substring\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]string{}, \"john\"), expected: []string{} },\n     {\
    \ actual: candidate([]string{\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"}, \"xxx\"), expected: []string{\"xxx\", \"xxxAAA\", \"xxx\"} },\n  \
    \   { actual: candidate([]string{\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"} },\n     { actual: candidate([]string{\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"}, \"run\"), expected: []string{\"grunt\", \"prune\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4tzdl7bg_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074443
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    filtered := []string{}\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjbecbrcg_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074443
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    var filtered []string\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu2cb6qt4_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074284
- exit_code: 2
  program: "package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given\
    \ substring\nfunc filter_by_substring(strings []string, substring string) []string\
    \ {\n    filtered := []string{}\n    for _, s := range strings {\n        if strings.Contains(s,\
    \ substring) {\n            filtered = append(filtered, s)\n        }\n    }\n\
    \    return filtered\n}\n\nfunc TestFilter_By_Substring(t *testing.T) {\n  candidate\
    \ := filter_by_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{},\
    \ \"john\"), expected: []string{} },\n     { actual: candidate([]string{\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), expected: []string{\"\
    xxx\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"), expected: []string{\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"} },\n     { actual: candidate([]string{\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\"), expected: []string{\"\
    grunt\", \"prune\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjbecbrcg_test.go:12:20: strings.Contains undefined (type []string has
    no field or method Contains)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074443
