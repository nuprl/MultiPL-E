language: go_test.go
name: HumanEval_152_compare
results:
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    result := make([]int, len(guess))\n\
    \    for i := range guess {\n        result[i] = abs(game[i] - guess[i])\n   \
    \ }\n    return result\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate :=\
    \ compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzzw7uzen_test.go:19:21: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074275
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ range guess {\n        if game[i] != guess[i] {\n            result = append(result,\
    \ abs(game[i] - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t\
    \ *testing.T) {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4fth8czm_test.go:20:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074274
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    // Your code here\n}\n\nfunc TestCompare(t\
    \ *testing.T) {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvdg15f6w_test.go:18:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074274
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    // Your code here\n}\n\nfunc TestCompare(t\
    \ *testing.T) {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvdg15f6w_test.go:18:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074274
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    result := make([]int, len(guess))\n\
    \    for i := range guess {\n        result[i] = abs(game[i] - guess[i])\n   \
    \ }\n    return result\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate :=\
    \ compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzzw7uzen_test.go:19:21: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074275
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    // Your code here\n    \n    return\
    \ guess\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate := compare\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1, 2, 3,\
    \ 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCompare (0.00s)\n    --- FAIL: TestCompare/test_num__0 (0.00s)\n\
    \        tmpznztk0n8_test.go:38: expected '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=3) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=2)\
    \ %!s(int=-2)]'\n    --- FAIL: TestCompare/test_num__2 (0.00s)\n        tmpznztk0n8_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6)]', got '[%!s(int=-1) %!s(int=-2)\
    \ %!s(int=-3)]'\n    --- FAIL: TestCompare/test_num__3 (0.00s)\n        tmpznztk0n8_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=0) %!s(int=0) %!s(int=1)]', got '[%!s(int=-1)\
    \ %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660074275
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    // Your code here\n    return\
    \ guess\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate := compare\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1, 2, 3,\
    \ 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCompare (0.00s)\n    --- FAIL: TestCompare/test_num__0 (0.00s)\n\
    \        tmpkuodnwai_test.go:37: expected '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=3) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=2)\
    \ %!s(int=-2)]'\n    --- FAIL: TestCompare/test_num__2 (0.00s)\n        tmpkuodnwai_test.go:37:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6)]', got '[%!s(int=-1) %!s(int=-2)\
    \ %!s(int=-3)]'\n    --- FAIL: TestCompare/test_num__3 (0.00s)\n        tmpkuodnwai_test.go:37:\
    \ expected '[%!s(int=2) %!s(int=0) %!s(int=0) %!s(int=1)]', got '[%!s(int=-1)\
    \ %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660074275
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ range guess {\n        if game[i] != guess[i] {\n            result = append(result,\
    \ abs(game[i] - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t\
    \ *testing.T) {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4fth8czm_test.go:20:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074274
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    // TODO: Write a function that\
    \ will compare two arrays of ints and return an array of the same length\n   \
    \ // denoting how far off each guess was. If they have guessed correctly, the\
    \ value is 0, and if not, the value\n    // is the absolute difference between\
    \ the guess and the score.\n    // example:\n    \n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1xbll4eu_test.go:22:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074274
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    // Your code here\n}\n\nfunc TestCompare(t\
    \ *testing.T) {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvdg15f6w_test.go:18:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074274
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    // Your code here\n    \n    return\
    \ guess\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate := compare\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1, 2, 3,\
    \ 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCompare (0.00s)\n    --- FAIL: TestCompare/test_num__0 (0.00s)\n\
    \        tmpznztk0n8_test.go:38: expected '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=3) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=2)\
    \ %!s(int=-2)]'\n    --- FAIL: TestCompare/test_num__2 (0.00s)\n        tmpznztk0n8_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6)]', got '[%!s(int=-1) %!s(int=-2)\
    \ %!s(int=-3)]'\n    --- FAIL: TestCompare/test_num__3 (0.00s)\n        tmpznztk0n8_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=0) %!s(int=0) %!s(int=1)]', got '[%!s(int=-1)\
    \ %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660074275
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    // Your code here\n}\n\nfunc TestCompare(t\
    \ *testing.T) {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvdg15f6w_test.go:18:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074274
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    result := make([]int, len(guess))\n\
    \    for i, score := range game {\n        if guess[i] == score {\n          \
    \  result[i] = 0\n        } else {\n            result[i] = abs(guess[i] - score)\n\
    \        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T) {\n\
    \  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8vp4kk1w_test.go:22:25: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074274
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    // TODO: Write a function that\
    \ returns an array of ints denoting how far off each guess was\n    // if the\
    \ guesses were correct, the value should be 0, otherwise the value should be the\
    \ absolute difference between the guess and the score\n    return guess\n}\n\n\
    func TestCompare(t *testing.T) {\n  candidate := compare\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}),\
    \ expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0, 0, 0,\
    \ 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0} },\n \
    \    { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCompare (0.00s)\n    --- FAIL: TestCompare/test_num__0 (0.00s)\n\
    \        tmptbmzejoj_test.go:38: expected '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=3) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=2)\
    \ %!s(int=-2)]'\n    --- FAIL: TestCompare/test_num__2 (0.00s)\n        tmptbmzejoj_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6)]', got '[%!s(int=-1) %!s(int=-2)\
    \ %!s(int=-3)]'\n    --- FAIL: TestCompare/test_num__3 (0.00s)\n        tmptbmzejoj_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=0) %!s(int=0) %!s(int=1)]', got '[%!s(int=-1)\
    \ %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660074275
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    \n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8zyuvpyf_test.go:18:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074274
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    result := make([]int, len(guess))\n\
    \    for i := range result {\n        result[i] = 0\n    }\n    for i := range\
    \ guess {\n        if game[i] == guess[i] {\n            result[i] = 0\n     \
    \   } else {\n            result[i] = abs(game[i] - guess[i])\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate :=\
    \ compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpop5rib5k_test.go:25:25: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074275
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    // Your code here\n}\n\nfunc TestCompare(t\
    \ *testing.T) {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvdg15f6w_test.go:18:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074274
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    // Your code here\n    \n}\n\n\
    func TestCompare(t *testing.T) {\n  candidate := compare\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}),\
    \ expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0, 0, 0,\
    \ 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0} },\n \
    \    { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsakmr3d3_test.go:19:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074274
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    // Your code here\n}\n\nfunc TestCompare(t\
    \ *testing.T) {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvdg15f6w_test.go:18:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074274
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    result := make([]int, len(guess))\n\
    \    for i := range guess {\n        result[i] = abs(game[i] - guess[i])\n   \
    \ }\n    return result\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate :=\
    \ compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzzw7uzen_test.go:19:21: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074275
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    // TODO: Write your comparison\
    \ function here\n    return guess\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate\
    \ := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCompare (0.00s)\n    --- FAIL: TestCompare/test_num__0 (0.00s)\n\
    \        tmpcs_5gcyd_test.go:37: expected '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=3) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=2)\
    \ %!s(int=-2)]'\n    --- FAIL: TestCompare/test_num__2 (0.00s)\n        tmpcs_5gcyd_test.go:37:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6)]', got '[%!s(int=-1) %!s(int=-2)\
    \ %!s(int=-3)]'\n    --- FAIL: TestCompare/test_num__3 (0.00s)\n        tmpcs_5gcyd_test.go:37:\
    \ expected '[%!s(int=2) %!s(int=0) %!s(int=0) %!s(int=1)]', got '[%!s(int=-1)\
    \ %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660074275
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    result := make([]int, len(guess))\n\
    \    for i := range guess {\n        result[i] = abs(game[i] - guess[i])\n   \
    \ }\n    return result\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate :=\
    \ compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzzw7uzen_test.go:19:21: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074275
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    // Your code here\n}\n\nfunc TestCompare(t\
    \ *testing.T) {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvdg15f6w_test.go:18:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074274
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    // Your code here\n    \n}\n\n\
    func TestCompare(t *testing.T) {\n  candidate := compare\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}),\
    \ expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0, 0, 0,\
    \ 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0} },\n \
    \    { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsakmr3d3_test.go:19:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074274
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    // Your code here\n    \n    return\
    \ guess\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate := compare\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1, 2, 3,\
    \ 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCompare (0.00s)\n    --- FAIL: TestCompare/test_num__0 (0.00s)\n\
    \        tmpznztk0n8_test.go:38: expected '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=3) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=2)\
    \ %!s(int=-2)]'\n    --- FAIL: TestCompare/test_num__2 (0.00s)\n        tmpznztk0n8_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6)]', got '[%!s(int=-1) %!s(int=-2)\
    \ %!s(int=-3)]'\n    --- FAIL: TestCompare/test_num__3 (0.00s)\n        tmpznztk0n8_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=0) %!s(int=0) %!s(int=1)]', got '[%!s(int=-1)\
    \ %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660074275
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    // Your code here\n}\n\nfunc TestCompare(t\
    \ *testing.T) {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvdg15f6w_test.go:18:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074274
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    // Your code here\n}\n\nfunc TestCompare(t\
    \ *testing.T) {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvdg15f6w_test.go:18:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074274
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    result := make([]int, len(guess))\n\
    \    for i := range result {\n        result[i] = 0\n    }\n    for i := range\
    \ guess {\n        if game[i] == guess[i] {\n            result[i] = 0\n     \
    \   } else {\n            result[i] = abs(game[i] - guess[i])\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate :=\
    \ compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpop5rib5k_test.go:25:25: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074275
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    // Your code here\n}\n\nfunc TestCompare(t\
    \ *testing.T) {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvdg15f6w_test.go:18:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074274
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    // Your code here\n    \n}\n\n\
    func TestCompare(t *testing.T) {\n  candidate := compare\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}),\
    \ expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0, 0, 0,\
    \ 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0} },\n \
    \    { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsakmr3d3_test.go:19:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074274
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    // TODO: Your code here\n    return\
    \ guess\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate := compare\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1, 2, 3,\
    \ 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCompare (0.00s)\n    --- FAIL: TestCompare/test_num__0 (0.00s)\n\
    \        tmpdw0hhreb_test.go:37: expected '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=3) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=2)\
    \ %!s(int=-2)]'\n    --- FAIL: TestCompare/test_num__2 (0.00s)\n        tmpdw0hhreb_test.go:37:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6)]', got '[%!s(int=-1) %!s(int=-2)\
    \ %!s(int=-3)]'\n    --- FAIL: TestCompare/test_num__3 (0.00s)\n        tmpdw0hhreb_test.go:37:\
    \ expected '[%!s(int=2) %!s(int=0) %!s(int=0) %!s(int=1)]', got '[%!s(int=-1)\
    \ %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660074275
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    // Your code here\n}\n\nfunc TestCompare(t\
    \ *testing.T) {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvdg15f6w_test.go:18:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074274
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    \n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8zyuvpyf_test.go:18:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074274
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    // Your code here\n}\n\nfunc TestCompare(t\
    \ *testing.T) {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvdg15f6w_test.go:18:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074274
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    // Your code here\n    \n}\n\n\
    func TestCompare(t *testing.T) {\n  candidate := compare\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}),\
    \ expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0, 0, 0,\
    \ 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0} },\n \
    \    { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsakmr3d3_test.go:19:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074274
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    result := make([]int, len(guess))\n\
    \    for i := range guess {\n        result[i] = abs(game[i] - guess[i])\n   \
    \ }\n    return result\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate :=\
    \ compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzzw7uzen_test.go:19:21: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074275
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    result := make([]int, len(guess))\n\
    \    for i := range guess {\n        result[i] = abs(game[i] - guess[i])\n   \
    \ }\n    return result\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate :=\
    \ compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzzw7uzen_test.go:19:21: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074275
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    // Your code here\n    \n    return\
    \ guess\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate := compare\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1, 2, 3,\
    \ 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCompare (0.00s)\n    --- FAIL: TestCompare/test_num__0 (0.00s)\n\
    \        tmpznztk0n8_test.go:38: expected '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=3) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=2)\
    \ %!s(int=-2)]'\n    --- FAIL: TestCompare/test_num__2 (0.00s)\n        tmpznztk0n8_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6)]', got '[%!s(int=-1) %!s(int=-2)\
    \ %!s(int=-3)]'\n    --- FAIL: TestCompare/test_num__3 (0.00s)\n        tmpznztk0n8_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=0) %!s(int=0) %!s(int=1)]', got '[%!s(int=-1)\
    \ %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660074275
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    result := make([]int, len(guess))\n\
    \    for i := range guess {\n        result[i] = abs(game[i] - guess[i])\n   \
    \ }\n    return result\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate :=\
    \ compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzzw7uzen_test.go:19:21: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074275
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    result := make([]int, len(guess))\n\
    \    for i := range guess {\n        result[i] = abs(game[i] - guess[i])\n   \
    \ }\n    return result\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate :=\
    \ compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzzw7uzen_test.go:19:21: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074275
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    // Your code here\n    \n    return\
    \ guess\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate := compare\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1, 2, 3,\
    \ 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCompare (0.00s)\n    --- FAIL: TestCompare/test_num__0 (0.00s)\n\
    \        tmpznztk0n8_test.go:38: expected '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=3) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=2)\
    \ %!s(int=-2)]'\n    --- FAIL: TestCompare/test_num__2 (0.00s)\n        tmpznztk0n8_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6)]', got '[%!s(int=-1) %!s(int=-2)\
    \ %!s(int=-3)]'\n    --- FAIL: TestCompare/test_num__3 (0.00s)\n        tmpznztk0n8_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=0) %!s(int=0) %!s(int=1)]', got '[%!s(int=-1)\
    \ %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660074275
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(guess); i++ {\n        if game[i] != guess[i] {\n            result\
    \ = append(result, abs(game[i] - guess[i]))\n        } else {\n            result\
    \ = []int{0, 0}\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t\
    \ *testing.T) {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmcp4_3w__test.go:20:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074275
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    // Your code here\n}\n\nfunc TestCompare(t\
    \ *testing.T) {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvdg15f6w_test.go:18:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074274
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    // Your code here\n}\n\nfunc TestCompare(t\
    \ *testing.T) {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvdg15f6w_test.go:18:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074274
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    // Your code here\n    \n    return\
    \ guess\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate := compare\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1, 2, 3,\
    \ 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCompare (0.00s)\n    --- FAIL: TestCompare/test_num__0 (0.00s)\n\
    \        tmpznztk0n8_test.go:38: expected '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=3) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=2)\
    \ %!s(int=-2)]'\n    --- FAIL: TestCompare/test_num__2 (0.00s)\n        tmpznztk0n8_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6)]', got '[%!s(int=-1) %!s(int=-2)\
    \ %!s(int=-3)]'\n    --- FAIL: TestCompare/test_num__3 (0.00s)\n        tmpznztk0n8_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=0) %!s(int=0) %!s(int=1)]', got '[%!s(int=-1)\
    \ %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660074275
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    result := make([]int, len(guess))\n\
    \    for i := range guess {\n        result[i] = abs(game[i] - guess[i])\n   \
    \ }\n    return result\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate :=\
    \ compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzzw7uzen_test.go:19:21: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074275
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    var score\
    \ int\n    var guess int\n    var i int\n    var j int\n    var k int\n    for\
    \ i = 0; i < len(game); i++ {\n        score = game[i]\n        guess = guess[i]\n\
    \        for j = i; j < len(game); j++ {\n            k = j\n            if guess\
    \ == game[k] {\n                score++\n                k++\n            }\n\
    \            if score > game[k] {\n                score--\n                k--\n\
    \            }\n        }\n        result[i] = score\n    }\n    return result\n\
    }\n\nfunc TestCompare(t *testing.T) {\n  candidate := compare\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}),\
    \ expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0, 0, 0,\
    \ 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0} },\n \
    \    { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpsx5y85sy_test.go:19:9:\
    \ guess redeclared in this block\n\t/tmp/tmpsx5y85sy_test.go:16:26: other declaration\
    \ of guess\n/tmp/tmpsx5y85sy_test.go:25:17: cannot use guess[i] (variable of type\
    \ int) as type []int in assignment\n/tmp/tmpsx5y85sy_test.go:28:25: invalid operation:\
    \ guess == game[k] (mismatched types []int and int)\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074275
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    // TODO: Write a function that\
    \ will compare two arrays of ints and return an array of ints\n    // denoting\
    \ how far off each guess was. If they have guessed correctly, the value is 0,\n\
    \    // and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // The function should return an array of ints denoting how\
    \ far off each guess was.\n    // The function should return an array of ints\
    \ denoting how far off each guess was.\n    // The function should return an array\
    \ of ints denoting how far off each guess was.\n    // The function should return\
    \ an array of ints denoting how far off each guess was.\n    // The function should\
    \ return an array of ints denoting how far off each guess was.\n    // The function\
    \ should return an array of ints denoting how far off each guess was.\n    //\
    \ The function should return an array of ints denoting how far off each guess\
    \ was.\n    // The function should return an array of ints denoting how far off\
    \ each guess was.\n    // The function should return an array of ints denoting\
    \ how far off each guess was.\n    // The function should return an array of ints\
    \ denoting how far off each guess was.\n    // The function should return an array\
    \ of ints denoting how far off each guess was.\n    // The function should return\
    \ an array of ints denoting how far off each guess was.\n    // The function should\
    \ return an array of ints denoting how far off each guess was.\n    // The function\
    \ should return an array of ints denoting how far off each guess was.\n    //\
    \ The function should return an array of ints denoting how far off each guess\
    \ was.\n    // The function should return an array of ints denoting how far off\
    \ each guess was.\n    // The function should return an array of ints denoting\
    \ how far off each guess was.\n    // The function should return an array of ints\
    \ denoting how far off each guess was.\n    // The function should return an array\
    \ of ints denoting how far off each guess was.\n    // The function should return\
    \ an array of ints denoting how far off each guess was.\n    // The function should\
    \ return an array of ints denoting how far off each guess was.\n    // The function\
    \ should return an array of ints denoting how far off each guess was.\n    //\
    \ The function should return an array of ints denoting how far off each guess\
    \ was.\n    // The function should return an array of ints denoting how far off\
    \ each guess was.\n    // The function should \nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpeffh8jx__test.go:45:6: expected ''('', found TestCompare

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074274
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(guess); i++ {\n        if game[i] != guess[i] {\n            result\
    \ = append(result, abs(game[i] - guess[i]))\n        }\n    }\n    return result\n\
    }\n\nfunc TestCompare(t *testing.T) {\n  candidate := compare\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}),\
    \ expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0, 0, 0,\
    \ 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0} },\n \
    \    { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6vftg7kf_test.go:20:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074274
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    // Your code here\n    \n    return\
    \ guess\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate := compare\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1, 2, 3,\
    \ 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCompare (0.00s)\n    --- FAIL: TestCompare/test_num__0 (0.00s)\n\
    \        tmpznztk0n8_test.go:38: expected '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=3) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=2)\
    \ %!s(int=-2)]'\n    --- FAIL: TestCompare/test_num__2 (0.00s)\n        tmpznztk0n8_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6)]', got '[%!s(int=-1) %!s(int=-2)\
    \ %!s(int=-3)]'\n    --- FAIL: TestCompare/test_num__3 (0.00s)\n        tmpznztk0n8_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=0) %!s(int=0) %!s(int=1)]', got '[%!s(int=-1)\
    \ %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660074275
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    // Your code here\n    \n    return\
    \ guess\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate := compare\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1, 2, 3,\
    \ 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCompare (0.00s)\n    --- FAIL: TestCompare/test_num__0 (0.00s)\n\
    \        tmpznztk0n8_test.go:38: expected '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=3) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=2)\
    \ %!s(int=-2)]'\n    --- FAIL: TestCompare/test_num__2 (0.00s)\n        tmpznztk0n8_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6)]', got '[%!s(int=-1) %!s(int=-2)\
    \ %!s(int=-3)]'\n    --- FAIL: TestCompare/test_num__3 (0.00s)\n        tmpznztk0n8_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=0) %!s(int=0) %!s(int=1)]', got '[%!s(int=-1)\
    \ %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660074275
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    result := make([]int, len(guess))\n\
    \    for i := range guess {\n        result[i] = abs(game[i] - guess[i])\n   \
    \ }\n    return result\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate :=\
    \ compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzzw7uzen_test.go:19:21: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074275
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    // TODO: Write your code here\n\
    \    \n    return guess\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate :=\
    \ compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCompare (0.00s)\n    --- FAIL: TestCompare/test_num__0 (0.00s)\n\
    \        tmps33g5lut_test.go:38: expected '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=3) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=2)\
    \ %!s(int=-2)]'\n    --- FAIL: TestCompare/test_num__2 (0.00s)\n        tmps33g5lut_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6)]', got '[%!s(int=-1) %!s(int=-2)\
    \ %!s(int=-3)]'\n    --- FAIL: TestCompare/test_num__3 (0.00s)\n        tmps33g5lut_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=0) %!s(int=0) %!s(int=1)]', got '[%!s(int=-1)\
    \ %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660074275
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    result := make([]int, len(guess))\n\
    \    for i := range guess {\n        result[i] = abs(game[i] - guess[i])\n   \
    \ }\n    return result\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate :=\
    \ compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzzw7uzen_test.go:19:21: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074275
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(guess); i++ {\n        if game[i] == guess[i] {\n            result[i]\
    \ = 0\n        } else {\n            result[i] = abs(game[i] - guess[i])\n   \
    \     }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate\
    \ := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq07lmcxi_test.go:22:25: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074274
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    // Your code here\n}\n\nfunc TestCompare(t\
    \ *testing.T) {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvdg15f6w_test.go:18:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074274
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(guess); i++ {\n        if game[i] != guess[i] {\n            result\
    \ = append(result, abs(game[i] - guess[i]))\n        }\n    }\n    return result\n\
    }\n\nfunc TestCompare(t *testing.T) {\n  candidate := compare\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}),\
    \ expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0, 0, 0,\
    \ 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0} },\n \
    \    { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6vftg7kf_test.go:20:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074274
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    // Your code here\n}\n\nfunc TestCompare(t\
    \ *testing.T) {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvdg15f6w_test.go:18:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074274
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    // TODO: Write a function that\
    \ will compare two arrays of ints and return an array of ints denoting how far\
    \ off each guess was\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate := compare\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkrsh7aox_test.go:18:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074275
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    result := make([]int, len(guess))\n\
    \    for i := range guess {\n        result[i] = abs(game[i] - guess[i])\n   \
    \ }\n    return result\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate :=\
    \ compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzzw7uzen_test.go:19:21: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074275
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    result := make([]int, len(guess))\n\
    \    for i := range guess {\n        result[i] = abs(game[i] - guess[i])\n   \
    \ }\n    return result\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate :=\
    \ compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzzw7uzen_test.go:19:21: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074275
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    // Your code here\n    \n    return\
    \ guess\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate := compare\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1, 2, 3,\
    \ 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCompare (0.00s)\n    --- FAIL: TestCompare/test_num__0 (0.00s)\n\
    \        tmpznztk0n8_test.go:38: expected '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=3) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=2)\
    \ %!s(int=-2)]'\n    --- FAIL: TestCompare/test_num__2 (0.00s)\n        tmpznztk0n8_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6)]', got '[%!s(int=-1) %!s(int=-2)\
    \ %!s(int=-3)]'\n    --- FAIL: TestCompare/test_num__3 (0.00s)\n        tmpznztk0n8_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=0) %!s(int=0) %!s(int=1)]', got '[%!s(int=-1)\
    \ %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660074275
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    // Your code here\n}\n\nfunc TestCompare(t\
    \ *testing.T) {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvdg15f6w_test.go:18:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074274
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    result := make([]int, len(guess))\n\
    \    for i := range guess {\n        result[i] = abs(game[i] - guess[i])\n   \
    \ }\n    return result\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate :=\
    \ compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzzw7uzen_test.go:19:21: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074275
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    // Your code here\n    \n    return\
    \ guess\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate := compare\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1, 2, 3,\
    \ 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCompare (0.00s)\n    --- FAIL: TestCompare/test_num__0 (0.00s)\n\
    \        tmpznztk0n8_test.go:38: expected '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=3) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=2)\
    \ %!s(int=-2)]'\n    --- FAIL: TestCompare/test_num__2 (0.00s)\n        tmpznztk0n8_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6)]', got '[%!s(int=-1) %!s(int=-2)\
    \ %!s(int=-3)]'\n    --- FAIL: TestCompare/test_num__3 (0.00s)\n        tmpznztk0n8_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=0) %!s(int=0) %!s(int=1)]', got '[%!s(int=-1)\
    \ %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660074275
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    // Your code here\n}\n\nfunc TestCompare(t\
    \ *testing.T) {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvdg15f6w_test.go:18:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074274
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    \n    //\
    \ Your code here\n    \n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCompare (0.00s)\n    --- FAIL: TestCompare/test_num__0 (0.00s)\n\
    \        tmpgu6tefh__test.go:40: expected '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=3) %!s(int=3)]', got '[]'\n    --- FAIL: TestCompare/test_num__1 (0.00s)\n\
    \        tmpgu6tefh__test.go:40: expected '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0)]', got '[]'\n    --- FAIL: TestCompare/test_num__2 (0.00s)\n\
    \        tmpgu6tefh__test.go:40: expected '[%!s(int=2) %!s(int=4) %!s(int=6)]',\
    \ got '[]'\n    --- FAIL: TestCompare/test_num__3 (0.00s)\n        tmpgu6tefh__test.go:40:\
    \ expected '[%!s(int=2) %!s(int=0) %!s(int=0) %!s(int=1)]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074275
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    result := make([]int, len(guess))\n\
    \    for i := range result {\n        result[i] = 0\n    }\n    \n    for i :=\
    \ range guess {\n        if game[i] == guess[i] {\n            result[i] = 0\n\
    \        } else {\n            result[i] = abs(guess[i] - game[i])\n        }\n\
    \    }\n    return result\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate\
    \ := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7w0z94by_test.go:26:25: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074275
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    // Your code here\n}\n\nfunc TestCompare(t\
    \ *testing.T) {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvdg15f6w_test.go:18:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074274
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    // Your code here\n    \n    return\
    \ guess\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate := compare\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1, 2, 3,\
    \ 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCompare (0.00s)\n    --- FAIL: TestCompare/test_num__0 (0.00s)\n\
    \        tmpznztk0n8_test.go:38: expected '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=3) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=2)\
    \ %!s(int=-2)]'\n    --- FAIL: TestCompare/test_num__2 (0.00s)\n        tmpznztk0n8_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6)]', got '[%!s(int=-1) %!s(int=-2)\
    \ %!s(int=-3)]'\n    --- FAIL: TestCompare/test_num__3 (0.00s)\n        tmpznztk0n8_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=0) %!s(int=0) %!s(int=1)]', got '[%!s(int=-1)\
    \ %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660074275
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    // Your code here\n    \n}\n\n\
    func TestCompare(t *testing.T) {\n  candidate := compare\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}),\
    \ expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0, 0, 0,\
    \ 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0} },\n \
    \    { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsakmr3d3_test.go:19:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074274
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    result := make([]int, len(guess))\n\
    \    for i := range result {\n        result[i] = 0\n    }\n    for i := range\
    \ guess {\n        if game[i] != guess[i] {\n            result[i] = abs(game[i]\
    \ - guess[i])\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvnm0p4hy_test.go:23:25: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074274
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    // Your code here\n    return\
    \ guess\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate := compare\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1, 2, 3,\
    \ 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCompare (0.00s)\n    --- FAIL: TestCompare/test_num__0 (0.00s)\n\
    \        tmpkuodnwai_test.go:37: expected '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=3) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=2)\
    \ %!s(int=-2)]'\n    --- FAIL: TestCompare/test_num__2 (0.00s)\n        tmpkuodnwai_test.go:37:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6)]', got '[%!s(int=-1) %!s(int=-2)\
    \ %!s(int=-3)]'\n    --- FAIL: TestCompare/test_num__3 (0.00s)\n        tmpkuodnwai_test.go:37:\
    \ expected '[%!s(int=2) %!s(int=0) %!s(int=0) %!s(int=1)]', got '[%!s(int=-1)\
    \ %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660074275
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    // Your code here\n}\n\nfunc TestCompare(t\
    \ *testing.T) {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvdg15f6w_test.go:18:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074274
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    result := make([]int, len(guess))\n\
    \    for i := range guess {\n        result[i] = abs(game[i] - guess[i])\n   \
    \ }\n    return result\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate :=\
    \ compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzzw7uzen_test.go:19:21: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074275
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    // Your code here\n    \n}\n\n\
    func TestCompare(t *testing.T) {\n  candidate := compare\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}),\
    \ expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0, 0, 0,\
    \ 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0} },\n \
    \    { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsakmr3d3_test.go:19:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074274
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    // Your code here\n}\n\nfunc TestCompare(t\
    \ *testing.T) {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvdg15f6w_test.go:18:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074274
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    result := make([]int, len(guess))\n\
    \    for i := range guess {\n        result[i] = abs(game[i] - guess[i])\n   \
    \ }\n    return result\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate :=\
    \ compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzzw7uzen_test.go:19:21: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074275
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    \n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8zyuvpyf_test.go:18:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074274
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    // Your code here\n}\n\nfunc TestCompare(t\
    \ *testing.T) {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvdg15f6w_test.go:18:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074274
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    // Your code here\n}\n\nfunc TestCompare(t\
    \ *testing.T) {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvdg15f6w_test.go:18:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074274
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    // Your code here\n    \n    return\
    \ guess\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate := compare\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1, 2, 3,\
    \ 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCompare (0.00s)\n    --- FAIL: TestCompare/test_num__0 (0.00s)\n\
    \        tmpznztk0n8_test.go:38: expected '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=3) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=2)\
    \ %!s(int=-2)]'\n    --- FAIL: TestCompare/test_num__2 (0.00s)\n        tmpznztk0n8_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6)]', got '[%!s(int=-1) %!s(int=-2)\
    \ %!s(int=-3)]'\n    --- FAIL: TestCompare/test_num__3 (0.00s)\n        tmpznztk0n8_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=0) %!s(int=0) %!s(int=1)]', got '[%!s(int=-1)\
    \ %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660074275
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    // Your code here\n}\n\nfunc TestCompare(t\
    \ *testing.T) {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvdg15f6w_test.go:18:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074274
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    result := make([]int, len(guess))\n\
    \    for i := range guess {\n        result[i] = abs(game[i] - guess[i])\n   \
    \ }\n    return result\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate :=\
    \ compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzzw7uzen_test.go:19:21: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074275
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    result := make([]int, len(guess))\n\
    \    for i := range result {\n        result[i] = 0\n    }\n    for i := range\
    \ guess {\n        if game[i] != guess[i] {\n            result[i] = abs(game[i]\
    \ - guess[i])\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvnm0p4hy_test.go:23:25: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074274
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    // Your code here\n}\n\nfunc TestCompare(t\
    \ *testing.T) {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvdg15f6w_test.go:18:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074274
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    result := make([]int, len(guess))\n\
    \    for i := range result {\n        result[i] = 0\n    }\n    for i := range\
    \ guess {\n        if game[i] == guess[i] {\n            result[i] = 0\n     \
    \   } else {\n            result[i] = abs(game[i] - guess[i])\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate :=\
    \ compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpop5rib5k_test.go:25:25: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074275
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    // Your code here\n    \n    return\
    \ guess\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate := compare\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1, 2, 3,\
    \ 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCompare (0.00s)\n    --- FAIL: TestCompare/test_num__0 (0.00s)\n\
    \        tmpznztk0n8_test.go:38: expected '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=3) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=2)\
    \ %!s(int=-2)]'\n    --- FAIL: TestCompare/test_num__2 (0.00s)\n        tmpznztk0n8_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6)]', got '[%!s(int=-1) %!s(int=-2)\
    \ %!s(int=-3)]'\n    --- FAIL: TestCompare/test_num__3 (0.00s)\n        tmpznztk0n8_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=0) %!s(int=0) %!s(int=1)]', got '[%!s(int=-1)\
    \ %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660074275
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    // Your code here\n}\n\nfunc TestCompare(t\
    \ *testing.T) {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvdg15f6w_test.go:18:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074274
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    // Your code here\n}\n\nfunc TestCompare(t\
    \ *testing.T) {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvdg15f6w_test.go:18:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074274
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    // TODO: Write code here\n   \
    \ return guess\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate := compare\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCompare (0.00s)\n    --- FAIL: TestCompare/test_num__0 (0.00s)\n\
    \        tmphjbnzc3m_test.go:37: expected '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=3) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=2)\
    \ %!s(int=-2)]'\n    --- FAIL: TestCompare/test_num__2 (0.00s)\n        tmphjbnzc3m_test.go:37:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6)]', got '[%!s(int=-1) %!s(int=-2)\
    \ %!s(int=-3)]'\n    --- FAIL: TestCompare/test_num__3 (0.00s)\n        tmphjbnzc3m_test.go:37:\
    \ expected '[%!s(int=2) %!s(int=0) %!s(int=0) %!s(int=1)]', got '[%!s(int=-1)\
    \ %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660074275
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    // Your code here\n    \n    return\
    \ guess\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate := compare\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1, 2, 3,\
    \ 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCompare (0.00s)\n    --- FAIL: TestCompare/test_num__0 (0.00s)\n\
    \        tmpznztk0n8_test.go:38: expected '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=3) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=2)\
    \ %!s(int=-2)]'\n    --- FAIL: TestCompare/test_num__2 (0.00s)\n        tmpznztk0n8_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6)]', got '[%!s(int=-1) %!s(int=-2)\
    \ %!s(int=-3)]'\n    --- FAIL: TestCompare/test_num__3 (0.00s)\n        tmpznztk0n8_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=0) %!s(int=0) %!s(int=1)]', got '[%!s(int=-1)\
    \ %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660074275
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    // Your code here\n    \n    return\
    \ guess\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate := compare\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1, 2, 3,\
    \ 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCompare (0.00s)\n    --- FAIL: TestCompare/test_num__0 (0.00s)\n\
    \        tmpznztk0n8_test.go:38: expected '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=3) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=2)\
    \ %!s(int=-2)]'\n    --- FAIL: TestCompare/test_num__2 (0.00s)\n        tmpznztk0n8_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6)]', got '[%!s(int=-1) %!s(int=-2)\
    \ %!s(int=-3)]'\n    --- FAIL: TestCompare/test_num__3 (0.00s)\n        tmpznztk0n8_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=0) %!s(int=0) %!s(int=1)]', got '[%!s(int=-1)\
    \ %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660074275
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    // Your code here\n    return\
    \ guess\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate := compare\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1, 2, 3,\
    \ 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCompare (0.00s)\n    --- FAIL: TestCompare/test_num__0 (0.00s)\n\
    \        tmpkuodnwai_test.go:37: expected '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=3) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=2)\
    \ %!s(int=-2)]'\n    --- FAIL: TestCompare/test_num__2 (0.00s)\n        tmpkuodnwai_test.go:37:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6)]', got '[%!s(int=-1) %!s(int=-2)\
    \ %!s(int=-3)]'\n    --- FAIL: TestCompare/test_num__3 (0.00s)\n        tmpkuodnwai_test.go:37:\
    \ expected '[%!s(int=2) %!s(int=0) %!s(int=0) %!s(int=1)]', got '[%!s(int=-1)\
    \ %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660074275
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    result := make([]int, len(guess))\n\
    \    for i := range guess {\n        result[i] = abs(game[i] - guess[i])\n   \
    \ }\n    return result\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate :=\
    \ compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzzw7uzen_test.go:19:21: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074275
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    result := make([]int, len(guess))\n\
    \    for i := range result {\n        result[i] = 0\n    }\n    for i := range\
    \ guess {\n        if game[i] != guess[i] {\n            result[i] = abs(game[i]\
    \ - guess[i])\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvnm0p4hy_test.go:23:25: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074274
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    // Your code here\n    \n    return\
    \ guess\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate := compare\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1, 2, 3,\
    \ 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCompare (0.00s)\n    --- FAIL: TestCompare/test_num__0 (0.00s)\n\
    \        tmpznztk0n8_test.go:38: expected '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=3) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=2)\
    \ %!s(int=-2)]'\n    --- FAIL: TestCompare/test_num__2 (0.00s)\n        tmpznztk0n8_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6)]', got '[%!s(int=-1) %!s(int=-2)\
    \ %!s(int=-3)]'\n    --- FAIL: TestCompare/test_num__3 (0.00s)\n        tmpznztk0n8_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=0) %!s(int=0) %!s(int=1)]', got '[%!s(int=-1)\
    \ %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660074275
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    // Your code here\n}\n\nfunc TestCompare(t\
    \ *testing.T) {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvdg15f6w_test.go:18:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074274
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    var correct\
    \ bool\n    var diff int\n    for i := 0; i < len(guess); i++ {\n        if game[i]\
    \ == guess[i] {\n            result[i] = 0\n            correct = true\n     \
    \   } else {\n            result[i] = abs(game[i] - guess[i])\n            correct\
    \ = false\n        }\n    }\n    if correct {\n        for i := 0; i < len(guess);\
    \ i++ {\n            diff += abs(game[i] - guess[i])\n        }\n    }\n    return\
    \ append(result, diff)\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate :=\
    \ compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmph2nn5bi__test.go:25:25: undefined: abs

    /tmp/tmph2nn5bi__test.go:31:21: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074275
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(guess); i++ {\n        if game[i] == guess[i] {\n            result[i]\
    \ = 0\n        } else {\n            result[i] = abs(game[i] - guess[i])\n   \
    \     }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate\
    \ := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq07lmcxi_test.go:22:25: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074274
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    // Your code here\n}\n\nfunc TestCompare(t\
    \ *testing.T) {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvdg15f6w_test.go:18:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074274
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    result := make([]int, len(guess))\n\
    \    for i := range guess {\n        result[i] = abs(game[i] - guess[i])\n   \
    \ }\n    return result\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate :=\
    \ compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzzw7uzen_test.go:19:21: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074275
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    // Your code here\n}\n\nfunc TestCompare(t\
    \ *testing.T) {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvdg15f6w_test.go:18:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074274
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    \n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8zyuvpyf_test.go:18:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074274
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    result := make([]int, len(guess))\n\
    \    for i := range result {\n        result[i] = 0\n    }\n    \n    // Your\
    \ code here\n    \n    return result\n}\n\nfunc TestCompare(t *testing.T) {\n\
    \  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCompare (0.00s)\n    --- FAIL: TestCompare/test_num__0 (0.00s)\n\
    \        tmpw422vp3k_test.go:43: expected '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestCompare/test_num__2 (0.00s)\n        tmpw422vp3k_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestCompare/test_num__3 (0.00s)\n        tmpw422vp3k_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=0) %!s(int=0) %!s(int=1)]', got '[%!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074276
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    // Your code here\n    \n    return\
    \ guess\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate := compare\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1, 2, 3,\
    \ 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCompare (0.00s)\n    --- FAIL: TestCompare/test_num__0 (0.00s)\n\
    \        tmpznztk0n8_test.go:38: expected '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=3) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=2)\
    \ %!s(int=-2)]'\n    --- FAIL: TestCompare/test_num__2 (0.00s)\n        tmpznztk0n8_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6)]', got '[%!s(int=-1) %!s(int=-2)\
    \ %!s(int=-3)]'\n    --- FAIL: TestCompare/test_num__3 (0.00s)\n        tmpznztk0n8_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=0) %!s(int=0) %!s(int=1)]', got '[%!s(int=-1)\
    \ %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660074275
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    // Your code here\n}\n\nfunc TestCompare(t\
    \ *testing.T) {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvdg15f6w_test.go:18:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074274
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(guess); i++ {\n        if game[i] == guess[i] {\n            result[i]\
    \ = 0\n        } else {\n            result[i] = abs(game[i] - guess[i])\n   \
    \     }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate\
    \ := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq07lmcxi_test.go:22:25: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074274
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    result := make([]int, len(guess))\n\
    \    for i := range guess {\n        result[i] = abs(game[i] - guess[i])\n   \
    \ }\n    return result\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate :=\
    \ compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzzw7uzen_test.go:19:21: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074275
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    // Your code here\n}\n\nfunc TestCompare(t\
    \ *testing.T) {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvdg15f6w_test.go:18:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074274
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    // Your code here\n}\n\nfunc TestCompare(t\
    \ *testing.T) {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvdg15f6w_test.go:18:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074274
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    result := make([]int, len(guess))\n\
    \    for i := range result {\n        result[i] = 0\n    }\n    for i := range\
    \ guess {\n        if game[i] == guess[i] {\n            result[i] = 0\n     \
    \   } else {\n            result[i] = abs(game[i] - guess[i])\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate :=\
    \ compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpop5rib5k_test.go:25:25: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074275
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    result := make([]int, len(guess))\n\
    \    for i := range guess {\n        result[i] = abs(game[i] - guess[i])\n   \
    \ }\n    return result\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate :=\
    \ compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzzw7uzen_test.go:19:21: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074275
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    // Your code here\n    return\
    \ guess\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate := compare\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1, 2, 3,\
    \ 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCompare (0.00s)\n    --- FAIL: TestCompare/test_num__0 (0.00s)\n\
    \        tmpkuodnwai_test.go:37: expected '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=3) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=2)\
    \ %!s(int=-2)]'\n    --- FAIL: TestCompare/test_num__2 (0.00s)\n        tmpkuodnwai_test.go:37:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6)]', got '[%!s(int=-1) %!s(int=-2)\
    \ %!s(int=-3)]'\n    --- FAIL: TestCompare/test_num__3 (0.00s)\n        tmpkuodnwai_test.go:37:\
    \ expected '[%!s(int=2) %!s(int=0) %!s(int=0) %!s(int=1)]', got '[%!s(int=-1)\
    \ %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660074275
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    result := make([]int, len(guess))\n\
    \    for i := range result {\n        result[i] = 0\n    }\n    for i := range\
    \ guess {\n        if game[i] == guess[i] {\n            result[i] = 0\n     \
    \   } else {\n            result[i] = abs(game[i] - guess[i])\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate :=\
    \ compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpop5rib5k_test.go:25:25: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074275
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    // Your code here\n}\n\nfunc TestCompare(t\
    \ *testing.T) {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvdg15f6w_test.go:18:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074274
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    // Your code here\n    \n}\n\n\
    func TestCompare(t *testing.T) {\n  candidate := compare\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}),\
    \ expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0, 0, 0,\
    \ 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0} },\n \
    \    { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsakmr3d3_test.go:19:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074274
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    result := make([]int, len(guess))\n\
    \    for i := range result {\n        result[i] = 0\n    }\n    for i := range\
    \ guess {\n        if game[i] == guess[i] {\n            result[i] = 0\n     \
    \   } else {\n            result[i] = abs(game[i] - guess[i])\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate :=\
    \ compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpop5rib5k_test.go:25:25: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074275
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    // Your code here\n}\n\nfunc TestCompare(t\
    \ *testing.T) {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvdg15f6w_test.go:18:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074274
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    result := make([]int, len(guess))\n\
    \    for i := range guess {\n        result[i] = abs(game[i] - guess[i])\n   \
    \ }\n    return result\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate :=\
    \ compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzzw7uzen_test.go:19:21: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074275
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    result := make([]int, len(guess))\n\
    \    for i := range guess {\n        result[i] = abs(game[i] - guess[i])\n   \
    \ }\n    return result\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate :=\
    \ compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzzw7uzen_test.go:19:21: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074275
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    \n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8zyuvpyf_test.go:18:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074274
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    result := make([]int, len(guess))\n\
    \    for i := range guess {\n        result[i] = abs(game[i] - guess[i])\n   \
    \ }\n    return result\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate :=\
    \ compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzzw7uzen_test.go:19:21: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074275
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    // Your code here\n}\n\nfunc TestCompare(t\
    \ *testing.T) {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvdg15f6w_test.go:18:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074274
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    \n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8zyuvpyf_test.go:18:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074274
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    result := make([]int, len(guess))\n\
    \    for i := range guess {\n        result[i] = abs(game[i] - guess[i])\n   \
    \ }\n    return result\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate :=\
    \ compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzzw7uzen_test.go:19:21: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074275
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    // Your code here\n}\n\nfunc TestCompare(t\
    \ *testing.T) {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvdg15f6w_test.go:18:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074274
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    result := make([]int, len(guess))\n\
    \    for i := range guess {\n        result[i] = abs(game[i] - guess[i])\n   \
    \ }\n    return result\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate :=\
    \ compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzzw7uzen_test.go:19:21: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074275
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(guess); i++ {\n        if game[i] != guess[i] {\n            result\
    \ = append(result, abs(game[i] - guess[i]))\n        }\n    }\n    return result\n\
    }\n\nfunc TestCompare(t *testing.T) {\n  candidate := compare\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}),\
    \ expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0, 0, 0,\
    \ 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0} },\n \
    \    { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6vftg7kf_test.go:20:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074274
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    result := make([]int, len(guess))\n\
    \    for i := range guess {\n        result[i] = abs(game[i] - guess[i])\n   \
    \ }\n    return result\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate :=\
    \ compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzzw7uzen_test.go:19:21: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074275
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    result := make([]int, len(guess))\n\
    \    for i := range result {\n        result[i] = 0\n    }\n    for i := range\
    \ guess {\n        if game[i] != guess[i] {\n            result[i] = abs(game[i]\
    \ - guess[i])\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvnm0p4hy_test.go:23:25: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074274
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    // Your code here\n}\n\nfunc TestCompare(t\
    \ *testing.T) {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvdg15f6w_test.go:18:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074274
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    // TODO: Write your code here\n\
    \    return guess\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate := compare\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCompare (0.00s)\n    --- FAIL: TestCompare/test_num__0 (0.00s)\n\
    \        tmppwr25zw4_test.go:37: expected '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=3) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=2)\
    \ %!s(int=-2)]'\n    --- FAIL: TestCompare/test_num__2 (0.00s)\n        tmppwr25zw4_test.go:37:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6)]', got '[%!s(int=-1) %!s(int=-2)\
    \ %!s(int=-3)]'\n    --- FAIL: TestCompare/test_num__3 (0.00s)\n        tmppwr25zw4_test.go:37:\
    \ expected '[%!s(int=2) %!s(int=0) %!s(int=0) %!s(int=1)]', got '[%!s(int=-1)\
    \ %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660074276
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    // Your code here\n}\n\nfunc TestCompare(t\
    \ *testing.T) {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvdg15f6w_test.go:18:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074274
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    // Your code here\n    \n    return\
    \ guess\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate := compare\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1, 2, 3,\
    \ 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCompare (0.00s)\n    --- FAIL: TestCompare/test_num__0 (0.00s)\n\
    \        tmpznztk0n8_test.go:38: expected '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=3) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=2)\
    \ %!s(int=-2)]'\n    --- FAIL: TestCompare/test_num__2 (0.00s)\n        tmpznztk0n8_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6)]', got '[%!s(int=-1) %!s(int=-2)\
    \ %!s(int=-3)]'\n    --- FAIL: TestCompare/test_num__3 (0.00s)\n        tmpznztk0n8_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=0) %!s(int=0) %!s(int=1)]', got '[%!s(int=-1)\
    \ %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660074275
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    // Your code here\n    \n}\n\n\
    func TestCompare(t *testing.T) {\n  candidate := compare\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}),\
    \ expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0, 0, 0,\
    \ 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0} },\n \
    \    { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsakmr3d3_test.go:19:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074274
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    // Your code here\n    return\
    \ guess\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate := compare\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1, 2, 3,\
    \ 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCompare (0.00s)\n    --- FAIL: TestCompare/test_num__0 (0.00s)\n\
    \        tmpkuodnwai_test.go:37: expected '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=3) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=2)\
    \ %!s(int=-2)]'\n    --- FAIL: TestCompare/test_num__2 (0.00s)\n        tmpkuodnwai_test.go:37:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6)]', got '[%!s(int=-1) %!s(int=-2)\
    \ %!s(int=-3)]'\n    --- FAIL: TestCompare/test_num__3 (0.00s)\n        tmpkuodnwai_test.go:37:\
    \ expected '[%!s(int=2) %!s(int=0) %!s(int=0) %!s(int=1)]', got '[%!s(int=-1)\
    \ %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660074275
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(guess); i++ {\n        if game[i] != guess[i] {\n            result\
    \ = append(result, abs(game[i] - guess[i]))\n        }\n    }\n    return result\n\
    }\n\nfunc TestCompare(t *testing.T) {\n  candidate := compare\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}),\
    \ expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0, 0, 0,\
    \ 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0} },\n \
    \    { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6vftg7kf_test.go:20:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074274
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    result := make([]int, len(guess))\n\
    \    for i := range guess {\n        result[i] = abs(game[i] - guess[i])\n   \
    \ }\n    return result\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate :=\
    \ compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzzw7uzen_test.go:19:21: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074275
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    result := make([]int, len(guess))\n\
    \    for i := range result {\n        result[i] = abs(game[i] - guess[i])\n  \
    \  }\n    return result\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate :=\
    \ compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn902o1e0_test.go:19:21: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074275
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    result := make([]int, len(guess))\n\
    \    for i := range guess {\n        result[i] = abs(game[i] - guess[i])\n   \
    \ }\n    return result\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate :=\
    \ compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzzw7uzen_test.go:19:21: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074275
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    // Your code here\n}\n\nfunc TestCompare(t\
    \ *testing.T) {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvdg15f6w_test.go:18:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074274
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    // Your code here\n    \n    return\
    \ guess\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate := compare\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1, 2, 3,\
    \ 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCompare (0.00s)\n    --- FAIL: TestCompare/test_num__0 (0.00s)\n\
    \        tmpznztk0n8_test.go:38: expected '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=3) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=2)\
    \ %!s(int=-2)]'\n    --- FAIL: TestCompare/test_num__2 (0.00s)\n        tmpznztk0n8_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6)]', got '[%!s(int=-1) %!s(int=-2)\
    \ %!s(int=-3)]'\n    --- FAIL: TestCompare/test_num__3 (0.00s)\n        tmpznztk0n8_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=0) %!s(int=0) %!s(int=1)]', got '[%!s(int=-1)\
    \ %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660074275
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(guess); i++ {\n        if game[i] == guess[i] {\n            result[i]\
    \ = 0\n        } else {\n            result[i] = abs(game[i] - guess[i])\n   \
    \     }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate\
    \ := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq07lmcxi_test.go:22:25: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074274
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    result := make([]int, len(guess))\n\
    \    for i := range guess {\n        result[i] = abs(game[i] - guess[i])\n   \
    \ }\n    return result\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate :=\
    \ compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzzw7uzen_test.go:19:21: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074275
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    \n    //\
    \ Your code here\n    \n    return result\n}\nfunc TestCompare(t *testing.T) {\n\
    \  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCompare (0.00s)\n    --- FAIL: TestCompare/test_num__0 (0.00s)\n\
    \        tmpvptmp4oy_test.go:39: expected '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=3) %!s(int=3)]', got '[]'\n    --- FAIL: TestCompare/test_num__1 (0.00s)\n\
    \        tmpvptmp4oy_test.go:39: expected '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0)]', got '[]'\n    --- FAIL: TestCompare/test_num__2 (0.00s)\n\
    \        tmpvptmp4oy_test.go:39: expected '[%!s(int=2) %!s(int=4) %!s(int=6)]',\
    \ got '[]'\n    --- FAIL: TestCompare/test_num__3 (0.00s)\n        tmpvptmp4oy_test.go:39:\
    \ expected '[%!s(int=2) %!s(int=0) %!s(int=0) %!s(int=1)]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074276
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    // TODO: Write your code here\n\
    \    return guess\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate := compare\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCompare (0.00s)\n    --- FAIL: TestCompare/test_num__0 (0.00s)\n\
    \        tmppwr25zw4_test.go:37: expected '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=3) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=2)\
    \ %!s(int=-2)]'\n    --- FAIL: TestCompare/test_num__2 (0.00s)\n        tmppwr25zw4_test.go:37:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6)]', got '[%!s(int=-1) %!s(int=-2)\
    \ %!s(int=-3)]'\n    --- FAIL: TestCompare/test_num__3 (0.00s)\n        tmppwr25zw4_test.go:37:\
    \ expected '[%!s(int=2) %!s(int=0) %!s(int=0) %!s(int=1)]', got '[%!s(int=-1)\
    \ %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660074276
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    // Your code here\n}\n\nfunc TestCompare(t\
    \ *testing.T) {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvdg15f6w_test.go:18:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074274
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    // Your code here\n    \n    return\
    \ guess\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate := compare\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1, 2, 3,\
    \ 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCompare (0.00s)\n    --- FAIL: TestCompare/test_num__0 (0.00s)\n\
    \        tmpznztk0n8_test.go:38: expected '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=3) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=2)\
    \ %!s(int=-2)]'\n    --- FAIL: TestCompare/test_num__2 (0.00s)\n        tmpznztk0n8_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6)]', got '[%!s(int=-1) %!s(int=-2)\
    \ %!s(int=-3)]'\n    --- FAIL: TestCompare/test_num__3 (0.00s)\n        tmpznztk0n8_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=0) %!s(int=0) %!s(int=1)]', got '[%!s(int=-1)\
    \ %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660074275
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    result := make([]int, len(guess))\n\
    \    for i := range result {\n        result[i] = 0\n    }\n    \n    for i :=\
    \ range guess {\n        if game[i] == guess[i] {\n            result[i] = 0\n\
    \        } else {\n            result[i] = abs(game[i] - guess[i])\n        }\n\
    \    }\n    return result\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate\
    \ := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpja3t4vok_test.go:26:25: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074275
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    // Your code here\n    return\
    \ guess\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate := compare\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1, 2, 3,\
    \ 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCompare (0.00s)\n    --- FAIL: TestCompare/test_num__0 (0.00s)\n\
    \        tmpkuodnwai_test.go:37: expected '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=3) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=2)\
    \ %!s(int=-2)]'\n    --- FAIL: TestCompare/test_num__2 (0.00s)\n        tmpkuodnwai_test.go:37:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6)]', got '[%!s(int=-1) %!s(int=-2)\
    \ %!s(int=-3)]'\n    --- FAIL: TestCompare/test_num__3 (0.00s)\n        tmpkuodnwai_test.go:37:\
    \ expected '[%!s(int=2) %!s(int=0) %!s(int=0) %!s(int=1)]', got '[%!s(int=-1)\
    \ %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660074275
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    result := make([]int, len(guess))\n\
    \    for i := range guess {\n        result[i] = abs(game[i] - guess[i])\n   \
    \ }\n    return result\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate :=\
    \ compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzzw7uzen_test.go:19:21: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074275
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    // Your code here\n    \n}\n\n\
    func TestCompare(t *testing.T) {\n  candidate := compare\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}),\
    \ expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0, 0, 0,\
    \ 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0} },\n \
    \    { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsakmr3d3_test.go:19:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074274
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    result := make([]int, len(guess))\n\
    \    for i := range guess {\n        result[i] = abs(game[i] - guess[i])\n   \
    \ }\n    return result\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate :=\
    \ compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzzw7uzen_test.go:19:21: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074275
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    result := make([]int, len(guess))\n\
    \    for i, score := range game {\n        result[i] = abs(score - guess[i])\n\
    \    }\n    return result\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate\
    \ := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5nkim1ej_test.go:19:21: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074275
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(guess); i++ {\n        if game[i] == guess[i] {\n            result[i]\
    \ = 0\n        } else {\n            result[i] = abs(game[i] - guess[i])\n   \
    \     }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate\
    \ := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq07lmcxi_test.go:22:25: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074274
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    // Your code here\n    \n    return\
    \ guess\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate := compare\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1, 2, 3,\
    \ 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCompare (0.00s)\n    --- FAIL: TestCompare/test_num__0 (0.00s)\n\
    \        tmpznztk0n8_test.go:38: expected '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=3) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=2)\
    \ %!s(int=-2)]'\n    --- FAIL: TestCompare/test_num__2 (0.00s)\n        tmpznztk0n8_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6)]', got '[%!s(int=-1) %!s(int=-2)\
    \ %!s(int=-3)]'\n    --- FAIL: TestCompare/test_num__3 (0.00s)\n        tmpznztk0n8_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=0) %!s(int=0) %!s(int=1)]', got '[%!s(int=-1)\
    \ %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660074275
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    result := make([]int, len(guess))\n\
    \    for i := range guess {\n        result[i] = abs(game[i] - guess[i])\n   \
    \ }\n    return result\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate :=\
    \ compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzzw7uzen_test.go:19:21: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074275
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    result := make([]int, len(guess))\n\
    \    for i := range guess {\n        result[i] = abs(game[i] - guess[i])\n   \
    \ }\n    return result\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate :=\
    \ compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzzw7uzen_test.go:19:21: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074275
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    result := make([]int, len(guess))\n\
    \    for i := range guess {\n        result[i] = abs(game[i] - guess[i])\n   \
    \ }\n    return result\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate :=\
    \ compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzzw7uzen_test.go:19:21: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074275
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    \n    //\
    \ Your code here\n    \n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCompare (0.00s)\n    --- FAIL: TestCompare/test_num__0 (0.00s)\n\
    \        tmpgu6tefh__test.go:40: expected '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=3) %!s(int=3)]', got '[]'\n    --- FAIL: TestCompare/test_num__1 (0.00s)\n\
    \        tmpgu6tefh__test.go:40: expected '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0)]', got '[]'\n    --- FAIL: TestCompare/test_num__2 (0.00s)\n\
    \        tmpgu6tefh__test.go:40: expected '[%!s(int=2) %!s(int=4) %!s(int=6)]',\
    \ got '[]'\n    --- FAIL: TestCompare/test_num__3 (0.00s)\n        tmpgu6tefh__test.go:40:\
    \ expected '[%!s(int=2) %!s(int=0) %!s(int=0) %!s(int=1)]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074275
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    // Your code here\n    \n    return\
    \ guess\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate := compare\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1, 2, 3,\
    \ 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCompare (0.00s)\n    --- FAIL: TestCompare/test_num__0 (0.00s)\n\
    \        tmpznztk0n8_test.go:38: expected '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=3) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=2)\
    \ %!s(int=-2)]'\n    --- FAIL: TestCompare/test_num__2 (0.00s)\n        tmpznztk0n8_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6)]', got '[%!s(int=-1) %!s(int=-2)\
    \ %!s(int=-3)]'\n    --- FAIL: TestCompare/test_num__3 (0.00s)\n        tmpznztk0n8_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=0) %!s(int=0) %!s(int=1)]', got '[%!s(int=-1)\
    \ %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660074275
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    result := make([]int, len(guess))\n\
    \    for i := range result {\n        result[i] = 0\n    }\n    for i := range\
    \ guess {\n        if game[i] == guess[i] {\n            result[i] = 0\n     \
    \   } else {\n            result[i] = abs(game[i] - guess[i])\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate :=\
    \ compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpop5rib5k_test.go:25:25: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074275
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    // Your code here\n    \n    return\
    \ guess\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate := compare\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1, 2, 3,\
    \ 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCompare (0.00s)\n    --- FAIL: TestCompare/test_num__0 (0.00s)\n\
    \        tmpznztk0n8_test.go:38: expected '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=3) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=2)\
    \ %!s(int=-2)]'\n    --- FAIL: TestCompare/test_num__2 (0.00s)\n        tmpznztk0n8_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6)]', got '[%!s(int=-1) %!s(int=-2)\
    \ %!s(int=-3)]'\n    --- FAIL: TestCompare/test_num__3 (0.00s)\n        tmpznztk0n8_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=0) %!s(int=0) %!s(int=1)]', got '[%!s(int=-1)\
    \ %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660074275
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    // Your code here\n}\n\nfunc TestCompare(t\
    \ *testing.T) {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvdg15f6w_test.go:18:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074274
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    // Your code here\n}\n\nfunc TestCompare(t\
    \ *testing.T) {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvdg15f6w_test.go:18:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074274
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    // Your code here\n    \n}\n\n\
    func TestCompare(t *testing.T) {\n  candidate := compare\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}),\
    \ expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0, 0, 0,\
    \ 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0} },\n \
    \    { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsakmr3d3_test.go:19:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074274
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    // Your code here\n}\n\nfunc TestCompare(t\
    \ *testing.T) {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvdg15f6w_test.go:18:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074274
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    // Your code here\n    return\
    \ guess\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate := compare\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1, 2, 3,\
    \ 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCompare (0.00s)\n    --- FAIL: TestCompare/test_num__0 (0.00s)\n\
    \        tmpkuodnwai_test.go:37: expected '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=3) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=2)\
    \ %!s(int=-2)]'\n    --- FAIL: TestCompare/test_num__2 (0.00s)\n        tmpkuodnwai_test.go:37:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6)]', got '[%!s(int=-1) %!s(int=-2)\
    \ %!s(int=-3)]'\n    --- FAIL: TestCompare/test_num__3 (0.00s)\n        tmpkuodnwai_test.go:37:\
    \ expected '[%!s(int=2) %!s(int=0) %!s(int=0) %!s(int=1)]', got '[%!s(int=-1)\
    \ %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660074275
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    result := make([]int, len(guess))\n\
    \    for i := range guess {\n        result[i] = abs(game[i] - guess[i])\n   \
    \ }\n    return result\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate :=\
    \ compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzzw7uzen_test.go:19:21: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074275
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    // Your code here\n    \n}\n\n\
    func TestCompare(t *testing.T) {\n  candidate := compare\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}),\
    \ expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0, 0, 0,\
    \ 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0} },\n \
    \    { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsakmr3d3_test.go:19:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074274
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    result := make([]int, len(guess))\n\
    \    for i := range guess {\n        result[i] = abs(game[i] - guess[i])\n   \
    \ }\n    return result\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate :=\
    \ compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzzw7uzen_test.go:19:21: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074275
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    // Your code here\n}\n\nfunc TestCompare(t\
    \ *testing.T) {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvdg15f6w_test.go:18:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074274
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    // Your code here\n}\n\nfunc TestCompare(t\
    \ *testing.T) {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvdg15f6w_test.go:18:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074274
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(guess); i++ {\n        diff := abs(game[i] - guess[i])\n        if\
    \ diff == 0 {\n            result[i] = 0\n        } else {\n            result[i]\
    \ = diff\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp156onagx_test.go:19:17: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074275
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    // Your code here\n    \n    return\
    \ guess\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate := compare\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1, 2, 3,\
    \ 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCompare (0.00s)\n    --- FAIL: TestCompare/test_num__0 (0.00s)\n\
    \        tmpznztk0n8_test.go:38: expected '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=3) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=2)\
    \ %!s(int=-2)]'\n    --- FAIL: TestCompare/test_num__2 (0.00s)\n        tmpznztk0n8_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6)]', got '[%!s(int=-1) %!s(int=-2)\
    \ %!s(int=-3)]'\n    --- FAIL: TestCompare/test_num__3 (0.00s)\n        tmpznztk0n8_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=0) %!s(int=0) %!s(int=1)]', got '[%!s(int=-1)\
    \ %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660074275
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    result := make([]int, len(guess))\n\
    \    for i := range result {\n        result[i] = 0\n    }\n    for i := range\
    \ guess {\n        if game[i] != guess[i] {\n            result[i] = abs(game[i]\
    \ - guess[i])\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvnm0p4hy_test.go:23:25: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074274
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    // Your code here\n}\n\nfunc TestCompare(t\
    \ *testing.T) {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvdg15f6w_test.go:18:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074274
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    result := make([]int, len(guess))\n\
    \    for i := range guess {\n        result[i] = abs(game[i] - guess[i])\n   \
    \ }\n    return result\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate :=\
    \ compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzzw7uzen_test.go:19:21: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074275
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    result := make([]int, len(guess))\n\
    \    for i := range result {\n        result[i] = 0\n    }\n    for i := range\
    \ guess {\n        if game[i] != guess[i] {\n            result[i] = abs(game[i]\
    \ - guess[i])\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvnm0p4hy_test.go:23:25: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074274
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    // Your code here\n}\n\nfunc TestCompare(t\
    \ *testing.T) {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvdg15f6w_test.go:18:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074274
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    // TODO: Write code here\n   \
    \ return guess\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate := compare\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCompare (0.00s)\n    --- FAIL: TestCompare/test_num__0 (0.00s)\n\
    \        tmphjbnzc3m_test.go:37: expected '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=3) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=2)\
    \ %!s(int=-2)]'\n    --- FAIL: TestCompare/test_num__2 (0.00s)\n        tmphjbnzc3m_test.go:37:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6)]', got '[%!s(int=-1) %!s(int=-2)\
    \ %!s(int=-3)]'\n    --- FAIL: TestCompare/test_num__3 (0.00s)\n        tmphjbnzc3m_test.go:37:\
    \ expected '[%!s(int=2) %!s(int=0) %!s(int=0) %!s(int=1)]', got '[%!s(int=-1)\
    \ %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660074275
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    // Your code here\n    \n    return\
    \ guess\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate := compare\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1, 2, 3,\
    \ 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCompare (0.00s)\n    --- FAIL: TestCompare/test_num__0 (0.00s)\n\
    \        tmpznztk0n8_test.go:38: expected '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=3) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=2)\
    \ %!s(int=-2)]'\n    --- FAIL: TestCompare/test_num__2 (0.00s)\n        tmpznztk0n8_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6)]', got '[%!s(int=-1) %!s(int=-2)\
    \ %!s(int=-3)]'\n    --- FAIL: TestCompare/test_num__3 (0.00s)\n        tmpznztk0n8_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=0) %!s(int=0) %!s(int=1)]', got '[%!s(int=-1)\
    \ %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660074275
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    // TODO: Write your solution here\n\
    }\n\nfunc TestCompare(t *testing.T) {\n  candidate := compare\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}),\
    \ expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0, 0, 0,\
    \ 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0} },\n \
    \    { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpofuq9qsc_test.go:18:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074275
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    result := make([]int, len(guess))\n\
    \    for i := range guess {\n        result[i] = abs(game[i] - guess[i])\n   \
    \ }\n    return result\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate :=\
    \ compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzzw7uzen_test.go:19:21: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074275
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    // Your code here\n}\n\nfunc TestCompare(t\
    \ *testing.T) {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvdg15f6w_test.go:18:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074274
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    // Your code here\n}\n\nfunc TestCompare(t\
    \ *testing.T) {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvdg15f6w_test.go:18:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074274
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    // Your code here\n    \n    return\
    \ guess\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate := compare\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1, 2, 3,\
    \ 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCompare (0.00s)\n    --- FAIL: TestCompare/test_num__0 (0.00s)\n\
    \        tmpznztk0n8_test.go:38: expected '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=3) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=2)\
    \ %!s(int=-2)]'\n    --- FAIL: TestCompare/test_num__2 (0.00s)\n        tmpznztk0n8_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6)]', got '[%!s(int=-1) %!s(int=-2)\
    \ %!s(int=-3)]'\n    --- FAIL: TestCompare/test_num__3 (0.00s)\n        tmpznztk0n8_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=0) %!s(int=0) %!s(int=1)]', got '[%!s(int=-1)\
    \ %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660074275
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    // Your code here\n}\n\nfunc TestCompare(t\
    \ *testing.T) {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvdg15f6w_test.go:18:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074274
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    // Your code here\n    \n    return\
    \ guess\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate := compare\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1, 2, 3,\
    \ 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCompare (0.00s)\n    --- FAIL: TestCompare/test_num__0 (0.00s)\n\
    \        tmpznztk0n8_test.go:38: expected '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=3) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=2)\
    \ %!s(int=-2)]'\n    --- FAIL: TestCompare/test_num__2 (0.00s)\n        tmpznztk0n8_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6)]', got '[%!s(int=-1) %!s(int=-2)\
    \ %!s(int=-3)]'\n    --- FAIL: TestCompare/test_num__3 (0.00s)\n        tmpznztk0n8_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=0) %!s(int=0) %!s(int=1)]', got '[%!s(int=-1)\
    \ %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660074275
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    result := make([]int, len(guess))\n\
    \    for i := range result {\n        result[i] = 0\n    }\n    for i := range\
    \ guess {\n        if game[i] != guess[i] {\n            result[i] = abs(game[i]\
    \ - guess[i])\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvnm0p4hy_test.go:23:25: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074274
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    result := make([]int, len(guess))\n\
    \    for i := range guess {\n        result[i] = abs(game[i] - guess[i])\n   \
    \ }\n    return result\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate :=\
    \ compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1,\
    \ 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzzw7uzen_test.go:19:21: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074275
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    // Your code here\n}\n\nfunc TestCompare(t\
    \ *testing.T) {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvdg15f6w_test.go:18:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074274
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    \n    //\
    \ Your code here\n    \n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCompare (0.00s)\n    --- FAIL: TestCompare/test_num__0 (0.00s)\n\
    \        tmpgu6tefh__test.go:40: expected '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=3) %!s(int=3)]', got '[]'\n    --- FAIL: TestCompare/test_num__1 (0.00s)\n\
    \        tmpgu6tefh__test.go:40: expected '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0)]', got '[]'\n    --- FAIL: TestCompare/test_num__2 (0.00s)\n\
    \        tmpgu6tefh__test.go:40: expected '[%!s(int=2) %!s(int=4) %!s(int=6)]',\
    \ got '[]'\n    --- FAIL: TestCompare/test_num__3 (0.00s)\n        tmpgu6tefh__test.go:40:\
    \ expected '[%!s(int=2) %!s(int=0) %!s(int=0) %!s(int=1)]', got '[]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074275
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ range guess {\n        if game[i] != guess[i] {\n            result = append(result,\
    \ abs(game[i] - guess[i]))\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t\
    \ *testing.T) {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4fth8czm_test.go:20:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074274
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    var result []int\n    for i :=\
    \ 0; i < len(guess); i++ {\n        if game[i] != guess[i] {\n            result\
    \ = append(result, abs(game[i] - guess[i]))\n        }\n    }\n    return result\n\
    }\n\nfunc TestCompare(t *testing.T) {\n  candidate := compare\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}),\
    \ expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0, 0, 0,\
    \ 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0} },\n \
    \    { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6vftg7kf_test.go:20:37: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074274
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    result := make([]int, len(guess))\n\
    \    for i := range result {\n        result[i] = 0\n    }\n    for i := range\
    \ guess {\n        if game[i] != guess[i] {\n            result[i] = abs(game[i]\
    \ - guess[i])\n        }\n    }\n    return result\n}\n\nfunc TestCompare(t *testing.T)\
    \ {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvnm0p4hy_test.go:23:25: undefined: abs

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074274
- exit_code: 2
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    // Your code here\n}\n\nfunc TestCompare(t\
    \ *testing.T) {\n  candidate := compare\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3}\
    \ },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}),\
    \ expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual: candidate([]int{1, 2, 3},\
    \ []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2, 0, 0, 1} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvdg15f6w_test.go:18:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074274
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    // Your code here\n    \n    return\
    \ guess\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate := compare\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1, 2, 3,\
    \ 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCompare (0.00s)\n    --- FAIL: TestCompare/test_num__0 (0.00s)\n\
    \        tmpznztk0n8_test.go:38: expected '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=3) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=2)\
    \ %!s(int=-2)]'\n    --- FAIL: TestCompare/test_num__2 (0.00s)\n        tmpznztk0n8_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6)]', got '[%!s(int=-1) %!s(int=-2)\
    \ %!s(int=-3)]'\n    --- FAIL: TestCompare/test_num__3 (0.00s)\n        tmpznztk0n8_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=0) %!s(int=0) %!s(int=1)]', got '[%!s(int=-1)\
    \ %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660074275
- exit_code: 1
  program: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // I think we all remember that feeling when the result of some long-awaited\n\
    // event is finally known. The feelings and thoughts you have at that moment are\n\
    // definitely worth noting down and comparing.\n// Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n// You are given\
    \ two arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n// Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n// the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n// example:\nfunc\
    \ compare(game []int, guess []int) []int {\n    // Your code here\n    \n    return\
    \ guess\n}\n\nfunc TestCompare(t *testing.T) {\n  candidate := compare\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1, 2, 3,\
    \ 4, 2, -2}), expected: []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0,\
    \ 0, 0, 0, 0, 0}, []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0}\
    \ },\n     { actual: candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2,\
    \ 4, 6} },\n     { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected:\
    \ []int{2, 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCompare (0.00s)\n    --- FAIL: TestCompare/test_num__0 (0.00s)\n\
    \        tmpznztk0n8_test.go:38: expected '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=3) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=2)\
    \ %!s(int=-2)]'\n    --- FAIL: TestCompare/test_num__2 (0.00s)\n        tmpznztk0n8_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6)]', got '[%!s(int=-1) %!s(int=-2)\
    \ %!s(int=-3)]'\n    --- FAIL: TestCompare/test_num__3 (0.00s)\n        tmpznztk0n8_test.go:38:\
    \ expected '[%!s(int=2) %!s(int=0) %!s(int=0) %!s(int=1)]', got '[%!s(int=-1)\
    \ %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660074275
