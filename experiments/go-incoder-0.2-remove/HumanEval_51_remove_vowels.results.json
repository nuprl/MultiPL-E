{
  "language": "go_test.go",
  "name": "HumanEval_51_remove_vowels",
  "results": [
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    result := []rune{}\n    for _, letter := range text {\n        if !contains(vowels, letter) {\n            result = append(result, letter)\n        }\n    }\n    return string(result)\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp22l0e4hl_test.go:11:10: no new variables on left side of :=\n/tmp/tmp22l0e4hl_test.go:11:13: cannot use []rune(text) (value of type []rune) as type string in assignment\n/tmp/tmp22l0e4hl_test.go:14:13: undefined: contains\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for _, v := range vowels {\n        text = text.replaceAllString(v, \"\")\n    }\n    return text\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmps8ud68eq_test.go:12:21: text.replaceAllString undefined (type string has no field or method replaceAllString)\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    for _, v := range text {\n        if !contains(vowels, v) {\n            delete(text, v)\n        }\n    }\n    return string(text)\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpe_dp5r12_test.go:11:10: no new variables on left side of :=\n/tmp/tmpe_dp5r12_test.go:11:13: cannot use []rune(text) (value of type []rune) as type string in assignment\n/tmp/tmpe_dp5r12_test.go:13:13: undefined: contains\n/tmp/tmpe_dp5r12_test.go:14:20: invalid argument: text (variable of type string) is not a map\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    result := \"\"\n    for _, letter := range text {\n        if !contains(vowels, letter) {\n            result += letter\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoebzzi3y_test.go:13:13: undefined: contains\n/tmp/tmpoebzzi3y_test.go:14:13: invalid operation: result += letter (mismatched types string and rune)\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    text := []rune(text)\n    for _, v := range text {\n        if !contains(vowels, v) {\n            copy(text[:], text[1:])\n        }\n    }\n    return string(text)\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_h03f9dd_test.go:11:10: no new variables on left side of :=\n/tmp/tmp_h03f9dd_test.go:11:13: cannot use []rune(text) (value of type []rune) as type string in assignment\n/tmp/tmp_h03f9dd_test.go:13:13: undefined: contains\n/tmp/tmp_h03f9dd_test.go:14:22: invalid argument: copy expects slice arguments; found text[:] (value of type string) and text[1:] (value of type string)\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    for _, char := range text {\n        if !contains(vowels, char) {\n            text := append(text, char)\n        }\n    }\n    return string(text)\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpzjnt09bc_test.go:11:10: no new variables on left side of :=\n/tmp/tmpzjnt09bc_test.go:11:13: cannot use []rune(text) (value of type []rune) as type string in assignment\n/tmp/tmpzjnt09bc_test.go:13:13: undefined: contains\n/tmp/tmpzjnt09bc_test.go:14:28: first argument to append must be a slice; have text (variable of type string)\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    result := []rune{}\n    for _, letter := range text {\n        if !contains(vowels, letter) {\n            result = append(result, letter)\n        }\n    }\n    return string(result)\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp22l0e4hl_test.go:11:10: no new variables on left side of :=\n/tmp/tmp22l0e4hl_test.go:11:13: cannot use []rune(text) (value of type []rune) as type string in assignment\n/tmp/tmp22l0e4hl_test.go:14:13: undefined: contains\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    result := []rune{}\n    for _, letter := range text {\n        if !contains(vowels, letter) {\n            result = append(result, letter)\n        }\n    }\n    return string(result)\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp22l0e4hl_test.go:11:10: no new variables on left side of :=\n/tmp/tmp22l0e4hl_test.go:11:13: cannot use []rune(text) (value of type []rune) as type string in assignment\n/tmp/tmp22l0e4hl_test.go:14:13: undefined: contains\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    for _, v := range text {\n        if !contains(vowels, v) {\n            v = string(v)\n        }\n    }\n    return string(text)\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpw80i12an_test.go:11:10: no new variables on left side of :=\n/tmp/tmpw80i12an_test.go:11:13: cannot use []rune(text) (value of type []rune) as type string in assignment\n/tmp/tmpw80i12an_test.go:13:13: undefined: contains\n/tmp/tmpw80i12an_test.go:14:17: cannot use string(v) (value of type string) as type rune in assignment\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    text := []rune(text)\n    for _, v := range text {\n        if !contains(vowels, v) {\n            delete(text, v)\n        }\n    }\n    return string(text)\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpzxxlhpy8_test.go:11:10: no new variables on left side of :=\n/tmp/tmpzxxlhpy8_test.go:11:13: cannot use []rune(text) (value of type []rune) as type string in assignment\n/tmp/tmpzxxlhpy8_test.go:13:13: undefined: contains\n/tmp/tmpzxxlhpy8_test.go:14:20: invalid argument: text (variable of type string) is not a map\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    result := \"\"\n    for _, letter := range text {\n        if !contains(vowels, letter) {\n            result += letter\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpfpi4fnva_test.go:13:13: undefined: contains\n/tmp/tmpfpi4fnva_test.go:14:13: invalid operation: result += letter (mismatched types string and rune)\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    result := \"\"\n    for _, letter := range text {\n        if !contains(vowels, letter) {\n            result += letter\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoebzzi3y_test.go:13:13: undefined: contains\n/tmp/tmpoebzzi3y_test.go:14:13: invalid operation: result += letter (mismatched types string and rune)\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for _, v := range vowels {\n        text = strings.Replace(text, v, \"\", -1)\n    }\n    return text\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpwutwyptk_test.go:12:16: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    for _, v := range text {\n        if !contains(vowels, v) {\n            text := append(text, v)\n        }\n    }\n    return string(text)\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmponjaa6un_test.go:11:10: no new variables on left side of :=\n/tmp/tmponjaa6un_test.go:11:13: cannot use []rune(text) (value of type []rune) as type string in assignment\n/tmp/tmponjaa6un_test.go:13:13: undefined: contains\n/tmp/tmponjaa6un_test.go:14:28: first argument to append must be a slice; have text (variable of type string)\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for _, v := range vowels {\n        text = strings.Replace(text, v, \"\", -1)\n    }\n    return text\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpwutwyptk_test.go:12:16: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    for _, v := range text {\n        if !contains(vowels, v) {\n            text := append(text, v)\n        }\n    }\n    return string(text)\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmponjaa6un_test.go:11:10: no new variables on left side of :=\n/tmp/tmponjaa6un_test.go:11:13: cannot use []rune(text) (value of type []rune) as type string in assignment\n/tmp/tmponjaa6un_test.go:13:13: undefined: contains\n/tmp/tmponjaa6un_test.go:14:28: first argument to append must be a slice; have text (variable of type string)\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    result := []rune{}\n    for _, letter := range text {\n        if !contains(vowels, letter) {\n            result = append(result, letter)\n        }\n    }\n    return string(result)\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp22l0e4hl_test.go:11:10: no new variables on left side of :=\n/tmp/tmp22l0e4hl_test.go:11:13: cannot use []rune(text) (value of type []rune) as type string in assignment\n/tmp/tmp22l0e4hl_test.go:14:13: undefined: contains\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    result := \"\"\n    for _, letter := range text {\n        if !contains(vowels, letter) {\n            result += letter\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoebzzi3y_test.go:13:13: undefined: contains\n/tmp/tmpoebzzi3y_test.go:14:13: invalid operation: result += letter (mismatched types string and rune)\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    for _, v := range text {\n        if !contains(vowels, v) {\n            v = unicode.ToLower(v)\n        }\n    }\n    return string(text)\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgan6n6eu_test.go:11:10: no new variables on left side of :=\n/tmp/tmpgan6n6eu_test.go:11:13: cannot use []rune(text) (value of type []rune) as type string in assignment\n/tmp/tmpgan6n6eu_test.go:13:13: undefined: contains\n/tmp/tmpgan6n6eu_test.go:14:17: undefined: unicode\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    text := []rune(text)\n    for _, v := range text {\n        if !contains(vowels, v) {\n            delete(text, v)\n        }\n    }\n    return string(text)\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpzxxlhpy8_test.go:11:10: no new variables on left side of :=\n/tmp/tmpzxxlhpy8_test.go:11:13: cannot use []rune(text) (value of type []rune) as type string in assignment\n/tmp/tmpzxxlhpy8_test.go:13:13: undefined: contains\n/tmp/tmpzxxlhpy8_test.go:14:20: invalid argument: text (variable of type string) is not a map\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    result := []rune{}\n    for _, letter := range text {\n        if !contains(vowels, letter) {\n            result = append(result, letter)\n        }\n    }\n    return string(result)\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp22l0e4hl_test.go:11:10: no new variables on left side of :=\n/tmp/tmp22l0e4hl_test.go:11:13: cannot use []rune(text) (value of type []rune) as type string in assignment\n/tmp/tmp22l0e4hl_test.go:14:13: undefined: contains\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    result := \"\"\n    for _, char := range text {\n        if !contains(vowels, char) {\n            result += char\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqxbmkirm_test.go:13:13: undefined: contains\n/tmp/tmpqxbmkirm_test.go:14:13: invalid operation: result += char (mismatched types string and rune)\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune(\"aeiouy\")\n    result := \"\"\n    for _, letter := range text {\n        if !contains(vowels, letter) {\n            result += letter\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpxw89tt6m_test.go:13:13: undefined: contains\n/tmp/tmpxw89tt6m_test.go:14:13: invalid operation: result += letter (mismatched types string and rune)\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    result := \"\"\n    for _, letter := range text {\n        if !contains(vowels, letter) {\n            result += letter\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoebzzi3y_test.go:13:13: undefined: contains\n/tmp/tmpoebzzi3y_test.go:14:13: invalid operation: result += letter (mismatched types string and rune)\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    result := []rune{}\n    for _, letter := range text {\n        if !contains(vowels, letter) {\n            result = append(result, letter)\n        }\n    }\n    return string(result)\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp22l0e4hl_test.go:11:10: no new variables on left side of :=\n/tmp/tmp22l0e4hl_test.go:11:13: cannot use []rune(text) (value of type []rune) as type string in assignment\n/tmp/tmp22l0e4hl_test.go:14:13: undefined: contains\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    result := \"\"\n    for _, char := range text {\n        if !contains(vowels, char) {\n            result += char\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqxbmkirm_test.go:13:13: undefined: contains\n/tmp/tmpqxbmkirm_test.go:14:13: invalid operation: result += char (mismatched types string and rune)\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    text := []rune(text)\n    for _, v := range text {\n        if !contains(vowels, v) {\n            delete(text, v)\n        }\n    }\n    return string(text)\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpzxxlhpy8_test.go:11:10: no new variables on left side of :=\n/tmp/tmpzxxlhpy8_test.go:11:13: cannot use []rune(text) (value of type []rune) as type string in assignment\n/tmp/tmpzxxlhpy8_test.go:13:13: undefined: contains\n/tmp/tmpzxxlhpy8_test.go:14:20: invalid argument: text (variable of type string) is not a map\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    result := \"\"\n    for _, char := range text {\n        if !contains(vowels, char) {\n            result += char\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqxbmkirm_test.go:13:13: undefined: contains\n/tmp/tmpqxbmkirm_test.go:14:13: invalid operation: result += char (mismatched types string and rune)\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    result := \"\"\n    for _, letter := range text {\n        if !contains(vowels, letter) {\n            result += letter\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoebzzi3y_test.go:13:13: undefined: contains\n/tmp/tmpoebzzi3y_test.go:14:13: invalid operation: result += letter (mismatched types string and rune)\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    result := \"\"\n    for _, letter := range text {\n        if !contains(vowels, letter) {\n            result += letter\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoebzzi3y_test.go:13:13: undefined: contains\n/tmp/tmpoebzzi3y_test.go:14:13: invalid operation: result += letter (mismatched types string and rune)\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    for _, v := range text {\n        if !contains(vowels, v) {\n            v = unicode.ToLower(v)\n        }\n    }\n    return string(text)\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgan6n6eu_test.go:11:10: no new variables on left side of :=\n/tmp/tmpgan6n6eu_test.go:11:13: cannot use []rune(text) (value of type []rune) as type string in assignment\n/tmp/tmpgan6n6eu_test.go:13:13: undefined: contains\n/tmp/tmpgan6n6eu_test.go:14:17: undefined: unicode\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    for _, v := range text {\n        if !contains(vowels, v) {\n            v = unicode.ToLower(v)\n        }\n    }\n    return string(text)\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgan6n6eu_test.go:11:10: no new variables on left side of :=\n/tmp/tmpgan6n6eu_test.go:11:13: cannot use []rune(text) (value of type []rune) as type string in assignment\n/tmp/tmpgan6n6eu_test.go:13:13: undefined: contains\n/tmp/tmpgan6n6eu_test.go:14:17: undefined: unicode\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    result := \"\"\n    for _, char := range text {\n        if !contains(vowels, char) {\n            result += char\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqxbmkirm_test.go:13:13: undefined: contains\n/tmp/tmpqxbmkirm_test.go:14:13: invalid operation: result += char (mismatched types string and rune)\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    result := []rune{}\n    for _, char := range text {\n        if !contains(vowels, char) {\n            result = append(result, char)\n        }\n    }\n    return string(result)\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpyir7b5fh_test.go:11:10: no new variables on left side of :=\n/tmp/tmpyir7b5fh_test.go:11:13: cannot use []rune(text) (value of type []rune) as type string in assignment\n/tmp/tmpyir7b5fh_test.go:14:13: undefined: contains\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for _, v := range vowels {\n        text = strings.Replace(text, v, \"\", -1)\n    }\n    return text\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpwutwyptk_test.go:12:16: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for _, v := range vowels {\n        text = strings.Replace(text, v, \"\", -1)\n    }\n    return text\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpwutwyptk_test.go:12:16: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    for _, v := range text {\n        if !contains(vowels, v) {\n            delete(text, v)\n        }\n    }\n    return string(text)\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpe_dp5r12_test.go:11:10: no new variables on left side of :=\n/tmp/tmpe_dp5r12_test.go:11:13: cannot use []rune(text) (value of type []rune) as type string in assignment\n/tmp/tmpe_dp5r12_test.go:13:13: undefined: contains\n/tmp/tmpe_dp5r12_test.go:14:20: invalid argument: text (variable of type string) is not a map\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    for _, v := range text {\n        if !contains(vowels, v) {\n            v = unicode.ToLower(v)\n        }\n    }\n    return string(text)\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgan6n6eu_test.go:11:10: no new variables on left side of :=\n/tmp/tmpgan6n6eu_test.go:11:13: cannot use []rune(text) (value of type []rune) as type string in assignment\n/tmp/tmpgan6n6eu_test.go:13:13: undefined: contains\n/tmp/tmpgan6n6eu_test.go:14:17: undefined: unicode\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    result := \"\"\n    for _, letter := range text {\n        if !contains(vowels, letter) {\n            result += letter\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoebzzi3y_test.go:13:13: undefined: contains\n/tmp/tmpoebzzi3y_test.go:14:13: invalid operation: result += letter (mismatched types string and rune)\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    for _, v := range text {\n        if !contains(vowels, v) {\n            v = string(v)\n        }\n    }\n    return string(text)\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpw80i12an_test.go:11:10: no new variables on left side of :=\n/tmp/tmpw80i12an_test.go:11:13: cannot use []rune(text) (value of type []rune) as type string in assignment\n/tmp/tmpw80i12an_test.go:13:13: undefined: contains\n/tmp/tmpw80i12an_test.go:14:17: cannot use string(v) (value of type string) as type rune in assignment\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    result := \"\"\n    for _, char := range text {\n        if !contains(vowels, char) {\n            result += char\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqxbmkirm_test.go:13:13: undefined: contains\n/tmp/tmpqxbmkirm_test.go:14:13: invalid operation: result += char (mismatched types string and rune)\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    for _, v := range text {\n        if !contains(vowels, v) {\n            v = unicode.ToLower(v)\n        }\n    }\n    return string(text)\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgan6n6eu_test.go:11:10: no new variables on left side of :=\n/tmp/tmpgan6n6eu_test.go:11:13: cannot use []rune(text) (value of type []rune) as type string in assignment\n/tmp/tmpgan6n6eu_test.go:13:13: undefined: contains\n/tmp/tmpgan6n6eu_test.go:14:17: undefined: unicode\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    result := \"\"\n    for _, char := range text {\n        if !contains(vowels, char) {\n            result += char\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqxbmkirm_test.go:13:13: undefined: contains\n/tmp/tmpqxbmkirm_test.go:14:13: invalid operation: result += char (mismatched types string and rune)\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    for _, v := range text {\n        if !contains(vowels, v) {\n            v = unicode.ToLower(v)\n        }\n    }\n    return string(text)\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgan6n6eu_test.go:11:10: no new variables on left side of :=\n/tmp/tmpgan6n6eu_test.go:11:13: cannot use []rune(text) (value of type []rune) as type string in assignment\n/tmp/tmpgan6n6eu_test.go:13:13: undefined: contains\n/tmp/tmpgan6n6eu_test.go:14:17: undefined: unicode\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    result := []rune{}\n    for _, letter := range text {\n        if !contains(vowels, letter) {\n            result = append(result, letter)\n        }\n    }\n    return string(result)\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp22l0e4hl_test.go:11:10: no new variables on left side of :=\n/tmp/tmp22l0e4hl_test.go:11:13: cannot use []rune(text) (value of type []rune) as type string in assignment\n/tmp/tmp22l0e4hl_test.go:14:13: undefined: contains\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    result := \"\"\n    for _, letter := range text {\n        if !contains(vowels, letter) {\n            result += letter\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoebzzi3y_test.go:13:13: undefined: contains\n/tmp/tmpoebzzi3y_test.go:14:13: invalid operation: result += letter (mismatched types string and rune)\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    result := \"\"\n    for _, char := range text {\n        if !contains(vowels, char) {\n            result += char\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqxbmkirm_test.go:13:13: undefined: contains\n/tmp/tmpqxbmkirm_test.go:14:13: invalid operation: result += char (mismatched types string and rune)\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    result := \"\"\n    for _, char := range text {\n        if !contains(vowels, char) {\n            result += char\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqxbmkirm_test.go:13:13: undefined: contains\n/tmp/tmpqxbmkirm_test.go:14:13: invalid operation: result += char (mismatched types string and rune)\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    result := \"\"\n    for _, char := range text {\n        if !contains(vowels, char) {\n            result += char\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqxbmkirm_test.go:13:13: undefined: contains\n/tmp/tmpqxbmkirm_test.go:14:13: invalid operation: result += char (mismatched types string and rune)\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    for _, v := range text {\n        if !contains(vowels, v) {\n            v = unicode.ToLower(v)\n        }\n    }\n    return string(text)\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgan6n6eu_test.go:11:10: no new variables on left side of :=\n/tmp/tmpgan6n6eu_test.go:11:13: cannot use []rune(text) (value of type []rune) as type string in assignment\n/tmp/tmpgan6n6eu_test.go:13:13: undefined: contains\n/tmp/tmpgan6n6eu_test.go:14:17: undefined: unicode\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    result := \"\"\n    for _, char := range text {\n        if !contains(vowels, char) {\n            result += char\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqxbmkirm_test.go:13:13: undefined: contains\n/tmp/tmpqxbmkirm_test.go:14:13: invalid operation: result += char (mismatched types string and rune)\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    result := []rune{}\n    for _, letter := range text {\n        if !contains(vowels, letter) {\n            result = append(result, letter)\n        }\n    }\n    return string(result)\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp22l0e4hl_test.go:11:10: no new variables on left side of :=\n/tmp/tmp22l0e4hl_test.go:11:13: cannot use []rune(text) (value of type []rune) as type string in assignment\n/tmp/tmp22l0e4hl_test.go:14:13: undefined: contains\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    result := []rune{}\n    for _, letter := range text {\n        if !contains(vowels, letter) {\n            result = append(result, letter)\n        }\n    }\n    return string(result)\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp22l0e4hl_test.go:11:10: no new variables on left side of :=\n/tmp/tmp22l0e4hl_test.go:11:13: cannot use []rune(text) (value of type []rune) as type string in assignment\n/tmp/tmp22l0e4hl_test.go:14:13: undefined: contains\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for _, v := range vowels {\n        text = text.replaceAllString(v, \"\")\n    }\n    return text\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmps8ud68eq_test.go:12:21: text.replaceAllString undefined (type string has no field or method replaceAllString)\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune(\"aeiou\")\n    result := \"\"\n    for _, letter := range text {\n        if !contains(vowels, letter) {\n            result += letter\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpltgv0dgm_test.go:13:13: undefined: contains\n/tmp/tmpltgv0dgm_test.go:14:13: invalid operation: result += letter (mismatched types string and rune)\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune(\"aeiou\")\n    result := \"\"\n    for _, char := range text {\n        if !contains(vowels, char) {\n            result += char\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpsknfgm4u_test.go:13:13: undefined: contains\n/tmp/tmpsknfgm4u_test.go:14:13: invalid operation: result += char (mismatched types string and rune)\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    result := \"\"\n    for _, letter := range text {\n        if !contains(vowels, letter) {\n            result += letter\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpfpi4fnva_test.go:13:13: undefined: contains\n/tmp/tmpfpi4fnva_test.go:14:13: invalid operation: result += letter (mismatched types string and rune)\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    text := strings.Replace(text, vowels, \"\", -1)\n    return text\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpyxffxkse_test.go:11:10: no new variables on left side of :=\n/tmp/tmpyxffxkse_test.go:11:13: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    result := \"\"\n    for _, r := range text {\n        if !contains(vowels, r) {\n            result += string(r)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpw0hgv4tr_test.go:13:13: undefined: contains\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    for _, v := range text {\n        if !contains(vowels, v) {\n            v = unicode.ToLower(v)\n        }\n    }\n    return string(text)\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgan6n6eu_test.go:11:10: no new variables on left side of :=\n/tmp/tmpgan6n6eu_test.go:11:13: cannot use []rune(text) (value of type []rune) as type string in assignment\n/tmp/tmpgan6n6eu_test.go:13:13: undefined: contains\n/tmp/tmpgan6n6eu_test.go:14:17: undefined: unicode\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    result := \"\"\n    for _, char := range text {\n        if !contains(vowels, char) {\n            result += char\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqxbmkirm_test.go:13:13: undefined: contains\n/tmp/tmpqxbmkirm_test.go:14:13: invalid operation: result += char (mismatched types string and rune)\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    for _, v := range text {\n        if !contains(vowels, v) {\n            delete(text, v)\n        }\n    }\n    return string(text)\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpe_dp5r12_test.go:11:10: no new variables on left side of :=\n/tmp/tmpe_dp5r12_test.go:11:13: cannot use []rune(text) (value of type []rune) as type string in assignment\n/tmp/tmpe_dp5r12_test.go:13:13: undefined: contains\n/tmp/tmpe_dp5r12_test.go:14:20: invalid argument: text (variable of type string) is not a map\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    for _, char := range text {\n        if !contains(vowels, char) {\n            delete(text, char)\n        }\n    }\n    return string(text)\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpvooita2j_test.go:11:10: no new variables on left side of :=\n/tmp/tmpvooita2j_test.go:11:13: cannot use []rune(text) (value of type []rune) as type string in assignment\n/tmp/tmpvooita2j_test.go:13:13: undefined: contains\n/tmp/tmpvooita2j_test.go:14:20: invalid argument: text (variable of type string) is not a map\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    for _, v := range text {\n        if !contains(vowels, v) {\n            delete(text, v)\n        }\n    }\n    return string(text)\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpe_dp5r12_test.go:11:10: no new variables on left side of :=\n/tmp/tmpe_dp5r12_test.go:11:13: cannot use []rune(text) (value of type []rune) as type string in assignment\n/tmp/tmpe_dp5r12_test.go:13:13: undefined: contains\n/tmp/tmpe_dp5r12_test.go:14:20: invalid argument: text (variable of type string) is not a map\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    result := \"\"\n    for _, char := range text {\n        if !contains(vowels, char) {\n            result += char\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqxbmkirm_test.go:13:13: undefined: contains\n/tmp/tmpqxbmkirm_test.go:14:13: invalid operation: result += char (mismatched types string and rune)\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    result := \"\"\n    for _, letter := range text {\n        if !contains(vowels, letter) {\n            result += letter\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoebzzi3y_test.go:13:13: undefined: contains\n/tmp/tmpoebzzi3y_test.go:14:13: invalid operation: result += letter (mismatched types string and rune)\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    for _, v := range text {\n        if !contains(vowels, v) {\n            v = unicode.ToLower(v)\n        }\n    }\n    return string(text)\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgan6n6eu_test.go:11:10: no new variables on left side of :=\n/tmp/tmpgan6n6eu_test.go:11:13: cannot use []rune(text) (value of type []rune) as type string in assignment\n/tmp/tmpgan6n6eu_test.go:13:13: undefined: contains\n/tmp/tmpgan6n6eu_test.go:14:17: undefined: unicode\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for _, v := range vowels {\n        text = text.replaceAllString(v, \"\")\n    }\n    return text\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmps8ud68eq_test.go:12:21: text.replaceAllString undefined (type string has no field or method replaceAllString)\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    for _, v := range text {\n        if !contains(vowels, v) {\n            v = unicode.ToLower(v)\n        }\n    }\n    return string(text)\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgan6n6eu_test.go:11:10: no new variables on left side of :=\n/tmp/tmpgan6n6eu_test.go:11:13: cannot use []rune(text) (value of type []rune) as type string in assignment\n/tmp/tmpgan6n6eu_test.go:13:13: undefined: contains\n/tmp/tmpgan6n6eu_test.go:14:17: undefined: unicode\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    for _, v := range text {\n        if !contains(vowels, v) {\n            v = unicode.ToLower(v)\n        }\n    }\n    return string(text)\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgan6n6eu_test.go:11:10: no new variables on left side of :=\n/tmp/tmpgan6n6eu_test.go:11:13: cannot use []rune(text) (value of type []rune) as type string in assignment\n/tmp/tmpgan6n6eu_test.go:13:13: undefined: contains\n/tmp/tmpgan6n6eu_test.go:14:17: undefined: unicode\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    result := \"\"\n    for _, letter := range text {\n        if !contains(vowels, letter) {\n            result += letter\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoebzzi3y_test.go:13:13: undefined: contains\n/tmp/tmpoebzzi3y_test.go:14:13: invalid operation: result += letter (mismatched types string and rune)\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for _, v := range vowels {\n        text = strings.Replace(text, v, \"\", -1)\n    }\n    return text\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpwutwyptk_test.go:12:16: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    result := \"\"\n    for _, letter := range text {\n        if !contains(vowels, letter) {\n            result += letter\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoebzzi3y_test.go:13:13: undefined: contains\n/tmp/tmpoebzzi3y_test.go:14:13: invalid operation: result += letter (mismatched types string and rune)\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    for _, v := range text {\n        if !contains(vowels, v) {\n            v = unicode.ToLower(v)\n        }\n    }\n    return string(text)\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgan6n6eu_test.go:11:10: no new variables on left side of :=\n/tmp/tmpgan6n6eu_test.go:11:13: cannot use []rune(text) (value of type []rune) as type string in assignment\n/tmp/tmpgan6n6eu_test.go:13:13: undefined: contains\n/tmp/tmpgan6n6eu_test.go:14:17: undefined: unicode\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    result := \"\"\n    for _, letter := range text {\n        if !contains(vowels, letter) {\n            result += letter\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoebzzi3y_test.go:13:13: undefined: contains\n/tmp/tmpoebzzi3y_test.go:14:13: invalid operation: result += letter (mismatched types string and rune)\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    result := \"\"\n    for _, char := range text {\n        if !contains(vowels, char) {\n            result += char\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqxbmkirm_test.go:13:13: undefined: contains\n/tmp/tmpqxbmkirm_test.go:14:13: invalid operation: result += char (mismatched types string and rune)\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    result := \"\"\n    for _, letter := range text {\n        if !contains(vowels, letter) {\n            result += letter\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoebzzi3y_test.go:13:13: undefined: contains\n/tmp/tmpoebzzi3y_test.go:14:13: invalid operation: result += letter (mismatched types string and rune)\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    for _, v := range text {\n        if !contains(vowels, v) {\n            text := append(text, v)\n        }\n    }\n    return string(text)\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmponjaa6un_test.go:11:10: no new variables on left side of :=\n/tmp/tmponjaa6un_test.go:11:13: cannot use []rune(text) (value of type []rune) as type string in assignment\n/tmp/tmponjaa6un_test.go:13:13: undefined: contains\n/tmp/tmponjaa6un_test.go:14:28: first argument to append must be a slice; have text (variable of type string)\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    for _, v := range text {\n        if !contains(vowels, v) {\n            text := append(text, v)\n        }\n    }\n    return string(text)\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmponjaa6un_test.go:11:10: no new variables on left side of :=\n/tmp/tmponjaa6un_test.go:11:13: cannot use []rune(text) (value of type []rune) as type string in assignment\n/tmp/tmponjaa6un_test.go:13:13: undefined: contains\n/tmp/tmponjaa6un_test.go:14:28: first argument to append must be a slice; have text (variable of type string)\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    for _, v := range text {\n        if !contains(vowels, v) {\n            v = unicode.ToLower(v)\n        }\n    }\n    return string(text)\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgan6n6eu_test.go:11:10: no new variables on left side of :=\n/tmp/tmpgan6n6eu_test.go:11:13: cannot use []rune(text) (value of type []rune) as type string in assignment\n/tmp/tmpgan6n6eu_test.go:13:13: undefined: contains\n/tmp/tmpgan6n6eu_test.go:14:17: undefined: unicode\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    for _, v := range text {\n        if !contains(vowels, v) {\n            v = unicode.ToLower(v)\n        }\n    }\n    return string(text)\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgan6n6eu_test.go:11:10: no new variables on left side of :=\n/tmp/tmpgan6n6eu_test.go:11:13: cannot use []rune(text) (value of type []rune) as type string in assignment\n/tmp/tmpgan6n6eu_test.go:13:13: undefined: contains\n/tmp/tmpgan6n6eu_test.go:14:17: undefined: unicode\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune(\"aeiouy\")\n    for _, v := range vowels {\n        text = strings.Replace(text, v, \"\", -1)\n    }\n    return text\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgb_n588i_test.go:12:16: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    result := \"\"\n    for _, letter := range text {\n        if !contains(vowels, letter) {\n            result += letter\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoebzzi3y_test.go:13:13: undefined: contains\n/tmp/tmpoebzzi3y_test.go:14:13: invalid operation: result += letter (mismatched types string and rune)\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    result := \"\"\n    for _, char := range text {\n        if !contains(vowels, char) {\n            result += char\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqxbmkirm_test.go:13:13: undefined: contains\n/tmp/tmpqxbmkirm_test.go:14:13: invalid operation: result += char (mismatched types string and rune)\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    result := \"\"\n    for _, letter := range text {\n        if !contains(vowels, letter) {\n            result += letter\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoebzzi3y_test.go:13:13: undefined: contains\n/tmp/tmpoebzzi3y_test.go:14:13: invalid operation: result += letter (mismatched types string and rune)\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    for _, v := range text {\n        if !contains(vowels, v) {\n            delete(text, v)\n        }\n    }\n    return string(text)\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpe_dp5r12_test.go:11:10: no new variables on left side of :=\n/tmp/tmpe_dp5r12_test.go:11:13: cannot use []rune(text) (value of type []rune) as type string in assignment\n/tmp/tmpe_dp5r12_test.go:13:13: undefined: contains\n/tmp/tmpe_dp5r12_test.go:14:20: invalid argument: text (variable of type string) is not a map\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    text := []rune(text)\n    for _, vowel := range vowels {\n        i := 0\n        for _, char := range text {\n            if char == vowel {\n                text[i] = char\n                i++\n            }\n        }\n    }\n    return string(text)\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpzsutgcsm_test.go:11:10: no new variables on left side of :=\n/tmp/tmpzsutgcsm_test.go:11:13: cannot use []rune(text) (value of type []rune) as type string in assignment\n/tmp/tmpzsutgcsm_test.go:15:24: invalid operation: char == vowel (mismatched types rune and string)\n/tmp/tmpzsutgcsm_test.go:16:17: cannot assign to text[i] (value of type byte)\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    result := \"\"\n    for _, char := range text {\n        if !contains(vowels, char) {\n            result += char\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqxbmkirm_test.go:13:13: undefined: contains\n/tmp/tmpqxbmkirm_test.go:14:13: invalid operation: result += char (mismatched types string and rune)\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    for _, v := range text {\n        if !contains(vowels, v) {\n            delete(text, v)\n        }\n    }\n    return string(text)\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpe_dp5r12_test.go:11:10: no new variables on left side of :=\n/tmp/tmpe_dp5r12_test.go:11:13: cannot use []rune(text) (value of type []rune) as type string in assignment\n/tmp/tmpe_dp5r12_test.go:13:13: undefined: contains\n/tmp/tmpe_dp5r12_test.go:14:20: invalid argument: text (variable of type string) is not a map\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for _, v := range vowels {\n        text = text.replaceAllString(v, \"\")\n    }\n    return text\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmps8ud68eq_test.go:12:21: text.replaceAllString undefined (type string has no field or method replaceAllString)\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    result := \"\"\n    for _, letter := range text {\n        if !contains(vowels, letter) {\n            result += letter\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoebzzi3y_test.go:13:13: undefined: contains\n/tmp/tmpoebzzi3y_test.go:14:13: invalid operation: result += letter (mismatched types string and rune)\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    result := []rune{}\n    for _, letter := range text {\n        if !contains(vowels, letter) {\n            result = append(result, letter)\n        }\n    }\n    return string(result)\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp22l0e4hl_test.go:11:10: no new variables on left side of :=\n/tmp/tmp22l0e4hl_test.go:11:13: cannot use []rune(text) (value of type []rune) as type string in assignment\n/tmp/tmp22l0e4hl_test.go:14:13: undefined: contains\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    result := \"\"\n    for _, letter := range text {\n        if !contains(vowels, letter) {\n            result += letter\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoebzzi3y_test.go:13:13: undefined: contains\n/tmp/tmpoebzzi3y_test.go:14:13: invalid operation: result += letter (mismatched types string and rune)\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    result := \"\"\n    for _, char := range text {\n        if !contains(vowels, char) {\n            result += char\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqxbmkirm_test.go:13:13: undefined: contains\n/tmp/tmpqxbmkirm_test.go:14:13: invalid operation: result += char (mismatched types string and rune)\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    for _, v := range text {\n        if !contains(vowels, v) {\n            v = unicode.ToLower(v)\n        }\n    }\n    return string(text)\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgan6n6eu_test.go:11:10: no new variables on left side of :=\n/tmp/tmpgan6n6eu_test.go:11:13: cannot use []rune(text) (value of type []rune) as type string in assignment\n/tmp/tmpgan6n6eu_test.go:13:13: undefined: contains\n/tmp/tmpgan6n6eu_test.go:14:17: undefined: unicode\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    text := []rune(text)\n    result := []rune{}\n    for _, char := range text {\n        if !contains(vowels, char) {\n            result = append(result, char)\n        }\n    }\n    return string(result)\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpx1y62381_test.go:11:10: no new variables on left side of :=\n/tmp/tmpx1y62381_test.go:11:13: cannot use []rune(text) (value of type []rune) as type string in assignment\n/tmp/tmpx1y62381_test.go:14:13: undefined: contains\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    for _, vowel := range vowels {\n        i := 0\n        for _, char := range text {\n            if char == vowel {\n                text[i] = char\n                i++\n            }\n        }\n    }\n    return string(text)\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqe5oo4ex_test.go:11:10: no new variables on left side of :=\n/tmp/tmpqe5oo4ex_test.go:11:13: cannot use []rune(text) (value of type []rune) as type string in assignment\n/tmp/tmpqe5oo4ex_test.go:16:17: cannot assign to text[i] (value of type byte)\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073417
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    result := \"\"\n    for _, char := range text {\n        if !contains(vowels, char) {\n            result += char\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqxbmkirm_test.go:13:13: undefined: contains\n/tmp/tmpqxbmkirm_test.go:14:13: invalid operation: result += char (mismatched types string and rune)\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    for _, v := range text {\n        if !contains(vowels, v) {\n            v = rune(0)\n        }\n    }\n    return string(text)\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgwktojyc_test.go:11:10: no new variables on left side of :=\n/tmp/tmpgwktojyc_test.go:11:13: cannot use []rune(text) (value of type []rune) as type string in assignment\n/tmp/tmpgwktojyc_test.go:13:13: undefined: contains\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073417
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    result := []rune{}\n    for _, letter := range text {\n        if !contains(vowels, letter) {\n            result = append(result, letter)\n        }\n    }\n    return string(result)\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp22l0e4hl_test.go:11:10: no new variables on left side of :=\n/tmp/tmp22l0e4hl_test.go:11:13: cannot use []rune(text) (value of type []rune) as type string in assignment\n/tmp/tmp22l0e4hl_test.go:14:13: undefined: contains\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for _, v := range vowels {\n        text = strings.Replace(text, v, \"\", -1)\n    }\n    return text\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpwutwyptk_test.go:12:16: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    result := \"\"\n    for _, letter := range text {\n        if !contains(vowels, letter) {\n            result += letter\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpfpi4fnva_test.go:13:13: undefined: contains\n/tmp/tmpfpi4fnva_test.go:14:13: invalid operation: result += letter (mismatched types string and rune)\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    for _, v := range text {\n        if !contains(vowels, v) {\n            text := append(text, v)\n        }\n    }\n    return string(text)\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmponjaa6un_test.go:11:10: no new variables on left side of :=\n/tmp/tmponjaa6un_test.go:11:13: cannot use []rune(text) (value of type []rune) as type string in assignment\n/tmp/tmponjaa6un_test.go:13:13: undefined: contains\n/tmp/tmponjaa6un_test.go:14:28: first argument to append must be a slice; have text (variable of type string)\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    result := []rune{}\n    for _, letter := range text {\n        if !contains(vowels, letter) {\n            result = append(result, letter)\n        }\n    }\n    return string(result)\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp22l0e4hl_test.go:11:10: no new variables on left side of :=\n/tmp/tmp22l0e4hl_test.go:11:13: cannot use []rune(text) (value of type []rune) as type string in assignment\n/tmp/tmp22l0e4hl_test.go:14:13: undefined: contains\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    result := \"\"\n    for _, char := range text {\n        if !contains(vowels, char) {\n            result += char\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqxbmkirm_test.go:13:13: undefined: contains\n/tmp/tmpqxbmkirm_test.go:14:13: invalid operation: result += char (mismatched types string and rune)\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune(\"aeiou\")\n    result := \"\"\n    for _, char := range text {\n        if !contains(vowels, char) {\n            result += char\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpsknfgm4u_test.go:13:13: undefined: contains\n/tmp/tmpsknfgm4u_test.go:14:13: invalid operation: result += char (mismatched types string and rune)\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    result := \"\"\n    for _, char := range text {\n        if !contains(vowels, char) {\n            result += char\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqxbmkirm_test.go:13:13: undefined: contains\n/tmp/tmpqxbmkirm_test.go:14:13: invalid operation: result += char (mismatched types string and rune)\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    text := []rune(text)\n    result := \"\"\n    for _, char := range text {\n        if !contains(vowels, char) {\n            result = append(result, char)\n        }\n    }\n    return string(result)\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpdxe20xxa_test.go:11:10: no new variables on left side of :=\n/tmp/tmpdxe20xxa_test.go:11:13: cannot use []rune(text) (value of type []rune) as type string in assignment\n/tmp/tmpdxe20xxa_test.go:14:13: undefined: contains\n/tmp/tmpdxe20xxa_test.go:15:29: first argument to append must be a slice; have result (variable of type string)\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073417
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for _, v := range vowels {\n        text = text.replaceAllString(v, \"\")\n    }\n    return text\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmps8ud68eq_test.go:12:21: text.replaceAllString undefined (type string has no field or method replaceAllString)\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    result := \"\"\n    for _, letter := range text {\n        if !contains(vowels, letter) {\n            result += letter\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoebzzi3y_test.go:13:13: undefined: contains\n/tmp/tmpoebzzi3y_test.go:14:13: invalid operation: result += letter (mismatched types string and rune)\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    for _, v := range text {\n        if !contains(vowels, v) {\n            v = unicode.ToLower(v)\n        }\n    }\n    return string(text)\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgan6n6eu_test.go:11:10: no new variables on left side of :=\n/tmp/tmpgan6n6eu_test.go:11:13: cannot use []rune(text) (value of type []rune) as type string in assignment\n/tmp/tmpgan6n6eu_test.go:13:13: undefined: contains\n/tmp/tmpgan6n6eu_test.go:14:17: undefined: unicode\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    result := \"\"\n    for _, letter := range text {\n        if !contains(vowels, letter) {\n            result += letter\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoebzzi3y_test.go:13:13: undefined: contains\n/tmp/tmpoebzzi3y_test.go:14:13: invalid operation: result += letter (mismatched types string and rune)\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    result := \"\"\n    for _, letter := range text {\n        if !contains(vowels, letter) {\n            result += letter\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoebzzi3y_test.go:13:13: undefined: contains\n/tmp/tmpoebzzi3y_test.go:14:13: invalid operation: result += letter (mismatched types string and rune)\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    result := \"\"\n    for _, letter := range text {\n        if !contains(vowels, letter) {\n            result += letter\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoebzzi3y_test.go:13:13: undefined: contains\n/tmp/tmpoebzzi3y_test.go:14:13: invalid operation: result += letter (mismatched types string and rune)\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    for _, v := range text {\n        if !contains(vowels, v) {\n            v = unicode.ToLower(v)\n        }\n    }\n    return string(text)\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgan6n6eu_test.go:11:10: no new variables on left side of :=\n/tmp/tmpgan6n6eu_test.go:11:13: cannot use []rune(text) (value of type []rune) as type string in assignment\n/tmp/tmpgan6n6eu_test.go:13:13: undefined: contains\n/tmp/tmpgan6n6eu_test.go:14:17: undefined: unicode\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune(\"aeiou\")\n    result := \"\"\n    for _, char := range text {\n        if !contains(vowels, char) {\n            result += char\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpsknfgm4u_test.go:13:13: undefined: contains\n/tmp/tmpsknfgm4u_test.go:14:13: invalid operation: result += char (mismatched types string and rune)\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    for _, v := range text {\n        if !contains(vowels, v) {\n            v = unicode.ToLower(v)\n        }\n    }\n    return string(text)\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgan6n6eu_test.go:11:10: no new variables on left side of :=\n/tmp/tmpgan6n6eu_test.go:11:13: cannot use []rune(text) (value of type []rune) as type string in assignment\n/tmp/tmpgan6n6eu_test.go:13:13: undefined: contains\n/tmp/tmpgan6n6eu_test.go:14:17: undefined: unicode\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    result := []rune{}\n    for _, char := range text {\n        if !contains(vowels, char) {\n            result = append(result, char)\n        }\n    }\n    return string(result)\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpyir7b5fh_test.go:11:10: no new variables on left side of :=\n/tmp/tmpyir7b5fh_test.go:11:13: cannot use []rune(text) (value of type []rune) as type string in assignment\n/tmp/tmpyir7b5fh_test.go:14:13: undefined: contains\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    for _, v := range text {\n        if !contains(vowels, v) {\n            v = string(v)\n        }\n    }\n    return string(text)\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpw80i12an_test.go:11:10: no new variables on left side of :=\n/tmp/tmpw80i12an_test.go:11:13: cannot use []rune(text) (value of type []rune) as type string in assignment\n/tmp/tmpw80i12an_test.go:13:13: undefined: contains\n/tmp/tmpw80i12an_test.go:14:17: cannot use string(v) (value of type string) as type rune in assignment\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    result := \"\"\n    for _, char := range text {\n        if !contains(vowels, char) {\n            result += char\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqxbmkirm_test.go:13:13: undefined: contains\n/tmp/tmpqxbmkirm_test.go:14:13: invalid operation: result += char (mismatched types string and rune)\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    result := \"\"\n    for _, letter := range text {\n        if !contains(vowels, letter) {\n            result += letter\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoebzzi3y_test.go:13:13: undefined: contains\n/tmp/tmpoebzzi3y_test.go:14:13: invalid operation: result += letter (mismatched types string and rune)\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    result := []rune{}\n    for _, char := range text {\n        if !contains(vowels, char) {\n            result = append(result, char)\n        }\n    }\n    return string(result)\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpyir7b5fh_test.go:11:10: no new variables on left side of :=\n/tmp/tmpyir7b5fh_test.go:11:13: cannot use []rune(text) (value of type []rune) as type string in assignment\n/tmp/tmpyir7b5fh_test.go:14:13: undefined: contains\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for _, v := range vowels {\n        text = strings.Replace(text, v, \"\", -1)\n    }\n    return text\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpwutwyptk_test.go:12:16: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    result := []rune{}\n    for _, letter := range text {\n        if !contains(vowels, letter) {\n            result = append(result, letter)\n        }\n    }\n    return string(result)\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp22l0e4hl_test.go:11:10: no new variables on left side of :=\n/tmp/tmp22l0e4hl_test.go:11:13: cannot use []rune(text) (value of type []rune) as type string in assignment\n/tmp/tmp22l0e4hl_test.go:14:13: undefined: contains\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    result := []rune{}\n    for _, letter := range text {\n        if !contains(vowels, letter) {\n            result = append(result, letter)\n        }\n    }\n    return string(result)\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp22l0e4hl_test.go:11:10: no new variables on left side of :=\n/tmp/tmp22l0e4hl_test.go:11:13: cannot use []rune(text) (value of type []rune) as type string in assignment\n/tmp/tmp22l0e4hl_test.go:14:13: undefined: contains\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    result := \"\"\n    for _, letter := range text {\n        if !contains(vowels, letter) {\n            result += letter\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoebzzi3y_test.go:13:13: undefined: contains\n/tmp/tmpoebzzi3y_test.go:14:13: invalid operation: result += letter (mismatched types string and rune)\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    for _, v := range text {\n        if !contains(vowels, v) {\n            v = unicode.ToLower(v)\n        }\n    }\n    return string(text)\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgan6n6eu_test.go:11:10: no new variables on left side of :=\n/tmp/tmpgan6n6eu_test.go:11:13: cannot use []rune(text) (value of type []rune) as type string in assignment\n/tmp/tmpgan6n6eu_test.go:13:13: undefined: contains\n/tmp/tmpgan6n6eu_test.go:14:17: undefined: unicode\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    result := []rune{}\n    for _, letter := range text {\n        if !contains(vowels, letter) {\n            result = append(result, letter)\n        }\n    }\n    return string(result)\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp22l0e4hl_test.go:11:10: no new variables on left side of :=\n/tmp/tmp22l0e4hl_test.go:11:13: cannot use []rune(text) (value of type []rune) as type string in assignment\n/tmp/tmp22l0e4hl_test.go:14:13: undefined: contains\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    for _, v := range text {\n        if !contains(vowels, v) {\n            v = unicode.ToLower(v)\n        }\n    }\n    return string(text)\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgan6n6eu_test.go:11:10: no new variables on left side of :=\n/tmp/tmpgan6n6eu_test.go:11:13: cannot use []rune(text) (value of type []rune) as type string in assignment\n/tmp/tmpgan6n6eu_test.go:13:13: undefined: contains\n/tmp/tmpgan6n6eu_test.go:14:17: undefined: unicode\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    for _, vowel := range vowels {\n        i := 0\n        for _, char := range text {\n            if char == vowel {\n                text[i] = char\n                i++\n            }\n        }\n    }\n    return string(text)\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqe5oo4ex_test.go:11:10: no new variables on left side of :=\n/tmp/tmpqe5oo4ex_test.go:11:13: cannot use []rune(text) (value of type []rune) as type string in assignment\n/tmp/tmpqe5oo4ex_test.go:16:17: cannot assign to text[i] (value of type byte)\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073417
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    result := \"\"\n    for _, char := range text {\n        if !contains(vowels, char) {\n            result += char\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqxbmkirm_test.go:13:13: undefined: contains\n/tmp/tmpqxbmkirm_test.go:14:13: invalid operation: result += char (mismatched types string and rune)\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    result := \"\"\n    for _, char := range text {\n        if !contains(vowels, char) {\n            result += char\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqxbmkirm_test.go:13:13: undefined: contains\n/tmp/tmpqxbmkirm_test.go:14:13: invalid operation: result += char (mismatched types string and rune)\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    result := \"\"\n    for _, letter := range text {\n        if !contains(vowels, letter) {\n            result += letter\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoebzzi3y_test.go:13:13: undefined: contains\n/tmp/tmpoebzzi3y_test.go:14:13: invalid operation: result += letter (mismatched types string and rune)\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    result := \"\"\n    for _, r := range text {\n        if !contains(vowels, r) {\n            result += string(r)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpw0hgv4tr_test.go:13:13: undefined: contains\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    result := \"\"\n    for _, letter := range text {\n        if !contains(vowels, letter) {\n            result += letter\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoebzzi3y_test.go:13:13: undefined: contains\n/tmp/tmpoebzzi3y_test.go:14:13: invalid operation: result += letter (mismatched types string and rune)\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    for _, v := range text {\n        if !contains(vowels, v) {\n            v = unicode.ToLower(v)\n        }\n    }\n    return string(text)\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgan6n6eu_test.go:11:10: no new variables on left side of :=\n/tmp/tmpgan6n6eu_test.go:11:13: cannot use []rune(text) (value of type []rune) as type string in assignment\n/tmp/tmpgan6n6eu_test.go:13:13: undefined: contains\n/tmp/tmpgan6n6eu_test.go:14:17: undefined: unicode\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    for _, v := range text {\n        if !contains(vowels, v) {\n            delete(text, v)\n        }\n    }\n    return string(text)\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpe_dp5r12_test.go:11:10: no new variables on left side of :=\n/tmp/tmpe_dp5r12_test.go:11:13: cannot use []rune(text) (value of type []rune) as type string in assignment\n/tmp/tmpe_dp5r12_test.go:13:13: undefined: contains\n/tmp/tmpe_dp5r12_test.go:14:20: invalid argument: text (variable of type string) is not a map\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    for _, v := range text {\n        if !contains(vowels, v) {\n            v = unicode.ToLower(v)\n        }\n    }\n    return string(text)\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgan6n6eu_test.go:11:10: no new variables on left side of :=\n/tmp/tmpgan6n6eu_test.go:11:13: cannot use []rune(text) (value of type []rune) as type string in assignment\n/tmp/tmpgan6n6eu_test.go:13:13: undefined: contains\n/tmp/tmpgan6n6eu_test.go:14:17: undefined: unicode\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    for _, v := range text {\n        if !contains(vowels, v) {\n            delete(text, v)\n        }\n    }\n    return string(text)\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpe_dp5r12_test.go:11:10: no new variables on left side of :=\n/tmp/tmpe_dp5r12_test.go:11:13: cannot use []rune(text) (value of type []rune) as type string in assignment\n/tmp/tmpe_dp5r12_test.go:13:13: undefined: contains\n/tmp/tmpe_dp5r12_test.go:14:20: invalid argument: text (variable of type string) is not a map\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    text := []rune(text)\n    for _, v := range text {\n        if !contains(vowels, v) {\n            delete(text, v)\n        }\n    }\n    return string(text)\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpzxxlhpy8_test.go:11:10: no new variables on left side of :=\n/tmp/tmpzxxlhpy8_test.go:11:13: cannot use []rune(text) (value of type []rune) as type string in assignment\n/tmp/tmpzxxlhpy8_test.go:13:13: undefined: contains\n/tmp/tmpzxxlhpy8_test.go:14:20: invalid argument: text (variable of type string) is not a map\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    result := []rune{}\n    for _, char := range text {\n        if !contains(vowels, char) {\n            result = append(result, char)\n        }\n    }\n    return string(result)\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpyir7b5fh_test.go:11:10: no new variables on left side of :=\n/tmp/tmpyir7b5fh_test.go:11:13: cannot use []rune(text) (value of type []rune) as type string in assignment\n/tmp/tmpyir7b5fh_test.go:14:13: undefined: contains\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    result := []rune{}\n    for _, char := range text {\n        if !contains(vowels, char) {\n            result = append(result, char)\n        }\n    }\n    return string(result)\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpyir7b5fh_test.go:11:10: no new variables on left side of :=\n/tmp/tmpyir7b5fh_test.go:11:13: cannot use []rune(text) (value of type []rune) as type string in assignment\n/tmp/tmpyir7b5fh_test.go:14:13: undefined: contains\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for _, v := range vowels {\n        text = text.replaceAllString(v, \"\")\n    }\n    return text\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmps8ud68eq_test.go:12:21: text.replaceAllString undefined (type string has no field or method replaceAllString)\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    result := \"\"\n    for _, letter := range text {\n        if !contains(vowels, letter) {\n            result += letter\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpfpi4fnva_test.go:13:13: undefined: contains\n/tmp/tmpfpi4fnva_test.go:14:13: invalid operation: result += letter (mismatched types string and rune)\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    result := \"\"\n    for _, char := range text {\n        if !contains(vowels, char) {\n            result += char\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqxbmkirm_test.go:13:13: undefined: contains\n/tmp/tmpqxbmkirm_test.go:14:13: invalid operation: result += char (mismatched types string and rune)\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    result := []rune{}\n    for _, char := range text {\n        if !contains(vowels, char) {\n            result = append(result, char)\n        }\n    }\n    return string(result)\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpyir7b5fh_test.go:11:10: no new variables on left side of :=\n/tmp/tmpyir7b5fh_test.go:11:13: cannot use []rune(text) (value of type []rune) as type string in assignment\n/tmp/tmpyir7b5fh_test.go:14:13: undefined: contains\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    result := []rune{}\n    for _, letter := range text {\n        if !contains(vowels, letter) {\n            result = append(result, letter)\n        }\n    }\n    return string(result)\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp22l0e4hl_test.go:11:10: no new variables on left side of :=\n/tmp/tmp22l0e4hl_test.go:11:13: cannot use []rune(text) (value of type []rune) as type string in assignment\n/tmp/tmp22l0e4hl_test.go:14:13: undefined: contains\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    result := []rune{}\n    for _, letter := range text {\n        if !contains(vowels, letter) {\n            result = append(result, letter)\n        }\n    }\n    return string(result)\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp22l0e4hl_test.go:11:10: no new variables on left side of :=\n/tmp/tmp22l0e4hl_test.go:11:13: cannot use []rune(text) (value of type []rune) as type string in assignment\n/tmp/tmp22l0e4hl_test.go:14:13: undefined: contains\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    text := strings.ToLower(text)\n    for _, v := range vowels {\n        text = strings.Replace(text, v, \"\", -1)\n    }\n    return text\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpxn3ukpqe_test.go:11:10: no new variables on left side of :=\n/tmp/tmpxn3ukpqe_test.go:11:13: undefined: strings\n/tmp/tmpxn3ukpqe_test.go:13:16: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073417
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    result := \"\"\n    for _, char := range text {\n        if !contains(vowels, char) {\n            result += char\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqxbmkirm_test.go:13:13: undefined: contains\n/tmp/tmpqxbmkirm_test.go:14:13: invalid operation: result += char (mismatched types string and rune)\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    result := []rune{}\n    for _, char := range text {\n        if !contains(vowels, char) {\n            result = append(result, char)\n        }\n    }\n    return string(result)\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpyir7b5fh_test.go:11:10: no new variables on left side of :=\n/tmp/tmpyir7b5fh_test.go:11:13: cannot use []rune(text) (value of type []rune) as type string in assignment\n/tmp/tmpyir7b5fh_test.go:14:13: undefined: contains\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    result := \"\"\n    for _, char := range text {\n        if !contains(vowels, char) {\n            result += char\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqxbmkirm_test.go:13:13: undefined: contains\n/tmp/tmpqxbmkirm_test.go:14:13: invalid operation: result += char (mismatched types string and rune)\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    result := \"\"\n    for _, char := range text {\n        if !contains(vowels, char) {\n            result += char\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqxbmkirm_test.go:13:13: undefined: contains\n/tmp/tmpqxbmkirm_test.go:14:13: invalid operation: result += char (mismatched types string and rune)\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    for _, v := range text {\n        if !contains(vowels, v) {\n            v = unicode.ToLower(v)\n        }\n    }\n    return string(text)\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgan6n6eu_test.go:11:10: no new variables on left side of :=\n/tmp/tmpgan6n6eu_test.go:11:13: cannot use []rune(text) (value of type []rune) as type string in assignment\n/tmp/tmpgan6n6eu_test.go:13:13: undefined: contains\n/tmp/tmpgan6n6eu_test.go:14:17: undefined: unicode\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    result := \"\"\n    for _, char := range text {\n        if !contains(vowels, char) {\n            result += char\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqxbmkirm_test.go:13:13: undefined: contains\n/tmp/tmpqxbmkirm_test.go:14:13: invalid operation: result += char (mismatched types string and rune)\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune(\"aeiou\")\n    text := []rune(text)\n    result := []rune{}\n    for _, letter := range text {\n        if !contains(vowels, letter) {\n            result = append(result, letter)\n        }\n    }\n    return string(result)\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5usktmdm_test.go:11:10: no new variables on left side of :=\n/tmp/tmp5usktmdm_test.go:11:13: cannot use []rune(text) (value of type []rune) as type string in assignment\n/tmp/tmp5usktmdm_test.go:14:13: undefined: contains\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073417
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    result := \"\"\n    for _, char := range text {\n        if !contains(vowels, char) {\n            result += char\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqxbmkirm_test.go:13:13: undefined: contains\n/tmp/tmpqxbmkirm_test.go:14:13: invalid operation: result += char (mismatched types string and rune)\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    result := []rune{}\n    for _, letter := range text {\n        if !contains(vowels, letter) {\n            result = append(result, letter)\n        }\n    }\n    return string(result)\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp22l0e4hl_test.go:11:10: no new variables on left side of :=\n/tmp/tmp22l0e4hl_test.go:11:13: cannot use []rune(text) (value of type []rune) as type string in assignment\n/tmp/tmp22l0e4hl_test.go:14:13: undefined: contains\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    for _, v := range text {\n        if !contains(vowels, v) {\n            v = unicode.ToLower(v)\n        }\n    }\n    return string(text)\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgan6n6eu_test.go:11:10: no new variables on left side of :=\n/tmp/tmpgan6n6eu_test.go:11:13: cannot use []rune(text) (value of type []rune) as type string in assignment\n/tmp/tmpgan6n6eu_test.go:13:13: undefined: contains\n/tmp/tmpgan6n6eu_test.go:14:17: undefined: unicode\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    result := \"\"\n    for _, letter := range text {\n        if !contains(vowels, letter) {\n            result += letter\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoebzzi3y_test.go:13:13: undefined: contains\n/tmp/tmpoebzzi3y_test.go:14:13: invalid operation: result += letter (mismatched types string and rune)\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    result := \"\"\n    for _, letter := range text {\n        if !contains(vowels, letter) {\n            result += letter\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoebzzi3y_test.go:13:13: undefined: contains\n/tmp/tmpoebzzi3y_test.go:14:13: invalid operation: result += letter (mismatched types string and rune)\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    result := \"\"\n    for _, letter := range text {\n        if !contains(vowels, letter) {\n            result += letter\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpfpi4fnva_test.go:13:13: undefined: contains\n/tmp/tmpfpi4fnva_test.go:14:13: invalid operation: result += letter (mismatched types string and rune)\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    text := []rune(text)\n    for _, v := range text {\n        if !contains(vowels, v) {\n            delete(text, v)\n        }\n    }\n    return string(text)\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpzxxlhpy8_test.go:11:10: no new variables on left side of :=\n/tmp/tmpzxxlhpy8_test.go:11:13: cannot use []rune(text) (value of type []rune) as type string in assignment\n/tmp/tmpzxxlhpy8_test.go:13:13: undefined: contains\n/tmp/tmpzxxlhpy8_test.go:14:20: invalid argument: text (variable of type string) is not a map\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    result := \"\"\n    for _, char := range text {\n        if !contains(vowels, char) {\n            result += char\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqxbmkirm_test.go:13:13: undefined: contains\n/tmp/tmpqxbmkirm_test.go:14:13: invalid operation: result += char (mismatched types string and rune)\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    text := strings.Replace(text, \" \", \"\", -1)\n    for _, v := range vowels {\n        text = strings.Replace(text, v, \"\", -1)\n    }\n    return text\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp33eqs718_test.go:11:10: no new variables on left side of :=\n/tmp/tmp33eqs718_test.go:11:13: undefined: strings\n/tmp/tmp33eqs718_test.go:13:16: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073417
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    result := \"\"\n    for _, char := range text {\n        if !contains(vowels, char) {\n            result += char\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqxbmkirm_test.go:13:13: undefined: contains\n/tmp/tmpqxbmkirm_test.go:14:13: invalid operation: result += char (mismatched types string and rune)\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    result := \"\"\n    for _, letter := range text {\n        if !contains(vowels, letter) {\n            result += letter\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoebzzi3y_test.go:13:13: undefined: contains\n/tmp/tmpoebzzi3y_test.go:14:13: invalid operation: result += letter (mismatched types string and rune)\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for _, vowel := range vowels {\n        text = strings.Replace(text, vowel, \"\", -1)\n    }\n    return text\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppyo3ttf1_test.go:12:16: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073417
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    result := \"\"\n    for _, letter := range text {\n        if !contains(vowels, letter) {\n            result += letter\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoebzzi3y_test.go:13:13: undefined: contains\n/tmp/tmpoebzzi3y_test.go:14:13: invalid operation: result += letter (mismatched types string and rune)\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    result := \"\"\n    for _, char := range text {\n        if !contains(vowels, char) {\n            result += char\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqxbmkirm_test.go:13:13: undefined: contains\n/tmp/tmpqxbmkirm_test.go:14:13: invalid operation: result += char (mismatched types string and rune)\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    text := []rune(text)\n    for _, v := range text {\n        if !contains(vowels, v) {\n            v = unicode.ToLower(v)\n        }\n    }\n    return string(text)\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_m3fllug_test.go:11:10: no new variables on left side of :=\n/tmp/tmp_m3fllug_test.go:11:13: cannot use []rune(text) (value of type []rune) as type string in assignment\n/tmp/tmp_m3fllug_test.go:13:13: undefined: contains\n/tmp/tmp_m3fllug_test.go:14:17: undefined: unicode\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073417
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    for _, v := range text {\n        if !contains(vowels, v) {\n            v = unicode.ToLower(v)\n        }\n    }\n    return string(text)\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgan6n6eu_test.go:11:10: no new variables on left side of :=\n/tmp/tmpgan6n6eu_test.go:11:13: cannot use []rune(text) (value of type []rune) as type string in assignment\n/tmp/tmpgan6n6eu_test.go:13:13: undefined: contains\n/tmp/tmpgan6n6eu_test.go:14:17: undefined: unicode\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    for _, v := range text {\n        if !contains(vowels, v) {\n            v = rune(0)\n        }\n    }\n    return string(text)\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgwktojyc_test.go:11:10: no new variables on left side of :=\n/tmp/tmpgwktojyc_test.go:11:13: cannot use []rune(text) (value of type []rune) as type string in assignment\n/tmp/tmpgwktojyc_test.go:13:13: undefined: contains\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073417
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    for _, v := range text {\n        if !contains(vowels, v) {\n            v = unicode.ToLower(v)\n        }\n    }\n    return string(text)\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgan6n6eu_test.go:11:10: no new variables on left side of :=\n/tmp/tmpgan6n6eu_test.go:11:13: cannot use []rune(text) (value of type []rune) as type string in assignment\n/tmp/tmpgan6n6eu_test.go:13:13: undefined: contains\n/tmp/tmpgan6n6eu_test.go:14:17: undefined: unicode\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    for _, v := range text {\n        if !contains(vowels, v) {\n            v = string(v)\n        }\n    }\n    return string(text)\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpw80i12an_test.go:11:10: no new variables on left side of :=\n/tmp/tmpw80i12an_test.go:11:13: cannot use []rune(text) (value of type []rune) as type string in assignment\n/tmp/tmpw80i12an_test.go:13:13: undefined: contains\n/tmp/tmpw80i12an_test.go:14:17: cannot use string(v) (value of type string) as type rune in assignment\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    for _, v := range text {\n        if !contains(vowels, v) {\n            text := append(text, v)\n        }\n    }\n    return string(text)\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmponjaa6un_test.go:11:10: no new variables on left side of :=\n/tmp/tmponjaa6un_test.go:11:13: cannot use []rune(text) (value of type []rune) as type string in assignment\n/tmp/tmponjaa6un_test.go:13:13: undefined: contains\n/tmp/tmponjaa6un_test.go:14:28: first argument to append must be a slice; have text (variable of type string)\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    result := []rune{}\n    for _, letter := range text {\n        if !contains(vowels, letter) {\n            result = append(result, letter)\n        }\n    }\n    return string(result)\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp22l0e4hl_test.go:11:10: no new variables on left side of :=\n/tmp/tmp22l0e4hl_test.go:11:13: cannot use []rune(text) (value of type []rune) as type string in assignment\n/tmp/tmp22l0e4hl_test.go:14:13: undefined: contains\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    result := \"\"\n    for _, char := range text {\n        if !contains(vowels, char) {\n            result += char\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4e9gj28q_test.go:13:13: undefined: contains\n/tmp/tmp4e9gj28q_test.go:14:13: invalid operation: result += char (mismatched types string and rune)\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073417
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    for _, v := range text {\n        if !contains(vowels, v) {\n            v = unicode.ToLower(v)\n        }\n    }\n    return string(text)\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgan6n6eu_test.go:11:10: no new variables on left side of :=\n/tmp/tmpgan6n6eu_test.go:11:13: cannot use []rune(text) (value of type []rune) as type string in assignment\n/tmp/tmpgan6n6eu_test.go:13:13: undefined: contains\n/tmp/tmpgan6n6eu_test.go:14:17: undefined: unicode\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    for _, v := range text {\n        if !contains(vowels, v) {\n            delete(text, v)\n        }\n    }\n    return string(text)\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpe_dp5r12_test.go:11:10: no new variables on left side of :=\n/tmp/tmpe_dp5r12_test.go:11:13: cannot use []rune(text) (value of type []rune) as type string in assignment\n/tmp/tmpe_dp5r12_test.go:13:13: undefined: contains\n/tmp/tmpe_dp5r12_test.go:14:20: invalid argument: text (variable of type string) is not a map\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    result := []rune{}\n    for _, letter := range text {\n        if !contains(vowels, letter) {\n            result = append(result, letter)\n        }\n    }\n    return string(result)\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp22l0e4hl_test.go:11:10: no new variables on left side of :=\n/tmp/tmp22l0e4hl_test.go:11:13: cannot use []rune(text) (value of type []rune) as type string in assignment\n/tmp/tmp22l0e4hl_test.go:14:13: undefined: contains\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    text := []rune(text)\n    result := []rune{}\n    for _, letter := range text {\n        if !contains(vowels, letter) {\n            result = append(result, letter)\n        }\n    }\n    return string(result)\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp98mjk08f_test.go:11:10: no new variables on left side of :=\n/tmp/tmp98mjk08f_test.go:11:13: cannot use []rune(text) (value of type []rune) as type string in assignment\n/tmp/tmp98mjk08f_test.go:14:13: undefined: contains\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073417
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    for _, v := range text {\n        if !contains(vowels, v) {\n            v = string(v)\n        }\n    }\n    return string(text)\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpw80i12an_test.go:11:10: no new variables on left side of :=\n/tmp/tmpw80i12an_test.go:11:13: cannot use []rune(text) (value of type []rune) as type string in assignment\n/tmp/tmpw80i12an_test.go:13:13: undefined: contains\n/tmp/tmpw80i12an_test.go:14:17: cannot use string(v) (value of type string) as type rune in assignment\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune(\"aeiou\")\n    result := \"\"\n    for _, char := range text {\n        if !contains(vowels, char) {\n            result += char\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpsknfgm4u_test.go:13:13: undefined: contains\n/tmp/tmpsknfgm4u_test.go:14:13: invalid operation: result += char (mismatched types string and rune)\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune(\"aeiou\")\n    for _, v := range vowels {\n        text = strings.Replace(text, v, \"\", -1)\n    }\n    return text\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmprres73t8_test.go:12:16: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073417
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    result := \"\"\n    for _, char := range text {\n        if !vowels[char] {\n            result += char\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpb3o1yj2v_test.go:13:13: invalid operation: operator ! not defined on vowels[char] (variable of type string)\n/tmp/tmpb3o1yj2v_test.go:14:13: invalid operation: result += char (mismatched types string and rune)\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073417
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    for _, v := range text {\n        if !contains(vowels, v) {\n            text := append(text, v)\n        }\n    }\n    return string(text)\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmponjaa6un_test.go:11:10: no new variables on left side of :=\n/tmp/tmponjaa6un_test.go:11:13: cannot use []rune(text) (value of type []rune) as type string in assignment\n/tmp/tmponjaa6un_test.go:13:13: undefined: contains\n/tmp/tmponjaa6un_test.go:14:28: first argument to append must be a slice; have text (variable of type string)\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    result := []rune{}\n    for _, letter := range text {\n        if !contains(vowels, letter) {\n            result = append(result, letter)\n        }\n    }\n    return string(result)\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp22l0e4hl_test.go:11:10: no new variables on left side of :=\n/tmp/tmp22l0e4hl_test.go:11:13: cannot use []rune(text) (value of type []rune) as type string in assignment\n/tmp/tmp22l0e4hl_test.go:14:13: undefined: contains\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    text := []rune(text)\n    for _, v := range text {\n        if !contains(vowels, v) {\n            text := append(text, v)\n        }\n    }\n    return string(text)\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp34xzi4od_test.go:11:10: no new variables on left side of :=\n/tmp/tmp34xzi4od_test.go:11:13: cannot use []rune(text) (value of type []rune) as type string in assignment\n/tmp/tmp34xzi4od_test.go:13:13: undefined: contains\n/tmp/tmp34xzi4od_test.go:14:28: first argument to append must be a slice; have text (variable of type string)\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073417
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune(\"aeiou\")\n    result := \"\"\n    for _, char := range text {\n        if !contains(vowels, char) {\n            result += char\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpsknfgm4u_test.go:13:13: undefined: contains\n/tmp/tmpsknfgm4u_test.go:14:13: invalid operation: result += char (mismatched types string and rune)\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    result := []rune{}\n    for _, letter := range text {\n        if !contains(vowels, letter) {\n            result = append(result, letter)\n        }\n    }\n    return string(result)\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp22l0e4hl_test.go:11:10: no new variables on left side of :=\n/tmp/tmp22l0e4hl_test.go:11:13: cannot use []rune(text) (value of type []rune) as type string in assignment\n/tmp/tmp22l0e4hl_test.go:14:13: undefined: contains\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    for _, v := range text {\n        if !contains(vowels, v) {\n            v = unicode.ToLower(v)\n        }\n    }\n    return string(text)\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgan6n6eu_test.go:11:10: no new variables on left side of :=\n/tmp/tmpgan6n6eu_test.go:11:13: cannot use []rune(text) (value of type []rune) as type string in assignment\n/tmp/tmpgan6n6eu_test.go:13:13: undefined: contains\n/tmp/tmpgan6n6eu_test.go:14:17: undefined: unicode\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    result := []rune{}\n    for _, letter := range text {\n        if !contains(vowels, letter) {\n            result = append(result, letter)\n        }\n    }\n    return string(result)\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp22l0e4hl_test.go:11:10: no new variables on left side of :=\n/tmp/tmp22l0e4hl_test.go:11:13: cannot use []rune(text) (value of type []rune) as type string in assignment\n/tmp/tmp22l0e4hl_test.go:14:13: undefined: contains\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    for _, v := range text {\n        if !contains(vowels, v) {\n            v = unicode.ToLower(v)\n        }\n    }\n    return string(text)\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgan6n6eu_test.go:11:10: no new variables on left side of :=\n/tmp/tmpgan6n6eu_test.go:11:13: cannot use []rune(text) (value of type []rune) as type string in assignment\n/tmp/tmpgan6n6eu_test.go:13:13: undefined: contains\n/tmp/tmpgan6n6eu_test.go:14:17: undefined: unicode\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    for _, v := range text {\n        if !contains(vowels, v) {\n            text := append(text, v)\n        }\n    }\n    return string(text)\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmponjaa6un_test.go:11:10: no new variables on left side of :=\n/tmp/tmponjaa6un_test.go:11:13: cannot use []rune(text) (value of type []rune) as type string in assignment\n/tmp/tmponjaa6un_test.go:13:13: undefined: contains\n/tmp/tmponjaa6un_test.go:14:28: first argument to append must be a slice; have text (variable of type string)\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    result := \"\"\n    for _, letter := range text {\n        if !contains(vowels, letter) {\n            result += letter\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpfpi4fnva_test.go:13:13: undefined: contains\n/tmp/tmpfpi4fnva_test.go:14:13: invalid operation: result += letter (mismatched types string and rune)\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for _, v := range vowels {\n        text = text.replaceAllString(v, \"\")\n    }\n    return text\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmps8ud68eq_test.go:12:21: text.replaceAllString undefined (type string has no field or method replaceAllString)\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    result := \"\"\n    for _, letter := range text {\n        if !contains(vowels, letter) {\n            result += letter\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoebzzi3y_test.go:13:13: undefined: contains\n/tmp/tmpoebzzi3y_test.go:14:13: invalid operation: result += letter (mismatched types string and rune)\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    result := \"\"\n    for _, char := range text {\n        if !contains(vowels, char) {\n            result += char\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqxbmkirm_test.go:13:13: undefined: contains\n/tmp/tmpqxbmkirm_test.go:14:13: invalid operation: result += char (mismatched types string and rune)\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    },
    {
      "exit_code": 2,
      "program": "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    for _, v := range text {\n        if !contains(vowels, v) {\n            v = unicode.ToLower(v)\n        }\n    }\n    return string(text)\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgan6n6eu_test.go:11:10: no new variables on left side of :=\n/tmp/tmpgan6n6eu_test.go:11:13: cannot use []rune(text) (value of type []rune) as type string in assignment\n/tmp/tmpgan6n6eu_test.go:13:13: undefined: contains\n/tmp/tmpgan6n6eu_test.go:14:17: undefined: unicode\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660073416
    }
  ]
}