language: go_test.go
name: HumanEval_49_modp
results:
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n    }\n\
    \    if p < 2 {\n        return modp(n - 1, p) % p\n    }\n    if p < 3 {\n  \
    \      return modp(n - 2, p) % p\n    }\n    if p < 4 {\n        return modp(n\
    \ - 3, p) % p\n    }\n    if p < 5 {\n        return modp(n - 4, p) % p\n    }\n\
    \    if p < 6 {\n        return modp(n - 5, p) % p\n    }\n    if p < 7 {\n  \
    \      return modp(n - 6, p) % p\n    }\n    if p < 8 {\n        return modp(n\
    \ - 7, p) % p\n    }\n    if p < 9 {\n        return modp(n - 8, p) % p\n    }\n\
    \    if p < 10 {\n        return modp(n - 9, p) % p\n    }\n    if p < 11 {\n\
    \        return modp(n - 10, p) % p\n    }\n    if p < 12 {\n        return modp(n\
    \ - 11, p) % p\n    }\n    if p < 13 {\n        return modp(n - 12, p) % p\n \
    \   }\n    if p < 14 {\n        return modp(n - 13, p) % p\n    }\n    if p <\
    \ 15 {\n        return modp(n - 14, p) % p\n    }\n    if p < 16 {\n        return\
    \ modp(n - 15, p) % p\n    }\n    if p < 17 {\n        return modp(n - 16, p)\
    \ % p\n    }\n    if p < 18 {\n        return modp(n - 17, p) % p\n    }\n   \
    \ if p < 19 {\n        return modp(n - 18, p) % p\n    }\n    if p < 20 {\n  \
    \      return modp(n - 19, p) % p\n    }\n    if p < 21 {\n        return modp(n\
    \ - 20, p) % p\n    }\n    if p < 22 {\n        return modp(n - 21, p) % p\n \
    \   }\n    if p < 23 {\n        return modp(n - 22, p) % p\n    }\n    if p <\
    \ 24 {\n        return modp(n - 23, p) % p\n    }\n    if p < 25 {\n        return\
    \ modp(n - 24, p) % p\n    }\n    if p < 26 {\n        return modp(n - 25, p)\
    \ % p\n    }\n    if p < 27 {\n        return modp(n - 26, p) % p\n    }\n   \
    \ if p < 28 {\n        return modp(n - 27, p) % p\n    }\n    if p < 29 {\n  \
    \      return modp(n - 28, p) % p\n    }\n    if p < 30 {\n        return modp(n\
    \ - 29, p) % p\n    }\n    if p < 31 {\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmprjc_88qj_test.go:105:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075114
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    x :=\
    \ n\n    for {\n        if x&1 != 0 {\n            x >>= 1\n            x ^= p\n\
    \        } else {\n            return x\n        }\n    }\n}\n\nfunc TestModp(t\
    \ *testing.T) {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 5), expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n  \
    \   { actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpvtd5rz2v_test.go:40: expected '%!s(int=3)', got '%!s(int=4)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpvtd5rz2v_test.go:40: expected\
    \ '%!s(int=2)', got '%!s(int=324)'\n    --- FAIL: TestModp/test_num__2 (0.00s)\n\
    \        tmpvtd5rz2v_test.go:40: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__3 (0.00s)\n        tmpvtd5rz2v_test.go:40: expected\
    \ '%!s(int=8)', got '%!s(int=10)'\n    --- FAIL: TestModp/test_num__4 (0.00s)\n\
    \        tmpvtd5rz2v_test.go:40: expected '%!s(int=1)', got '%!s(int=100)'\n \
    \   --- FAIL: TestModp/test_num__5 (0.00s)\n        tmpvtd5rz2v_test.go:40: expected\
    \ '%!s(int=4)', got '%!s(int=30)'\n    --- FAIL: TestModp/test_num__6 (0.00s)\n\
    \        tmpvtd5rz2v_test.go:40: expected '%!s(int=3)', got '%!s(int=10)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075116
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n    }\n\
    \    if p == 1 {\n        return modp(n >> 1, p-1)\n    }\n    if p == 2 {\n \
    \       return modp(n >> 2, p-1)\n    }\n    if p == 3 {\n        return modp(n\
    \ >> 3, p-1)\n    }\n    if p == 4 {\n        return modp(n >> 4, p-1)\n    }\n\
    \    if p == 5 {\n        return modp(n >> 5, p-1)\n    }\n    if p == 6 {\n \
    \       return modp(n >> 6, p-1)\n    }\n    if p == 7 {\n        return modp(n\
    \ >> 7, p-1)\n    }\n    if p == 8 {\n        return modp(n >> 8, p-1)\n    }\n\
    \    if p == 9 {\n        return modp(n >> 9, p-1)\n    }\n    if p == 10 {\n\
    \        return modp(n >> 10, p-1)\n    }\n    if p == 11 {\n        return modp(n\
    \ >> 11, p-1)\n    }\n    if p == 12 {\n        return modp(n >> 12, p-1)\n  \
    \  }\n    if p == 13 {\n        return modp(n >> 13, p-1)\n    }\n    if p ==\
    \ 14 {\n        return modp(n >> 14, p-1)\n    }\n    if p == 15 {\n        return\
    \ modp(n >> 15, p-1)\n    }\n    if p == 16 {\n        return modp(n >> 16, p-1)\n\
    \    }\n    if p == 17 {\n        return modp(n >> 17, p-1)\n    }\n    if p ==\
    \ 18 {\n        return modp(n >> 18, p-1)\n    }\n    if p == 19 {\n        return\
    \ modp(n >> 19, p-1)\n    }\n    if p == 20 {\n        return modp(n >> 20, p-1)\n\
    \    }\n    if p == 21 {\n        return modp(n >> 21, p-1)\n    }\n    if p ==\
    \ 22 {\n        return modp(n >> 22, p-1)\n    }\n    if p == 23 {\n        return\
    \ modp(n >> 23, p-1)\n    }\n    if p == 24 {\n        return modp(n >> 24, p-1)\n\
    \    }\n    if p == 25 {\n        return modp(n >> 25, p-1)\n    }\n    if p ==\
    \ 26 {\n        return modp(n >> 26, p-1)\n    }\n    if p == 27 {\n        return\
    \ modp(n >> 27, p-1)\n    }\n    if p == 28 {\n        return modp(n >> 28, p-1)\n\
    \    }\n    if p == 29 {\n        return modp(n >> 29, p-1)\n    }\n    if p ==\
    \ 30 {\n        return modp(n >> 30, p-1)\n\nfunc TestModp(t *testing.T) {\n \
    \ candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5), expected:\
    \ 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_bdgoolr_test.go:106:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075114
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n    }\n\
    \    if p < 2 {\n        return modp(n - 1, p) + p\n    }\n    if p < 3 {\n  \
    \      return modp(n - 1, p) + modp(n - 2, p)\n    }\n    return modp(n - 1, p)\
    \ + modp(n - 2, p) + modp(n - 3, p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0398\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x520350?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.modp(0xffffffffff555575?,\
    \ 0x5?)\n\t/tmp/tmpxr22dkdo_test.go:9 +0x145 fp=0xc0201e03a8 sp=0xc0201e03a0 pc=0x4ef7a5\n\
    command-line-arguments_test.modp(0xffffffffff555576, 0x5)\n\t/tmp/tmpxr22dkdo_test.go:22\
    \ +0xa5 fp=0xc0201e03d8 sp=0xc0201e03a8 pc=0x4ef705\ncommand-line-arguments_test.modp(0xffffffffff555577,\
    \ 0x5)\n\t/tmp/tmpxr22dkdo_test.go:22 +0xa5 fp=0xc0201e0408 sp=0xc0201e03d8 pc=0x4ef705\n\
    command-line-arguments_test.modp(0xffffffffff555578, 0x5)\n\t/tmp/tmpxr22dkdo_test.go:22\
    \ +0xa5 fp=0xc0201e0438 sp=0xc0201e0408 pc=0x4ef705\ncommand-line-arguments_test.modp(0xffffffffff555579,\
    \ 0x5)\n\t/tmp/tmpxr22dkdo_test.go:22 +0xa5 fp=0xc0201e0468 sp=0xc0201e0438 pc=0x4ef705\n\
    command-line-arguments_test.modp(0xffffffffff55557a, 0x5)\n\t/tmp/tmpxr22dkdo_test.go:22\
    \ +0xa5 fp=0xc0201e0498 sp=0xc0201e0468 pc=0x4ef705\ncommand-line-arguments_test.modp(0xffffffffff55557b,\
    \ 0x5)\n\t/tmp/tmpxr22dkdo_test.go:22 +0xa5 fp=0xc0201e04c8 sp=0xc0201e0498 pc=0x4ef705\n\
    command-line-arguments_test.modp(0xffffffffff55557c, 0x5)\n\t/tmp/tmpxr22dkdo_test.go:22\
    \ +0xa5 fp=0xc0201e04f8 sp=0xc0201e04c8 pc=0x4ef705\ncommand-line-arguments_test.modp(0xffffffffff55557d,\
    \ 0x5)\n\t/tmp/tmpxr22dkdo_test.go:22 +0xa5 fp=0xc0201e0528 sp=0xc0201e04f8 pc=0x4ef705\n\
    command-line-arguments_test.modp(0xffffffffff55557e, 0x5)\n\t/tmp/tmpxr22dkdo_test.go:22\
    \ +0xa5 fp=0xc0201e0558 sp=0xc0201e0528 pc=0x4ef705\ncommand-line-arguments_test.modp(0xffffffffff55557f,\
    \ 0x5)\n\t/tmp/tmpxr22dkdo_test.go:22 +0xa5 fp=0xc0201e0588 sp=0xc0201e0558 pc=0x4ef705\n\
    command-line-arguments_test.modp(0xffffffffff555580, 0x5)\n\t/tmp/tmp"
  timestamp: 1660075117
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n < 0 {\n        n *= -1\n        p *= -1\n    }\n    if n < p {\n        return\
    \ n\n    }\n    if n == p {\n        return n\n    }\n    if n == 0 {\n      \
    \  return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n\
    \        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n ==\
    \ 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n   \
    \ if n == 6 {\n        return 6\n    }\n    if n == 7 {\n        return 7\n  \
    \  }\n    if n == 8 {\n        return 8\n    }\n    if n == 9 {\n        return\
    \ 9\n    }\n    if n == 10 {\n        return 10\n    }\n    if n == 11 {\n   \
    \     return 11\n    }\n    if n == 12 {\n        return 12\n    }\n    if n ==\
    \ 13 {\n        return 13\n    }\n    if n == 14 {\n        return 14\n    }\n\
    \    if n == 15 {\n        return 15\n    }\n    if n == 16 {\n        return\
    \ 16\n    }\n    if n == 17 {\n        return 17\n    }\n    if n == 18 {\n  \
    \      return 18\n    }\n    if n == 19 {\n        return 19\n    }\n    if n\
    \ == 20 {\n        return 20\n    }\n    if n == 21 {\n        return 21\n   \
    \ }\n    if n == 22 {\n        return 22\n    }\n    if n == 23 {\n        return\
    \ 23\n    }\n    if n == 24 {\n        return 24\n    }\n    if n == 25 {\n  \
    \      return 25\n    }\n    if n == 26 {\n        return 26\n    }\n    if n\
    \ == 27 {\n        return 27\n    }\n    if n == 28 {\n        return 28\n   \
    \ }\n    if n == 29 {\n        return 29\n    }\n    if n == 30 {\n        return\
    \ 30\n    }\n    if n == 31 {\n        return 31\n    }\n    if n == 32 {\n  \
    \      return 32\n    }\n    if n == 33 {\n        return 33\n    }\n    if n\
    \ == 34 {\n        return 34\n    }\n    if n == 35 {\n        return 35\n   \
    \ }\n    if n == 36 {\n        return 36\n    }\n    if n == 37 {\n        return\
    \ 37\n    }\n    if n == 38 {\n        return 38\n    }\n    if n == 39 {\n  \
    \      return 39\n    }\n    if n == 40 {\n        return 40\n    }\n    if n\
    \ == 41 {\n        return 41\n    }\n    if n == 42 {\n        return 42\n   \
    \ }\n    if n == 43 {\n        return 43\n    }\n    if n == 44 {\n        return\
    \ 44\n    }\n    if n == 45 {\n        return 45\n    }\n    if n == 46 {\n  \
    \      return 46\n    }\n    if n == 47 {\n        return 47\n    }\n    if n\
    \ == 48 {\n        return 48\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual:\
    \ candidate(1101, 101), expected: 2 },\n     { actual: candidate(0, 101), expected:\
    \ 1 },\n     { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100,\
    \ 101), expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n    \
    \ { actual: candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvs9t6tca_test.go:166:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075114
- exit_code: null
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    x :=\
    \ n\n    for {\n        if x < (p-1)/2 {\n            x <<= 1\n        } else\
    \ {\n            x >>= 1\n        }\n        if x&1 != 0 {\n            x ^= p\n\
    \        }\n    }\n    return x\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075127
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    x :=\
    \ n\n    for {\n        if x % p == 0 {\n            return x\n        }\n   \
    \     x /= p\n    }\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual:\
    \ candidate(1101, 101), expected: 2 },\n     { actual: candidate(0, 101), expected:\
    \ 1 },\n     { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100,\
    \ 101), expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n    \
    \ { actual: candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpu3woh609_test.go:38: expected '%!s(int=3)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpu3woh609_test.go:38: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__2 (0.00s)\n\
    \        tmpu3woh609_test.go:38: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__3 (0.00s)\n        tmpu3woh609_test.go:38: expected\
    \ '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__4 (0.00s)\n\
    \        tmpu3woh609_test.go:38: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__5 (0.00s)\n        tmpu3woh609_test.go:38: expected\
    \ '%!s(int=4)', got '%!s(int=30)'\n    --- FAIL: TestModp/test_num__6 (0.00s)\n\
    \        tmpu3woh609_test.go:38: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075116
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n    }\n\
    \    if p < 2 {\n        return modp(n - 1, p) + p\n    }\n    if p > 2 {\n  \
    \      return modp(n - 1, modp(p - 2, p)) + p\n    }\n    return modp(n - 1, modp(p\
    \ - 2, p)) + p\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160398\
    \ stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f350?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.modp(0x3?, 0x5?)\n\
    \t/tmp/tmpwh1kofjz_test.go:9 +0xec fp=0xc0201603a8 sp=0xc0201603a0 pc=0x4ef74c\n\
    command-line-arguments_test.modp(0x3, 0x5)\n\t/tmp/tmpwh1kofjz_test.go:20 +0x4e\
    \ fp=0xc0201603c8 sp=0xc0201603a8 pc=0x4ef6ae\ncommand-line-arguments_test.modp(0x3,\
    \ 0x5)\n\t/tmp/tmpwh1kofjz_test.go:20 +0x4e fp=0xc0201603e8 sp=0xc0201603c8 pc=0x4ef6ae\n\
    command-line-arguments_test.modp(0x3, 0x5)\n\t/tmp/tmpwh1kofjz_test.go:20 +0x4e\
    \ fp=0xc020160408 sp=0xc0201603e8 pc=0x4ef6ae\ncommand-line-arguments_test.modp(0x3,\
    \ 0x5)\n\t/tmp/tmpwh1kofjz_test.go:20 +0x4e fp=0xc020160428 sp=0xc020160408 pc=0x4ef6ae\n\
    command-line-arguments_test.modp(0x3, 0x5)\n\t/tmp/tmpwh1kofjz_test.go:20 +0x4e\
    \ fp=0xc020160448 sp=0xc020160428 pc=0x4ef6ae\ncommand-line-arguments_test.modp(0x3,\
    \ 0x5)\n\t/tmp/tmpwh1kofjz_test.go:20 +0x4e fp=0xc020160468 sp=0xc020160448 pc=0x4ef6ae\n\
    command-line-arguments_test.modp(0x3, 0x5)\n\t/tmp/tmpwh1kofjz_test.go:20 +0x4e\
    \ fp=0xc020160488 sp=0xc020160468 pc=0x4ef6ae\ncommand-line-arguments_test.modp(0x3,\
    \ 0x5)\n\t/tmp/tmpwh1kofjz_test.go:20 +0x4e fp=0xc0201604a8 sp=0xc020160488 pc=0x4ef6ae\n\
    command-line-arguments_test.modp(0x3, 0x5)\n\t/tmp/tmpwh1kofjz_test.go:20 +0x4e\
    \ fp=0xc0201604c8 sp=0xc0201604a8 pc=0x4ef6ae\ncommand-line-arguments_test.modp(0x3,\
    \ 0x5)\n\t/tmp/tmpwh1kofjz_test.go:20 +0x4e fp=0xc0201604e8 sp=0xc0201604c8 pc=0x4ef6ae\n\
    command-line-arguments_test.modp(0x3, 0x5)\n\t/tmp/tmpwh1kofjz_test.go:20 +0x4e\
    \ fp=0xc020160508 sp=0xc0201604e8 pc=0x4ef6ae\ncommand-line-arguments_test.modp(0x3,\
    \ 0x5)\n\t/tmp/tmpwh1kofjz_test.go:20 +0x4e fp=0xc020160528 sp=0xc020160508 p"
  timestamp: 1660075117
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n    }\n\
    \    if p < 2 {\n        return modp(n - 1, p) % p\n    }\n    if p > 2 {\n  \
    \      return modp(n - 1, p) % p\n    }\n    if n == p {\n        return modp(n\
    \ - 1, p) % p\n    }\n    if n < p {\n        return modp(n - 1, p) % p\n    }\n\
    \    return modp(n - 1, p) % p\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpdt541fb2_test.go:50: expected '%!s(int=3)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpdt541fb2_test.go:50: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__2 (0.00s)\n\
    \        tmpdt541fb2_test.go:50: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__3 (0.00s)\n        tmpdt541fb2_test.go:50: expected\
    \ '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__4 (0.00s)\n\
    \        tmpdt541fb2_test.go:50: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__5 (0.00s)\n        tmpdt541fb2_test.go:50: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__6 (0.00s)\n\
    \        tmpdt541fb2_test.go:50: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075116
- exit_code: 2
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n < 0 {\n        n *= -1\n        p *= -1\n    }\n    if n < p {\n        return\
    \ n\n    }\n    if n == p {\n        return n\n    }\n    if n == 0 {\n      \
    \  return 0\n    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n\
    \        return p\n    }\n    if n > p {\n        return modp(n - p, p)\n    }\n\
    \    if n < p {\n        return modp(n - p, p)\n    }\n}\n\nfunc TestModp(t *testing.T)\
    \ {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5),\
    \ expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     {\
    \ actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp81kdg63__test.go:35:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075115
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n    }\n\
    \    return modp(n / 2, p) + p\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpsfs0hyrr_test.go:38: expected '%!s(int=3)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpsfs0hyrr_test.go:38: expected\
    \ '%!s(int=2)', got '%!s(int=1111)'\n    --- FAIL: TestModp/test_num__2 (0.00s)\n\
    \        tmpsfs0hyrr_test.go:38: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__3 (0.00s)\n        tmpsfs0hyrr_test.go:38: expected\
    \ '%!s(int=8)', got '%!s(int=22)'\n    --- FAIL: TestModp/test_num__4 (0.00s)\n\
    \        tmpsfs0hyrr_test.go:38: expected '%!s(int=1)', got '%!s(int=707)'\n \
    \   --- FAIL: TestModp/test_num__5 (0.00s)\n        tmpsfs0hyrr_test.go:38: expected\
    \ '%!s(int=4)', got '%!s(int=25)'\n    --- FAIL: TestModp/test_num__6 (0.00s)\n\
    \        tmpsfs0hyrr_test.go:38: expected '%!s(int=3)', got '%!s(int=25)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075116
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n    }\n\
    \    if p < 2 {\n        return modp(n >> 1, p+1) + p\n    }\n    if p > 2 {\n\
    \        return modp(n >> 1, p+1) + p\n    }\n    return modp(n >> 1, p+1) + p\n\
    }\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpupkvzfs1_test.go:44: expected '%!s(int=3)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpupkvzfs1_test.go:44: expected\
    \ '%!s(int=2)', got '%!s(int=1166)'\n    --- FAIL: TestModp/test_num__2 (0.00s)\n\
    \        tmpupkvzfs1_test.go:44: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__3 (0.00s)\n        tmpupkvzfs1_test.go:44: expected\
    \ '%!s(int=8)', got '%!s(int=23)'\n    --- FAIL: TestModp/test_num__4 (0.00s)\n\
    \        tmpupkvzfs1_test.go:44: expected '%!s(int=1)', got '%!s(int=728)'\n \
    \   --- FAIL: TestModp/test_num__5 (0.00s)\n        tmpupkvzfs1_test.go:44: expected\
    \ '%!s(int=4)', got '%!s(int=35)'\n    --- FAIL: TestModp/test_num__6 (0.00s)\n\
    \        tmpupkvzfs1_test.go:44: expected '%!s(int=3)', got '%!s(int=35)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075116
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n    }\n\
    \    if p < 2 {\n        return modp(n - 1, p) + 1\n    }\n    if p < 4 {\n  \
    \      return modp(n - 2, p) + p\n    }\n    return modp(n - 4, p) + p\n}\n\n\
    func TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101, 101),\
    \ expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n     { actual:\
    \ candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101), expected:\
    \ 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual: candidate(31,\
    \ 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0398\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f350?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.modp(0xfffffffffc0000bb?,\
    \ 0x5?)\n\t/tmp/tmp9hs5_a0b_test.go:9 +0xb4 fp=0xc0201e03a8 sp=0xc0201e03a0 pc=0x4ef714\n\
    command-line-arguments_test.modp(0x0?, 0x5)\n\t/tmp/tmp9hs5_a0b_test.go:22 +0x65\
    \ fp=0xc0201e03c8 sp=0xc0201e03a8 pc=0x4ef6c5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x5)\n\t/tmp/tmp9hs5_a0b_test.go:22 +0x65 fp=0xc0201e03e8 sp=0xc0201e03c8 pc=0x4ef6c5\n\
    command-line-arguments_test.modp(0x0?, 0x5)\n\t/tmp/tmp9hs5_a0b_test.go:22 +0x65\
    \ fp=0xc0201e0408 sp=0xc0201e03e8 pc=0x4ef6c5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x5)\n\t/tmp/tmp9hs5_a0b_test.go:22 +0x65 fp=0xc0201e0428 sp=0xc0201e0408 pc=0x4ef6c5\n\
    command-line-arguments_test.modp(0x0?, 0x5)\n\t/tmp/tmp9hs5_a0b_test.go:22 +0x65\
    \ fp=0xc0201e0448 sp=0xc0201e0428 pc=0x4ef6c5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x5)\n\t/tmp/tmp9hs5_a0b_test.go:22 +0x65 fp=0xc0201e0468 sp=0xc0201e0448 pc=0x4ef6c5\n\
    command-line-arguments_test.modp(0x0?, 0x5)\n\t/tmp/tmp9hs5_a0b_test.go:22 +0x65\
    \ fp=0xc0201e0488 sp=0xc0201e0468 pc=0x4ef6c5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x5)\n\t/tmp/tmp9hs5_a0b_test.go:22 +0x65 fp=0xc0201e04a8 sp=0xc0201e0488 pc=0x4ef6c5\n\
    command-line-arguments_test.modp(0x0?, 0x5)\n\t/tmp/tmp9hs5_a0b_test.go:22 +0x65\
    \ fp=0xc0201e04c8 sp=0xc0201e04a8 pc=0x4ef6c5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x5)\n\t/tmp/tmp9hs5_a0b_test.go:22 +0x65 fp=0xc0201e04e8 sp=0xc0201e04c8 pc=0x4ef6c5\n\
    command-line-arguments_test.modp(0x0?, 0x5)\n\t/tmp/tmp9hs5_a0b_test.go:22 +0x65\
    \ fp=0xc0201e0508 sp=0xc0201e04e8 pc=0x4ef6c5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x5)\n\t/tmp/tmp9hs5_a0b_test.go:22 +0x65 fp=0xc"
  timestamp: 1660075117
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n    }\n\
    \    if p < 2 {\n        return modp(n / 2, p)\n    }\n    if p > p {\n      \
    \  return modp(n / 2, p)\n    }\n    return modp(n / 2, p)\n}\n\nfunc TestModp(t\
    \ *testing.T) {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 5), expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n  \
    \   { actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpd7m69ve7_test.go:44: expected '%!s(int=3)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpd7m69ve7_test.go:44: expected\
    \ '%!s(int=2)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__2 (0.00s)\n\
    \        tmpd7m69ve7_test.go:44: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__3 (0.00s)\n        tmpd7m69ve7_test.go:44: expected\
    \ '%!s(int=8)', got '%!s(int=11)'\n    --- FAIL: TestModp/test_num__4 (0.00s)\n\
    \        tmpd7m69ve7_test.go:44: expected '%!s(int=1)', got '%!s(int=101)'\n \
    \   --- FAIL: TestModp/test_num__5 (0.00s)\n        tmpd7m69ve7_test.go:44: expected\
    \ '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestModp/test_num__6 (0.00s)\n\
    \        tmpd7m69ve7_test.go:44: expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075116
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n < 0 {\n        n *= -1\n    }\n    if n < p {\n        return n\n    }\n \
    \   if n == p {\n        return n\n    }\n    if n > p {\n        return modp(n\
    \ - p, p)\n    }\n    return 0\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmptt496y22_test.go:44: expected '%!s(int=2)', got '%!s(int=91)'\n  \
    \  --- FAIL: TestModp/test_num__2 (0.00s)\n        tmptt496y22_test.go:44: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmptt496y22_test.go:44: expected '%!s(int=8)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmptt496y22_test.go:44: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmptt496y22_test.go:44: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmptt496y22_test.go:44: expected\
    \ '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075116
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n    }\n\
    \    if p < 2 {\n        return modp(n - 1, p) + p\n    }\n    if p < 4 {\n  \
    \      return modp(n - 2, p) + p\n    }\n    if p < 8 {\n        return modp(n\
    \ - 4, p) + p\n    }\n    if p < 16 {\n        return modp(n - 8, p) + p\n   \
    \ }\n    if p < 32 {\n        return modp(n - 16, p) + p\n    }\n    if p < 64\
    \ {\n        return modp(n - 32, p) + p\n    }\n    if p < 128 {\n        return\
    \ modp(n - 64, p) + p\n    }\n    if p < 256 {\n        return modp(n - 128, p)\
    \ + p\n    }\n    if p < 512 {\n        return modp(n - 256, p) + p\n    }\n \
    \   if p < 1024 {\n        return modp(n - 512, p) + p\n    }\n    if p < 2048\
    \ {\n        return modp(n - 1024, p / 2) + p\n    }\n    if p < 4096 {\n    \
    \    return modp(n - 2048, p / 2) + p\n    }\n    if p < 8192 {\n        return\
    \ modp(n - 4096, p / 2) + p\n    }\n    if p < 16384 {\n        return modp(n\
    \ - 8192, p / 2) + p\n    }\n    if p < 32768 {\n        return modp(n - 16384,\
    \ p / 2) + p\n    }\n    if p < 65536 {\n        return modp(n - 32768, p / 2)\
    \ + p\n    }\n    if p < 131072 {\n        return modp(n - 65536, p / 2) + p\n\
    \    }\n    if p < 262144 {\n        return modp(n - 131072, p / 2) + p\n    }\n\
    \    if p < 524288 {\n        return modp(n - 262144, p / 2) + p\n    }\n    if\
    \ p < 1048576 {\n        return modp(n - 524288, p / 2) + p\n    }\n    if p <\
    \ 2097152 {\n        return modp(n - 1048576, p / 2) + p\n    }\n    if p < 4194304\
    \ {\n        return modp(n - 2097152, p / 2) + p\n    }\n    if p < 8388608 {\n\
    \        return modp(n - 4194304, p / 2) + p\n    }\n    if p < 16777216 {\n \
    \       return modp(n - 8388608, p / 2) + p\n    }\n    if p < 33554432 {\n  \
    \      return modp(n - 16777216, p / 2) + p\n    }\n    if p < 67108864 {\n  \
    \      return mod\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp4f6fwg20_test.go:93:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075114
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n    }\n\
    \    if p < 2 {\n        return modp(n - 1, p) + p\n    }\n    if p < 3 {\n  \
    \      return modp(n - 2, p) + p\n    }\n    return modp(n - 3, p) + p\n}\n\n\
    func TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101, 101),\
    \ expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n     { actual:\
    \ candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101), expected:\
    \ 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual: candidate(31,\
    \ 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpbhlm08wc_test.go:44: expected '%!s(int=3)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpbhlm08wc_test.go:44: expected\
    \ '%!s(int=2)', got '%!s(int=37067)'\n    --- FAIL: TestModp/test_num__2 (0.00s)\n\
    \        tmpbhlm08wc_test.go:44: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__3 (0.00s)\n        tmpbhlm08wc_test.go:44: expected\
    \ '%!s(int=8)', got '%!s(int=11)'\n    --- FAIL: TestModp/test_num__4 (0.00s)\n\
    \        tmpbhlm08wc_test.go:44: expected '%!s(int=1)', got '%!s(int=3434)'\n\
    \    --- FAIL: TestModp/test_num__5 (0.00s)\n        tmpbhlm08wc_test.go:44: expected\
    \ '%!s(int=4)', got '%!s(int=50)'\n    --- FAIL: TestModp/test_num__6 (0.00s)\n\
    \        tmpbhlm08wc_test.go:44: expected '%!s(int=3)', got '%!s(int=55)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075116
- exit_code: 2
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n    }\n\
    \    if p == 0 {\n        return modp(n - 1, p-1)\n    }\n    if p == 1 {\n  \
    \      return n\n    }\n    if p > 1 {\n        return modp(n - 1, p) + modp(n\
    \ - 1, p)\n    }\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual:\
    \ candidate(1101, 101), expected: 2 },\n     { actual: candidate(0, 101), expected:\
    \ 1 },\n     { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100,\
    \ 101), expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n    \
    \ { actual: candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7mwej6ux_test.go:25:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075115
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    x :=\
    \ n\n    for {\n        if x&1 != 0 {\n            x >>= 1\n            x ^= p\n\
    \        } else {\n            break\n        }\n    }\n    return x\n}\n\nfunc\
    \ TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 5), expected: 3 },\n     { actual: candidate(1101, 101), expected:\
    \ 2 },\n     { actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3,\
    \ 11), expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n  \
    \   { actual: candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpaxqrx8mm_test.go:41: expected '%!s(int=3)', got '%!s(int=4)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpaxqrx8mm_test.go:41: expected\
    \ '%!s(int=2)', got '%!s(int=324)'\n    --- FAIL: TestModp/test_num__2 (0.00s)\n\
    \        tmpaxqrx8mm_test.go:41: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__3 (0.00s)\n        tmpaxqrx8mm_test.go:41: expected\
    \ '%!s(int=8)', got '%!s(int=10)'\n    --- FAIL: TestModp/test_num__4 (0.00s)\n\
    \        tmpaxqrx8mm_test.go:41: expected '%!s(int=1)', got '%!s(int=100)'\n \
    \   --- FAIL: TestModp/test_num__5 (0.00s)\n        tmpaxqrx8mm_test.go:41: expected\
    \ '%!s(int=4)', got '%!s(int=30)'\n    --- FAIL: TestModp/test_num__6 (0.00s)\n\
    \        tmpaxqrx8mm_test.go:41: expected '%!s(int=3)', got '%!s(int=10)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075116
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n    }\n\
    \    return modp(n >> 1, p) + p\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmp15u6q3x1_test.go:38: expected '%!s(int=3)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestModp/test_num__1 (0.00s)\n        tmp15u6q3x1_test.go:38: expected\
    \ '%!s(int=2)', got '%!s(int=1111)'\n    --- FAIL: TestModp/test_num__2 (0.00s)\n\
    \        tmp15u6q3x1_test.go:38: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__3 (0.00s)\n        tmp15u6q3x1_test.go:38: expected\
    \ '%!s(int=8)', got '%!s(int=22)'\n    --- FAIL: TestModp/test_num__4 (0.00s)\n\
    \        tmp15u6q3x1_test.go:38: expected '%!s(int=1)', got '%!s(int=707)'\n \
    \   --- FAIL: TestModp/test_num__5 (0.00s)\n        tmp15u6q3x1_test.go:38: expected\
    \ '%!s(int=4)', got '%!s(int=25)'\n    --- FAIL: TestModp/test_num__6 (0.00s)\n\
    \        tmp15u6q3x1_test.go:38: expected '%!s(int=3)', got '%!s(int=25)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075116
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    x :=\
    \ n\n    for {\n        if x % p == 0 {\n            return x\n        }\n   \
    \     x /= p\n    }\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual:\
    \ candidate(1101, 101), expected: 2 },\n     { actual: candidate(0, 101), expected:\
    \ 1 },\n     { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100,\
    \ 101), expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n    \
    \ { actual: candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpu3woh609_test.go:38: expected '%!s(int=3)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpu3woh609_test.go:38: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__2 (0.00s)\n\
    \        tmpu3woh609_test.go:38: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__3 (0.00s)\n        tmpu3woh609_test.go:38: expected\
    \ '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__4 (0.00s)\n\
    \        tmpu3woh609_test.go:38: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__5 (0.00s)\n        tmpu3woh609_test.go:38: expected\
    \ '%!s(int=4)', got '%!s(int=30)'\n    --- FAIL: TestModp/test_num__6 (0.00s)\n\
    \        tmpu3woh609_test.go:38: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075116
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n    }\n\
    \    if p < 2 {\n        return modp(n - 1, p) % p\n    }\n    if p > 2 {\n  \
    \      return modp(n - 2, p) % p\n    }\n    if p < p {\n        return modp(n\
    \ - 1, p) % p\n    }\n    return modp(n - 2, p) % p\n}\n\nfunc TestModp(t *testing.T)\
    \ {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5),\
    \ expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     {\
    \ actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpit5bszw9_test.go:47: expected '%!s(int=3)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpit5bszw9_test.go:47: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__2 (0.00s)\n\
    \        tmpit5bszw9_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__3 (0.00s)\n        tmpit5bszw9_test.go:47: expected\
    \ '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__4 (0.00s)\n\
    \        tmpit5bszw9_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__5 (0.00s)\n        tmpit5bszw9_test.go:47: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__6 (0.00s)\n\
    \        tmpit5bszw9_test.go:47: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075116
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n    }\n\
    \    if p < 2 {\n        return modp(n - 1, p+1) + p\n    }\n    if p > 2 {\n\
    \        return modp(n - 1, p+1) + p\n    }\n    return modp(n - 1, p+1) + p\n\
    }\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpp3w11g53_test.go:44: expected '%!s(int=3)', got '%!s(int=18)'\n  \
    \  --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpp3w11g53_test.go:44: expected\
    \ '%!s(int=2)', got '%!s(int=716751)'\n    --- FAIL: TestModp/test_num__2 (0.00s)\n\
    \        tmpp3w11g53_test.go:44: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__3 (0.00s)\n        tmpp3w11g53_test.go:44: expected\
    \ '%!s(int=8)', got '%!s(int=36)'\n    --- FAIL: TestModp/test_num__4 (0.00s)\n\
    \        tmpp3w11g53_test.go:44: expected '%!s(int=1)', got '%!s(int=15050)'\n\
    \    --- FAIL: TestModp/test_num__5 (0.00s)\n        tmpp3w11g53_test.go:44: expected\
    \ '%!s(int=4)', got '%!s(int=585)'\n    --- FAIL: TestModp/test_num__6 (0.00s)\n\
    \        tmpp3w11g53_test.go:44: expected '%!s(int=3)', got '%!s(int=620)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075116
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n    }\n\
    \    if p < 2 {\n        return modp(n - 1, p) % p\n    }\n    if p > 2 {\n  \
    \      return modp(n - 2, p) % p\n    }\n    if p == 2 {\n        return modp(n\
    \ - 1, p) % p\n    }\n    return modp(n - 1, p) % p\n}\n\nfunc TestModp(t *testing.T)\
    \ {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5),\
    \ expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     {\
    \ actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpkjbtm37t_test.go:47: expected '%!s(int=3)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpkjbtm37t_test.go:47: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__2 (0.00s)\n\
    \        tmpkjbtm37t_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__3 (0.00s)\n        tmpkjbtm37t_test.go:47: expected\
    \ '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__4 (0.00s)\n\
    \        tmpkjbtm37t_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__5 (0.00s)\n        tmpkjbtm37t_test.go:47: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__6 (0.00s)\n\
    \        tmpkjbtm37t_test.go:47: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075116
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n    }\n\
    \    if p < 2 {\n        return modp(n >> 1, p+1) + p\n    }\n    if p < 3 {\n\
    \        return modp(n >> 2, p+1) + p\n    }\n    if p < 4 {\n        return modp(n\
    \ >> 3, p+1) + p\n    }\n    if p < 5 {\n        return modp(n >> 4, p+1) + p\n\
    \    }\n    if p < 6 {\n        return modp(n >> 5, p+1) + p\n    }\n    if p\
    \ < 7 {\n        return modp(n >> 6, p+1) + p\n    }\n    if p < 8 {\n       \
    \ return modp(n >> 7, p+1) + p\n    }\n    if p < 9 {\n        return modp(n >>\
    \ 8, p+1) + p\n    }\n    if p < 10 {\n        return modp(n >> 9, p+1) + p\n\
    \    }\n    if p < 11 {\n        return modp(n >> 10, p+1) + p\n    }\n    if\
    \ p < 12 {\n        return modp(n >> 11, p+1) + p\n    }\n    if p < 13 {\n  \
    \      return modp(n >> 12, p+1) + p\n    }\n    if p < 14 {\n        return modp(n\
    \ >> 13, p+1) + p\n    }\n    if p < 15 {\n        return modp(n >> 14, p+1) +\
    \ p\n    }\n    if p < 16 {\n        return modp(n >> 15, p+1) + p\n    }\n  \
    \  if p < 17 {\n        return modp(n >> 16, p+1) + p\n    }\n    if p < 18 {\n\
    \        return modp(n >> 17, p+1) + p\n    }\n    if p < 19 {\n        return\
    \ modp(n >> 18, p+1) + p\n    }\n    if p < 20 {\n        return modp(n >> 19,\
    \ p+1) + p\n    }\n    if p < 21 {\n        return modp(n >> 20, p+1) + p\n  \
    \  }\n    if p < 22 {\n        return modp(n >> 21, p+1) + p\n    }\n    if p\
    \ < 23 {\n        return modp(n >> 22, p+1) + p\n    }\n    if p < 24 {\n    \
    \    return modp(n >> 23, p+1) + p\n    }\n    if p < 25 {\n        return modp(n\
    \ >> 24, p+1) + p\n    }\n    if p < 26 {\n        return modp(n >> 25, p+1) +\
    \ p\n    }\n    if p < 27 {\n        return modp(n >> 26, p+1) + p\n    }\n  \
    \  if p < 28 {\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3qm0zdiu_test.go:95:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075116
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n    }\n\
    \    if p < 2 {\n        return modp(n - 1, p) % p\n    }\n    if p > 2 {\n  \
    \      return modp(n - 2, p) % p\n    }\n    x := modp(n - 1, p) % p\n    y :=\
    \ modp(n - 2, p) % p\n    if x == 0 {\n        return y\n    }\n    if y == 0\
    \ {\n        return x\n    }\n    return x % y\n}\n\nfunc TestModp(t *testing.T)\
    \ {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5),\
    \ expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     {\
    \ actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmp7yiiglns_test.go:52: expected '%!s(int=3)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmp7yiiglns_test.go:52: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__2 (0.00s)\n\
    \        tmp7yiiglns_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__3 (0.00s)\n        tmp7yiiglns_test.go:52: expected\
    \ '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__4 (0.00s)\n\
    \        tmp7yiiglns_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__5 (0.00s)\n        tmp7yiiglns_test.go:52: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__6 (0.00s)\n\
    \        tmp7yiiglns_test.go:52: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075117
- exit_code: null
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    x :=\
    \ n\n    for {\n        if x < (p / 2) {\n            x <<= 1\n        } else\
    \ {\n            x >>= 1\n        }\n        if x < (p / 2) {\n            x +=\
    \ 1\n        }\n        if x == 0 {\n            break\n        }\n    }\n   \
    \ return x\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075129
- exit_code: null
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    x :=\
    \ n\n    y := p\n    for {\n        x -= y\n        if x == 0 {\n            break\n\
    \        }\n        y >>= 1\n    }\n    return x\n}\n\nfunc TestModp(t *testing.T)\
    \ {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5),\
    \ expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     {\
    \ actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075129
- exit_code: null
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n    }\n\
    \    if p < 2 {\n        return modp(n - 1, p+1) + p\n    }\n    return modp(n\
    \ - 1, p+1) + modp(n - 2, p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075130
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n == 0 {\n        return 0\n    }\n    if p == 0 {\n        return n\n    }\n\
    \    if p > n {\n        return modp(n - p, p)\n    }\n    if n == p {\n     \
    \   return n\n    }\n    if n < p {\n        return modp(n, p)\n    }\n    return\
    \ modp(n - p, p) + p\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual:\
    \ candidate(1101, 101), expected: 2 },\n     { actual: candidate(0, 101), expected:\
    \ 1 },\n     { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100,\
    \ 101), expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n    \
    \ { actual: candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0398\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f350?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.modp(0xfffffffffb0000e9?,\
    \ 0x5?)\n\t/tmp/tmpw8p8fidz_test.go:9 +0x87 fp=0xc0201e03a8 sp=0xc0201e03a0 pc=0x4ef6e7\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpw8p8fidz_test.go:17 +0x58\
    \ fp=0xc0201e03c8 sp=0xc0201e03a8 pc=0x4ef6b8\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpw8p8fidz_test.go:17 +0x58 fp=0xc0201e03e8 sp=0xc0201e03c8 pc=0x4ef6b8\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpw8p8fidz_test.go:17 +0x58\
    \ fp=0xc0201e0408 sp=0xc0201e03e8 pc=0x4ef6b8\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpw8p8fidz_test.go:17 +0x58 fp=0xc0201e0428 sp=0xc0201e0408 pc=0x4ef6b8\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpw8p8fidz_test.go:17 +0x58\
    \ fp=0xc0201e0448 sp=0xc0201e0428 pc=0x4ef6b8\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpw8p8fidz_test.go:17 +0x58 fp=0xc0201e0468 sp=0xc0201e0448 pc=0x4ef6b8\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpw8p8fidz_test.go:17 +0x58\
    \ fp=0xc0201e0488 sp=0xc0201e0468 pc=0x4ef6b8\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpw8p8fidz_test.go:17 +0x58 fp=0xc0201e04a8 sp=0xc0201e0488 pc=0x4ef6b8\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpw8p8fidz_test.go:17 +0x58\
    \ fp=0xc0201e04c8 sp=0xc0201e04a8 pc=0x4ef6b8\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpw8p8fidz_test.go:17 +0x58 fp=0xc0201e04e8 sp=0xc0201e04c8 pc=0x4ef6b8\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpw8p8fidz_test.go:17 +0x58\
    \ fp=0xc0201e0508 sp=0xc0201e04e8 pc=0x4ef6b8\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpw8p8fidz_test.go:17 "
  timestamp: 1660075118
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    x :=\
    \ n\n    for {\n        if x&1 != 0 {\n            x >>= 1\n            x ^= p\n\
    \        } else {\n            break\n        }\n    }\n    return x\n}\n\nfunc\
    \ TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 5), expected: 3 },\n     { actual: candidate(1101, 101), expected:\
    \ 2 },\n     { actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3,\
    \ 11), expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n  \
    \   { actual: candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpaxqrx8mm_test.go:41: expected '%!s(int=3)', got '%!s(int=4)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpaxqrx8mm_test.go:41: expected\
    \ '%!s(int=2)', got '%!s(int=324)'\n    --- FAIL: TestModp/test_num__2 (0.00s)\n\
    \        tmpaxqrx8mm_test.go:41: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__3 (0.00s)\n        tmpaxqrx8mm_test.go:41: expected\
    \ '%!s(int=8)', got '%!s(int=10)'\n    --- FAIL: TestModp/test_num__4 (0.00s)\n\
    \        tmpaxqrx8mm_test.go:41: expected '%!s(int=1)', got '%!s(int=100)'\n \
    \   --- FAIL: TestModp/test_num__5 (0.00s)\n        tmpaxqrx8mm_test.go:41: expected\
    \ '%!s(int=4)', got '%!s(int=30)'\n    --- FAIL: TestModp/test_num__6 (0.00s)\n\
    \        tmpaxqrx8mm_test.go:41: expected '%!s(int=3)', got '%!s(int=10)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075116
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n == 0 {\n        return 0\n    }\n    if p == 1 {\n        return n\n    }\n\
    \    if p < 2 {\n        return modp(n - 1, p) + 1\n    }\n    if p < 3 {\n  \
    \      return modp(n - 1, p) + modp(n - 2, p) + p\n    }\n    if p < 4 {\n   \
    \     return modp(n - 1, p) + modp(n - 2, p) + modp(n - 3, p) + p\n    }\n   \
    \ if p < 5 {\n        return modp(n - 1, p) + modp(n - 2, p) + modp(n - 3, p)\
    \ + modp(n - 4, p) + p\n    }\n    if p < 6 {\n        return modp(n - 1, p) +\
    \ modp(n - 2, p) + modp(n - 3, p) + modp(n - 4, p) + modp(n - 5, p) + p\n    }\n\
    \    if p < 7 {\n        return modp(n - 1, p) + modp(n - 2, p) + modp(n - 3,\
    \ p) + modp(n - 4, p) + modp(n - 5, p) + modp(n - 6, p) + p\n    }\n    if p <\
    \ 8 {\n        return modp(n - 1, p) + modp(n - 2, p) + modp(n - 3, p) + modp(n\
    \ - 4, p) + modp(n - 5, p) + modp(n - 6, p) + modp(n - 7, p) + p\n    }\n    if\
    \ p < 9 {\n        return modp(n - 1, p) + modp(n - 2, p) + modp(n - 3, p) + modp(n\
    \ - 4, p) + modp(n - 5, p) + modp(n - 6, p) + modp(n - 7, p) + modp(n - 8, p)\
    \ + p\n    }\n    if p < 10 {\n        return modp(n - 1, p) + modp(n - 2, p)\
    \ + modp(n - 3, p) + modp(n - 4, p) + modp(n - 5, p) + modp(n - 6, p) + modp(n\
    \ - 7, p) + modp(n - 8, p) + modp(n - 9, p) + p\n    }\n    if p < 11 {\n    \
    \    return modp(n - 1, p) + modp(n - 2, p) + modp(n - 3, p) + modp(n - 4, p)\
    \ + modp(n - 5, p) + modp(n - 6, p) + modp(n - 7, p) + modp(n - 8, p) + modp(n\
    \ - 9, p) + modp(n - 10, p) + p\n    }\n    if p < 12 {\n        return modp(n\
    \ - 1, p) + modp(n - 2, p) + modp(n - 3, p) + modp(n - 4, p) + modp(n - 5, p)\
    \ + modp(n - 6, p) + modp(n - 7, p) + modp(n - 8, p) + modp(n - 9, p) + modp(n\
    \ - 10, p) + modp(\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvovy07xt_test.go:48:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075117
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    x :=\
    \ n\n    for {\n        if x & 1 == 0 {\n            x >>= 1\n            x &=\
    \ p\n        } else {\n            x >>= 1\n        }\n        if x == 0 {\n \
    \           break\n        }\n    }\n    return x\n}\n\nfunc TestModp(t *testing.T)\
    \ {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5),\
    \ expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     {\
    \ actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpfvat7ltv_test.go:44: expected '%!s(int=3)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpfvat7ltv_test.go:44: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__2 (0.00s)\n\
    \        tmpfvat7ltv_test.go:44: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__3 (0.00s)\n        tmpfvat7ltv_test.go:44: expected\
    \ '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__4 (0.00s)\n\
    \        tmpfvat7ltv_test.go:44: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__5 (0.00s)\n        tmpfvat7ltv_test.go:44: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__6 (0.00s)\n\
    \        tmpfvat7ltv_test.go:44: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075118
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n    }\n\
    \    if p < 2 {\n        return modp(n - 1, p) % p\n    }\n    return modp(n >>\
    \ 1, p) % p\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpvf6vfkaq_test.go:41: expected '%!s(int=3)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpvf6vfkaq_test.go:41: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__2 (0.00s)\n\
    \        tmpvf6vfkaq_test.go:41: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__3 (0.00s)\n        tmpvf6vfkaq_test.go:41: expected\
    \ '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__4 (0.00s)\n\
    \        tmpvf6vfkaq_test.go:41: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__5 (0.00s)\n        tmpvf6vfkaq_test.go:41: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__6 (0.00s)\n\
    \        tmpvf6vfkaq_test.go:41: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075118
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n    }\n\
    \    if p < 2 {\n        return modp(n - 1, p) + p\n    }\n    if p < 3 {\n  \
    \      return modp(n - 1, p) + modp(n - 2, p)\n    }\n    return modp(n - 1, p)\
    \ + modp(n - 2, p) + modp(n - 3, p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0398\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x520350?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.modp(0xffffffffff555575?,\
    \ 0x5?)\n\t/tmp/tmpxr22dkdo_test.go:9 +0x145 fp=0xc0201e03a8 sp=0xc0201e03a0 pc=0x4ef7a5\n\
    command-line-arguments_test.modp(0xffffffffff555576, 0x5)\n\t/tmp/tmpxr22dkdo_test.go:22\
    \ +0xa5 fp=0xc0201e03d8 sp=0xc0201e03a8 pc=0x4ef705\ncommand-line-arguments_test.modp(0xffffffffff555577,\
    \ 0x5)\n\t/tmp/tmpxr22dkdo_test.go:22 +0xa5 fp=0xc0201e0408 sp=0xc0201e03d8 pc=0x4ef705\n\
    command-line-arguments_test.modp(0xffffffffff555578, 0x5)\n\t/tmp/tmpxr22dkdo_test.go:22\
    \ +0xa5 fp=0xc0201e0438 sp=0xc0201e0408 pc=0x4ef705\ncommand-line-arguments_test.modp(0xffffffffff555579,\
    \ 0x5)\n\t/tmp/tmpxr22dkdo_test.go:22 +0xa5 fp=0xc0201e0468 sp=0xc0201e0438 pc=0x4ef705\n\
    command-line-arguments_test.modp(0xffffffffff55557a, 0x5)\n\t/tmp/tmpxr22dkdo_test.go:22\
    \ +0xa5 fp=0xc0201e0498 sp=0xc0201e0468 pc=0x4ef705\ncommand-line-arguments_test.modp(0xffffffffff55557b,\
    \ 0x5)\n\t/tmp/tmpxr22dkdo_test.go:22 +0xa5 fp=0xc0201e04c8 sp=0xc0201e0498 pc=0x4ef705\n\
    command-line-arguments_test.modp(0xffffffffff55557c, 0x5)\n\t/tmp/tmpxr22dkdo_test.go:22\
    \ +0xa5 fp=0xc0201e04f8 sp=0xc0201e04c8 pc=0x4ef705\ncommand-line-arguments_test.modp(0xffffffffff55557d,\
    \ 0x5)\n\t/tmp/tmpxr22dkdo_test.go:22 +0xa5 fp=0xc0201e0528 sp=0xc0201e04f8 pc=0x4ef705\n\
    command-line-arguments_test.modp(0xffffffffff55557e, 0x5)\n\t/tmp/tmpxr22dkdo_test.go:22\
    \ +0xa5 fp=0xc0201e0558 sp=0xc0201e0528 pc=0x4ef705\ncommand-line-arguments_test.modp(0xffffffffff55557f,\
    \ 0x5)\n\t/tmp/tmpxr22dkdo_test.go:22 +0xa5 fp=0xc0201e0588 sp=0xc0201e0558 pc=0x4ef705\n\
    command-line-arguments_test.modp(0xffffffffff555580, 0x5)\n\t/tmp/tmp"
  timestamp: 1660075117
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n    }\n\
    \    if p < 2 {\n        return modp(n / 2, p)\n    }\n    if p < 3 {\n      \
    \  return modp(n / 2, p)\n    }\n    return modp(n / 2, p)\n}\n\nfunc TestModp(t\
    \ *testing.T) {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 5), expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n  \
    \   { actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmptaenafb3_test.go:44: expected '%!s(int=3)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmptaenafb3_test.go:44: expected\
    \ '%!s(int=2)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__2 (0.00s)\n\
    \        tmptaenafb3_test.go:44: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__3 (0.00s)\n        tmptaenafb3_test.go:44: expected\
    \ '%!s(int=8)', got '%!s(int=11)'\n    --- FAIL: TestModp/test_num__4 (0.00s)\n\
    \        tmptaenafb3_test.go:44: expected '%!s(int=1)', got '%!s(int=101)'\n \
    \   --- FAIL: TestModp/test_num__5 (0.00s)\n        tmptaenafb3_test.go:44: expected\
    \ '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestModp/test_num__6 (0.00s)\n\
    \        tmptaenafb3_test.go:44: expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075118
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n    }\n\
    \    if p < 2 {\n        return modp(n - 1, p) + 1\n    }\n    if p > 2 {\n  \
    \      return modp(n - 1, p) - 1\n    }\n    x := modp(n - 1, p) // x^(p-1)\n\
    \    y := modp(n - 2, p) // y^(p-2)\n    return x * y + p\n}\n\nfunc TestModp(t\
    \ *testing.T) {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 5), expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n  \
    \   { actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmp_2toqevg_test.go:46: expected '%!s(int=2)', got '%!s(int=-999)'\n\
    \    --- FAIL: TestModp/test_num__2 (0.00s)\n        tmp_2toqevg_test.go:46: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmp_2toqevg_test.go:46: expected '%!s(int=8)', got '%!s(int=9)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmp_2toqevg_test.go:46: expected\
    \ '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmp_2toqevg_test.go:46: expected '%!s(int=4)', got '%!s(int=-24)'\n \
    \   --- FAIL: TestModp/test_num__6 (0.00s)\n        tmp_2toqevg_test.go:46: expected\
    \ '%!s(int=3)', got '%!s(int=-25)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075118
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n    }\n\
    \    if p < 2 {\n        return modp(n - 1, p) + p\n    }\n    if p < 3 {\n  \
    \      return modp(n - 2, p) + p\n    }\n    if p < 4 {\n        return modp(n\
    \ - 3, p) + p\n    }\n    if p < 5 {\n        return modp(n - 4, p) + p\n    }\n\
    \    if p < 6 {\n        return modp(n - 5, p) + p\n    }\n    if p < 7 {\n  \
    \      return modp(n - 6, p) + p\n    }\n    if p < 8 {\n        return modp(n\
    \ - 7, p) + p\n    }\n    if p < 9 {\n        return modp(n - 8, p) + p\n    }\n\
    \    if p < 10 {\n        return modp(n - 9, p) + p\n    }\n    if p < 11 {\n\
    \        return modp(n - 10, p) + p\n    }\n    if p < 12 {\n        return modp(n\
    \ - 11, p) + p\n    }\n    if p < 13 {\n        return modp(n - 12, p) + p\n \
    \   }\n    if p < 14 {\n        return modp(n - 13, p) + p\n    }\n    if p <\
    \ 15 {\n        return modp(n - 14, p) + p\n    }\n    if p < 16 {\n        return\
    \ modp(n - 15, p) + p\n    }\n    if p < 17 {\n        return modp(n - 16, p)\
    \ + p\n    }\n    if p < 18 {\n        return modp(n - 17, p) + p\n    }\n   \
    \ if p < 19 {\n        return modp(n - 18, p) + p\n    }\n    if p < 20 {\n  \
    \      return modp(n - 19, p) + p\n    }\n    if p < 21 {\n        return modp(n\
    \ - 20, p) + p\n    }\n    if p < 22 {\n        return modp(n - 21, p) + p\n \
    \   }\n    if p < 23 {\n        return modp(n - 22, p) + p\n    }\n    if p <\
    \ 24 {\n        return modp(n - 23, p) + p\n    }\n    if p < 25 {\n        return\
    \ modp(n - 24, p) + p\n    }\n    if p < 26 {\n        return modp(n - 25, p)\
    \ + p\n    }\n    if p < 27 {\n        return modp(n - 26, p) + p\n    }\n   \
    \ if p < 28 {\n        return modp(n - 27, p) + p\n    }\n    if p < 29 {\n  \
    \      return modp(n - 28, p) + p\n    }\n    if p < 30 {\n        return modp(n\
    \ - 29, p) + p\n    }\n    if p < 31 {\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp49ew5d42_test.go:105:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075117
- exit_code: null
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    x :=\
    \ n\n    for {\n        if x < (p / 2) {\n            x <<= 1\n        } else\
    \ {\n            x >>= 1\n        }\n        if x == 0 {\n            break\n\
    \        }\n    }\n    return x\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075131
- exit_code: null
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n    }\n\
    \    if p == 1 {\n        return modp(n - 1, p-1)\n    }\n    return modp(n -\
    \ 1, p) + modp(n-1, p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual:\
    \ candidate(1101, 101), expected: 2 },\n     { actual: candidate(0, 101), expected:\
    \ 1 },\n     { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100,\
    \ 101), expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n    \
    \ { actual: candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075131
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n    }\n\
    \    return modp(n >> 1, p) + p\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmp15u6q3x1_test.go:38: expected '%!s(int=3)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestModp/test_num__1 (0.00s)\n        tmp15u6q3x1_test.go:38: expected\
    \ '%!s(int=2)', got '%!s(int=1111)'\n    --- FAIL: TestModp/test_num__2 (0.00s)\n\
    \        tmp15u6q3x1_test.go:38: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__3 (0.00s)\n        tmp15u6q3x1_test.go:38: expected\
    \ '%!s(int=8)', got '%!s(int=22)'\n    --- FAIL: TestModp/test_num__4 (0.00s)\n\
    \        tmp15u6q3x1_test.go:38: expected '%!s(int=1)', got '%!s(int=707)'\n \
    \   --- FAIL: TestModp/test_num__5 (0.00s)\n        tmp15u6q3x1_test.go:38: expected\
    \ '%!s(int=4)', got '%!s(int=25)'\n    --- FAIL: TestModp/test_num__6 (0.00s)\n\
    \        tmp15u6q3x1_test.go:38: expected '%!s(int=3)', got '%!s(int=25)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075116
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n    }\n\
    \    if p < 2 {\n        return modp(n / 2, p)\n    }\n    if p > 2 {\n      \
    \  return modp(n / 2, p)\n    }\n    if p == 2 {\n        return n\n    }\n  \
    \  if p == 3 {\n        return modp(n / 2, p)\n    }\n    if p == 5 {\n      \
    \  return modp(n / 2, p)\n    }\n    if p == 7 {\n        return modp(n / 2, p)\n\
    \    }\n    if p == 9 {\n        return modp(n / 2, p)\n    }\n    if p == 11\
    \ {\n        return modp(n / 2, p)\n    }\n    if p == 13 {\n        return modp(n\
    \ / 2, p)\n    }\n    if p == 17 {\n        return modp(n / 2, p)\n    }\n   \
    \ if p == 19 {\n        return modp(n / 2, p)\n    }\n    if p == 231 {\n    \
    \    return modp(n / 2, p)\n    }\n    if p == 257 {\n        return modp(n /\
    \ 2, p)\n    }\n    if p == 289 {\n        return modp(n / 2, p)\n    }\n    if\
    \ p == 303 {\n        return modp(n / 2, p)\n    }\n    if p == 307 {\n      \
    \  return modp(n / 2, p)\n    }\n    if p == 320 {\n        return modp(n / 2,\
    \ p)\n    }\n    if p == 327 {\n        return modp(n / 2, p)\n    }\n    if p\
    \ == 333 {\n        return modp(n / 2, p)\n    }\n    if p == 337 {\n        return\
    \ modp(n / 2, p)\n    }\n    if p == 383 {\n        return modp(n / 2, p)\n  \
    \  }\n    if p == 383 {\n        return modp(n / 2, p)\n    }\n    if p == 383\
    \ {\n        return modp(n / 2, p)\n    }\n    if p == 383 {\n        return modp(n\
    \ / 2, p)\n    }\n    if p == 383 {\n        return modp(n / 2, p)\n    }\n  \
    \  if p == 383 {\n        return modp(n / 2, p)\n    }\n    if p == 383 {\n  \
    \      return modp(n / 2, p)\n    }\n    if p == 383 {\n        return modp(n\
    \ / 2, p)\n    }\n    if p == 383 {\n        return modp(n / 2, p)\n    }\n  \
    \  if p == 383 {\n        return modp(n / 2, p)\n    }\n    if p == 383 {\n  \
    \      return modp(n / 2, p)\n    }\n    if p == 383 {\n        return modp(n\
    \ / 2, p)\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1y91gg3b_test.go:111:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075117
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n    }\n\
    \    if p < 2 {\n        return modp(n - 1, p+1) + p\n    }\n    if p < 3 {\n\
    \        return modp(n - 1, p+1) + modp(n - 2, p+1) + p\n    }\n    if p < 4 {\n\
    \        return modp(n - 1, p+1) + modp(n - 2, p+1) + modp(n - 3, p+1) + p\n \
    \   }\n    if p < 5 {\n        return modp(n - 1, p+1) + modp(n - 2, p+1) + modp(n\
    \ - 3, p+1) + modp(n - 4, p+1) + p\n    }\n    if p < 6 {\n        return modp(n\
    \ - 1, p+1) + modp(n - 2, p+1) + modp(n - 3, p+1) + modp(n - 4, p+1) + modp(n\
    \ - 5, p+1) + p\n    }\n    if p < 7 {\n        return modp(n - 1, p+1) + modp(n\
    \ - 2, p+1) + modp(n - 3, p+1) + modp(n - 4, p+1) + modp(n - 5, p+1) + modp(n\
    \ - 6, p+1) + p\n    }\n    if p < 8 {\n        return modp(n - 1, p+1) + modp(n\
    \ - 2, p+1) + modp(n - 3, p+1) + modp(n - 4, p+1) + modp(n - 5, p+1) + modp(n\
    \ - 6, p+1) + modp(n - 7, p+1) + p\n    }\n    if p < 9 {\n        return modp(n\
    \ - 1, p+1) + modp(n - 2, p+1) + modp(n - 3, p+1) + modp(n - 4, p+1) + modp(n\
    \ - 5, p+1) + modp(n - 6, p+1) + modp(n - 7, p+1) + modp(n - 8, p+1) + p\n   \
    \ }\n    if p < 10 {\n        return modp(n - 1, p+1) + modp(n - 2, p+1) + modp(n\
    \ - 3, p+1) + modp(n - 4, p+1) + modp(n - 5, p+1) + modp(n - 6, p+1) + modp(n\
    \ - 7, p+1) + modp(n - 8, p+1) + modp(n - 9, p+1) + p\n    }\n    if p < 11 {\n\
    \        return modp(n - 1, p+1) + modp(n - 2, p+1) + modp(n - 3, p+1) + modp(n\
    \ - 4, p+1) + modp(n - 5, p+1) + modp(n - 6, p+1) + modp(n - 7, p+1) + modp(n\
    \ - 8, p+1) + modp(n - 9, p+1) + modp(n - 10, p+1) + p\n    }\n    if p < 12 {\n\
    \        return modp(n - 1, p+1) + \nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz43zs5oe_test.go:48:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075117
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n    }\n\
    \    if p < 2 {\n        return modp(n - 1, p) + 1\n    }\n    if p < 3 {\n  \
    \      return modp(n - 2, p) + p\n    }\n    return modp(n - 3, p) + modp(n -\
    \ 2, p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0398\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f350?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.modp(0xfffffffffd999e57?,\
    \ 0x65?)\n\t/tmp/tmp38r9ozlr_test.go:9 +0xdc fp=0xc0201e03a8 sp=0xc0201e03a0 pc=0x4ef73c\n\
    command-line-arguments_test.modp(0xfffffffffd999e5a, 0x65)\n\t/tmp/tmp38r9ozlr_test.go:22\
    \ +0x72 fp=0xc0201e03d0 sp=0xc0201e03a8 pc=0x4ef6d2\ncommand-line-arguments_test.modp(0xfffffffffd999e5d,\
    \ 0x65)\n\t/tmp/tmp38r9ozlr_test.go:22 +0x72 fp=0xc0201e03f8 sp=0xc0201e03d0 pc=0x4ef6d2\n\
    command-line-arguments_test.modp(0xfffffffffd999e60, 0x65)\n\t/tmp/tmp38r9ozlr_test.go:22\
    \ +0x72 fp=0xc0201e0420 sp=0xc0201e03f8 pc=0x4ef6d2\ncommand-line-arguments_test.modp(0xfffffffffd999e63,\
    \ 0x65)\n\t/tmp/tmp38r9ozlr_test.go:22 +0x72 fp=0xc0201e0448 sp=0xc0201e0420 pc=0x4ef6d2\n\
    command-line-arguments_test.modp(0xfffffffffd999e66, 0x65)\n\t/tmp/tmp38r9ozlr_test.go:22\
    \ +0x72 fp=0xc0201e0470 sp=0xc0201e0448 pc=0x4ef6d2\ncommand-line-arguments_test.modp(0xfffffffffd999e69,\
    \ 0x65)\n\t/tmp/tmp38r9ozlr_test.go:22 +0x72 fp=0xc0201e0498 sp=0xc0201e0470 pc=0x4ef6d2\n\
    command-line-arguments_test.modp(0xfffffffffd999e6c, 0x65)\n\t/tmp/tmp38r9ozlr_test.go:22\
    \ +0x72 fp=0xc0201e04c0 sp=0xc0201e0498 pc=0x4ef6d2\ncommand-line-arguments_test.modp(0xfffffffffd999e6f,\
    \ 0x65)\n\t/tmp/tmp38r9ozlr_test.go:22 +0x72 fp=0xc0201e04e8 sp=0xc0201e04c0 pc=0x4ef6d2\n\
    command-line-arguments_test.modp(0xfffffffffd999e72, 0x65)\n\t/tmp/tmp38r9ozlr_test.go:22\
    \ +0x72 fp=0xc0201e0510 sp=0xc0201e04e8 pc=0x4ef6d2\ncommand-line-arguments_test.modp(0xfffffffffd999e75,\
    \ 0x65)\n\t/tmp/tmp38r9ozlr_test.go:22 +0x72 fp=0xc0201e0538 sp=0xc0201e0510 pc=0x4ef6d2\n\
    command-line-arguments_test.modp(0xfffffffffd999e78, 0x65"
  timestamp: 1660075119
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n    }\n\
    \    if p < 2 {\n        return modp(n - 1, p) + p\n    }\n    if p < 4 {\n  \
    \      return modp(n - 1, p) + modp(n - 2, p)\n    }\n    if p < 8 {\n       \
    \ return modp(n - 1, p) + modp(n - 2, p) + modp(n - 3, p)\n    }\n    if p < 16\
    \ {\n        return modp(n - 1, p) + modp(n - 2, p) + modp(n - 3, p) + modp(n\
    \ - 4, p)\n    }\n    if p < 32 {\n        return modp(n - 1, p) + modp(n - 2,\
    \ p) + modp(n - 3, p) + modp(n - 4, p) + modp(n - 5, p)\n    }\n    if p < 64\
    \ {\n        return modp(n - 1, p) + modp(n - 2, p) + modp(n - 3, p) + modp(n\
    \ - 4, p) + modp(n - 5, p) + modp(n - 6, p)\n    }\n    if p < 128 {\n       \
    \ return modp(n - 1, p) + modp(n - 2, p) + modp(n - 3, p) + modp(n - 4, p) + modp(n\
    \ - 5, p) + modp(n - 6, p) + modp(n - 7, p)\n    }\n    if p < 256 {\n       \
    \ return modp(n - 1, p) + modp(n - 2, p) + modp(n - 3, p) + modp(n - 4, p) + modp(n\
    \ - 5, p) + modp(n - 6, p) + modp(n - 7, p) + modp(n - 8, p)\n    }\n    if p\
    \ < 512 {\n        return modp(n - 1, p) + modp(n - 2, p) + modp(n - 3, p) + modp(n\
    \ - 4, p) + modp(n - 5, p) + modp(n - 6, p) + modp(n - 7, p) + modp(n - 8, p)\
    \ + modp(n - 9, p)\n    }\n    if p < 1024 {\n        return modp(n - 1, p) +\
    \ modp(n - 2, p) + modp(n - 3, p) + modp(n - 4, p) + modp(n - 5, p) + modp(n -\
    \ 6, p) + modp(n - 7, p) + modp(n - 8, p) + modp(n - 9, p) + modp(n - 10, p)\n\
    \    }\n    if p < 2048 {\n        return modp(n - 1, p) + modp(n - 2, p) + modp(n\
    \ - 3, p) + modp(n - 4, p) + modp(n - 5, p) + modp(n - 6, p) + modp(n - 7, p)\
    \ + modp(n - 8, p) + modp(n - 9, p) + modp(n - 10, p) + modp(n - 11, p)\n    }\n\
    \    if p < 4096 {\n        return modp(n - 1, p\nfunc TestModp(t *testing.T)\
    \ {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5),\
    \ expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     {\
    \ actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmptu_m_m4m_test.go:50:29: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075117
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n    }\n\
    \    if p < 2 {\n        return modp(n - 1, p) + p\n    }\n    if p < 3 {\n  \
    \      return modp(n - 2, p) + p\n    }\n    if p < 4 {\n        return modp(n\
    \ - 3, p) + p\n    }\n    if p < 5 {\n        return modp(n - 4, p) + p\n    }\n\
    \    if p < 6 {\n        return modp(n - 5, p) + p\n    }\n    if p < 7 {\n  \
    \      return modp(n - 6, p) + p\n    }\n    if p < 8 {\n        return modp(n\
    \ - 7, p) + p\n    }\n    if p < 9 {\n        return modp(n - 8, p) + p\n    }\n\
    \    if p < 10 {\n        return modp(n - 9, p) + p\n    }\n    if p < 11 {\n\
    \        return modp(n - 10, p) + p\n    }\n    if p < 12 {\n        return modp(n\
    \ - 11, p) + p\n    }\n    if p < 13 {\n        return modp(n - 12, p) + p\n \
    \   }\n    if p < 14 {\n        return modp(n - 13, p) + p\n    }\n    if p <\
    \ 15 {\n        return modp(n - 14, p) + p\n    }\n    if p < 16 {\n        return\
    \ modp(n - 15, p) + p\n    }\n    if p < 17 {\n        return modp(n - 16, p)\
    \ + p\n    }\n    if p < 18 {\n        return modp(n - 17, p) + p\n    }\n   \
    \ if p < 19 {\n        return modp(n - 18, p) + p\n    }\n    if p < 20 {\n  \
    \      return modp(n - 19, p) + p\n    }\n    if p < 21 {\n        return modp(n\
    \ - 20, p) + p\n    }\n    if p < 22 {\n        return modp(n - 21, p) + p\n \
    \   }\n    if p < 23 {\n        return modp(n - 22, p) + p\n    }\n    if p <\
    \ 24 {\n        return modp(n - 23, p) + p\n    }\n    if p < 25 {\n        return\
    \ modp(n - 24, p) + p\n    }\n    if p < 26 {\n        return modp(n - 25, p)\
    \ + p\n    }\n    if p < 27 {\n        return modp(n - 26, p) + p\n    }\n   \
    \ if p < 28 {\n        return modp(n - 27, p) + p\n    }\n    if p < 29 {\n  \
    \      return modp(n - 28, p) + p\n    }\n    if p < 30 {\n        return modp(n\
    \ - 29, p) + p\n    }\n    if p < 31 {\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp49ew5d42_test.go:105:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075117
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n    }\n\
    \    if p < 2 {\n        return modp(n - 1, p) % p\n    }\n    if p > 2 {\n  \
    \      return modp(n - 1, (p + 1) * (p - 1)) % p\n    }\n    return modp(n - 1,\
    \ (p + 1) * (p - 1)) % p\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual:\
    \ candidate(1101, 101), expected: 2 },\n     { actual: candidate(0, 101), expected:\
    \ 1 },\n     { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100,\
    \ 101), expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n    \
    \ { actual: candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmpfpo_bb9l_test.go:44: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__2 (0.00s)\n        tmpfpo_bb9l_test.go:44: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpfpo_bb9l_test.go:44: expected '%!s(int=8)', got '%!s(int=9)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpfpo_bb9l_test.go:44: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpfpo_bb9l_test.go:44: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpfpo_bb9l_test.go:44: expected\
    \ '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075118
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    r :=\
    \ 0\n    for i := 0; i < n; i++ {\n        r = (r * p + 1) & (p-1)\n    }\n  \
    \  return r\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpg2l6n55t_test.go:36: expected '%!s(int=3)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpg2l6n55t_test.go:36: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__2 (0.00s)\n\
    \        tmpg2l6n55t_test.go:36: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__3 (0.00s)\n        tmpg2l6n55t_test.go:36: expected\
    \ '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__4 (0.00s)\n\
    \        tmpg2l6n55t_test.go:36: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__5 (0.00s)\n        tmpg2l6n55t_test.go:36: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__6 (0.00s)\n\
    \        tmpg2l6n55t_test.go:36: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075118
- exit_code: null
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    x :=\
    \ n\n    for x != 0 {\n        x -= p & x\n        p >>= 1\n    }\n    return\
    \ x\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075132
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n    }\n\
    \    if p < 2 {\n        return modp(n - 1, p) + p\n    }\n    if p < 3 {\n  \
    \      return modp(n - 2, p) + p\n    }\n    if p < 4 {\n        return modp(n\
    \ - 3, p) + p\n    }\n    if p < 5 {\n        return modp(n - 4, p) + p\n    }\n\
    \    if p < 6 {\n        return modp(n - 5, p) + p\n    }\n    if p < 7 {\n  \
    \      return modp(n - 6, p) + p\n    }\n    if p < 8 {\n        return modp(n\
    \ - 7, p) + p\n    }\n    if p < 9 {\n        return modp(n - 8, p) + p\n    }\n\
    \    if p < 10 {\n        return modp(n - 9, p) + p\n    }\n    if p < 11 {\n\
    \        return modp(n - 10, p) + p\n    }\n    if p < 12 {\n        return modp(n\
    \ - 11, p) + p\n    }\n    if p < 13 {\n        return modp(n - 12, p) + p\n \
    \   }\n    if p < 14 {\n        return modp(n - 13, p) + p\n    }\n    if p <\
    \ 15 {\n        return modp(n - 14, p) + p\n    }\n    if p < 16 {\n        return\
    \ modp(n - 15, p) + p\n    }\n    if p < 17 {\n        return modp(n - 16, p)\
    \ + p\n    }\n    if p < 18 {\n        return modp(n - 17, p) + p\n    }\n   \
    \ if p < 19 {\n        return modp(n - 18, p) + p\n    }\n    if p < 20 {\n  \
    \      return modp(n - 19, p) + p\n    }\n    if p < 21 {\n        return modp(n\
    \ - 20, p) + p\n    }\n    if p < 22 {\n        return modp(n - 21, p) + p\n \
    \   }\n    if p < 23 {\n        return modp(n - 22, p) + p\n    }\n    if p <\
    \ 24 {\n        return modp(n - 23, p) + p\n    }\n    if p < 25 {\n        return\
    \ modp(n - 24, p) + p\n    }\n    if p < 26 {\n        return modp(n - 25, p)\
    \ + p\n    }\n    if p < 27 {\n        return modp(n - 26, p) + p\n    }\n   \
    \ if p < 28 {\n        return modp(n - 27, p) + p\n    }\n    if p < 29 {\n  \
    \      return modp(n - 28, p) + p\n    }\n    if p < 30 {\n        return modp(n\
    \ - 29, p) + p\n    }\n    if p < 31 {\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp49ew5d42_test.go:105:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075117
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n    }\n\
    \    return modp(n / 2, p) + p\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpsfs0hyrr_test.go:38: expected '%!s(int=3)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpsfs0hyrr_test.go:38: expected\
    \ '%!s(int=2)', got '%!s(int=1111)'\n    --- FAIL: TestModp/test_num__2 (0.00s)\n\
    \        tmpsfs0hyrr_test.go:38: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__3 (0.00s)\n        tmpsfs0hyrr_test.go:38: expected\
    \ '%!s(int=8)', got '%!s(int=22)'\n    --- FAIL: TestModp/test_num__4 (0.00s)\n\
    \        tmpsfs0hyrr_test.go:38: expected '%!s(int=1)', got '%!s(int=707)'\n \
    \   --- FAIL: TestModp/test_num__5 (0.00s)\n        tmpsfs0hyrr_test.go:38: expected\
    \ '%!s(int=4)', got '%!s(int=25)'\n    --- FAIL: TestModp/test_num__6 (0.00s)\n\
    \        tmpsfs0hyrr_test.go:38: expected '%!s(int=3)', got '%!s(int=25)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075116
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n    }\n\
    \    if p < 2 {\n        return modp(n - 1, p+1) + p\n    }\n    if p < 3 {\n\
    \        return modp(n - 1, p+1) + p\n    }\n    if p < 4 {\n        return modp(n\
    \ - 1, p+1) + p\n    }\n    if p < 5 {\n        return modp(n - 1, p+1) + p\n\
    \    }\n    if p < 6 {\n        return modp(n - 1, p+1) + p\n    }\n    if p <\
    \ 7 {\n        return modp(n - 1, p+1) + p\n    }\n    if p < 8 {\n        return\
    \ modp(n - 1, p+1) + p\n    }\n    if p < 9 {\n        return modp(n - 1, p+1)\
    \ + p\n    }\n    if p < 10 {\n        return modp(n - 1, p+1) + p\n    }\n  \
    \  if p < 11 {\n        return modp(n - 1, p+1) + p\n    }\n    if p < 12 {\n\
    \        return modp(n - 1, p+1) + p\n    }\n    if p < 13 {\n        return modp(n\
    \ - 1, p+1) + p\n    }\n    if p < 14 {\n        return modp(n - 1, p+1) + p\n\
    \    }\n    if p < 15 {\n        return modp(n - 1, p+1) + p\n    }\n    if p\
    \ < 16 {\n        return modp(n - 1, p+1) + p\n    }\n    if p < 17 {\n      \
    \  return modp(n - 1, p+1) + p\n    }\n    if p < 18 {\n        return modp(n\
    \ - 1, p+1) + p\n    }\n    if p < 19 {\n        return modp(n - 1, p+1) + p\n\
    \    }\n    if p < 20 {\n        return modp(n - 1, p+1) + p\n    }\n    if p\
    \ < 21 {\n        return modp(n - 1, p+1) + p\n    }\n    if p < 22 {\n      \
    \  return modp(n - 1, p+1) + p\n    }\n    if p < 23 {\n        return modp(n\
    \ - 1, p+1) + p\n    }\n    if p < 24 {\n        return modp(n - 1, p+1) + p\n\
    \    }\n    if p < 25 {\n        return modp(n - 1, p+1) + p\n    }\n    if p\
    \ < 26 {\n        return modp(n - 1, p+1) + p\n    }\n    if p < 27 {\n      \
    \  return modp(n - 1, p+1) + p\n    }\n    if p < 28 {\n        return modp(n\
    \ - 1, p+1) + p\n    }\n    if p < 29 {\n        return modp(n - 1, p+1) + p\n\
    \    }\n    if p < 30 {\n        return modp(n - 1, p+1) + p\n    }\n    if p\
    \ < 31 {\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpef25uarn_test.go:104:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075117
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n    }\n\
    \    return modp(n >> 1, p) + p\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmp15u6q3x1_test.go:38: expected '%!s(int=3)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestModp/test_num__1 (0.00s)\n        tmp15u6q3x1_test.go:38: expected\
    \ '%!s(int=2)', got '%!s(int=1111)'\n    --- FAIL: TestModp/test_num__2 (0.00s)\n\
    \        tmp15u6q3x1_test.go:38: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__3 (0.00s)\n        tmp15u6q3x1_test.go:38: expected\
    \ '%!s(int=8)', got '%!s(int=22)'\n    --- FAIL: TestModp/test_num__4 (0.00s)\n\
    \        tmp15u6q3x1_test.go:38: expected '%!s(int=1)', got '%!s(int=707)'\n \
    \   --- FAIL: TestModp/test_num__5 (0.00s)\n        tmp15u6q3x1_test.go:38: expected\
    \ '%!s(int=4)', got '%!s(int=25)'\n    --- FAIL: TestModp/test_num__6 (0.00s)\n\
    \        tmp15u6q3x1_test.go:38: expected '%!s(int=3)', got '%!s(int=25)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075116
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    x :=\
    \ n\n    y := p\n    t := 1\n    while x > y {\n        x -= y\n        t *= y\n\
    \    }\n    return t\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual:\
    \ candidate(1101, 101), expected: 2 },\n     { actual: candidate(0, 101), expected:\
    \ 1 },\n     { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100,\
    \ 101), expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n    \
    \ { actual: candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz_ewt3h0_test.go:13:11: expected '';'', found x

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075118
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n < 0 {\n        n *= -1\n    }\n    if n < p {\n        return n\n    }\n \
    \   if n == p {\n        return 1\n    }\n    if n < p {\n        return modp(n\
    \ - p, p)\n    }\n    return modp(n - p, p) + p\n}\n\nfunc TestModp(t *testing.T)\
    \ {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5),\
    \ expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     {\
    \ actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmpkcknfd3q_test.go:44: expected '%!s(int=2)', got '%!s(int=1101)'\n\
    \    --- FAIL: TestModp/test_num__2 (0.00s)\n        tmpkcknfd3q_test.go:44: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpkcknfd3q_test.go:44: expected '%!s(int=8)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpkcknfd3q_test.go:44: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpkcknfd3q_test.go:44: expected '%!s(int=4)', got '%!s(int=26)'\n  \
    \  --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpkcknfd3q_test.go:44: expected\
    \ '%!s(int=3)', got '%!s(int=31)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660075118
- exit_code: null
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    x :=\
    \ n\n    for {\n        x -= p // x -= p\n        if x == 0 {\n            break\n\
    \        }\n    }\n    return x\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075132
- exit_code: null
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    x :=\
    \ n\n    for {\n        if x < (p / 2) {\n            x <<= 1\n        } else\
    \ {\n            x >>= 1\n        }\n        if x < (p / 2) {\n            x +=\
    \ 1\n        }\n        if x == 0 {\n            break\n        }\n    }\n   \
    \ return x\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075129
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n    }\n\
    \    return modp(n >> 1, p) + p\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmp15u6q3x1_test.go:38: expected '%!s(int=3)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestModp/test_num__1 (0.00s)\n        tmp15u6q3x1_test.go:38: expected\
    \ '%!s(int=2)', got '%!s(int=1111)'\n    --- FAIL: TestModp/test_num__2 (0.00s)\n\
    \        tmp15u6q3x1_test.go:38: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__3 (0.00s)\n        tmp15u6q3x1_test.go:38: expected\
    \ '%!s(int=8)', got '%!s(int=22)'\n    --- FAIL: TestModp/test_num__4 (0.00s)\n\
    \        tmp15u6q3x1_test.go:38: expected '%!s(int=1)', got '%!s(int=707)'\n \
    \   --- FAIL: TestModp/test_num__5 (0.00s)\n        tmp15u6q3x1_test.go:38: expected\
    \ '%!s(int=4)', got '%!s(int=25)'\n    --- FAIL: TestModp/test_num__6 (0.00s)\n\
    \        tmp15u6q3x1_test.go:38: expected '%!s(int=3)', got '%!s(int=25)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075116
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n    }\n\
    \    if p < 2 {\n        return modp(n - 1, p+1) + p\n    }\n    if p < 3 {\n\
    \        return modp(n - 1, p+1) + modp(n - 2, p+1) + p\n    }\n    if p < 4 {\n\
    \        return modp(n - 1, p+1) + modp(n - 2, p+1) + modp(n - 3, p+1) + p\n \
    \   }\n    if p < 5 {\n        return modp(n - 1, p+1) + modp(n - 2, p+1) + modp(n\
    \ - 3, p+1) + modp(n - 4, p+1) + p\n    }\n    if p < 6 {\n        return modp(n\
    \ - 1, p+1) + modp(n - 2, p+1) + modp(n - 3, p+1) + modp(n - 4, p+1) + modp(n\
    \ - 5, p+1) + p\n    }\n    if p < 7 {\n        return modp(n - 1, p+1) + modp(n\
    \ - 2, p+1) + modp(n - 3, p+1) + modp(n - 4, p+1) + modp(n - 5, p+1) + modp(n\
    \ - 6, p+1) + p\n    }\n    if p < 8 {\n        return modp(n - 1, p+1) + modp(n\
    \ - 2, p+1) + modp(n - 3, p+1) + modp(n - 4, p+1) + modp(n - 5, p+1) + modp(n\
    \ - 6, p+1) + modp(n - 7, p+1) + p\n    }\n    if p < 9 {\n        return modp(n\
    \ - 1, p+1) + modp(n - 2, p+1) + modp(n - 3, p+1) + modp(n - 4, p+1) + modp(n\
    \ - 5, p+1) + modp(n - 6, p+1) + modp(n - 7, p+1) + modp(n - 8, p+1) + p\n   \
    \ }\n    if p < 10 {\n        return modp(n - 1, p+1) + modp(n - 2, p+1) + modp(n\
    \ - 3, p+1) + modp(n - 4, p+1) + modp(n - 5, p+1) + modp(n - 6, p+1) + modp(n\
    \ - 7, p+1) + modp(n - 8, p+1) + modp(n - 9, p+1) + p\n    }\n    if p < 11 {\n\
    \        return modp(n - 1, p+1) + modp(n - 2, p+1) + modp(n - 3, p+1) + modp(n\
    \ - 4, p+1) + modp(n - 5, p+1) + modp(n - 6, p+1) + modp(n - 7, p+1) + modp(n\
    \ - 8, p+1) + modp(n - 9, p+1) + modp(n - 10, p+1) + p\n    }\n    if p < 12 {\n\
    \        return modp(n - 1, p+1) + \nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz43zs5oe_test.go:48:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075117
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n    }\n\
    \    if p < 2 {\n        return modp(n - 1, p) % p\n    }\n    if p > 2 {\n  \
    \      return modp(n - 2, p) % p\n    }\n    return modp(n - 1, p) % p\n}\n\n\
    func TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101, 101),\
    \ expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n     { actual:\
    \ candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101), expected:\
    \ 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual: candidate(31,\
    \ 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmp5lta22ds_test.go:44: expected '%!s(int=3)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmp5lta22ds_test.go:44: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__2 (0.00s)\n\
    \        tmp5lta22ds_test.go:44: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__3 (0.00s)\n        tmp5lta22ds_test.go:44: expected\
    \ '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__4 (0.00s)\n\
    \        tmp5lta22ds_test.go:44: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__5 (0.00s)\n        tmp5lta22ds_test.go:44: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__6 (0.00s)\n\
    \        tmp5lta22ds_test.go:44: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075118
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n    }\n\
    \    if p < 2 {\n        return modp(n - 1, p) + p\n    }\n    if p < 3 {\n  \
    \      return modp(n - 1, p) + modp(n - 2, p)\n    }\n    if p < 4 {\n       \
    \ return modp(n - 1, p) + modp(n - 2, p) + modp(n - 3, p)\n    }\n    if p < 5\
    \ {\n        return modp(n - 1, p) + modp(n - 2, p) + modp(n - 3, p) + modp(n\
    \ - 4, p)\n    }\n    if p < 6 {\n        return modp(n - 1, p) + modp(n - 2,\
    \ p) + modp(n - 3, p) + modp(n - 4, p) + modp(n - 5, p)\n    }\n    if p < 7 {\n\
    \        return modp(n - 1, p) + modp(n - 2, p) + modp(n - 3, p) + modp(n - 4,\
    \ p) + modp(n - 5, p) + modp(n - 6, p)\n    }\n    if p < 8 {\n        return\
    \ modp(n - 1, p) + modp(n - 2, p) + modp(n - 3, p) + modp(n - 4, p) + modp(n -\
    \ 5, p) + modp(n - 6, p) + modp(n - 7, p)\n    }\n    if p < 9 {\n        return\
    \ modp(n - 1, p) + modp(n - 2, p) + modp(n - 3, p) + modp(n - 4, p) + modp(n -\
    \ 5, p) + modp(n - 6, p) + modp(n - 7, p) + modp(n - 8, p)\n    }\n    if p <\
    \ 10 {\n        return modp(n - 1, p) + modp(n - 2, p) + modp(n - 3, p) + modp(n\
    \ - 4, p) + modp(n - 5, p) + modp(n - 6, p) + modp(n - 7, p) + modp(n - 8, p)\
    \ + modp(n - 9, p)\n    }\n    if p < 11 {\n        return modp(n - 1, p) + modp(n\
    \ - 2, p) + modp(n - 3, p) + modp(n - 4, p) + modp(n - 5, p) + modp(n - 6, p)\
    \ + modp(n - 7, p) + modp(n - 8, p) + modp(n - 9, p) + modp(n - 10, p)\n    }\n\
    \    if p < 12 {\n        return modp(n - 1, p) + modp(n - 2, p) + modp(n - 3,\
    \ p) + modp(n - 4, p) + modp(n - 5, p) + modp(n - 6, p) + modp(n - 7, p) + modp(n\
    \ - 8, p) + modp(n - 9, p) + modp(n - 10, p) + modp(n - 11, p)\n    }\n    if\
    \ p < 13 {\n        return modp(n - 1, p) + \nfunc TestModp(t *testing.T) {\n\
    \  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5), expected:\
    \ 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpig6ldhgc_test.go:51:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075118
- exit_code: null
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n < 0 {\n        n *= -1\n    }\n    if n < p {\n        return n\n    }\n \
    \   if n == p {\n        return 1\n    }\n    if n == 0 {\n        return 0\n\
    \    }\n    if n < p {\n        return modp(n - p, p)\n    }\n    if n == p {\n\
    \        return 2\n    }\n    if n == p+1 {\n        return modp(n - 1, p)\n \
    \   }\n    return modp(n - p, p) + modp(n-1, p)\n}\n\nfunc TestModp(t *testing.T)\
    \ {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5),\
    \ expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     {\
    \ actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075132
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    x :=\
    \ n\n    for {\n        if x % p == 0 {\n            return x\n        }\n   \
    \     x /= p\n    }\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual:\
    \ candidate(1101, 101), expected: 2 },\n     { actual: candidate(0, 101), expected:\
    \ 1 },\n     { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100,\
    \ 101), expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n    \
    \ { actual: candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpu3woh609_test.go:38: expected '%!s(int=3)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpu3woh609_test.go:38: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__2 (0.00s)\n\
    \        tmpu3woh609_test.go:38: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__3 (0.00s)\n        tmpu3woh609_test.go:38: expected\
    \ '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__4 (0.00s)\n\
    \        tmpu3woh609_test.go:38: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__5 (0.00s)\n        tmpu3woh609_test.go:38: expected\
    \ '%!s(int=4)', got '%!s(int=30)'\n    --- FAIL: TestModp/test_num__6 (0.00s)\n\
    \        tmpu3woh609_test.go:38: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075116
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n == 0 {\n        return 0\n    }\n    if p == 0 {\n        return n\n    }\n\
    \    if p == 1 {\n        return n\n    }\n    if n == 1 {\n        return p\n\
    \    }\n    if n == 2 {\n        return p\n    }\n    if n == 3 {\n        return\
    \ p + 1\n    }\n    if n == 4 {\n        return p + 2\n    }\n    if n == 5 {\n\
    \        return p + 3\n    }\n    if n == 6 {\n        return p + 4\n    }\n \
    \   if n == 7 {\n        return p + 5\n    }\n    if n == 8 {\n        return\
    \ p + 6\n    }\n    if n == 9 {\n        return p + 7\n    }\n    if n == 10 {\n\
    \        return p + 8\n    }\n    if n == 11 {\n        return p + 9\n    }\n\
    \    if n == 12 {\n        return p + 10\n    }\n    if n == 13 {\n        return\
    \ p + 11\n    }\n    if n == 14 {\n        return p + 12\n    }\n    if n == 15\
    \ {\n        return p + 13\n    }\n    if n == 16 {\n        return p + 14\n \
    \   }\n    if n == 17 {\n        return p + 15\n    }\n    if n == 18 {\n    \
    \    return p + 16\n    }\n    if n == 19 {\n        return p + 17\n    }\n  \
    \  if n == 20 {\n        return p + 18\n    }\n    if n == 21 {\n        return\
    \ p + 19\n    }\n    if n == 22 {\n        return p + 20\n    }\n    if n == 23\
    \ {\n        return p + 21\n    }\n    if n == 24 {\n        return p + 22\n \
    \   }\n    if n == 25 {\n        return p + 23\n    }\n    if n == 26 {\n    \
    \    return p + 24\n    }\n    if n == 27 {\n        return p + 25\n    }\n  \
    \  if n == 28 {\n        return p + 26\n    }\n    if n == 29 {\n        return\
    \ p + 27\n    }\n    if n == 30 {\n        return p + 28\n    }\n    if n == 31\
    \ {\n        return p + 29\n    }\n    if n == 32 {\n        return p + 30\n \
    \   }\n    if n == 33 {\n        return p + 31\n    }\n    if n == 34 {\n    \
    \    return p + 32\n    }\n    if n == 35 {\n        return p + 33\n    }\n  \
    \  if n == 36 {\n        return p + 34\n    }\n    if n == 37 {\n        return\
    \ p + 35\n    }\n    if n == 38 {\n        return p + 36\n    }\n    if n == 39\
    \ {\n        return p + 37\n    }\n    if n == 40 {\n        return p + 38\n \
    \   }\n    if n == 41 {\n        return p + 39\n    }\n    if \nfunc TestModp(t\
    \ *testing.T) {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 5), expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n  \
    \   { actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpj5urukp0_test.go:143:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075118
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n    }\n\
    \    return modp(n / 2, p) + p\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpsfs0hyrr_test.go:38: expected '%!s(int=3)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpsfs0hyrr_test.go:38: expected\
    \ '%!s(int=2)', got '%!s(int=1111)'\n    --- FAIL: TestModp/test_num__2 (0.00s)\n\
    \        tmpsfs0hyrr_test.go:38: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__3 (0.00s)\n        tmpsfs0hyrr_test.go:38: expected\
    \ '%!s(int=8)', got '%!s(int=22)'\n    --- FAIL: TestModp/test_num__4 (0.00s)\n\
    \        tmpsfs0hyrr_test.go:38: expected '%!s(int=1)', got '%!s(int=707)'\n \
    \   --- FAIL: TestModp/test_num__5 (0.00s)\n        tmpsfs0hyrr_test.go:38: expected\
    \ '%!s(int=4)', got '%!s(int=25)'\n    --- FAIL: TestModp/test_num__6 (0.00s)\n\
    \        tmpsfs0hyrr_test.go:38: expected '%!s(int=3)', got '%!s(int=25)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075116
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n < 0 {\n        n *= -1\n    }\n    if n < p {\n        return n\n    }\n \
    \   return p - n\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual:\
    \ candidate(1101, 101), expected: 2 },\n     { actual: candidate(0, 101), expected:\
    \ 1 },\n     { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100,\
    \ 101), expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n    \
    \ { actual: candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmpqgir1tow_test.go:38: expected '%!s(int=2)', got '%!s(int=-1000)'\n\
    \    --- FAIL: TestModp/test_num__2 (0.00s)\n        tmpqgir1tow_test.go:38: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpqgir1tow_test.go:38: expected '%!s(int=8)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpqgir1tow_test.go:38: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpqgir1tow_test.go:38: expected '%!s(int=4)', got '%!s(int=-25)'\n \
    \   --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpqgir1tow_test.go:38: expected\
    \ '%!s(int=3)', got '%!s(int=-26)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660075119
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n    }\n\
    \    if p == 1 {\n        return modp(n - 1, p-1)\n    }\n    if p == 2 {\n  \
    \      return modp(n - 1, 2)\n    }\n    if p == 3 {\n        return modp(n -\
    \ 1, 3)\n    }\n    if p == 4 {\n        return modp(n - 1, 4)\n    }\n    if\
    \ p == 5 {\n        return modp(n - 1, 5)\n    }\n    if p == 6 {\n        return\
    \ modp(n - 1, 6)\n    }\n    if p == 7 {\n        return modp(n - 1, 7)\n    }\n\
    \    if p == 8 {\n        return modp(n - 1, 8)\n    }\n    if p == 9 {\n    \
    \    return modp(n - 1, 9)\n    }\n    if p == 10 {\n        return modp(n - 1,\
    \ 10)\n    }\n    if p == 11 {\n        return modp(n - 1, 11)\n    }\n    if\
    \ p == 12 {\n        return modp(n - 1, 12)\n    }\n    if p == 13 {\n       \
    \ return modp(n - 1, 13)\n    }\n    if p == 14 {\n        return modp(n - 1,\
    \ 14)\n    }\n    if p == 15 {\n        return modp(n - 1, 15)\n    }\n    if\
    \ p == 16 {\n        return modp(n - 1, 16)\n    }\n    if p == 17 {\n       \
    \ return modp(n - 1, 17)\n    }\n    if p == 18 {\n        return modp(n - 1,\
    \ 18)\n    }\n    if p == 19 {\n        return modp(n - 1, 19)\n    }\n    if\
    \ p == 20 {\n        return modp(n - 1, 20)\n    }\n    if p == 21 {\n       \
    \ return modp(n - 1, 21)\n    }\n    if p == 22 {\n        return modp(n - 1,\
    \ 22)\n    }\n    if p == 23 {\n        return modp(n - 1, 23)\n    }\n    if\
    \ p == 24 {\n        return modp(n - 1, 24)\n    }\n    if p == 25 {\n       \
    \ return modp(n - 1, 25)\n    }\n    if p == 26 {\n        return modp(n - 1,\
    \ 26)\n    }\n    if p == 27 {\n        return modp(n - 1, 27)\n    }\n    if\
    \ p == 28 {\n        return modp(n - 1, 28)\n    }\n    if p == 29 {\n       \
    \ return modp(n - 1, 29)\n    }\n    if p == 30 {\n        return modp(n - 1,\
    \ 30)\n    }\n    if p == 31 {\n        return modp(n - 1, 31)\n    }\n    if\
    \ p == 32 {\n        return modp(n - 1, 32)\n    }\n    if p == 33 {\n       \
    \ return modp(n - 1, 33)\n    }\n    if p == 34 {\n        return modp(n - \n\
    func TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101, 101),\
    \ expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n     { actual:\
    \ candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101), expected:\
    \ 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual: candidate(31,\
    \ 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpq5tm_ntp_test.go:117:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075118
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n    }\n\
    \    if p < 2 {\n        return modp(n - 1, p) + p\n    }\n    if p < 4 {\n  \
    \      return modp(n - 1, p) + p\n    }\n    if p < 8 {\n        return modp(n\
    \ - 1, p) + p\n    }\n    if p < 16 {\n        return modp(n - 1, p) + p\n   \
    \ }\n    if p < 32 {\n        return modp(n - 1, p) + p\n    }\n    if p < 64\
    \ {\n        return modp(n - 1, p) + p\n    }\n    if p < 128 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p < 256 {\n        return modp(n - 1, p) +\
    \ p\n    }\n    if p < 512 {\n        return modp(n - 1, p) + p\n    }\n    if\
    \ p < 1024 {\n        return modp(n - 1, p) + p\n    }\n    if p < 2048 {\n  \
    \      return modp(n - 1, p) + p\n    }\n    if p < 4096 {\n        return modp(n\
    \ - 1, p) + p\n    }\n    if p < 8192 {\n        return modp(n - 1, p) + p\n \
    \   }\n    if p < 16384 {\n        return modp(n - 1, p) + p\n    }\n    if p\
    \ < 32768 {\n        return modp(n - 1, p) + p\n    }\n    if p < 65536 {\n  \
    \      return modp(n - 1, p) + p\n    }\n    if p < 131072 {\n        return modp(n\
    \ - 1, p) + p\n    }\n    if p < 262144 {\n        return modp(n - 1, p) + p\n\
    \    }\n    if p < 524288 {\n        return modp(n - 1, p) + p\n    }\n    if\
    \ p < 1048576 {\n        return modp(n - 1, p) + p\n    }\n    if p < 2097152\
    \ {\n        return modp(n - 1, p) + p\n    }\n    if p < 4194304 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p < 8388608 {\n        return modp(n - 1,\
    \ p) + p\n    }\n    if p < 16777216 {\n        return modp(n - 1, p) + p\n  \
    \  }\n    if p < 33554432 {\n        return modp(n - 1, p) + p\n    }\n    if\
    \ p < 67108864 {\n        return modp(n - 1, p) + p\n    }\n    if p < 134217728\
    \ {\n        return modp(n - 1, p) + p\n    }\n    if p < 268435456 {\n      \
    \  return modp(n - 1, p) + p\n    }\n    if p < 536870912 {\n        return modp(n\
    \ - 1, p) + p\n    }\n    if \nfunc TestModp(t *testing.T) {\n  candidate := modp\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual:\
    \ candidate(1101, 101), expected: 2 },\n     { actual: candidate(0, 101), expected:\
    \ 1 },\n     { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100,\
    \ 101), expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n    \
    \ { actual: candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpeyul9x1k_test.go:104:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075118
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n < 0 {\n        n *= -1\n    }\n    if n < p {\n        return n\n    }\n \
    \   if n == p {\n        return 1\n    }\n    if n > p {\n        return modp(n\
    \ - p, p)\n    }\n    return 0\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmp_06rsl8m_test.go:44: expected '%!s(int=2)', got '%!s(int=91)'\n  \
    \  --- FAIL: TestModp/test_num__2 (0.00s)\n        tmp_06rsl8m_test.go:44: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmp_06rsl8m_test.go:44: expected '%!s(int=8)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmp_06rsl8m_test.go:44: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmp_06rsl8m_test.go:44: expected '%!s(int=4)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmp_06rsl8m_test.go:44: expected\
    \ '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\n\
    FAIL\n"
  timestamp: 1660075119
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n    }\n\
    \    if p < 2 {\n        return modp(n / 2, p)\n    }\n    if p > 2 {\n      \
    \  return modp(n / 2, p)\n    }\n    if n % 2 == 0 {\n        return modp(n /\
    \ 2, p)\n    }\n    return modp(n / 2, p)\n}\n\nfunc TestModp(t *testing.T) {\n\
    \  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5), expected:\
    \ 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmppifnnpyx_test.go:47: expected '%!s(int=3)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmppifnnpyx_test.go:47: expected\
    \ '%!s(int=2)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__2 (0.00s)\n\
    \        tmppifnnpyx_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__3 (0.00s)\n        tmppifnnpyx_test.go:47: expected\
    \ '%!s(int=8)', got '%!s(int=11)'\n    --- FAIL: TestModp/test_num__4 (0.00s)\n\
    \        tmppifnnpyx_test.go:47: expected '%!s(int=1)', got '%!s(int=101)'\n \
    \   --- FAIL: TestModp/test_num__5 (0.00s)\n        tmppifnnpyx_test.go:47: expected\
    \ '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestModp/test_num__6 (0.00s)\n\
    \        tmppifnnpyx_test.go:47: expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075119
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    x :=\
    \ n\n    for {\n        if x&1 != 0 {\n            x >>= 1\n            x ^= p\n\
    \        } else {\n            break\n        }\n    }\n    return x\n}\n\nfunc\
    \ TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 5), expected: 3 },\n     { actual: candidate(1101, 101), expected:\
    \ 2 },\n     { actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3,\
    \ 11), expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n  \
    \   { actual: candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpaxqrx8mm_test.go:41: expected '%!s(int=3)', got '%!s(int=4)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpaxqrx8mm_test.go:41: expected\
    \ '%!s(int=2)', got '%!s(int=324)'\n    --- FAIL: TestModp/test_num__2 (0.00s)\n\
    \        tmpaxqrx8mm_test.go:41: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__3 (0.00s)\n        tmpaxqrx8mm_test.go:41: expected\
    \ '%!s(int=8)', got '%!s(int=10)'\n    --- FAIL: TestModp/test_num__4 (0.00s)\n\
    \        tmpaxqrx8mm_test.go:41: expected '%!s(int=1)', got '%!s(int=100)'\n \
    \   --- FAIL: TestModp/test_num__5 (0.00s)\n        tmpaxqrx8mm_test.go:41: expected\
    \ '%!s(int=4)', got '%!s(int=30)'\n    --- FAIL: TestModp/test_num__6 (0.00s)\n\
    \        tmpaxqrx8mm_test.go:41: expected '%!s(int=3)', got '%!s(int=10)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075116
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n    }\n\
    \    if p < 2 {\n        return modp(n - 1, p) % p\n    }\n    if p > 2 {\n  \
    \      return modp(n - 1, p) % p\n    }\n    if p%2 == 0 {\n        return modp(n\
    \ - 2, p) % p\n    }\n    return modp(n - 2, p) % p\n}\n\nfunc TestModp(t *testing.T)\
    \ {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5),\
    \ expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     {\
    \ actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpg2_qrqgg_test.go:47: expected '%!s(int=3)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpg2_qrqgg_test.go:47: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__2 (0.00s)\n\
    \        tmpg2_qrqgg_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__3 (0.00s)\n        tmpg2_qrqgg_test.go:47: expected\
    \ '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__4 (0.00s)\n\
    \        tmpg2_qrqgg_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__5 (0.00s)\n        tmpg2_qrqgg_test.go:47: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__6 (0.00s)\n\
    \        tmpg2_qrqgg_test.go:47: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075119
- exit_code: null
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n    }\n\
    \    if p < 2 {\n        return modp(n - 1, p) + p\n    }\n    return modp(n -\
    \ 1, p) + modp(n - 2, p) % p\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075133
- exit_code: null
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    x :=\
    \ n\n    for {\n        if x < (p / 2) {\n            x <<= 1\n        } else\
    \ {\n            x >>= 1\n        }\n        if x == 0 {\n            break\n\
    \        }\n    }\n    return x\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075131
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n    }\n\
    \    if p < 2 {\n        return modp(n - 1, p) % p\n    }\n    return modp(n -\
    \ 2, p) % p\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpr304csh8_test.go:41: expected '%!s(int=3)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpr304csh8_test.go:41: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__2 (0.00s)\n\
    \        tmpr304csh8_test.go:41: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__3 (0.00s)\n        tmpr304csh8_test.go:41: expected\
    \ '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__4 (0.00s)\n\
    \        tmpr304csh8_test.go:41: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__5 (0.00s)\n        tmpr304csh8_test.go:41: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__6 (0.00s)\n\
    \        tmpr304csh8_test.go:41: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075119
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n    }\n\
    \    if p < 2 {\n        return modp(n - 1, p) + 1\n    }\n    if p > 2 {\n  \
    \      return modp(n - 1, p) - 1\n    }\n    if p == 2 {\n        return n\n \
    \   }\n    if n == p {\n        return modp(n - 1, p) + 1\n    }\n    if n ==\
    \ p - 1 {\n        return modp(n - 1, p) - 1\n    }\n    return modp(n - 1, p)\
    \ + modp(n - 1, p - 1)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual:\
    \ candidate(1101, 101), expected: 2 },\n     { actual: candidate(0, 101), expected:\
    \ 1 },\n     { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100,\
    \ 101), expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n    \
    \ { actual: candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmp_ugnbyyl_test.go:53: expected '%!s(int=2)', got '%!s(int=-999)'\n\
    \    --- FAIL: TestModp/test_num__2 (0.00s)\n        tmp_ugnbyyl_test.go:53: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmp_ugnbyyl_test.go:53: expected '%!s(int=8)', got '%!s(int=9)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmp_ugnbyyl_test.go:53: expected\
    \ '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmp_ugnbyyl_test.go:53: expected '%!s(int=4)', got '%!s(int=-24)'\n \
    \   --- FAIL: TestModp/test_num__6 (0.00s)\n        tmp_ugnbyyl_test.go:53: expected\
    \ '%!s(int=3)', got '%!s(int=-25)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075119
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n    }\n\
    \    if p < 2 {\n        return modp(n - 1, p) % p\n    }\n    return modp(n -\
    \ 2, p) % p + p\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpebgpl6m4_test.go:41: expected '%!s(int=3)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpebgpl6m4_test.go:41: expected\
    \ '%!s(int=2)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__2 (0.00s)\n\
    \        tmpebgpl6m4_test.go:41: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__3 (0.00s)\n        tmpebgpl6m4_test.go:41: expected\
    \ '%!s(int=8)', got '%!s(int=11)'\n    --- FAIL: TestModp/test_num__4 (0.00s)\n\
    \        tmpebgpl6m4_test.go:41: expected '%!s(int=1)', got '%!s(int=101)'\n \
    \   --- FAIL: TestModp/test_num__5 (0.00s)\n        tmpebgpl6m4_test.go:41: expected\
    \ '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestModp/test_num__6 (0.00s)\n\
    \        tmpebgpl6m4_test.go:41: expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075119
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n    }\n\
    \    return modp(n / 2, p) + p\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpsfs0hyrr_test.go:38: expected '%!s(int=3)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpsfs0hyrr_test.go:38: expected\
    \ '%!s(int=2)', got '%!s(int=1111)'\n    --- FAIL: TestModp/test_num__2 (0.00s)\n\
    \        tmpsfs0hyrr_test.go:38: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__3 (0.00s)\n        tmpsfs0hyrr_test.go:38: expected\
    \ '%!s(int=8)', got '%!s(int=22)'\n    --- FAIL: TestModp/test_num__4 (0.00s)\n\
    \        tmpsfs0hyrr_test.go:38: expected '%!s(int=1)', got '%!s(int=707)'\n \
    \   --- FAIL: TestModp/test_num__5 (0.00s)\n        tmpsfs0hyrr_test.go:38: expected\
    \ '%!s(int=4)', got '%!s(int=25)'\n    --- FAIL: TestModp/test_num__6 (0.00s)\n\
    \        tmpsfs0hyrr_test.go:38: expected '%!s(int=3)', got '%!s(int=25)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075116
- exit_code: null
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    x :=\
    \ n\n    y := p\n    for {\n        x -= y\n        if x == 0 {\n            break\n\
    \        }\n        y >>= 1\n    }\n    return x\n}\n\nfunc TestModp(t *testing.T)\
    \ {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5),\
    \ expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     {\
    \ actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075129
- exit_code: null
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n    }\n\
    \    if p < 2 {\n        return modp(n - 1, p) + p\n    }\n    return modp(n -\
    \ 1, p) + modp(n - 2, p) % p\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075133
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n    }\n\
    \    return modp(n >> 1, p) * p + p\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpxo2qv7vf_test.go:38: expected '%!s(int=3)', got '%!s(int=30)'\n  \
    \  --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpxo2qv7vf_test.go:38: expected\
    \ '%!s(int=2)', got '%!s(int=-2710327716838830765)'\n    --- FAIL: TestModp/test_num__2\
    \ (0.00s)\n        tmpxo2qv7vf_test.go:38: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestModp/test_num__3 (0.00s)\n        tmpxo2qv7vf_test.go:38: expected\
    \ '%!s(int=8)', got '%!s(int=132)'\n    --- FAIL: TestModp/test_num__4 (0.00s)\n\
    \        tmpxo2qv7vf_test.go:38: expected '%!s(int=1)', got '%!s(int=108285670562807)'\n\
    \    --- FAIL: TestModp/test_num__5 (0.00s)\n        tmpxo2qv7vf_test.go:38: expected\
    \ '%!s(int=4)', got '%!s(int=3905)'\n    --- FAIL: TestModp/test_num__6 (0.00s)\n\
    \        tmpxo2qv7vf_test.go:38: expected '%!s(int=3)', got '%!s(int=3905)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.015s\nFAIL\n"
  timestamp: 1660075120
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n < 0 {\n        n *= -1\n    }\n    if n < p {\n        return n\n    }\n \
    \   if n == p {\n        return 1\n    }\n    if n > p {\n        return modp(n\
    \ - p, p)\n    }\n    return 0\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmp_06rsl8m_test.go:44: expected '%!s(int=2)', got '%!s(int=91)'\n  \
    \  --- FAIL: TestModp/test_num__2 (0.00s)\n        tmp_06rsl8m_test.go:44: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmp_06rsl8m_test.go:44: expected '%!s(int=8)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmp_06rsl8m_test.go:44: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmp_06rsl8m_test.go:44: expected '%!s(int=4)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmp_06rsl8m_test.go:44: expected\
    \ '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\n\
    FAIL\n"
  timestamp: 1660075119
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n < 0 {\n        n *= -1\n    }\n    if n < p {\n        return n\n    }\n \
    \   if n == p {\n        return n\n    }\n    if n > p {\n        return modp(n-p,\
    \ p)\n    }\n    return 0\n}\n\nfunc TestModp(t *testing.T) {\n  candidate :=\
    \ modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmp66zqvcrh_test.go:44: expected '%!s(int=2)', got '%!s(int=91)'\n  \
    \  --- FAIL: TestModp/test_num__2 (0.00s)\n        tmp66zqvcrh_test.go:44: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmp66zqvcrh_test.go:44: expected '%!s(int=8)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmp66zqvcrh_test.go:44: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmp66zqvcrh_test.go:44: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmp66zqvcrh_test.go:44: expected\
    \ '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075120
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n    }\n\
    \    if p < 2 {\n        return modp(n - 1, p) % p\n    }\n    if p < 4 {\n  \
    \      return modp(n - 2, p) % p\n    }\n    if p < 8 {\n        return modp(n\
    \ - 4, p) % p\n    }\n    if p < 16 {\n        return modp(n - 8, p) % p\n   \
    \ }\n    if p < 32 {\n        return modp(n - 16, p) % p\n    }\n    if p < 64\
    \ {\n        return modp(n - 32, p) % p\n    }\n    if p < 128 {\n        return\
    \ modp(n - 64, p) % p\n    }\n    if p < 256 {\n        return modp(n - 128, p)\
    \ % p\n    }\n    if p < 512 {\n        return modp(n - 256, p) % p\n    }\n \
    \   if p < 1024 {\n        return modp(n - 512, p) % p\n    }\n    if p < 2048\
    \ {\n        return modp(n - 1024, p) % p\n    }\n    if p < 4096 {\n        return\
    \ modp(n - 2048, p) % p\n    }\n    if p < 8192 {\n        return modp(n - 4096,\
    \ p) % p\n    }\n    if p < 16384 {\n        return modp(n - 8192, p) % p\n  \
    \  }\n    if p < 32768 {\n        return modp(n - 16384, p) % p\n    }\n    if\
    \ p < 65536 {\n        return modp(n - 32768, p) % p\n    }\n    if p < 131072\
    \ {\n        return modp(n - 65536, p) % p\n    }\n    if p < 262144 {\n     \
    \   return modp(n - 131072, p) % p\n    }\n    if p < 524288 {\n        return\
    \ modp(n - 262144, p) % p\n    }\n    if p < 1048576 {\n        return modp(n\
    \ - 524288, p) % p\n    }\n    if p < 2097152 {\n        return modp(n - 1048576,\
    \ p) % p\n    }\n    if p < 4194304 {\n        return modp(n - 2097152, p) % p\n\
    \    }\n    if p < 8388608 {\n        return modp(n - 4194304, p) % p\n    }\n\
    \    if p < 16777216 {\n        return modp(n - 8388608, p) % p\n    }\n    if\
    \ p < 33554432 {\n        return modp(n - 16777216, p) % p\n    }\n    if p <\
    \ 67108864 {\n        return modp(n - 33554432, p) % p\n    }\n    if p < 134217728\n\
    func TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101, 101),\
    \ expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n     { actual:\
    \ candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101), expected:\
    \ 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual: candidate(31,\
    \ 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpl109iy0q_test.go:95:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075119
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n    }\n\
    \    if p < 2 {\n        return modp(n - 1, p+1) + p\n    }\n    if p > 2 {\n\
    \        return modp(n - 1, p)\n    }\n    x := modp(n - 1, p-1)\n    y := modp(n\
    \ - 1, p)\n    return x % p + y\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpli2h8rl5_test.go:46: expected '%!s(int=3)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpli2h8rl5_test.go:46: expected\
    \ '%!s(int=2)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__2 (0.00s)\n\
    \        tmpli2h8rl5_test.go:46: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__3 (0.00s)\n        tmpli2h8rl5_test.go:46: expected\
    \ '%!s(int=8)', got '%!s(int=11)'\n    --- FAIL: TestModp/test_num__4 (0.00s)\n\
    \        tmpli2h8rl5_test.go:46: expected '%!s(int=1)', got '%!s(int=101)'\n \
    \   --- FAIL: TestModp/test_num__5 (0.00s)\n        tmpli2h8rl5_test.go:46: expected\
    \ '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestModp/test_num__6 (0.00s)\n\
    \        tmpli2h8rl5_test.go:46: expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075120
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n    }\n\
    \    return modp(n >> 1, p) + p\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmp15u6q3x1_test.go:38: expected '%!s(int=3)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestModp/test_num__1 (0.00s)\n        tmp15u6q3x1_test.go:38: expected\
    \ '%!s(int=2)', got '%!s(int=1111)'\n    --- FAIL: TestModp/test_num__2 (0.00s)\n\
    \        tmp15u6q3x1_test.go:38: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__3 (0.00s)\n        tmp15u6q3x1_test.go:38: expected\
    \ '%!s(int=8)', got '%!s(int=22)'\n    --- FAIL: TestModp/test_num__4 (0.00s)\n\
    \        tmp15u6q3x1_test.go:38: expected '%!s(int=1)', got '%!s(int=707)'\n \
    \   --- FAIL: TestModp/test_num__5 (0.00s)\n        tmp15u6q3x1_test.go:38: expected\
    \ '%!s(int=4)', got '%!s(int=25)'\n    --- FAIL: TestModp/test_num__6 (0.00s)\n\
    \        tmp15u6q3x1_test.go:38: expected '%!s(int=3)', got '%!s(int=25)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075116
- exit_code: null
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    x :=\
    \ n\n    for {\n        x -= (x >> 1) & p\n        if x == 0 {\n            break\n\
    \        }\n    }\n    return x\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075133
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n    }\n\
    \    if p < 2 {\n        return modp(n - 1, p) + p\n    }\n    if p < 3 {\n  \
    \      return modp(n - 2, p) + p\n    }\n    return modp(n - 3, p) + p\n}\n\n\
    func TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101, 101),\
    \ expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n     { actual:\
    \ candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101), expected:\
    \ 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual: candidate(31,\
    \ 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpbhlm08wc_test.go:44: expected '%!s(int=3)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpbhlm08wc_test.go:44: expected\
    \ '%!s(int=2)', got '%!s(int=37067)'\n    --- FAIL: TestModp/test_num__2 (0.00s)\n\
    \        tmpbhlm08wc_test.go:44: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__3 (0.00s)\n        tmpbhlm08wc_test.go:44: expected\
    \ '%!s(int=8)', got '%!s(int=11)'\n    --- FAIL: TestModp/test_num__4 (0.00s)\n\
    \        tmpbhlm08wc_test.go:44: expected '%!s(int=1)', got '%!s(int=3434)'\n\
    \    --- FAIL: TestModp/test_num__5 (0.00s)\n        tmpbhlm08wc_test.go:44: expected\
    \ '%!s(int=4)', got '%!s(int=50)'\n    --- FAIL: TestModp/test_num__6 (0.00s)\n\
    \        tmpbhlm08wc_test.go:44: expected '%!s(int=3)', got '%!s(int=55)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075116
- exit_code: null
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    r :=\
    \ n\n    for {\n        if (r&1 != 0) || (r&p != 0) {\n            return r\n\
    \        }\n        r >>= 1\n    }\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075134
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n    }\n\
    \    if p < 2 {\n        return modp(n - 1, p) % p\n    }\n    if p > 2 {\n  \
    \      return modp(n - 2, p) % p\n    }\n    return modp(n - 1, p) % p\n}\n\n\
    func TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101, 101),\
    \ expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n     { actual:\
    \ candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101), expected:\
    \ 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual: candidate(31,\
    \ 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmp5lta22ds_test.go:44: expected '%!s(int=3)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmp5lta22ds_test.go:44: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__2 (0.00s)\n\
    \        tmp5lta22ds_test.go:44: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__3 (0.00s)\n        tmp5lta22ds_test.go:44: expected\
    \ '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__4 (0.00s)\n\
    \        tmp5lta22ds_test.go:44: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__5 (0.00s)\n        tmp5lta22ds_test.go:44: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__6 (0.00s)\n\
    \        tmp5lta22ds_test.go:44: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075118
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n    }\n\
    \    if p < 2 {\n        return modp(n >> 1, p+1) + 1\n    }\n    if p > 2 {\n\
    \        return modp(n >> 1, p+1) + modp(n >> 1, p-1)\n    }\n    return modp(n\
    \ >> 1, p+1) + modp(n >> 1, p-1)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpo3q_mp90_test.go:44: expected '%!s(int=3)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpo3q_mp90_test.go:44: expected\
    \ '%!s(int=2)', got '%!s(int=103424)'\n    --- FAIL: TestModp/test_num__2 (0.00s)\n\
    \        tmpo3q_mp90_test.go:44: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__3 (0.00s)\n        tmpo3q_mp90_test.go:44: expected\
    \ '%!s(int=8)', got '%!s(int=22)'\n    --- FAIL: TestModp/test_num__4 (0.00s)\n\
    \        tmpo3q_mp90_test.go:44: expected '%!s(int=1)', got '%!s(int=6464)'\n\
    \    --- FAIL: TestModp/test_num__5 (0.00s)\n        tmpo3q_mp90_test.go:44: expected\
    \ '%!s(int=4)', got '%!s(int=80)'\n    --- FAIL: TestModp/test_num__6 (0.00s)\n\
    \        tmpo3q_mp90_test.go:44: expected '%!s(int=3)', got '%!s(int=80)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075120
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n < 0 {\n        n *= -1\n    }\n    if n < p {\n        return n\n    }\n \
    \   if n == p {\n        return n\n    }\n    if n > p {\n        return modp(n\
    \ - p, p)\n    }\n    return 0\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmptt496y22_test.go:44: expected '%!s(int=2)', got '%!s(int=91)'\n  \
    \  --- FAIL: TestModp/test_num__2 (0.00s)\n        tmptt496y22_test.go:44: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmptt496y22_test.go:44: expected '%!s(int=8)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmptt496y22_test.go:44: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmptt496y22_test.go:44: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmptt496y22_test.go:44: expected\
    \ '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075116
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n    }\n\
    \    if p < 2 {\n        return modp(n >> 1, p+1) + 1\n    }\n    if p > 2 {\n\
    \        return modp(n >> 1, p+1) + modp(n >> 1, p)\n    }\n    return modp(n\
    \ >> 1, p+1) + modp(n >> 1, p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmp8ihwp1hi_test.go:44: expected '%!s(int=3)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestModp/test_num__1 (0.00s)\n        tmp8ihwp1hi_test.go:44: expected\
    \ '%!s(int=2)', got '%!s(int=108544)'\n    --- FAIL: TestModp/test_num__2 (0.00s)\n\
    \        tmp8ihwp1hi_test.go:44: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__3 (0.00s)\n        tmp8ihwp1hi_test.go:44: expected\
    \ '%!s(int=8)', got '%!s(int=23)'\n    --- FAIL: TestModp/test_num__4 (0.00s)\n\
    \        tmp8ihwp1hi_test.go:44: expected '%!s(int=1)', got '%!s(int=6656)'\n\
    \    --- FAIL: TestModp/test_num__5 (0.00s)\n        tmp8ihwp1hi_test.go:44: expected\
    \ '%!s(int=4)', got '%!s(int=112)'\n    --- FAIL: TestModp/test_num__6 (0.00s)\n\
    \        tmp8ihwp1hi_test.go:44: expected '%!s(int=3)', got '%!s(int=112)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075120
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n    }\n\
    \    if p < 2 {\n        return modp(n / 2, p)\n    }\n    if p < 3 {\n      \
    \  return modp(n / 2, p)\n    }\n    return modp(n / 2, p) + modp(n / 2, p - 1)\n\
    }\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpy_s0b_qi_test.go:44: expected '%!s(int=3)', got '%!s(int=9)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpy_s0b_qi_test.go:44: expected\
    \ '%!s(int=2)', got '%!s(int=98304)'\n    --- FAIL: TestModp/test_num__2 (0.00s)\n\
    \        tmpy_s0b_qi_test.go:44: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__3 (0.00s)\n        tmpy_s0b_qi_test.go:44: expected\
    \ '%!s(int=8)', got '%!s(int=21)'\n    --- FAIL: TestModp/test_num__4 (0.00s)\n\
    \        tmpy_s0b_qi_test.go:44: expected '%!s(int=1)', got '%!s(int=6272)'\n\
    \    --- FAIL: TestModp/test_num__5 (0.00s)\n        tmpy_s0b_qi_test.go:44: expected\
    \ '%!s(int=4)', got '%!s(int=47)'\n    --- FAIL: TestModp/test_num__6 (0.00s)\n\
    \        tmpy_s0b_qi_test.go:44: expected '%!s(int=3)', got '%!s(int=47)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.010s\nFAIL\n"
  timestamp: 1660075120
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n    }\n\
    \    if p < 2 {\n        return modp(n - 1, p+1) + p\n    }\n    return modp(n\
    \ - 1, p) + p\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpzahkflbn_test.go:41: expected '%!s(int=3)', got '%!s(int=15)'\n  \
    \  --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpzahkflbn_test.go:41: expected\
    \ '%!s(int=2)', got '%!s(int=111201)'\n    --- FAIL: TestModp/test_num__2 (0.00s)\n\
    \        tmpzahkflbn_test.go:41: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__3 (0.00s)\n        tmpzahkflbn_test.go:41: expected\
    \ '%!s(int=8)', got '%!s(int=33)'\n    --- FAIL: TestModp/test_num__4 (0.00s)\n\
    \        tmpzahkflbn_test.go:41: expected '%!s(int=1)', got '%!s(int=10100)'\n\
    \    --- FAIL: TestModp/test_num__5 (0.00s)\n        tmpzahkflbn_test.go:41: expected\
    \ '%!s(int=4)', got '%!s(int=150)'\n    --- FAIL: TestModp/test_num__6 (0.00s)\n\
    \        tmpzahkflbn_test.go:41: expected '%!s(int=3)', got '%!s(int=155)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075120
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n < 0 {\n        n *= -1\n    }\n    if n < p {\n        return n\n    }\n \
    \   if n == p {\n        return n\n    }\n    if n > p {\n        return modp(n-p,\
    \ p)\n    }\n    return 0\n}\n\nfunc TestModp(t *testing.T) {\n  candidate :=\
    \ modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmp66zqvcrh_test.go:44: expected '%!s(int=2)', got '%!s(int=91)'\n  \
    \  --- FAIL: TestModp/test_num__2 (0.00s)\n        tmp66zqvcrh_test.go:44: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmp66zqvcrh_test.go:44: expected '%!s(int=8)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmp66zqvcrh_test.go:44: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmp66zqvcrh_test.go:44: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmp66zqvcrh_test.go:44: expected\
    \ '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075120
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n < 0 {\n        n *= -1\n    }\n    if n < p {\n        return n\n    }\n \
    \   if n == p {\n        return n\n    }\n    if n > p {\n        return modp(n\
    \ - p, p)\n    }\n    return 0\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmptt496y22_test.go:44: expected '%!s(int=2)', got '%!s(int=91)'\n  \
    \  --- FAIL: TestModp/test_num__2 (0.00s)\n        tmptt496y22_test.go:44: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmptt496y22_test.go:44: expected '%!s(int=8)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmptt496y22_test.go:44: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmptt496y22_test.go:44: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmptt496y22_test.go:44: expected\
    \ '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075116
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n    }\n\
    \    if p < 2 {\n        return modp(n - 1, p) % p\n    }\n    if p > p {\n  \
    \      return modp(n - 1, p) % p\n    }\n    if p == 2 {\n        return modp(n\
    \ - 1, p) % p\n    }\n    if p == 1 {\n        return modp(n - 1, p) % p\n   \
    \ }\n    if p == 2 {\n        return modp(n - 1, p) % p\n    }\n    if p == 3\
    \ {\n        return modp(n - 1, p) % p\n    }\n    if p == 4 {\n        return\
    \ modp(n - 1, p) % p\n    }\n    if p == 5 {\n        return modp(n - 1, p) %\
    \ p\n    }\n    if p == 6 {\n        return modp(n - 1, p) % p\n    }\n    if\
    \ p == 7 {\n        return modp(n - 1, p) % p\n    }\n    if p == 8 {\n      \
    \  return modp(n - 1, p) % p\n    }\n    if p == 9 {\n        return modp(n -\
    \ 1, p) % p\n    }\n    if p == 10 {\n        return modp(n - 1, p) % p\n    }\n\
    \    if p == 11 {\n        return modp(n - 1, p) % p\n    }\n    if p == 12 {\n\
    \        return modp(n - 1, p) % p\n    }\n    if p == 13 {\n        return modp(n\
    \ - 1, p) % p\n    }\n    if p == 14 {\n        return modp(n - 1, p) % p\n  \
    \  }\n    if p == 15 {\n        return modp(n - 1, p) % p\n    }\n    if p ==\
    \ 16 {\n        return modp(n - 1, p) % p\n    }\n    if p == 17 {\n        return\
    \ modp(n - 1, p) % p\n    }\n    if p == 18 {\n        return modp(n - 1, p) %\
    \ p\n    }\n    if p == 19 {\n        return modp(n - 1, p) % p\n    }\n    if\
    \ p == 20 {\n        return modp(n - 1, p) % p\n    }\n    if p == 21 {\n    \
    \    return modp(n - 1, p) % p\n    }\n    if p == 22 {\n        return modp(n\
    \ - 1, p) % p\n    }\n    if p == 23 {\n        return modp(n - 1, p) % p\n  \
    \  }\n    if p == 24 {\n        return modp(n - 1, p) % p\n    }\n    if p ==\
    \ 25 {\n        return modp(n - 1, p) % p\n    }\n    if p == 26 {\n        return\
    \ modp(n - 1, p) % p\n    }\n    if p == 27 {\n        return modp(n - 1, p) %\
    \ p\n    }\n    if p == 28 {\n        return modp(n - 1, p) % p\n    }\n    if\
    \ p == 29 {\n        return modp(n - 1, p) % p\n\nfunc TestModp(t *testing.T)\
    \ {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5),\
    \ expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     {\
    \ actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmppopd53m0_test.go:112:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075120
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n    }\n\
    \    return modp(n >> 1, p) + p\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmp15u6q3x1_test.go:38: expected '%!s(int=3)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestModp/test_num__1 (0.00s)\n        tmp15u6q3x1_test.go:38: expected\
    \ '%!s(int=2)', got '%!s(int=1111)'\n    --- FAIL: TestModp/test_num__2 (0.00s)\n\
    \        tmp15u6q3x1_test.go:38: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__3 (0.00s)\n        tmp15u6q3x1_test.go:38: expected\
    \ '%!s(int=8)', got '%!s(int=22)'\n    --- FAIL: TestModp/test_num__4 (0.00s)\n\
    \        tmp15u6q3x1_test.go:38: expected '%!s(int=1)', got '%!s(int=707)'\n \
    \   --- FAIL: TestModp/test_num__5 (0.00s)\n        tmp15u6q3x1_test.go:38: expected\
    \ '%!s(int=4)', got '%!s(int=25)'\n    --- FAIL: TestModp/test_num__6 (0.00s)\n\
    \        tmp15u6q3x1_test.go:38: expected '%!s(int=3)', got '%!s(int=25)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075116
- exit_code: null
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    x :=\
    \ n\n    for {\n        if x & 1 != 0 {\n            x >>= 1\n            x ^=\
    \ p\n        }\n        if x == 0 {\n            break\n        }\n        x >>=\
    \ 1\n    }\n    return x\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual:\
    \ candidate(1101, 101), expected: 2 },\n     { actual: candidate(0, 101), expected:\
    \ 1 },\n     { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100,\
    \ 101), expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n    \
    \ { actual: candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075134
- exit_code: null
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n    }\n\
    \    if p < 2 {\n        return modp(n - 1, p) + p\n    }\n    return modp(n -\
    \ 1, p) + modp(n - 2, p) % p\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075133
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    r :=\
    \ 1\n    for i := 0; i < n; i++ {\n        r = (r * p) % p\n    }\n    return\
    \ r\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpbeu23owe_test.go:36: expected '%!s(int=3)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpbeu23owe_test.go:36: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpbeu23owe_test.go:36: expected '%!s(int=8)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpbeu23owe_test.go:36: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpbeu23owe_test.go:36: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpbeu23owe_test.go:36: expected\
    \ '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075120
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    x :=\
    \ n\n    for {\n        if x % p == 0 {\n            return x\n        }\n   \
    \     x /= p\n    }\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual:\
    \ candidate(1101, 101), expected: 2 },\n     { actual: candidate(0, 101), expected:\
    \ 1 },\n     { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100,\
    \ 101), expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n    \
    \ { actual: candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpu3woh609_test.go:38: expected '%!s(int=3)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpu3woh609_test.go:38: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__2 (0.00s)\n\
    \        tmpu3woh609_test.go:38: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__3 (0.00s)\n        tmpu3woh609_test.go:38: expected\
    \ '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__4 (0.00s)\n\
    \        tmpu3woh609_test.go:38: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__5 (0.00s)\n        tmpu3woh609_test.go:38: expected\
    \ '%!s(int=4)', got '%!s(int=30)'\n    --- FAIL: TestModp/test_num__6 (0.00s)\n\
    \        tmpu3woh609_test.go:38: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075116
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n    }\n\
    \    return modp(n / 2, p) + p\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpsfs0hyrr_test.go:38: expected '%!s(int=3)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpsfs0hyrr_test.go:38: expected\
    \ '%!s(int=2)', got '%!s(int=1111)'\n    --- FAIL: TestModp/test_num__2 (0.00s)\n\
    \        tmpsfs0hyrr_test.go:38: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__3 (0.00s)\n        tmpsfs0hyrr_test.go:38: expected\
    \ '%!s(int=8)', got '%!s(int=22)'\n    --- FAIL: TestModp/test_num__4 (0.00s)\n\
    \        tmpsfs0hyrr_test.go:38: expected '%!s(int=1)', got '%!s(int=707)'\n \
    \   --- FAIL: TestModp/test_num__5 (0.00s)\n        tmpsfs0hyrr_test.go:38: expected\
    \ '%!s(int=4)', got '%!s(int=25)'\n    --- FAIL: TestModp/test_num__6 (0.00s)\n\
    \        tmpsfs0hyrr_test.go:38: expected '%!s(int=3)', got '%!s(int=25)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075116
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n < 0 {\n        n *= -1\n    }\n    if n < p {\n        return n\n    }\n \
    \   return p - n\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual:\
    \ candidate(1101, 101), expected: 2 },\n     { actual: candidate(0, 101), expected:\
    \ 1 },\n     { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100,\
    \ 101), expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n    \
    \ { actual: candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmpqgir1tow_test.go:38: expected '%!s(int=2)', got '%!s(int=-1000)'\n\
    \    --- FAIL: TestModp/test_num__2 (0.00s)\n        tmpqgir1tow_test.go:38: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpqgir1tow_test.go:38: expected '%!s(int=8)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpqgir1tow_test.go:38: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpqgir1tow_test.go:38: expected '%!s(int=4)', got '%!s(int=-25)'\n \
    \   --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpqgir1tow_test.go:38: expected\
    \ '%!s(int=3)', got '%!s(int=-26)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660075119
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n < 0 {\n        n *= -1\n    }\n    if n < p {\n        return n\n    }\n \
    \   if n == p {\n        return n\n    }\n    if n > p {\n        return modp(n-p,\
    \ p)\n    }\n    return 0\n}\n\nfunc TestModp(t *testing.T) {\n  candidate :=\
    \ modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmp66zqvcrh_test.go:44: expected '%!s(int=2)', got '%!s(int=91)'\n  \
    \  --- FAIL: TestModp/test_num__2 (0.00s)\n        tmp66zqvcrh_test.go:44: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmp66zqvcrh_test.go:44: expected '%!s(int=8)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmp66zqvcrh_test.go:44: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmp66zqvcrh_test.go:44: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmp66zqvcrh_test.go:44: expected\
    \ '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075120
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n    }\n\
    \    if p < 2 {\n        return modp(n - 1, p) % p\n    }\n    if p < 3 {\n  \
    \      return modp(n - 2, p) % p\n    }\n    if p < 4 {\n        return modp(n\
    \ - 3, p) % p\n    }\n    if p < 5 {\n        return modp(n - 4, p) % p\n    }\n\
    \    if p < 6 {\n        return modp(n - 5, p) % p\n    }\n    if p < 7 {\n  \
    \      return modp(n - 6, p) % p\n    }\n    if p < 8 {\n        return modp(n\
    \ - 7, p) % p\n    }\n    if p < 9 {\n        return modp(n - 8, p) % p\n    }\n\
    \    if p < 10 {\n        return modp(n - 9, p) % p\n    }\n    if p < 11 {\n\
    \        return modp(n - 10, p) % p\n    }\n    if p < 12 {\n        return modp(n\
    \ - 11, p) % p\n    }\n    if p < 13 {\n        return modp(n - 12, p) % p\n \
    \   }\n    if p < 14 {\n        return modp(n - 13, p) % p\n    }\n    if p <\
    \ 15 {\n        return modp(n - 14, p) % p\n    }\n    if p < 16 {\n        return\
    \ modp(n - 15, p) % p\n    }\n    if p < 17 {\n        return modp(n - 16, p)\
    \ % p\n    }\n    if p < 18 {\n        return modp(n - 17, p) % p\n    }\n   \
    \ if p < 19 {\n        return modp(n - 18, p) % p\n    }\n    if p < 20 {\n  \
    \      return modp(n - 19, p) % p\n    }\n    if p < 21 {\n        return modp(n\
    \ - 20, p) % p\n    }\n    if p < 22 {\n        return modp(n - 21, p) % p\n \
    \   }\n    if p < 23 {\n        return modp(n - 22, p) % p\n    }\n    if p <\
    \ 24 {\n        return modp(n - 23, p) % p\n    }\n    if p < 25 {\n        return\
    \ modp(n - 24, p) % p\n    }\n    if p < 26 {\n        return modp(n - 25, p)\
    \ % p\n    }\n    if p < 27 {\n        return modp(n - 26, p) % p\n    }\n   \
    \ if p < 28 {\n        return modp(n - 27, p) % p\n    }\n    if p < 29 {\n  \
    \      return modp(n - 28, p) % p\n    }\n    if p < 30 {\n        return modp(n\
    \ - 29, p) % p\n    }\n    if p < 31 {\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmprjc_88qj_test.go:105:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075114
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n    }\n\
    \    if p < 2 {\n        return modp(n >> 1, p+1) + 1\n    }\n    if p < 4 {\n\
    \        return modp(n >> 2, p+1) + 1\n    }\n    if p < 8 {\n        return modp(n\
    \ >> 3, p+1) + 1\n    }\n    if p < 16 {\n        return modp(n >> 4, p+1) + 1\n\
    \    }\n    if p < 32 {\n        return modp(n >> 5, p+1) + 1\n    }\n    if p\
    \ < 64 {\n        return modp(n >> 6, p+1) + 1\n    }\n    if p < 128 {\n    \
    \    return modp(n >> 7, p+1) + 1\n    }\n    if p < 256 {\n        return modp(n\
    \ >> 8, p+1) + 1\n    }\n    if p < 512 {\n        return modp(n >> 9, p+1) +\
    \ 1\n    }\n    if p < 1024 {\n        return modp(n >> 10, p+1) + 1\n    }\n\
    \    if p < 2048 {\n        return modp(n >> 11, p+1) + 1\n    }\n    if p < 4096\
    \ {\n        return modp(n >> 12, p+1) + 1\n    }\n    if p < 8192 {\n       \
    \ return modp(n >> 13, p+1) + 1\n    }\n    if p < 16384 {\n        return modp(n\
    \ >> 14, p+1) + 1\n    }\n    if p < 32768 {\n        return modp(n >> 15, p+1)\
    \ + 1\n    }\n    if p < 65536 {\n        return modp(n >> 16, p+1) + 1\n    }\n\
    \    if p < 131072 {\n        return modp(n >> 17, p+1) + 1\n    }\n    if p <\
    \ 262144 {\n        return modp(n >> 18, p+1) + 1\n    }\n    if p < 524288 {\n\
    \        return modp(n >> 19, p+1) + 1\n    }\n    if p < 1048576 {\n        return\
    \ modp(n >> 20, p+1) + 1\n    }\n    if p < 2097152 {\n        return modp(n >>\
    \ 21, p+1) + 1\n    }\n    if p < 4194304 {\n        return modp(n >> 22, p+1)\
    \ + 1\n    }\n    if p < 8388608 {\n        return modp(n >> 23, p+1) + 1\n  \
    \  }\n    if p < 16777216 {\n        return modp(n >> 24, p+1) + 1\n    }\n  \
    \  if p < 33554432 {\n        return modp(n >> 25, p+1) + 1\n    }\n    if p <\
    \ 67\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1cc1tvtc_test.go:92:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075120
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n    }\n\
    \    return modp(n >> 1, p) + p\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmp15u6q3x1_test.go:38: expected '%!s(int=3)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestModp/test_num__1 (0.00s)\n        tmp15u6q3x1_test.go:38: expected\
    \ '%!s(int=2)', got '%!s(int=1111)'\n    --- FAIL: TestModp/test_num__2 (0.00s)\n\
    \        tmp15u6q3x1_test.go:38: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__3 (0.00s)\n        tmp15u6q3x1_test.go:38: expected\
    \ '%!s(int=8)', got '%!s(int=22)'\n    --- FAIL: TestModp/test_num__4 (0.00s)\n\
    \        tmp15u6q3x1_test.go:38: expected '%!s(int=1)', got '%!s(int=707)'\n \
    \   --- FAIL: TestModp/test_num__5 (0.00s)\n        tmp15u6q3x1_test.go:38: expected\
    \ '%!s(int=4)', got '%!s(int=25)'\n    --- FAIL: TestModp/test_num__6 (0.00s)\n\
    \        tmp15u6q3x1_test.go:38: expected '%!s(int=3)', got '%!s(int=25)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075116
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n    }\n\
    \    if p < 2 {\n        return modp(n - 1, p) + p\n    }\n    if p < 4 {\n  \
    \      return modp(n - 1, modp(p - 2, p)) + p\n    }\n    if p < 8 {\n       \
    \ return modp(n - 1, modp(p - 4, p)) + modp(p - 2, p)\n    }\n    if p < 16 {\n\
    \        return modp(n - 1, modp(p - 8, p)) + modp(p - 4, p)\n    }\n    if p\
    \ < 32 {\n        return modp(n - 1, modp(p - 16, p)) + modp(p - 8, p)\n    }\n\
    \    if p < 64 {\n        return modp(n - 1, modp(p - 32, p)) + modp(p - 16, p)\n\
    \    }\n    if p < 128 {\n        return modp(n - 1, modp(p - 64, p)) + modp(p\
    \ - 32, p)\n    }\n    if p < 256 {\n        return modp(n - 1, modp(p - 128,\
    \ p)) + modp(p - 64, p)\n    }\n    if p < 512 {\n        return modp(n - 1, modp(p\
    \ - 256, p)) + modp(p - 128, p)\n    }\n    if p < 1024 {\n        return modp(n\
    \ - 1, modp(p - 512, p)) + modp(p - 256, p)\n    }\n    if p < 2048 {\n      \
    \  return modp(n - 1, modp(p - 1024, p)) + modp(p - 512, p)\n    }\n    if p <\
    \ 4096 {\n        return modp(n - 1, modp(p - 2048, p)) + modp(p - 1024, p)\n\
    \    }\n    if p < 8192 {\n        return modp(n - 1, modp(p - 4096, p)) + modp(p\
    \ - 2048, p)\n    }\n    if p < 16384 {\n        return modp(n - 1, modp(p - 8192,\
    \ p)) + modp(p - 4096, p)\n    }\n    if p < 32768 {\n        return modp(n -\
    \ 1, modp(p - 16384, p)) + modp(p - 8192, p)\n    }\n    if p < 65536 {\n    \
    \    return modp(n - 1, modp(p - 32768, p)) + modp(p - 16384, p)\n    }\n    if\
    \ p < 131072 {\n        return modp(n - 1, modp(p - 65536, p)) + modp(p - 32768,\
    \ p)\n    }\n    if p < 262144 {\n        return modp(n - 1, modp(p - 131072,\
    \ p)) + modp(p - 65536, p)\n    }\n    if p < 524288 {\n        return modp(n\
    \ - 1, modp(p - 262144, p)) + modp(p - 131072, p)\n    }\n    if p < 1048576\n\
    func TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101, 101),\
    \ expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n     { actual:\
    \ candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101), expected:\
    \ 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual: candidate(31,\
    \ 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqpmahe_u_test.go:74:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075120
- exit_code: null
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n    }\n\
    \    if p < 2 {\n        return modp(n - 1, p) + p\n    }\n    return modp(n -\
    \ 1, p) + modp(n - 2, p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual:\
    \ candidate(1101, 101), expected: 2 },\n     { actual: candidate(0, 101), expected:\
    \ 1 },\n     { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100,\
    \ 101), expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n    \
    \ { actual: candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075135
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n < 0 {\n        n *= -1\n    }\n    if n < p {\n        return n\n    }\n \
    \   if n == p {\n        return n\n    }\n    if n == 0 {\n        return 0\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ p\n    }\n    if n > p {\n        return modp(n - p, p)\n    }\n    return modp(n\
    \ + p - 1, p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmpj9a81i2h_test.go:53: expected '%!s(int=2)', got '%!s(int=91)'\n  \
    \  --- FAIL: TestModp/test_num__2 (0.00s)\n        tmpj9a81i2h_test.go:53: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpj9a81i2h_test.go:53: expected '%!s(int=8)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpj9a81i2h_test.go:53: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpj9a81i2h_test.go:53: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpj9a81i2h_test.go:53: expected\
    \ '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\n\
    FAIL\n"
  timestamp: 1660075121
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n    }\n\
    \    if p < 2 {\n        return modp(n - 1, p) + p\n    }\n    if p > 2 {\n  \
    \      return modp(n - 1, p) - p\n    }\n    return modp(n - 1, p) + modp(n -\
    \ 1, p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpvlczv28c_test.go:44: expected '%!s(int=3)', got '%!s(int=-5)'\n  \
    \  --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpvlczv28c_test.go:44: expected\
    \ '%!s(int=2)', got '%!s(int=-110999)'\n    --- FAIL: TestModp/test_num__2 (0.00s)\n\
    \        tmpvlczv28c_test.go:44: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__3 (0.00s)\n        tmpvlczv28c_test.go:44: expected\
    \ '%!s(int=8)', got '%!s(int=-11)'\n    --- FAIL: TestModp/test_num__4 (0.00s)\n\
    \        tmpvlczv28c_test.go:44: expected '%!s(int=1)', got '%!s(int=-9898)'\n\
    \    --- FAIL: TestModp/test_num__5 (0.00s)\n        tmpvlczv28c_test.go:44: expected\
    \ '%!s(int=4)', got '%!s(int=-140)'\n    --- FAIL: TestModp/test_num__6 (0.00s)\n\
    \        tmpvlczv28c_test.go:44: expected '%!s(int=3)', got '%!s(int=-145)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075121
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n    }\n\
    \    if p < 2 {\n        return modp(n - 1, p) + p\n    }\n    if p > 2 {\n  \
    \      return modp(n - 1, p) - p\n    }\n    return modp(n - 1, p) + modp(n -\
    \ 1, p) - p\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmprkts8ajf_test.go:44: expected '%!s(int=3)', got '%!s(int=-5)'\n  \
    \  --- FAIL: TestModp/test_num__1 (0.00s)\n        tmprkts8ajf_test.go:44: expected\
    \ '%!s(int=2)', got '%!s(int=-110999)'\n    --- FAIL: TestModp/test_num__2 (0.00s)\n\
    \        tmprkts8ajf_test.go:44: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__3 (0.00s)\n        tmprkts8ajf_test.go:44: expected\
    \ '%!s(int=8)', got '%!s(int=-11)'\n    --- FAIL: TestModp/test_num__4 (0.00s)\n\
    \        tmprkts8ajf_test.go:44: expected '%!s(int=1)', got '%!s(int=-9898)'\n\
    \    --- FAIL: TestModp/test_num__5 (0.00s)\n        tmprkts8ajf_test.go:44: expected\
    \ '%!s(int=4)', got '%!s(int=-140)'\n    --- FAIL: TestModp/test_num__6 (0.00s)\n\
    \        tmprkts8ajf_test.go:44: expected '%!s(int=3)', got '%!s(int=-145)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075121
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n    }\n\
    \    if p < 2 {\n        return modp(n - 1, p) + p\n    }\n    if p < 3 {\n  \
    \      return modp(n - 1, p) + p\n    }\n    if p < 4 {\n        return modp(n\
    \ - 1, p) + p\n    }\n    if p < 5 {\n        return modp(n - 1, p) + p\n    }\n\
    \    if p < 6 {\n        return modp(n - 1, p) + p\n    }\n    if p < 7 {\n  \
    \      return modp(n - 1, p) + p\n    }\n    if p < 8 {\n        return modp(n\
    \ - 1, p) + p\n    }\n    if p < 9 {\n        return modp(n - 1, p) + p\n    }\n\
    \    if p < 10 {\n        return modp(n - 1, p) + p\n    }\n    if p < 11 {\n\
    \        return modp(n - 1, p) + p\n    }\n    if p < 12 {\n        return modp(n\
    \ - 1, p) + p\n    }\n    if p < 13 {\n        return modp(n - 1, p) + p\n   \
    \ }\n    if p < 14 {\n        return modp(n - 1, p) + p\n    }\n    if p < 15\
    \ {\n        return modp(n - 1, p) + p\n    }\n    if p < 16 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p < 17 {\n        return modp(n - 1, p) +\
    \ p\n    }\n    if p < 18 {\n        return modp(n - 1, p) + p\n    }\n    if\
    \ p < 19 {\n        return modp(n - 1, p) + p\n    }\n    if p < 20 {\n      \
    \  return modp(n - 1, p) + p\n    }\n    if p < 21 {\n        return modp(n -\
    \ 1, p) + p\n    }\n    if p < 22 {\n        return modp(n - 1, p) + p\n    }\n\
    \    if p < 23 {\n        return modp(n - 1, p) + p\n    }\n    if p < 24 {\n\
    \        return modp(n - 1, p) + p\n    }\n    if p < 25 {\n        return modp(n\
    \ - 1, p) + p\n    }\n    if p < 26 {\n        return modp(n - 1, p) + p\n   \
    \ }\n    if p < 27 {\n        return modp(n - 1, p) + p\n    }\n    if p < 28\
    \ {\n        return modp(n - 1, p) + p\n    }\n    if p < 29 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p < 30 {\n        return modp(n - 1, p) +\
    \ p\n    }\n    if p < 31 {\n        return modp(n - 1, p) + p\n    }\n    if\
    \ p < 32 {\n        return modp(n - 1, p) + p\n    }\n    if p \nfunc TestModp(t\
    \ *testing.T) {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 5), expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n  \
    \   { actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpuk4w_7jz_test.go:110:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075121
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    x :=\
    \ n\n    for {\n        if x & 1 == 0 {\n            return x\n        }\n   \
    \     x >>= 1\n    }\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual:\
    \ candidate(1101, 101), expected: 2 },\n     { actual: candidate(0, 101), expected:\
    \ 1 },\n     { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100,\
    \ 101), expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n    \
    \ { actual: candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmp62raivsq_test.go:38: expected '%!s(int=3)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmp62raivsq_test.go:38: expected\
    \ '%!s(int=2)', got '%!s(int=550)'\n    --- FAIL: TestModp/test_num__2 (0.00s)\n\
    \        tmp62raivsq_test.go:38: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__3 (0.00s)\n        tmp62raivsq_test.go:38: expected\
    \ '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__4 (0.00s)\n\
    \        tmp62raivsq_test.go:38: expected '%!s(int=1)', got '%!s(int=100)'\n \
    \   --- FAIL: TestModp/test_num__5 (0.00s)\n        tmp62raivsq_test.go:38: expected\
    \ '%!s(int=4)', got '%!s(int=30)'\n    --- FAIL: TestModp/test_num__6 (0.00s)\n\
    \        tmp62raivsq_test.go:38: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075121
- exit_code: null
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    r :=\
    \ n\n    for {\n        if (r&1 != 0 && r&p != 0) {\n            return r&-p\n\
    \        }\n        r >>= 1\n    }\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075135
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n < 0 {\n        n *= -1\n    }\n    if n < p {\n        return n\n    }\n \
    \   return n - p\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual:\
    \ candidate(1101, 101), expected: 2 },\n     { actual: candidate(0, 101), expected:\
    \ 1 },\n     { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100,\
    \ 101), expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n    \
    \ { actual: candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmpbhf_d11s_test.go:38: expected '%!s(int=2)', got '%!s(int=1000)'\n\
    \    --- FAIL: TestModp/test_num__2 (0.00s)\n        tmpbhf_d11s_test.go:38: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpbhf_d11s_test.go:38: expected '%!s(int=8)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpbhf_d11s_test.go:38: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpbhf_d11s_test.go:38: expected '%!s(int=4)', got '%!s(int=25)'\n  \
    \  --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpbhf_d11s_test.go:38: expected\
    \ '%!s(int=3)', got '%!s(int=26)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075121
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n    }\n\
    \    if p < 2 {\n        return modp(n - 1, p) + p\n    }\n    if p < 3 {\n  \
    \      return modp(n - 2, p) + p\n    }\n    if p < 4 {\n        return modp(n\
    \ - 3, p) + p\n    }\n    if p < 5 {\n        return modp(n - 4, p) + p\n    }\n\
    \    if p < 6 {\n        return modp(n - 5, p) + p\n    }\n    if p < 7 {\n  \
    \      return modp(n - 6, p) + p\n    }\n    if p < 8 {\n        return modp(n\
    \ - 7, p) + p\n    }\n    if p < 9 {\n        return modp(n - 8, p) + p\n    }\n\
    \    if p < 10 {\n        return modp(n - 9, p) + p\n    }\n    if p < 11 {\n\
    \        return modp(n - 10, p) + p\n    }\n    if p < 12 {\n        return modp(n\
    \ - 11, p) + p\n    }\n    if p < 13 {\n        return modp(n - 12, p) + p\n \
    \   }\n    if p < 14 {\n        return modp(n - 13, p) + p\n    }\n    if p <\
    \ 15 {\n        return modp(n - 14, p) + p\n    }\n    if p < 16 {\n        return\
    \ modp(n - 15, p) + p\n    }\n    if p < 17 {\n        return modp(n - 16, p)\
    \ + p\n    }\n    if p < 18 {\n        return modp(n - 17, p) + p\n    }\n   \
    \ if p < 19 {\n        return modp(n - 18, p) + p\n    }\n    if p < 20 {\n  \
    \      return modp(n - 19, p) + p\n    }\n    if p < 21 {\n        return modp(n\
    \ - 20, p) + p\n    }\n    if p < 22 {\n        return modp(n - 21, p) + p\n \
    \   }\n    if p < 23 {\n        return modp(n - 22, p) + p\n    }\n    if p <\
    \ 24 {\n        return modp(n - 23, p) + p\n    }\n    if p < 25 {\n        return\
    \ modp(n - 24, p) + p\n    }\n    if p < 26 {\n        return modp(n - 25, p)\
    \ + p\n    }\n    if p < 27 {\n        return modp(n - 26, p) + p\n    }\n   \
    \ if p < 28 {\n        return modp(n - 27, p) + p\n    }\n    if p < 29 {\n  \
    \      return modp(n - 28, p) + p\n    }\n    if p < 30 {\n        return modp(n\
    \ - 29, p) + p\n    }\n    if p < 31 {\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp49ew5d42_test.go:105:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075117
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n < 0 {\n        n *= -1\n    }\n    if n < p {\n        return n\n    }\n \
    \   if n == p {\n        return n\n    }\n    if n > p {\n        return modp(n\
    \ - p, p)\n    }\n    return 0\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmptt496y22_test.go:44: expected '%!s(int=2)', got '%!s(int=91)'\n  \
    \  --- FAIL: TestModp/test_num__2 (0.00s)\n        tmptt496y22_test.go:44: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmptt496y22_test.go:44: expected '%!s(int=8)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmptt496y22_test.go:44: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmptt496y22_test.go:44: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmptt496y22_test.go:44: expected\
    \ '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075116
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n    }\n\
    \    if p < 2 {\n        return modp(n - 1, p) + p\n    }\n    if p < 3 {\n  \
    \      return modp(n - 2, p) + p\n    }\n    return modp(n - 3, p) + p\n}\n\n\
    func TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101, 101),\
    \ expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n     { actual:\
    \ candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101), expected:\
    \ 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual: candidate(31,\
    \ 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpbhlm08wc_test.go:44: expected '%!s(int=3)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpbhlm08wc_test.go:44: expected\
    \ '%!s(int=2)', got '%!s(int=37067)'\n    --- FAIL: TestModp/test_num__2 (0.00s)\n\
    \        tmpbhlm08wc_test.go:44: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__3 (0.00s)\n        tmpbhlm08wc_test.go:44: expected\
    \ '%!s(int=8)', got '%!s(int=11)'\n    --- FAIL: TestModp/test_num__4 (0.00s)\n\
    \        tmpbhlm08wc_test.go:44: expected '%!s(int=1)', got '%!s(int=3434)'\n\
    \    --- FAIL: TestModp/test_num__5 (0.00s)\n        tmpbhlm08wc_test.go:44: expected\
    \ '%!s(int=4)', got '%!s(int=50)'\n    --- FAIL: TestModp/test_num__6 (0.00s)\n\
    \        tmpbhlm08wc_test.go:44: expected '%!s(int=3)', got '%!s(int=55)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075116
- exit_code: null
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    x :=\
    \ n\n    for {\n        if x < (p / 2) {\n            x <<= 1\n        } else\
    \ {\n            x >>= 1\n        }\n        if x == 0 {\n            break\n\
    \        }\n    }\n    return x\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075131
- exit_code: null
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    x :=\
    \ n\n    for {\n        x -= (x >> 1) & p\n        if x == 0 {\n            break\n\
    \        }\n    }\n    return x\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075133
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n < 0 {\n        n *= -1\n    }\n    if n < p {\n        return n\n    }\n \
    \   if n == p {\n        return 1\n    }\n    if n < p {\n        return modp(n\
    \ - p, p)\n    }\n    return modp(n - p, p) + p\n}\n\nfunc TestModp(t *testing.T)\
    \ {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5),\
    \ expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     {\
    \ actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmpkcknfd3q_test.go:44: expected '%!s(int=2)', got '%!s(int=1101)'\n\
    \    --- FAIL: TestModp/test_num__2 (0.00s)\n        tmpkcknfd3q_test.go:44: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpkcknfd3q_test.go:44: expected '%!s(int=8)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpkcknfd3q_test.go:44: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpkcknfd3q_test.go:44: expected '%!s(int=4)', got '%!s(int=26)'\n  \
    \  --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpkcknfd3q_test.go:44: expected\
    \ '%!s(int=3)', got '%!s(int=31)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660075118
- exit_code: null
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n    }\n\
    \    if p < 2 {\n        return modp(n - 1, p) + p\n    }\n    return modp(n -\
    \ 1, p) + modp(n - 2, p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual:\
    \ candidate(1101, 101), expected: 2 },\n     { actual: candidate(0, 101), expected:\
    \ 1 },\n     { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100,\
    \ 101), expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n    \
    \ { actual: candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075135
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n == 0 {\n        return 0\n    }\n    if p == 0 {\n        return n\n    }\n\
    \    if p == 1 {\n        return n\n    }\n    if n == 1 {\n        return p\n\
    \    }\n    return modp(n >> 1, p) + p\n}\n\nfunc TestModp(t *testing.T) {\n \
    \ candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5), expected:\
    \ 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmp1g04l1kk_test.go:44: expected '%!s(int=3)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestModp/test_num__1 (0.00s)\n        tmp1g04l1kk_test.go:44: expected\
    \ '%!s(int=2)', got '%!s(int=1111)'\n    --- FAIL: TestModp/test_num__2 (0.00s)\n\
    \        tmp1g04l1kk_test.go:44: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__3 (0.00s)\n        tmp1g04l1kk_test.go:44: expected\
    \ '%!s(int=8)', got '%!s(int=22)'\n    --- FAIL: TestModp/test_num__4 (0.00s)\n\
    \        tmp1g04l1kk_test.go:44: expected '%!s(int=1)', got '%!s(int=707)'\n \
    \   --- FAIL: TestModp/test_num__5 (0.00s)\n        tmp1g04l1kk_test.go:44: expected\
    \ '%!s(int=4)', got '%!s(int=25)'\n    --- FAIL: TestModp/test_num__6 (0.00s)\n\
    \        tmp1g04l1kk_test.go:44: expected '%!s(int=3)', got '%!s(int=25)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075121
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n    }\n\
    \    if p == 0 {\n        return modp(n - 1, p-1)\n    }\n    if p == 1 {\n  \
    \      return modp(n - 1, p)\n    }\n    if p == 2 {\n        return modp(n -\
    \ 1, p)\n    }\n    if p == 3 {\n        return modp(n - 1, p)\n    }\n    if\
    \ p == 4 {\n        return modp(n - 1, p)\n    }\n    if p == 5 {\n        return\
    \ modp(n - 1, p)\n    }\n    if p == 6 {\n        return modp(n - 1, p)\n    }\n\
    \    if p == 7 {\n        return modp(n - 1, p)\n    }\n    if p == 8 {\n    \
    \    return modp(n - 1, p)\n    }\n    if p == 9 {\n        return modp(n - 1,\
    \ p)\n    }\n    if p == 10 {\n        return modp(n - 1, p)\n    }\n    if p\
    \ == 11 {\n        return modp(n - 1, p)\n    }\n    if p == 12 {\n        return\
    \ modp(n - 1, p)\n    }\n    if p == 13 {\n        return modp(n - 1, p)\n   \
    \ }\n    if p == 14 {\n        return modp(n - 1, p)\n    }\n    if p == 15 {\n\
    \        return modp(n - 1, p)\n    }\n    if p == 16 {\n        return modp(n\
    \ - 1, p)\n    }\n    if p == 17 {\n        return modp(n - 1, p)\n    }\n   \
    \ if p == 18 {\n        return modp(n - 1, p)\n    }\n    if p == 19 {\n     \
    \   return modp(n - 1, p)\n    }\n    if p == 20 {\n        return modp(n - 1,\
    \ p)\n    }\n    if p == 21 {\n        return modp(n - 1, p)\n    }\n    if p\
    \ == 22 {\n        return modp(n - 1, p)\n    }\n    if p == 23 {\n        return\
    \ modp(n - 1, p)\n    }\n    if p == 24 {\n        return modp(n - 1, p)\n   \
    \ }\n    if p == 25 {\n        return modp(n - 1, p)\n    }\n    if p == 26 {\n\
    \        return modp(n - 1, p)\n    }\n    if p == 27 {\n        return modp(n\
    \ - 1, p)\n    }\n    if p == 28 {\n        return modp(n - 1, p)\n    }\n   \
    \ if p == 29 {\n        return modp(n - 1, p)\n    }\n    if p == 30 {\n     \
    \   return modp(n - 1, p)\n    }\n    if p == 31 {\n        return modp(n - 1,\
    \ p)\n    }\n    if p == 32 {\n        return modp(n - 1, p)\n    }\n    if p\
    \ == 33 {\n        return modp(n - 1, p)\n    }\n    if \nfunc TestModp(t *testing.T)\
    \ {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5),\
    \ expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     {\
    \ actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwkgiok4m_test.go:119:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075121
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n    }\n\
    \    if p < 2 {\n        return modp(n - 1, p) + p\n    }\n    if p < 3 {\n  \
    \      return modp(n - 1, p) + modp(n - 2, p)\n    }\n    if p < 4 {\n       \
    \ return modp(n - 1, p) + modp(n - 2, p) + modp(n - 3, p)\n    }\n    if p < 5\
    \ {\n        return modp(n - 1, p) + modp(n - 2, p) + modp(n - 3, p) + modp(n\
    \ - 4, p)\n    }\n    if p < 6 {\n        return modp(n - 1, p) + modp(n - 2,\
    \ p) + modp(n - 3, p) + modp(n - 4, p) + modp(n - 5, p)\n    }\n    if p < 7 {\n\
    \        return modp(n - 1, p) + modp(n - 2, p) + modp(n - 3, p) + modp(n - 4,\
    \ p) + modp(n - 5, p) + modp(n - 6, p)\n    }\n    if p < 8 {\n        return\
    \ modp(n - 1, p) + modp(n - 2, p) + modp(n - 3, p) + modp(n - 4, p) + modp(n -\
    \ 5, p) + modp(n - 6, p) + modp(n - 7, p)\n    }\n    if p < 9 {\n        return\
    \ modp(n - 1, p) + modp(n - 2, p) + modp(n - 3, p) + modp(n - 4, p) + modp(n -\
    \ 5, p) + modp(n - 6, p) + modp(n - 7, p) + modp(n - 8, p)\n    }\n    if p <\
    \ 10 {\n        return modp(n - 1, p) + modp(n - 2, p) + modp(n - 3, p) + modp(n\
    \ - 4, p) + modp(n - 5, p) + modp(n - 6, p) + modp(n - 7, p) + modp(n - 8, p)\
    \ + modp(n - 9, p)\n    }\n    if p < 11 {\n        return modp(n - 1, p) + modp(n\
    \ - 2, p) + modp(n - 3, p) + modp(n - 4, p) + modp(n - 5, p) + modp(n - 6, p)\
    \ + modp(n - 7, p) + modp(n - 8, p) + modp(n - 9, p) + modp(n - 10, p)\n    }\n\
    \    if p < 12 {\n        return modp(n - 1, p) + modp(n - 2, p) + modp(n - 3,\
    \ p) + modp(n - 4, p) + modp(n - 5, p) + modp(n - 6, p) + modp(n - 7, p) + modp(n\
    \ - 8, p) + modp(n - 9, p) + modp(n - 10, p) + modp(n - 11, p)\n    }\n    if\
    \ p < 13 {\n        return modp(n - 1, p) + \nfunc TestModp(t *testing.T) {\n\
    \  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5), expected:\
    \ 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpig6ldhgc_test.go:51:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075118
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n    }\n\
    \    if p < 2 {\n        return modp(n - 1, p) % p\n    }\n    if p < 3 {\n  \
    \      return modp(n - 2, p) % p\n    }\n    return modp(n - 3, p) % p\n}\n\n\
    func TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101, 101),\
    \ expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n     { actual:\
    \ candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101), expected:\
    \ 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual: candidate(31,\
    \ 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmp9jol3m34_test.go:44: expected '%!s(int=3)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmp9jol3m34_test.go:44: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__2 (0.00s)\n\
    \        tmp9jol3m34_test.go:44: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__3 (0.00s)\n        tmp9jol3m34_test.go:44: expected\
    \ '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__4 (0.00s)\n\
    \        tmp9jol3m34_test.go:44: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__5 (0.00s)\n        tmp9jol3m34_test.go:44: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__6 (0.00s)\n\
    \        tmp9jol3m34_test.go:44: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075122
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n    }\n\
    \    if p < 2 {\n        return modp(n - 1, p) + p\n    }\n    if p < 3 {\n  \
    \      return modp(n - 1, p) + p\n    }\n    if p < 4 {\n        return modp(n\
    \ - 1, p) + p\n    }\n    if p < 5 {\n        return modp(n - 1, p) + p\n    }\n\
    \    if p < 6 {\n        return modp(n - 1, p) + p\n    }\n    if p < 7 {\n  \
    \      return modp(n - 1, p) + p\n    }\n    if p < 8 {\n        return modp(n\
    \ - 1, p) + p\n    }\n    if p < 9 {\n        return modp(n - 1, p) + p\n    }\n\
    \    if p < 10 {\n        return modp(n - 1, p) + p\n    }\n    if p < 11 {\n\
    \        return modp(n - 1, p) + p\n    }\n    if p < 12 {\n        return modp(n\
    \ - 1, p) + p\n    }\n    if p < 13 {\n        return modp(n - 1, p) + p\n   \
    \ }\n    if p < 14 {\n        return modp(n - 1, p) + p\n    }\n    if p < 15\
    \ {\n        return modp(n - 1, p) + p\n    }\n    if p < 16 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p < 17 {\n        return modp(n - 1, p) +\
    \ p\n    }\n    if p < 18 {\n        return modp(n - 1, p) + p\n    }\n    if\
    \ p < 19 {\n        return modp(n - 1, p) + p\n    }\n    if p < 20 {\n      \
    \  return modp(n - 1, p) + p\n    }\n    if p < 21 {\n        return modp(n -\
    \ 1, p) + p\n    }\n    if p < 22 {\n        return modp(n - 1, p) + p\n    }\n\
    \    if p < 23 {\n        return modp(n - 1, p) + p\n    }\n    if p < 24 {\n\
    \        return modp(n - 1, p) + p\n    }\n    if p < 25 {\n        return modp(n\
    \ - 1, p) + p\n    }\n    if p < 26 {\n        return modp(n - 1, p) + p\n   \
    \ }\n    if p < 27 {\n        return modp(n - 1, p) + p\n    }\n    if p < 28\
    \ {\n        return modp(n - 1, p) + p\n    }\n    if p < 29 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p < 30 {\n        return modp(n - 1, p) +\
    \ p\n    }\n    if p < 31 {\n        return modp(n - 1, p) + p\n    }\n    if\
    \ p < 32 {\n        return modp(n - 1, p) + p\n    }\n    if p \nfunc TestModp(t\
    \ *testing.T) {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 5), expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n  \
    \   { actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpuk4w_7jz_test.go:110:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075121
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    x :=\
    \ 0\n    for i := 0; i < n; i++ {\n        x <<= 1\n        x |= 1\n        x\
    \ %= p\n    }\n    return x\n}\n\nfunc TestModp(t *testing.T) {\n  candidate :=\
    \ modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpjgb2tv3n_test.go:38: expected '%!s(int=3)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpjgb2tv3n_test.go:38: expected\
    \ '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestModp/test_num__2 (0.00s)\n\
    \        tmpjgb2tv3n_test.go:38: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__3 (0.00s)\n        tmpjgb2tv3n_test.go:38: expected\
    \ '%!s(int=8)', got '%!s(int=7)'\n    --- FAIL: TestModp/test_num__4 (0.00s)\n\
    \        tmpjgb2tv3n_test.go:38: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__5 (0.00s)\n        tmpjgb2tv3n_test.go:38: expected\
    \ '%!s(int=4)', got '%!s(int=3)'\n    --- FAIL: TestModp/test_num__6 (0.00s)\n\
    \        tmpjgb2tv3n_test.go:38: expected '%!s(int=3)', got '%!s(int=2)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075122
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n    }\n\
    \    if p < 2 {\n        return modp(n - 1, p) + p\n    }\n    if p < 3 {\n  \
    \      return modp(n - 2, p) + p\n    }\n    if p < 4 {\n        return modp(n\
    \ - 3, p) + p\n    }\n    if p < 5 {\n        return modp(n - 4, p) + p\n    }\n\
    \    if p < 6 {\n        return modp(n - 5, p) + p\n    }\n    if p < 7 {\n  \
    \      return modp(n - 6, p) + p\n    }\n    if p < 8 {\n        return modp(n\
    \ - 7, p) + p\n    }\n    if p < 9 {\n        return modp(n - 8, p) + p\n    }\n\
    \    if p < 10 {\n        return modp(n - 9, p) + p\n    }\n    if p < 11 {\n\
    \        return modp(n - 10, p) + p\n    }\n    if p < 12 {\n        return modp(n\
    \ - 11, p) + p\n    }\n    if p < 13 {\n        return modp(n - 12, p) + p\n \
    \   }\n    if p < 14 {\n        return modp(n - 13, p) + p\n    }\n    if p <\
    \ 15 {\n        return modp(n - 14, p) + p\n    }\n    if p < 16 {\n        return\
    \ modp(n - 15, p) + p\n    }\n    if p < 17 {\n        return modp(n - 16, p)\
    \ + p\n    }\n    if p < 18 {\n        return modp(n - 17, p) + p\n    }\n   \
    \ if p < 19 {\n        return modp(n - 18, p) + p\n    }\n    if p < 20 {\n  \
    \      return modp(n - 19, p) + p\n    }\n    if p < 21 {\n        return modp(n\
    \ - 20, p) + p\n    }\n    if p < 22 {\n        return modp(n - 21, p) + p\n \
    \   }\n    if p < 23 {\n        return modp(n - 22, p) + p\n    }\n    if p <\
    \ 24 {\n        return modp(n - 23, p) + p\n    }\n    if p < 25 {\n        return\
    \ modp(n - 24, p) + p\n    }\n    if p < 26 {\n        return modp(n - 25, p)\
    \ + p\n    }\n    if p < 27 {\n        return modp(n - 26, p) + p\n    }\n   \
    \ if p < 28 {\n        return modp(n - 27, p) + p\n    }\n    if p < 29 {\n  \
    \      return modp(n - 28, p) + p\n    }\n    if p < 30 {\n        return modp(n\
    \ - 29, p) + p\n    }\n    if p < 31 {\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp49ew5d42_test.go:105:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075117
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n == 0 {\n        return 0\n    }\n    if p == 0 {\n        return n\n    }\n\
    \    if p == 1 {\n        return n\n    }\n    if n == 1 {\n        return p\n\
    \    }\n    if n == 2 {\n        return modp(n - 1, p-1)\n    }\n    if n == 3\
    \ {\n        return modp(n - 2, p-1)\n    }\n    if n == 4 {\n        return modp(n\
    \ - 3, p-1)\n    }\n    if n == 5 {\n        return modp(n - 4, p-1)\n    }\n\
    \    if n == 6 {\n        return modp(n - 5, p-1)\n    }\n    if n == 7 {\n  \
    \      return modp(n - 6, p-1)\n    }\n    if n == 8 {\n        return modp(n\
    \ - 7, p-1)\n    }\n    if n == 9 {\n        return modp(n - 8, p-1)\n    }\n\
    \    if n == 10 {\n        return modp(n - 9, p-1)\n    }\n    if n == 11 {\n\
    \        return modp(n - 10, p-1)\n    }\n    if n == 12 {\n        return modp(n\
    \ - 11, p-1)\n    }\n    if n == 13 {\n        return modp(n - 12, p-1)\n    }\n\
    \    if n == 14 {\n        return modp(n - 13, p-1)\n    }\n    if n == 15 {\n\
    \        return modp(n - 14, p-1)\n    }\n    if n == 16 {\n        return modp(n\
    \ - 15, p-1)\n    }\n    if n == 17 {\n        return modp(n - 16, p-1)\n    }\n\
    \    if n == 18 {\n        return modp(n - 17, p-1)\n    }\n    if n == 19 {\n\
    \        return modp(n - 18, p-1)\n    }\n    if n == 20 {\n        return modp(n\
    \ - 19, p-1)\n    }\n    if n == 21 {\n        return modp(n - 20, p-1)\n    }\n\
    \    if n == 22 {\n        return modp(n - 21, p-1)\n    }\n    if n == 23 {\n\
    \        return modp(n - 22, p-1)\n    }\n    if n == 24 {\n        return modp(n\
    \ - 23, p-1)\n    }\n    if n == 25 {\n        return modp(n - 24, p-1)\n    }\n\
    \    if n == 26 {\n        return modp(n - 25, p-1)\n    }\n    if n == 27 {\n\
    \        return modp(n - 26, p-1)\n    }\n    if n == 28 {\n        return modp(n\
    \ - 27, p-1)\n    }\n    if n == 29 {\n        return modp(n - 28, p-1)\n    }\n\
    \    if n == 30 {\n        return modp(n - 29, p-1)\n    }\n    if n == 31 {\n\
    \        return modp(n - 30, p-1)\n    }\n    if n == 32 {\n        return modp(n\
    \ - 31, p-1)\n    }\n    if n == 33 {\n        return modp(n - 32, p-1)\n    }\n\
    func TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101, 101),\
    \ expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n     { actual:\
    \ candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101), expected:\
    \ 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual: candidate(31,\
    \ 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpopdn9lqg_test.go:118:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075121
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n    }\n\
    \    return modp(n >> 1, p) + p\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmp15u6q3x1_test.go:38: expected '%!s(int=3)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestModp/test_num__1 (0.00s)\n        tmp15u6q3x1_test.go:38: expected\
    \ '%!s(int=2)', got '%!s(int=1111)'\n    --- FAIL: TestModp/test_num__2 (0.00s)\n\
    \        tmp15u6q3x1_test.go:38: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__3 (0.00s)\n        tmp15u6q3x1_test.go:38: expected\
    \ '%!s(int=8)', got '%!s(int=22)'\n    --- FAIL: TestModp/test_num__4 (0.00s)\n\
    \        tmp15u6q3x1_test.go:38: expected '%!s(int=1)', got '%!s(int=707)'\n \
    \   --- FAIL: TestModp/test_num__5 (0.00s)\n        tmp15u6q3x1_test.go:38: expected\
    \ '%!s(int=4)', got '%!s(int=25)'\n    --- FAIL: TestModp/test_num__6 (0.00s)\n\
    \        tmp15u6q3x1_test.go:38: expected '%!s(int=3)', got '%!s(int=25)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075116
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    x :=\
    \ n\n    y := 0\n    for {\n        if x&1 != 0 {\n            x >>= 1\n     \
    \       y ^= p\n        }\n        if x == 0 {\n            break\n        }\n\
    \        x >>= 1\n    }\n    return y\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpp0l8hubs_test.go:44: expected '%!s(int=3)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpp0l8hubs_test.go:44: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__2 (0.00s)\n\
    \        tmpp0l8hubs_test.go:44: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__3 (0.00s)\n        tmpp0l8hubs_test.go:44: expected\
    \ '%!s(int=8)', got '%!s(int=11)'\n    --- FAIL: TestModp/test_num__4 (0.00s)\n\
    \        tmpp0l8hubs_test.go:44: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__5 (0.00s)\n        tmpp0l8hubs_test.go:44: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__6 (0.00s)\n\
    \        tmpp0l8hubs_test.go:44: expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075122
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n < 0 {\n        n *= -1\n    }\n    if n < p {\n        return n\n    }\n \
    \   if n == p {\n        return n\n    }\n    if n == 0 {\n        return 0\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ p\n    }\n    if n == p+1 {\n        return p\n    }\n    if n == p-1 {\n  \
    \      return p\n    }\n    if n == p+2 {\n        return p\n    }\n    if n ==\
    \ p-2  {\n        return p\n    }\n    if n == p+3 {\n        return p\n    }\n\
    \    if n == p-3  {\n        return p\n    }\n    if n == p+4 {\n        return\
    \ p\n    }\n    if n == p-4  {\n        return p\n    }\n    if n == p+5 {\n \
    \       return p\n    }\n    if n == p-5  {\n        return p\n    }\n    if n\
    \ == p+6 {\n        return p\n    }\n    if n == p-6  {\n        return p\n  \
    \  }\n    if n == p+7 {\n        return p\n    }\n    if n == p-7  {\n       \
    \ return p\n    }\n    if n == p+8 {\n        return p\n    }\n    if n == p-8\
    \  {\n        return p\n    }\n    if n == p+9 {\n        return p\n    }\n  \
    \  if n == p-9  {\n        return p\n    }\n    if n == p+10 {\n        return\
    \ p\n    }\n    if n == p-10 {\n        return p\n    }\n    if n == p+11 {\n\
    \        return p\n    }\n    if n == p-11 {\n        return p\n    }\n    if\
    \ n == p+12 {\n        return p\n    }\n    if n == p-12 {\n        return p\n\
    \    }\n    if n == p+13 {\n        return p\n    }\n    if n == p-13 {\n    \
    \    return p\n    }\n    if n == p+14 {\n        return p\n    }\n    if n ==\
    \ p-14 {\n        return p\n    }\n    if n == p+15 {\n        return p\n    }\n\
    \    if n == p-15 {\n        return p\n    }\n    if n == p+16 {\n        return\
    \ p\n    }\n    if n == p-16 {\n        return p\n    }\n    if n == p+17 {\n\
    \        return p\n    }\n    if n == p-17 {\n        return p\n    }\n    if\
    \ n == p+18 {\n        return p\n    }\n    if n == p-18 {\n        return p\n\
    \    }\n    if n == p+19 {\n        return p\n    }\n    if n == p-19 {\n    \
    \    return p\n    }\n    if n == p+20 {\n        return p\n    }\n    if n ==\
    \ p-20 {\n        return p\n    }\n    if n == p\nfunc TestModp(t *testing.T)\
    \ {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5),\
    \ expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     {\
    \ actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpo_261ltn_test.go:149:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075121
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n    }\n\
    \    if p < 2 {\n        return modp(n - 1, p+1) + p\n    }\n    if p < p {\n\
    \        return modp(n - 1, p+1) + p\n    }\n    if p < p {\n        return modp(n\
    \ - 1, p+1) + p\n    }\n    if p < p {\n        return modp(n - 1, p+1) + p\n\
    \    }\n    if p < p {\n        return modp(n - 1, p+1) + p\n    }\n    if p <\
    \ p {\n        return modp(n - 1, p+1) + p\n    }\n    if p < p {\n        return\
    \ modp(n - 1, p+1) + p\n    }\n    if p < p {\n        return modp(n - 1, p+1)\
    \ + p\n    }\n    if p < p {\n        return modp(n - 1, p+1) + p\n    }\n   \
    \ if p < p {\n        return modp(n - 1, p+1) + p\n    }\n    if p < p {\n   \
    \     return modp(n - 1, p+1) + p\n    }\n    if p < p {\n        return modp(n\
    \ - 1, p+1) + p\n    }\n    if p < p {\n        return modp(n - 1, p+1) + p\n\
    \    }\n    if p < p {\n        return modp(n - 1, p+1) + p\n    }\n    if p <\
    \ p {\n        return modp(n - 1, p+1) + p\n    }\n    if p < p {\n        return\
    \ modp(n - 1, p+1) + p\n    }\n    if p < p {\n        return modp(n - 1, p+1)\
    \ + p\n    }\n    if p < p {\n        return modp(n - 1, p+1) + p\n    }\n   \
    \ if p < p {\n        return modp(n - 1, p+1) + p\n    }\n    if p < p {\n   \
    \     return modp(n - 1, p+1) + p\n    }\n    if p < p {\n        return modp(n\
    \ - 1, p+1) + p\n    }\n    if p < p {\n        return modp(n - 1, p+1) + p\n\
    \    }\n    if p < p {\n        return modp(n - 1, p+1) + p\n    }\n    if p <\
    \ p {\n        return modp(n - 1, p+1) + p\n    }\n    if p < p {\n        return\
    \ modp(n - 1, p+1) + p\n    }\n    if p < p {\n        return modp(n - 1, p+1)\
    \ + p\n    }\n    if p < p {\n        return modp(n - 1, p+1) + p\n    }\n   \
    \ if p < p {\n        return modp(n - 1, p+1) + p\n    }\n    if p < p {\n   \
    \     return modp(n - 1, p+1) + p\n    }\n    if p < p {\n        return modp(n\
    \ - 1, p+1) + p\n    }\n    if p < p {\n        return modp(n - 1, p+1) + p\n\
    \    }\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1l3pdpii_test.go:109:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075122
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n    }\n\
    \    if p < 2 {\n        return modp(n - 1, p) + p\n    }\n    if p < 3 {\n  \
    \      return modp(n - 2, p) + p\n    }\n    if p < 4 {\n        return modp(n\
    \ - 3, p) + p\n    }\n    if p < 5 {\n        return modp(n - 4, p) + p\n    }\n\
    \    if p < 6 {\n        return modp(n - 5, p) + p\n    }\n    if p < 7 {\n  \
    \      return modp(n - 6, p) + p\n    }\n    if p < 8 {\n        return modp(n\
    \ - 7, p) + p\n    }\n    if p < 9 {\n        return modp(n - 8, p) + p\n    }\n\
    \    if p < 10 {\n        return modp(n - 9, p) + p\n    }\n    if p < 11 {\n\
    \        return modp(n - 10, p) + p\n    }\n    if p < 12 {\n        return modp(n\
    \ - 11, p) + p\n    }\n    if p < 13 {\n        return modp(n - 12, p) + p\n \
    \   }\n    if p < 14 {\n        return modp(n - 13, p) + p\n    }\n    if p <\
    \ 15 {\n        return modp(n - 14, p) + p\n    }\n    if p < 16 {\n        return\
    \ modp(n - 15, p) + p\n    }\n    if p < 17 {\n        return modp(n - 16, p)\
    \ + p\n    }\n    if p < 18 {\n        return modp(n - 17, p) + p\n    }\n   \
    \ if p < 19 {\n        return modp(n - 18, p) + p\n    }\n    if p < 20 {\n  \
    \      return modp(n - 19, p) + p\n    }\n    if p < 21 {\n        return modp(n\
    \ - 20, p) + p\n    }\n    if p < 22 {\n        return modp(n - 21, p) + p\n \
    \   }\n    if p < 23 {\n        return modp(n - 22, p) + p\n    }\n    if p <\
    \ 24 {\n        return modp(n - 23, p) + p\n    }\n    if p < 25 {\n        return\
    \ modp(n - 24, p) + p\n    }\n    if p < 26 {\n        return modp(n - 25, p)\
    \ + p\n    }\n    if p < 27 {\n        return modp(n - 26, p) + p\n    }\n   \
    \ if p < 28 {\n        return modp(n - 27, p) + p\n    }\n    if p < 29 {\n  \
    \      return modp(n - 28, p) + p\n    }\n    if p < 30 {\n        return modp(n\
    \ - 29, p) + p\n    }\n    if p < 31 {\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp49ew5d42_test.go:105:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075117
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n    }\n\
    \    if p < 2 {\n        return modp(n - 1, p+1) + p\n    }\n    if p < 4 {\n\
    \        return modp(n - 1, p+1) + p\n    }\n    if p < 8 {\n        return modp(n\
    \ - 1, p+1) + p\n    }\n    if p < 16 {\n        return modp(n - 1, p+1) + p\n\
    \    }\n    if p < 32 {\n        return modp(n - 1, p+1) + p\n    }\n    if p\
    \ < 64 {\n        return modp(n - 1, p+1) + p\n    }\n    if p < 128 {\n     \
    \   return modp(n - 1, p+1) + p\n    }\n    if p < 256 {\n        return modp(n\
    \ - 1, p+1) + p\n    }\n    if p < 512 {\n        return modp(n - 1, p+1) + p\n\
    \    }\n    if p < 1024 {\n        return modp(n - 1, p+1) + p\n    }\n    if\
    \ p < 2048 {\n        return modp(n - 1, p+1) + p\n    }\n    if p < 4096 {\n\
    \        return modp(n - 1, p+1) + p\n    }\n    if p < 8192 {\n        return\
    \ modp(n - 1, p+1) + p\n    }\n    if p < 16384 {\n        return modp(n - 1,\
    \ p+1) + p\n    }\n    if p < 32768 {\n        return modp(n - 1, p+1) + p\n \
    \   }\n    if p < 65536 {\n        return modp(n - 1, p+1) + p\n    }\n    if\
    \ p < 131072 {\n        return modp(n - 1, p+1) + p\n    }\n    if p < 262144\
    \ {\n        return modp(n - 1, p+1) + p\n    }\n    if p < 524288 {\n       \
    \ return modp(n - 1, p+1) + p\n    }\n    if p < 1048576 {\n        return modp(n\
    \ - 1, p+1) + p\n    }\n    if p < 2097152 {\n        return modp(n - 1, p+1)\
    \ + p\n    }\n    if p < 4194304 {\n        return modp(n - 1, p+1) + p\n    }\n\
    \    if p < 8388608 {\n        return modp(n - 1, p+1) + p\n    }\n    if p <\
    \ 16777216 {\n        return modp(n - 1, p+1) + p\n    }\n    if p < 33554432\
    \ {\n        return modp(n - 1, p+1) + p\n    }\n    if p < 67108864 {\n     \
    \   return modp(n - 1, p+1) + p\n    }\n    if p < 134217728 {\n        return\
    \ modp(n - 1, p+1) + p\n    }\n    if p < 268435456 {\n        return modp(n -\
    \ \nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp22jymxk__test.go:99:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075122
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n    }\n\
    \    if p < 2 {\n        return modp(n - 1, p) % p\n    }\n    if p > p {\n  \
    \      return modp(n - 1, p) % p\n    }\n    if p == 2 {\n        return modp(n\
    \ - 1, p) % p\n    }\n    if p > 2 {\n        return modp(n - 1, p) % p\n    }\n\
    \    return modp(n - 1, p) % p\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpftqryfv__test.go:50: expected '%!s(int=3)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpftqryfv__test.go:50: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__2 (0.00s)\n\
    \        tmpftqryfv__test.go:50: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__3 (0.00s)\n        tmpftqryfv__test.go:50: expected\
    \ '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__4 (0.00s)\n\
    \        tmpftqryfv__test.go:50: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__5 (0.00s)\n        tmpftqryfv__test.go:50: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__6 (0.00s)\n\
    \        tmpftqryfv__test.go:50: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075122
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n    }\n\
    \    if p < 2 {\n        return modp(n - 1, p) + p\n    }\n    if p < 3 {\n  \
    \      return modp(n - 2, p) + p\n    }\n    return modp(n - 3, p) + p\n}\n\n\
    func TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101, 101),\
    \ expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n     { actual:\
    \ candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101), expected:\
    \ 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual: candidate(31,\
    \ 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpbhlm08wc_test.go:44: expected '%!s(int=3)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpbhlm08wc_test.go:44: expected\
    \ '%!s(int=2)', got '%!s(int=37067)'\n    --- FAIL: TestModp/test_num__2 (0.00s)\n\
    \        tmpbhlm08wc_test.go:44: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__3 (0.00s)\n        tmpbhlm08wc_test.go:44: expected\
    \ '%!s(int=8)', got '%!s(int=11)'\n    --- FAIL: TestModp/test_num__4 (0.00s)\n\
    \        tmpbhlm08wc_test.go:44: expected '%!s(int=1)', got '%!s(int=3434)'\n\
    \    --- FAIL: TestModp/test_num__5 (0.00s)\n        tmpbhlm08wc_test.go:44: expected\
    \ '%!s(int=4)', got '%!s(int=50)'\n    --- FAIL: TestModp/test_num__6 (0.00s)\n\
    \        tmpbhlm08wc_test.go:44: expected '%!s(int=3)', got '%!s(int=55)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075116
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n    }\n\
    \    return modp(n >> 1, p) + p\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmp15u6q3x1_test.go:38: expected '%!s(int=3)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestModp/test_num__1 (0.00s)\n        tmp15u6q3x1_test.go:38: expected\
    \ '%!s(int=2)', got '%!s(int=1111)'\n    --- FAIL: TestModp/test_num__2 (0.00s)\n\
    \        tmp15u6q3x1_test.go:38: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__3 (0.00s)\n        tmp15u6q3x1_test.go:38: expected\
    \ '%!s(int=8)', got '%!s(int=22)'\n    --- FAIL: TestModp/test_num__4 (0.00s)\n\
    \        tmp15u6q3x1_test.go:38: expected '%!s(int=1)', got '%!s(int=707)'\n \
    \   --- FAIL: TestModp/test_num__5 (0.00s)\n        tmp15u6q3x1_test.go:38: expected\
    \ '%!s(int=4)', got '%!s(int=25)'\n    --- FAIL: TestModp/test_num__6 (0.00s)\n\
    \        tmp15u6q3x1_test.go:38: expected '%!s(int=3)', got '%!s(int=25)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075116
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n    }\n\
    \    if p < 2 {\n        return modp(n - 1, p) % p\n    }\n    if p < 3 {\n  \
    \      return modp(n - 2, p) % p\n    }\n    return modp(n - 3, p) % p\n}\n\n\
    func TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101, 101),\
    \ expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n     { actual:\
    \ candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101), expected:\
    \ 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual: candidate(31,\
    \ 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmp9jol3m34_test.go:44: expected '%!s(int=3)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmp9jol3m34_test.go:44: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__2 (0.00s)\n\
    \        tmp9jol3m34_test.go:44: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__3 (0.00s)\n        tmp9jol3m34_test.go:44: expected\
    \ '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__4 (0.00s)\n\
    \        tmp9jol3m34_test.go:44: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__5 (0.00s)\n        tmp9jol3m34_test.go:44: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__6 (0.00s)\n\
    \        tmp9jol3m34_test.go:44: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075122
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n    }\n\
    \    return modp(n / 2, p) * p + modp(n % 2, p)\n}\n\nfunc TestModp(t *testing.T)\
    \ {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5),\
    \ expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     {\
    \ actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpthav5nxt_test.go:38: expected '%!s(int=3)', got '%!s(int=30)'\n  \
    \  --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpthav5nxt_test.go:38: expected\
    \ '%!s(int=2)', got '%!s(int=-3596590727472875075)'\n    --- FAIL: TestModp/test_num__2\
    \ (0.00s)\n        tmpthav5nxt_test.go:38: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestModp/test_num__3 (0.00s)\n        tmpthav5nxt_test.go:38: expected\
    \ '%!s(int=8)', got '%!s(int=132)'\n    --- FAIL: TestModp/test_num__4 (0.00s)\n\
    \        tmpthav5nxt_test.go:38: expected '%!s(int=1)', got '%!s(int=108275056391603)'\n\
    \    --- FAIL: TestModp/test_num__5 (0.00s)\n        tmpthav5nxt_test.go:38: expected\
    \ '%!s(int=4)', got '%!s(int=3900)'\n    --- FAIL: TestModp/test_num__6 (0.00s)\n\
    \        tmpthav5nxt_test.go:38: expected '%!s(int=3)', got '%!s(int=3905)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075122
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n < 0 {\n        n *= -1\n    }\n    if n < p {\n        return n\n    }\n \
    \   if n == p {\n        return n\n    }\n    if n < p {\n        return modp(n\
    \ - p, p)\n    }\n    return modp(n - p, p) + p\n}\n\nfunc TestModp(t *testing.T)\
    \ {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5),\
    \ expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     {\
    \ actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmpmg8l6hac_test.go:44: expected '%!s(int=2)', got '%!s(int=1101)'\n\
    \    --- FAIL: TestModp/test_num__2 (0.00s)\n        tmpmg8l6hac_test.go:44: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpmg8l6hac_test.go:44: expected '%!s(int=8)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpmg8l6hac_test.go:44: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpmg8l6hac_test.go:44: expected '%!s(int=4)', got '%!s(int=30)'\n  \
    \  --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpmg8l6hac_test.go:44: expected\
    \ '%!s(int=3)', got '%!s(int=31)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660075122
- exit_code: null
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    x :=\
    \ n\n    for {\n        if x < (p / 2) {\n            x <<= 1\n        } else\
    \ {\n            x >>= 1\n        }\n        if x == 0 {\n            break\n\
    \        }\n    }\n    return x\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075131
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    x :=\
    \ n\n    for {\n        if x % p == 0 {\n            return x\n        }\n   \
    \     x /= p\n    }\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual:\
    \ candidate(1101, 101), expected: 2 },\n     { actual: candidate(0, 101), expected:\
    \ 1 },\n     { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100,\
    \ 101), expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n    \
    \ { actual: candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpu3woh609_test.go:38: expected '%!s(int=3)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpu3woh609_test.go:38: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__2 (0.00s)\n\
    \        tmpu3woh609_test.go:38: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__3 (0.00s)\n        tmpu3woh609_test.go:38: expected\
    \ '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__4 (0.00s)\n\
    \        tmpu3woh609_test.go:38: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__5 (0.00s)\n        tmpu3woh609_test.go:38: expected\
    \ '%!s(int=4)', got '%!s(int=30)'\n    --- FAIL: TestModp/test_num__6 (0.00s)\n\
    \        tmpu3woh609_test.go:38: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075116
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n    }\n\
    \    if p < 2 {\n        return modp(n - 1, p) + p\n    }\n    if p < 3 {\n  \
    \      return modp(n - 2, p) + p\n    }\n    if p < 4 {\n        return modp(n\
    \ - 3, p) + p\n    }\n    if p < 5 {\n        return modp(n - 4, p) + p\n    }\n\
    \    if p < 6 {\n        return modp(n - 5, p) + p\n    }\n    if p < 7 {\n  \
    \      return modp(n - 6, p) + p\n    }\n    if p < 8 {\n        return modp(n\
    \ - 7, p) + p\n    }\n    if p < 9 {\n        return modp(n - 8, p) + p\n    }\n\
    \    if p < 10 {\n        return modp(n - 9, p) + p\n    }\n    if p < 11 {\n\
    \        return modp(n - 10, p) + p\n    }\n    if p < 12 {\n        return modp(n\
    \ - 11, p) + p\n    }\n    if p < 13 {\n        return modp(n - 12, p) + p\n \
    \   }\n    if p < 14 {\n        return modp(n - 13, p) + p\n    }\n    if p <\
    \ 15 {\n        return modp(n - 14, p) + p\n    }\n    if p < 16 {\n        return\
    \ modp(n - 15, p) + p\n    }\n    if p < 17 {\n        return modp(n - 16, p)\
    \ + p\n    }\n    if p < 18 {\n        return modp(n - 17, p) + p\n    }\n   \
    \ if p < 19 {\n        return modp(n - 18, p) + p\n    }\n    if p < 20 {\n  \
    \      return modp(n - 19, p) + p\n    }\n    if p < 21 {\n        return modp(n\
    \ - 20, p) + p\n    }\n    if p < 22 {\n        return modp(n - 21, p) + p\n \
    \   }\n    if p < 23 {\n        return modp(n - 22, p) + p\n    }\n    if p <\
    \ 24 {\n        return modp(n - 23, p) + p\n    }\n    if p < 25 {\n        return\
    \ modp(n - 24, p) + p\n    }\n    if p < 26 {\n        return modp(n - 25, p)\
    \ + p\n    }\n    if p < 27 {\n        return modp(n - 26, p) + p\n    }\n   \
    \ if p < 28 {\n        return modp(n - 27, p) + p\n    }\n    if p < 29 {\n  \
    \      return modp(n - 28, p) + p\n    }\n    if p < 30 {\n        return modp(n\
    \ - 29, p) + p\n    }\n    if p < 31 {\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp49ew5d42_test.go:105:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075117
- exit_code: null
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n    }\n\
    \    if p == 1 {\n        return modp(n - 1, p-1)\n    }\n    return modp(n -\
    \ 1, p) + modp(n - 1, p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual:\
    \ candidate(1101, 101), expected: 2 },\n     { actual: candidate(0, 101), expected:\
    \ 1 },\n     { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100,\
    \ 101), expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n    \
    \ { actual: candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075137
- exit_code: null
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    x :=\
    \ n\n    for {\n        x -= p // x is now the least common multiple of the two\
    \ numbers\n        if x == 0 {\n            break\n        }\n    }\n    return\
    \ x\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075137
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n    }\n\
    \    return modp(n / 2, p) * p + modp(n % 2, p)\n}\n\nfunc TestModp(t *testing.T)\
    \ {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5),\
    \ expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     {\
    \ actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpthav5nxt_test.go:38: expected '%!s(int=3)', got '%!s(int=30)'\n  \
    \  --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpthav5nxt_test.go:38: expected\
    \ '%!s(int=2)', got '%!s(int=-3596590727472875075)'\n    --- FAIL: TestModp/test_num__2\
    \ (0.00s)\n        tmpthav5nxt_test.go:38: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestModp/test_num__3 (0.00s)\n        tmpthav5nxt_test.go:38: expected\
    \ '%!s(int=8)', got '%!s(int=132)'\n    --- FAIL: TestModp/test_num__4 (0.00s)\n\
    \        tmpthav5nxt_test.go:38: expected '%!s(int=1)', got '%!s(int=108275056391603)'\n\
    \    --- FAIL: TestModp/test_num__5 (0.00s)\n        tmpthav5nxt_test.go:38: expected\
    \ '%!s(int=4)', got '%!s(int=3900)'\n    --- FAIL: TestModp/test_num__6 (0.00s)\n\
    \        tmpthav5nxt_test.go:38: expected '%!s(int=3)', got '%!s(int=3905)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075122
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n    }\n\
    \    return modp(n / 2, p) + p\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpsfs0hyrr_test.go:38: expected '%!s(int=3)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpsfs0hyrr_test.go:38: expected\
    \ '%!s(int=2)', got '%!s(int=1111)'\n    --- FAIL: TestModp/test_num__2 (0.00s)\n\
    \        tmpsfs0hyrr_test.go:38: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__3 (0.00s)\n        tmpsfs0hyrr_test.go:38: expected\
    \ '%!s(int=8)', got '%!s(int=22)'\n    --- FAIL: TestModp/test_num__4 (0.00s)\n\
    \        tmpsfs0hyrr_test.go:38: expected '%!s(int=1)', got '%!s(int=707)'\n \
    \   --- FAIL: TestModp/test_num__5 (0.00s)\n        tmpsfs0hyrr_test.go:38: expected\
    \ '%!s(int=4)', got '%!s(int=25)'\n    --- FAIL: TestModp/test_num__6 (0.00s)\n\
    \        tmpsfs0hyrr_test.go:38: expected '%!s(int=3)', got '%!s(int=25)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075116
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n    }\n\
    \    return modp(n >> 1, p) + p\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmp15u6q3x1_test.go:38: expected '%!s(int=3)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestModp/test_num__1 (0.00s)\n        tmp15u6q3x1_test.go:38: expected\
    \ '%!s(int=2)', got '%!s(int=1111)'\n    --- FAIL: TestModp/test_num__2 (0.00s)\n\
    \        tmp15u6q3x1_test.go:38: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__3 (0.00s)\n        tmp15u6q3x1_test.go:38: expected\
    \ '%!s(int=8)', got '%!s(int=22)'\n    --- FAIL: TestModp/test_num__4 (0.00s)\n\
    \        tmp15u6q3x1_test.go:38: expected '%!s(int=1)', got '%!s(int=707)'\n \
    \   --- FAIL: TestModp/test_num__5 (0.00s)\n        tmp15u6q3x1_test.go:38: expected\
    \ '%!s(int=4)', got '%!s(int=25)'\n    --- FAIL: TestModp/test_num__6 (0.00s)\n\
    \        tmp15u6q3x1_test.go:38: expected '%!s(int=3)', got '%!s(int=25)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075116
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n    }\n\
    \    return modp(n / 2, p) * p + modp(n / 2, p)\n}\n\nfunc TestModp(t *testing.T)\
    \ {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5),\
    \ expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     {\
    \ actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmprwbkge2b_test.go:38: expected '%!s(int=3)', got '%!s(int=30)'\n  \
    \  --- FAIL: TestModp/test_num__1 (0.00s)\n        tmprwbkge2b_test.go:38: expected\
    \ '%!s(int=2)', got '%!s(int=7865344782776087552)'\n    --- FAIL: TestModp/test_num__2\
    \ (0.00s)\n        tmprwbkge2b_test.go:38: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestModp/test_num__3 (0.00s)\n        tmprwbkge2b_test.go:38: expected\
    \ '%!s(int=8)', got '%!s(int=132)'\n    --- FAIL: TestModp/test_num__4 (0.00s)\n\
    \        tmprwbkge2b_test.go:38: expected '%!s(int=1)', got '%!s(int=113742404345664)'\n\
    \    --- FAIL: TestModp/test_num__5 (0.00s)\n        tmprwbkge2b_test.go:38: expected\
    \ '%!s(int=4)', got '%!s(int=6480)'\n    --- FAIL: TestModp/test_num__6 (0.00s)\n\
    \        tmprwbkge2b_test.go:38: expected '%!s(int=3)', got '%!s(int=6480)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    x :=\
    \ n\n    for {\n        if x % p == 0 {\n            return x\n        }\n   \
    \     x /= p\n    }\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual:\
    \ candidate(1101, 101), expected: 2 },\n     { actual: candidate(0, 101), expected:\
    \ 1 },\n     { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100,\
    \ 101), expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n    \
    \ { actual: candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpu3woh609_test.go:38: expected '%!s(int=3)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpu3woh609_test.go:38: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__2 (0.00s)\n\
    \        tmpu3woh609_test.go:38: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__3 (0.00s)\n        tmpu3woh609_test.go:38: expected\
    \ '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__4 (0.00s)\n\
    \        tmpu3woh609_test.go:38: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__5 (0.00s)\n        tmpu3woh609_test.go:38: expected\
    \ '%!s(int=4)', got '%!s(int=30)'\n    --- FAIL: TestModp/test_num__6 (0.00s)\n\
    \        tmpu3woh609_test.go:38: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075116
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n == 0 {\n        return 0\n    }\n    if p == 0 {\n        return n\n    }\n\
    \    if p > n {\n        return modp(n - p, p)\n    }\n    if p == 1 {\n     \
    \   return n\n    }\n    if n == 1 {\n        return p\n    }\n    if n == 2 {\n\
    \        return p + modp(n - 2, p)\n    }\n    if n == 3 {\n        return p +\
    \ modp(n - 3, p)\n    }\n    if n == 4 {\n        return p + modp(n - 4, p)\n\
    \    }\n    if n == 5 {\n        return p + modp(n - 5, p)\n    }\n    if n ==\
    \ 6 {\n        return p + modp(n - 6, p)\n    }\n    if n == 7 {\n        return\
    \ p + modp(n - 7, p)\n    }\n    if n == 8 {\n        return p + modp(n - 8, p)\n\
    \    }\n    if n == 9 {\n        return p + modp(n - 9, p)\n    }\n    if n ==\
    \ 10 {\n        return p + modp(n - 10, p)\n    }\n    if n == 11 {\n        return\
    \ p + modp(n - 11, p)\n    }\n    if n == 12 {\n        return p + modp(n - 12,\
    \ p)\n    }\n    if n == 13 {\n        return p + modp(n - 13, p)\n    }\n   \
    \ if n == 14 {\n        return p + modp(n - 14, p)\n    }\n    if n == 15 {\n\
    \        return p + modp(n - 15, p)\n    }\n    if n == 16 {\n        return p\
    \ + modp(n - 16, p)\n    }\n    if n == 17 {\n        return p + modp(n - 17,\
    \ p)\n    }\n    if n == 18 {\n        return p + modp(n - 18, p)\n    }\n   \
    \ if n == 19 {\n        return p + modp(n - 19, p)\n    }\n    if n == 20 {\n\
    \        return p + modp(n - 20, p)\n    }\n    if n == 21 {\n        return p\
    \ + modp(n - 21, p)\n    }\n    if n == 22 {\n        return p + modp(n - 22,\
    \ p)\n    }\n    if n == 23 {\n        return p + modp(n - 23, p)\n    }\n   \
    \ if n == 24 {\n        return p + modp(n - 24, p)\n    }\n    if n == 25 {\n\
    \        return p + modp(n - 25, p)\n    }\n    if n == 26 {\n        return p\
    \ + modp(n - 26, p)\n    }\n    if n == 27 {\n        return p + modp(n - 27,\
    \ p)\n    }\n    if n == 28 {\n        return p + modp(n - 28, p)\n    }\n   \
    \ if n == 29 {\n        return p + modp(n - 29, p)\n    }\n    if n == 30 {\n\
    \        return p + modp(n - 30, p)\n    }\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpl85kqt0x_test.go:112:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075122
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n    }\n\
    \    if p == 1 {\n        return modp(n - 1, p-1)\n    }\n    if p == 2 {\n  \
    \      return modp(n - 2, p-1)\n    }\n    if p == 3 {\n        return modp(n\
    \ - 3, p-1)\n    }\n    if p == 4 {\n        return modp(n - 4, p-1)\n    }\n\
    \    if p == 5 {\n        return modp(n - 5, p-1)\n    }\n    if p == 6 {\n  \
    \      return modp(n - 6, p-1)\n    }\n    if p == 7 {\n        return modp(n\
    \ - 7, p-1)\n    }\n    if p == 8 {\n        return modp(n - 8, p-1)\n    }\n\
    \    if p == 9 {\n        return modp(n - 9, p-1)\n    }\n    if p == 10 {\n \
    \       return modp(n - 10, p-1)\n    }\n    if p == 11 {\n        return modp(n\
    \ - 11, p-1)\n    }\n    if p == 12 {\n        return modp(n - 12, p-1)\n    }\n\
    \    if p == 13 {\n        return modp(n - 13, p-1)\n    }\n    if p == 14 {\n\
    \        return modp(n - 14, p-1)\n    }\n    if p == 15 {\n        return modp(n\
    \ - 15, p-1)\n    }\n    if p == 16 {\n        return modp(n - 16, p-1)\n    }\n\
    \    if p == 17 {\n        return modp(n - 17, p-1)\n    }\n    if p == 18 {\n\
    \        return modp(n - 18, p-1)\n    }\n    if p == 19 {\n        return modp(n\
    \ - 19, p-1)\n    }\n    if p == 20 {\n        return modp(n - 20, p-1)\n    }\n\
    \    if p == 21 {\n        return modp(n - 21, p-1)\n    }\n    if p == 22 {\n\
    \        return modp(n - 22, p-1)\n    }\n    if p == 23 {\n        return modp(n\
    \ - 23, p-1)\n    }\n    if p == 24 {\n        return modp(n - 24, p-1)\n    }\n\
    \    if p == 25 {\n        return modp(n - 25, p-1)\n    }\n    if p == 26 {\n\
    \        return modp(n - 26, p-1)\n    }\n    if p == 27 {\n        return modp(n\
    \ - 27, p-1)\n    }\n    if p == 28 {\n        return modp(n - 28, p-1)\n    }\n\
    \    if p == 29 {\n        return modp(n - 29, p-1)\n    }\n    if p == 30 {\n\
    \        return modp(n - 30, p-1)\n    }\n    if p == 31 {\n        return modp(n\
    \ - 31, p-1)\n    }\n    if p == 32 {\n        return modp(n - 32, p-1)\n\nfunc\
    \ TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 5), expected: 3 },\n     { actual: candidate(1101, 101), expected:\
    \ 2 },\n     { actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3,\
    \ 11), expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n  \
    \   { actual: candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2i0ws7my_test.go:112:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075122
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n    }\n\
    \    if p < 2 {\n        return modp(n - 1, p+1) + p\n    }\n    if p < 4 {\n\
    \        return modp(n - 1, p+1) + modp(n - 1, p)\n    }\n    if p < 8 {\n   \
    \     return modp(n - 1, p+1) + modp(n - 1, modp(n - 1, p))\n    }\n    if p <\
    \ 16 {\n        return modp(n - 1, p+1) + modp(n - 1, modp(n - 1, modp(n - 1,\
    \ p)))\n    }\n    if p < 32 {\n        return modp(n - 1, p+1) + modp(n - 1,\
    \ modp(n - 1, modp(n - 1, modp(n - 1, p))))\n    }\n    if p < 64 {\n        return\
    \ modp(n - 1, p+1) + modp(n - 1, modp(n - 1, modp(n - 1, modp(n - 1, modp(n -\
    \ 1, p)))))\n    }\n    if p < 128 {\n        return modp(n - 1, p+1) + modp(n\
    \ - 1, modp(n - 1, modp(n - 1, modp(n - 1, modp(n - 1, modp(n - 1, p)))))) + p\n\
    \    }\n    if p < 256 {\n        return modp(n - 1, p+1) + modp(n - 1, modp(n\
    \ - 1, modp(n - 1, modp(n - 1, modp(n - 1, modp(n - 1, modp(n - 1, p)))))) + modp(n\
    \ - 1, p))\n    }\n    if p < 512 {\n        return modp(n - 1, p+1) + modp(n\
    \ - 1, modp(n - 1, modp(n - 1, modp(n - 1, modp(n - 1, modp(n - 1, modp(n - 1,\
    \ modp(n - 1, p)))))) + modp(n - 1, modp(n - 1, p)))\n    }\n    if p < 1024 {\n\
    \        return modp(n - 1, p+1) + modp(n - 1, modp(n - 1, modp(n - 1, modp(n\
    \ - 1, modp(n - 1, modp(n - 1, modp(n - 1, modp(n - 1, modp(n - 1, p)))))) + modp(n\
    \ - 1, modp(n - 1, modp(n - 1, p))))) + modp(n - 1, modp(n - 1, modp(n - 1, modp(n\
    \ - 1, modp(n - 1, modp(n - 1, modp(n - 1, modp(n - 1, p)))))) + modp(n - 1, modp(n\
    \ - 1, modp(n - 1, modp(n - 1, modp(n - 1, modp(n - 1, modp(n - 1, p)))))) + modp(n\
    \ - 1, modp(n - 1, modp(n - 1, modp(n - 1, modp(n - 1, modp(n - 1, modp(n - 1,\
    \ modp(n - 1, p)))))) + modp(n - 1, modp(n - 1, modp(n - \nfunc TestModp(t *testing.T)\
    \ {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5),\
    \ expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     {\
    \ actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpuuzuqf1l_test.go:41:169: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n    }\n\
    \    if p < 2 {\n        return modp(n - 1, p+1) + p\n    }\n    if p < 3 {\n\
    \        return modp(n - 1, p+1) + modp(n - 2, p+1) + p\n    }\n    if p < 4 {\n\
    \        return modp(n - 1, p+1) + modp(n - 2, p+1) + modp(n - 3, p+1) + p\n \
    \   }\n    if p < 5 {\n        return modp(n - 1, p+1) + modp(n - 2, p+1) + modp(n\
    \ - 3, p+1) + modp(n - 4, p+1) + p\n    }\n    if p < 6 {\n        return modp(n\
    \ - 1, p+1) + modp(n - 2, p+1) + modp(n - 3, p+1) + modp(n - 4, p+1) + modp(n\
    \ - 5, p+1) + p\n    }\n    if p < 7 {\n        return modp(n - 1, p+1) + modp(n\
    \ - 2, p+1) + modp(n - 3, p+1) + modp(n - 4, p+1) + modp(n - 5, p+1) + modp(n\
    \ - 6, p+1) + p\n    }\n    if p < 8 {\n        return modp(n - 1, p+1) + modp(n\
    \ - 2, p+1) + modp(n - 3, p+1) + modp(n - 4, p+1) + modp(n - 5, p+1) + modp(n\
    \ - 6, p+1) + modp(n - 7, p+1) + p\n    }\n    if p < 9 {\n        return modp(n\
    \ - 1, p+1) + modp(n - 2, p+1) + modp(n - 3, p+1) + modp(n - 4, p+1) + modp(n\
    \ - 5, p+1) + modp(n - 6, p+1) + modp(n - 7, p+1) + modp(n - 8, p+1) + p\n   \
    \ }\n    if p < 10 {\n        return modp(n - 1, p+1) + modp(n - 2, p+1) + modp(n\
    \ - 3, p+1) + modp(n - 4, p+1) + modp(n - 5, p+1) + modp(n - 6, p+1) + modp(n\
    \ - 7, p+1) + modp(n - 8, p+1) + modp(n - 9, p+1) + p\n    }\n    if p < 11 {\n\
    \        return modp(n - 1, p+1) + modp(n - 2, p+1) + modp(n - 3, p+1) + modp(n\
    \ - 4, p+1) + modp(n - 5, p+1) + modp(n - 6, p+1) + modp(n - 7, p+1) + modp(n\
    \ - 8, p+1) + modp(n - 9, p+1) + modp(n - 10, p+1) + p\n    }\n    if p < 12 {\n\
    \        return modp(n - 1, p+1) + \nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz43zs5oe_test.go:48:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075117
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n    }\n\
    \    if p < 2 {\n        return modp(n - 1, p) % p\n    }\n    if p > 2 {\n  \
    \      return modp(n - 1, p) % p\n    }\n    x := modp(n - 2, p)\n    return x\
    \ % p\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpt8skbta2_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpt8skbta2_test.go:45: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__2 (0.00s)\n\
    \        tmpt8skbta2_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__3 (0.00s)\n        tmpt8skbta2_test.go:45: expected\
    \ '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__4 (0.00s)\n\
    \        tmpt8skbta2_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__5 (0.00s)\n        tmpt8skbta2_test.go:45: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__6 (0.00s)\n\
    \        tmpt8skbta2_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n    }\n\
    \    if p < 2 {\n        return modp(n - 1, p) + p\n    }\n    if p > 2 {\n  \
    \      return modp(n - 1, p) - p\n    }\n    return modp(n - 1, p) + modp(n -\
    \ 2, p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmp4eom1gus_test.go:44: expected '%!s(int=3)', got '%!s(int=-5)'\n  \
    \  --- FAIL: TestModp/test_num__1 (0.00s)\n        tmp4eom1gus_test.go:44: expected\
    \ '%!s(int=2)', got '%!s(int=-110999)'\n    --- FAIL: TestModp/test_num__2 (0.00s)\n\
    \        tmp4eom1gus_test.go:44: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__3 (0.00s)\n        tmp4eom1gus_test.go:44: expected\
    \ '%!s(int=8)', got '%!s(int=-11)'\n    --- FAIL: TestModp/test_num__4 (0.00s)\n\
    \        tmp4eom1gus_test.go:44: expected '%!s(int=1)', got '%!s(int=-9898)'\n\
    \    --- FAIL: TestModp/test_num__5 (0.00s)\n        tmp4eom1gus_test.go:44: expected\
    \ '%!s(int=4)', got '%!s(int=-140)'\n    --- FAIL: TestModp/test_num__6 (0.00s)\n\
    \        tmp4eom1gus_test.go:44: expected '%!s(int=3)', got '%!s(int=-145)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    x :=\
    \ n\n    y := 0\n    for {\n        if x&1 == 0 {\n            break\n       \
    \ }\n        x >>= 1\n        y++\n    }\n    for {\n        if y&1 == 0 {\n \
    \           break\n        }\n        y >>= 1\n        x++\n    }\n    return\
    \ x % p\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmphyitcq7t_test.go:48: expected '%!s(int=3)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmphyitcq7t_test.go:48: expected\
    \ '%!s(int=2)', got '%!s(int=46)'\n    --- FAIL: TestModp/test_num__2 (0.00s)\n\
    \        tmphyitcq7t_test.go:48: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__3 (0.00s)\n        tmphyitcq7t_test.go:48: expected\
    \ '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__4 (0.00s)\n\
    \        tmphyitcq7t_test.go:48: expected '%!s(int=1)', got '%!s(int=100)'\n \
    \   --- FAIL: TestModp/test_num__5 (0.00s)\n        tmphyitcq7t_test.go:48: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__6 (0.00s)\n\
    \        tmphyitcq7t_test.go:48: expected '%!s(int=3)', got '%!s(int=1)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n    }\n\
    \    return modp(n >> 1, p) + p\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmp15u6q3x1_test.go:38: expected '%!s(int=3)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestModp/test_num__1 (0.00s)\n        tmp15u6q3x1_test.go:38: expected\
    \ '%!s(int=2)', got '%!s(int=1111)'\n    --- FAIL: TestModp/test_num__2 (0.00s)\n\
    \        tmp15u6q3x1_test.go:38: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__3 (0.00s)\n        tmp15u6q3x1_test.go:38: expected\
    \ '%!s(int=8)', got '%!s(int=22)'\n    --- FAIL: TestModp/test_num__4 (0.00s)\n\
    \        tmp15u6q3x1_test.go:38: expected '%!s(int=1)', got '%!s(int=707)'\n \
    \   --- FAIL: TestModp/test_num__5 (0.00s)\n        tmp15u6q3x1_test.go:38: expected\
    \ '%!s(int=4)', got '%!s(int=25)'\n    --- FAIL: TestModp/test_num__6 (0.00s)\n\
    \        tmp15u6q3x1_test.go:38: expected '%!s(int=3)', got '%!s(int=25)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075116
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n    }\n\
    \    if p < 2 {\n        return modp(n - 1, p) + p\n    }\n    if p < 3 {\n  \
    \      return modp(n - 2, p) + p\n    }\n    if p < 4 {\n        return modp(n\
    \ - 3, p) + p\n    }\n    if p < 5 {\n        return modp(n - 4, p) + p\n    }\n\
    \    if p < 6 {\n        return modp(n - 5, p) + p\n    }\n    if p < 7 {\n  \
    \      return modp(n - 6, p) + p\n    }\n    if p < 8 {\n        return modp(n\
    \ - 7, p) + p\n    }\n    if p < 9 {\n        return modp(n - 8, p) + p\n    }\n\
    \    if p < 10 {\n        return modp(n - 9, p) + p\n    }\n    if p < 11 {\n\
    \        return modp(n - 10, p) + p\n    }\n    if p < 12 {\n        return modp(n\
    \ - 11, p) + p\n    }\n    if p < 13 {\n        return modp(n - 12, p) + p\n \
    \   }\n    if p < 14 {\n        return modp(n - 13, p) + p\n    }\n    if p <\
    \ 15 {\n        return modp(n - 14, p) + p\n    }\n    if p < 16 {\n        return\
    \ modp(n - 15, p) + p\n    }\n    if p < 17 {\n        return modp(n - 16, p)\
    \ + p\n    }\n    if p < 18 {\n        return modp(n - 17, p) + p\n    }\n   \
    \ if p < 19 {\n        return modp(n - 18, p) + p\n    }\n    if p < 20 {\n  \
    \      return modp(n - 19, p) + p\n    }\n    if p < 21 {\n        return modp(n\
    \ - 20, p) + p\n    }\n    if p < 22 {\n        return modp(n - 21, p) + p\n \
    \   }\n    if p < 23 {\n        return modp(n - 22, p) + p\n    }\n    if p <\
    \ 24 {\n        return modp(n - 23, p) + p\n    }\n    if p < 25 {\n        return\
    \ modp(n - 24, p) + p\n    }\n    if p < 26 {\n        return modp(n - 25, p)\
    \ + p\n    }\n    if p < 27 {\n        return modp(n - 26, p) + p\n    }\n   \
    \ if p < 28 {\n        return modp(n - 27, p) + p\n    }\n    if p < 29 {\n  \
    \      return modp(n - 28, p) + p\n    }\n    if p < 30 {\n        return modp(n\
    \ - 29, p) + p\n    }\n    if p < 31 {\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp49ew5d42_test.go:105:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075117
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n    }\n\
    \    if p < 2 {\n        return modp(n - 1, p) + p\n    }\n    if p < 3 {\n  \
    \      return modp(n - 1, p) + p\n    }\n    if p < 4 {\n        return modp(n\
    \ - 1, p) + p\n    }\n    if p < 5 {\n        return modp(n - 1, p) + p\n    }\n\
    \    if p < 6 {\n        return modp(n - 1, p) + p\n    }\n    if p < 7 {\n  \
    \      return modp(n - 1, p) + p\n    }\n    if p < 8 {\n        return modp(n\
    \ - 1, p) + p\n    }\n    if p < 9 {\n        return modp(n - 1, p) + p\n    }\n\
    \    if p < 10 {\n        return modp(n - 1, p) + p\n    }\n    if p < 11 {\n\
    \        return modp(n - 1, p) + p\n    }\n    if p < 12 {\n        return modp(n\
    \ - 1, p) + p\n    }\n    if p < 13 {\n        return modp(n - 1, p) + p\n   \
    \ }\n    if p < 14 {\n        return modp(n - 1, p) + p\n    }\n    if p < 15\
    \ {\n        return modp(n - 1, p) + p\n    }\n    if p < 16 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p < 17 {\n        return modp(n - 1, p) +\
    \ p\n    }\n    if p < 18 {\n        return modp(n - 1, p) + p\n    }\n    if\
    \ p < 19 {\n        return modp(n - 1, p) + p\n    }\n    if p < 20 {\n      \
    \  return modp(n - 1, p) + p\n    }\n    if p < 21 {\n        return modp(n -\
    \ 1, p) + p\n    }\n    if p < 22 {\n        return modp(n - 1, p) + p\n    }\n\
    \    if p < 23 {\n        return modp(n - 1, p) + p\n    }\n    if p < 24 {\n\
    \        return modp(n - 1, p) + p\n    }\n    if p < 25 {\n        return modp(n\
    \ - 1, p) + p\n    }\n    if p < 26 {\n        return modp(n - 1, p) + p\n   \
    \ }\n    if p < 27 {\n        return modp(n - 1, p) + p\n    }\n    if p < 28\
    \ {\n        return modp(n - 1, p) + p\n    }\n    if p < 29 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p < 30 {\n        return modp(n - 1, p) +\
    \ p\n    }\n    if p < 31 {\n        return modp(n - 1, p) + p\n    }\n    if\
    \ p < 32 {\n        return modp(n - 1, p) + p\n    }\n    if p \nfunc TestModp(t\
    \ *testing.T) {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 5), expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n  \
    \   { actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpuk4w_7jz_test.go:110:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075121
- exit_code: null
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n    }\n\
    \    if p == 1 {\n        return modp(n - 1, p-1)\n    }\n    return modp(n -\
    \ 1, p) + modp(n-1, p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual:\
    \ candidate(1101, 101), expected: 2 },\n     { actual: candidate(0, 101), expected:\
    \ 1 },\n     { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100,\
    \ 101), expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n    \
    \ { actual: candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075131
- exit_code: null
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    x :=\
    \ n\n    for {\n        if x < (p / 2) {\n            x <<= 1\n        } else\
    \ {\n            x -= p\n        }\n        if x == 0 {\n            break\n \
    \       }\n    }\n    return x\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075137
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n    }\n\
    \    if p < 2 {\n        return modp(n - 1, p) + p\n    }\n    if p < 3 {\n  \
    \      return modp(n - 2, p) + p\n    }\n    if p < 4 {\n        return modp(n\
    \ - 3, p) + p\n    }\n    if p < 5 {\n        return modp(n - 4, p) + p\n    }\n\
    \    if p < 6 {\n        return modp(n - 5, p) + p\n    }\n    if p < 7 {\n  \
    \      return modp(n - 6, p) + p\n    }\n    if p < 8 {\n        return modp(n\
    \ - 7, p) + p\n    }\n    if p < 9 {\n        return modp(n - 8, p) + p\n    }\n\
    \    if p < 10 {\n        return modp(n - 9, p) + p\n    }\n    if p < 11 {\n\
    \        return modp(n - 10, p) + p\n    }\n    if p < 12 {\n        return modp(n\
    \ - 11, p) + p\n    }\n    if p < 13 {\n        return modp(n - 12, p) + p\n \
    \   }\n    if p < 14 {\n        return modp(n - 13, p) + p\n    }\n    if p <\
    \ 15 {\n        return modp(n - 14, p) + p\n    }\n    if p < 16 {\n        return\
    \ modp(n - 15, p) + p\n    }\n    if p < 17 {\n        return modp(n - 16, p)\
    \ + p\n    }\n    if p < 18 {\n        return modp(n - 17, p) + p\n    }\n   \
    \ if p < 19 {\n        return modp(n - 18, p) + p\n    }\n    if p < 20 {\n  \
    \      return modp(n - 19, p) + p\n    }\n    if p < 21 {\n        return modp(n\
    \ - 20, p) + p\n    }\n    if p < 22 {\n        return modp(n - 21, p) + p\n \
    \   }\n    if p < 23 {\n        return modp(n - 22, p) + p\n    }\n    if p <\
    \ 24 {\n        return modp(n - 23, p) + p\n    }\n    if p < 25 {\n        return\
    \ modp(n - 24, p) + p\n    }\n    if p < 26 {\n        return modp(n - 25, p)\
    \ + p\n    }\n    if p < 27 {\n        return modp(n - 26, p) + p\n    }\n   \
    \ if p < 28 {\n        return modp(n - 27, p) + p\n    }\n    if p < 29 {\n  \
    \      return modp(n - 28, p) + p\n    }\n    if p < 30 {\n        return modp(n\
    \ - 29, p) + p\n    }\n    if p < 31 {\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp49ew5d42_test.go:105:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075117
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n    }\n\
    \    return modp(n >> 1, p) * p + modp(n & 1, p) * (p ^ n)\n}\n\nfunc TestModp(t\
    \ *testing.T) {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 5), expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n  \
    \   { actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmp13a9ju6n_test.go:38: expected '%!s(int=3)', got '%!s(int=55)'\n  \
    \  --- FAIL: TestModp/test_num__1 (0.00s)\n        tmp13a9ju6n_test.go:38: expected\
    \ '%!s(int=2)', got '%!s(int=-3584261146085040589)'\n    --- FAIL: TestModp/test_num__2\
    \ (0.00s)\n        tmp13a9ju6n_test.go:38: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestModp/test_num__3 (0.00s)\n        tmp13a9ju6n_test.go:38: expected\
    \ '%!s(int=8)', got '%!s(int=209)'\n    --- FAIL: TestModp/test_num__4 (0.00s)\n\
    \        tmp13a9ju6n_test.go:38: expected '%!s(int=1)', got '%!s(int=215488718329327)'\n\
    \    --- FAIL: TestModp/test_num__5 (0.00s)\n        tmp13a9ju6n_test.go:38: expected\
    \ '%!s(int=4)', got '%!s(int=7375)'\n    --- FAIL: TestModp/test_num__6 (0.00s)\n\
    \        tmp13a9ju6n_test.go:38: expected '%!s(int=3)', got '%!s(int=7505)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n < 0 {\n        n *= -1\n    }\n    if n < p {\n        return n\n    }\n \
    \   if n == p {\n        return n\n    }\n    if n > p {\n        return modp(n\
    \ - p, p)\n    }\n    return 0\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmptt496y22_test.go:44: expected '%!s(int=2)', got '%!s(int=91)'\n  \
    \  --- FAIL: TestModp/test_num__2 (0.00s)\n        tmptt496y22_test.go:44: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmptt496y22_test.go:44: expected '%!s(int=8)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmptt496y22_test.go:44: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmptt496y22_test.go:44: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmptt496y22_test.go:44: expected\
    \ '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075116
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n    }\n\
    \    if p < 2 {\n        return modp(n - 1, p) % p\n    }\n    if p > 2 {\n  \
    \      return modp(n - 1, p) % p\n    }\n    return modp(n - 2, p) % p\n}\n\n\
    func TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101, 101),\
    \ expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n     { actual:\
    \ candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101), expected:\
    \ 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual: candidate(31,\
    \ 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpd998rht1_test.go:44: expected '%!s(int=3)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpd998rht1_test.go:44: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__2 (0.00s)\n\
    \        tmpd998rht1_test.go:44: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__3 (0.00s)\n        tmpd998rht1_test.go:44: expected\
    \ '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__4 (0.00s)\n\
    \        tmpd998rht1_test.go:44: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__5 (0.00s)\n        tmpd998rht1_test.go:44: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__6 (0.00s)\n\
    \        tmpd998rht1_test.go:44: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075123
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n    }\n\
    \    if p < 2 {\n        return modp(n / 2, p)\n    }\n    if p > 2 {\n      \
    \  return modp(n / 2, p)\n    }\n    return modp(n / 2, p) + modp(n / 2, p)\n\
    }\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmp8g42prly_test.go:44: expected '%!s(int=3)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmp8g42prly_test.go:44: expected\
    \ '%!s(int=2)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__2 (0.00s)\n\
    \        tmp8g42prly_test.go:44: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__3 (0.00s)\n        tmp8g42prly_test.go:44: expected\
    \ '%!s(int=8)', got '%!s(int=11)'\n    --- FAIL: TestModp/test_num__4 (0.00s)\n\
    \        tmp8g42prly_test.go:44: expected '%!s(int=1)', got '%!s(int=101)'\n \
    \   --- FAIL: TestModp/test_num__5 (0.00s)\n        tmp8g42prly_test.go:44: expected\
    \ '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestModp/test_num__6 (0.00s)\n\
    \        tmp8g42prly_test.go:44: expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075124
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n    }\n\
    \    return modp(n >> 1, p) + p\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmp15u6q3x1_test.go:38: expected '%!s(int=3)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestModp/test_num__1 (0.00s)\n        tmp15u6q3x1_test.go:38: expected\
    \ '%!s(int=2)', got '%!s(int=1111)'\n    --- FAIL: TestModp/test_num__2 (0.00s)\n\
    \        tmp15u6q3x1_test.go:38: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__3 (0.00s)\n        tmp15u6q3x1_test.go:38: expected\
    \ '%!s(int=8)', got '%!s(int=22)'\n    --- FAIL: TestModp/test_num__4 (0.00s)\n\
    \        tmp15u6q3x1_test.go:38: expected '%!s(int=1)', got '%!s(int=707)'\n \
    \   --- FAIL: TestModp/test_num__5 (0.00s)\n        tmp15u6q3x1_test.go:38: expected\
    \ '%!s(int=4)', got '%!s(int=25)'\n    --- FAIL: TestModp/test_num__6 (0.00s)\n\
    \        tmp15u6q3x1_test.go:38: expected '%!s(int=3)', got '%!s(int=25)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075116
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n    }\n\
    \    if p < 2 {\n        return modp(n / 2, p)\n    }\n    if p > 2 {\n      \
    \  return modp(n / 2, p)\n    }\n    if n == p {\n        return modp(n / 2, p)\n\
    \    }\n    if n % 2 == 0 {\n        return modp(n / 2, p)\n    }\n    return\
    \ modp(n / 2, p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual:\
    \ candidate(1101, 101), expected: 2 },\n     { actual: candidate(0, 101), expected:\
    \ 1 },\n     { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100,\
    \ 101), expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n    \
    \ { actual: candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmph43igzc3_test.go:50: expected '%!s(int=3)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmph43igzc3_test.go:50: expected\
    \ '%!s(int=2)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__2 (0.00s)\n\
    \        tmph43igzc3_test.go:50: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__3 (0.00s)\n        tmph43igzc3_test.go:50: expected\
    \ '%!s(int=8)', got '%!s(int=11)'\n    --- FAIL: TestModp/test_num__4 (0.00s)\n\
    \        tmph43igzc3_test.go:50: expected '%!s(int=1)', got '%!s(int=101)'\n \
    \   --- FAIL: TestModp/test_num__5 (0.00s)\n        tmph43igzc3_test.go:50: expected\
    \ '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestModp/test_num__6 (0.00s)\n\
    \        tmph43igzc3_test.go:50: expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075124
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    x :=\
    \ n\n    for {\n        if x&1 != 0 {\n            x >>= 1\n            x ^= p\n\
    \        } else {\n            return x\n        }\n    }\n}\n\nfunc TestModp(t\
    \ *testing.T) {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 5), expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n  \
    \   { actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpvtd5rz2v_test.go:40: expected '%!s(int=3)', got '%!s(int=4)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpvtd5rz2v_test.go:40: expected\
    \ '%!s(int=2)', got '%!s(int=324)'\n    --- FAIL: TestModp/test_num__2 (0.00s)\n\
    \        tmpvtd5rz2v_test.go:40: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__3 (0.00s)\n        tmpvtd5rz2v_test.go:40: expected\
    \ '%!s(int=8)', got '%!s(int=10)'\n    --- FAIL: TestModp/test_num__4 (0.00s)\n\
    \        tmpvtd5rz2v_test.go:40: expected '%!s(int=1)', got '%!s(int=100)'\n \
    \   --- FAIL: TestModp/test_num__5 (0.00s)\n        tmpvtd5rz2v_test.go:40: expected\
    \ '%!s(int=4)', got '%!s(int=30)'\n    --- FAIL: TestModp/test_num__6 (0.00s)\n\
    \        tmpvtd5rz2v_test.go:40: expected '%!s(int=3)', got '%!s(int=10)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075116
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n < 0 {\n        n *= -1\n    }\n    if n < p {\n        return n\n    }\n \
    \   if n == p {\n        return 1\n    }\n    if n == p+1 {\n        return 2\n\
    \    }\n    if n == p+2 {\n        return 3\n    }\n    if n == p+3 {\n      \
    \  return 4\n    }\n    if n == p+4 {\n        return 5\n    }\n    if n == p+5\
    \ {\n        return 6\n    }\n    if n == p+6 {\n        return 7\n    }\n   \
    \ if n == p+7 {\n        return 8\n    }\n    if n == p+8 {\n        return 9\n\
    \    }\n    if n == p+9 {\n        return 10\n    }\n    if n == p+10 {\n    \
    \    return 11\n    }\n    if n == p+11 {\n        return 12\n    }\n    if n\
    \ == p+12 {\n        return 13\n    }\n    if n == p+13 {\n        return 14\n\
    \    }\n    if n == p+14 {\n        return 15\n    }\n    if n == p+15 {\n   \
    \     return 16\n    }\n    if n == p+16 {\n        return 17\n    }\n    if n\
    \ == p+17 {\n        return 18\n    }\n    if n == p+18 {\n        return 19\n\
    \    }\n    if n == p+19 {\n        return 20\n    }\n    if n == p+20 {\n   \
    \     return 21\n    }\n    if n == p+21 {\n        return 22\n    }\n    if n\
    \ == p+22 {\n        return 23\n    }\n    if n == p+23 {\n        return 24\n\
    \    }\n    if n == p+24 {\n        return 25\n    }\n    if n == p+25 {\n   \
    \     return 26\n    }\n    if n == p+26 {\n        return 27\n    }\n    if n\
    \ == p+27 {\n        return 28\n    }\n    if n == p+28 {\n        return 29\n\
    \    }\n    if n == p+29 {\n        return 30\n    }\n    if n == p+30 {\n   \
    \     return 31\n    }\n    if n == p+31 {\n        return 32\n    }\n    if n\
    \ == p+32 {\n        return 33\n    }\n    if n == p+33 {\n        return 34\n\
    \    }\n    if n == p+34 {\n        return 35\n    }\n    if n == p+35 {\n   \
    \     return 36\n    }\n    if n == p+36 {\n        return 37\n    }\n    if n\
    \ == p+37 {\n        return 38\n    }\n    if n == p+38 {\n        return 39\n\
    \    }\n    if n == p+39 {\n        return 40\n    }\n    if n == p+40 {\n   \
    \     return 41\n    }\n    if n == p+41 {\n        return 42\nfunc TestModp(t\
    \ *testing.T) {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 5), expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n  \
    \   { actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpr26vqp7w_test.go:141:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075124
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n < 0 {\n        n *= -1\n    }\n    if n < p {\n        return n\n    }\n \
    \   if n == p {\n        return n\n    }\n    if n > p {\n        return modp(n\
    \ - p, p)\n    }\n    return 0\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmptt496y22_test.go:44: expected '%!s(int=2)', got '%!s(int=91)'\n  \
    \  --- FAIL: TestModp/test_num__2 (0.00s)\n        tmptt496y22_test.go:44: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmptt496y22_test.go:44: expected '%!s(int=8)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmptt496y22_test.go:44: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmptt496y22_test.go:44: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmptt496y22_test.go:44: expected\
    \ '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075116
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n == 0 {\n        return 0\n    }\n    if p == 0 {\n        return n\n    }\n\
    \    if p == 1 {\n        return n-1\n    }\n    if n%2 == 0 {\n        return\
    \ modp(n / 2, p)\n    }\n    return modp(n / 2, p) + p\n}\n\nfunc TestModp(t *testing.T)\
    \ {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5),\
    \ expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     {\
    \ actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmp4dbz2mmb_test.go:44: expected '%!s(int=3)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestModp/test_num__1 (0.00s)\n        tmp4dbz2mmb_test.go:44: expected\
    \ '%!s(int=2)', got '%!s(int=505)'\n    --- FAIL: TestModp/test_num__2 (0.00s)\n\
    \        tmp4dbz2mmb_test.go:44: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__3 (0.00s)\n        tmp4dbz2mmb_test.go:44: expected\
    \ '%!s(int=8)', got '%!s(int=22)'\n    --- FAIL: TestModp/test_num__4 (0.00s)\n\
    \        tmp4dbz2mmb_test.go:44: expected '%!s(int=1)', got '%!s(int=303)'\n \
    \   --- FAIL: TestModp/test_num__5 (0.00s)\n        tmp4dbz2mmb_test.go:44: expected\
    \ '%!s(int=4)', got '%!s(int=20)'\n    --- FAIL: TestModp/test_num__6 (0.00s)\n\
    \        tmp4dbz2mmb_test.go:44: expected '%!s(int=3)', got '%!s(int=25)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075124
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n < 0 {\n        n *= -1\n    }\n    if n < p {\n        return n\n    }\n \
    \   if n == p {\n        return 1\n    }\n    if n == p+1 {\n        return 2\n\
    \    }\n    if n == p+2 {\n        return 3\n    }\n    if n == p+3 {\n      \
    \  return 4\n    }\n    if n == p+4 {\n        return 5\n    }\n    if n == p+5\
    \ {\n        return 6\n    }\n    if n == p+6 {\n        return 7\n    }\n   \
    \ if n == p+7 {\n        return 8\n    }\n    if n == p+8 {\n        return 9\n\
    \    }\n    if n == p+9 {\n        return 10\n    }\n    if n == p+10 {\n    \
    \    return 11\n    }\n    if n == p+11 {\n        return 12\n    }\n    if n\
    \ == p+12 {\n        return 13\n    }\n    if n == p+13 {\n        return 14\n\
    \    }\n    if n == p+14 {\n        return 15\n    }\n    if n == p+15 {\n   \
    \     return 16\n    }\n    if n == p+16 {\n        return 17\n    }\n    if n\
    \ == p+17 {\n        return 18\n    }\n    if n == p+18 {\n        return 19\n\
    \    }\n    if n == p+19 {\n        return 20\n    }\n    if n == p+20 {\n   \
    \     return 21\n    }\n    if n == p+21 {\n        return 22\n    }\n    if n\
    \ == p+22 {\n        return 23\n    }\n    if n == p+23 {\n        return 24\n\
    \    }\n    if n == p+24 {\n        return 25\n    }\n    if n == p+25 {\n   \
    \     return 26\n    }\n    if n == p+26 {\n        return 27\n    }\n    if n\
    \ == p+27 {\n        return 28\n    }\n    if n == p+28 {\n        return 29\n\
    \    }\n    if n == p+29 {\n        return 30\n    }\n    if n == p+30 {\n   \
    \     return 31\n    }\n    if n == p+31 {\n        return 32\n    }\n    if n\
    \ == p+32 {\n        return 33\n    }\n    if n == p+33 {\n        return 34\n\
    \    }\n    if n == p+34 {\n        return 35\n    }\n    if n == p+35 {\n   \
    \     return 36\n    }\n    if n == p+36 {\n        return 37\n    }\n    if n\
    \ == p+37 {\n        return 38\n    }\n    if n == p+38 {\n        return 39\n\
    \    }\n    if n == p+39 {\n        return 40\n    }\n    if n == p+40 {\n   \
    \     return 41\n    }\n    if n == p+41 {\n        return 42\nfunc TestModp(t\
    \ *testing.T) {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 5), expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n  \
    \   { actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpr26vqp7w_test.go:141:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075124
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    x :=\
    \ n\n    for {\n        if x&1 != 0 {\n            x >>= 1\n            x ^= p\n\
    \        } else {\n            break\n        }\n    }\n    return x\n}\n\nfunc\
    \ TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 5), expected: 3 },\n     { actual: candidate(1101, 101), expected:\
    \ 2 },\n     { actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3,\
    \ 11), expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n  \
    \   { actual: candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpaxqrx8mm_test.go:41: expected '%!s(int=3)', got '%!s(int=4)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpaxqrx8mm_test.go:41: expected\
    \ '%!s(int=2)', got '%!s(int=324)'\n    --- FAIL: TestModp/test_num__2 (0.00s)\n\
    \        tmpaxqrx8mm_test.go:41: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__3 (0.00s)\n        tmpaxqrx8mm_test.go:41: expected\
    \ '%!s(int=8)', got '%!s(int=10)'\n    --- FAIL: TestModp/test_num__4 (0.00s)\n\
    \        tmpaxqrx8mm_test.go:41: expected '%!s(int=1)', got '%!s(int=100)'\n \
    \   --- FAIL: TestModp/test_num__5 (0.00s)\n        tmpaxqrx8mm_test.go:41: expected\
    \ '%!s(int=4)', got '%!s(int=30)'\n    --- FAIL: TestModp/test_num__6 (0.00s)\n\
    \        tmpaxqrx8mm_test.go:41: expected '%!s(int=3)', got '%!s(int=10)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075116
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n    }\n\
    \    return modp(n >> 1, p) + p\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmp15u6q3x1_test.go:38: expected '%!s(int=3)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestModp/test_num__1 (0.00s)\n        tmp15u6q3x1_test.go:38: expected\
    \ '%!s(int=2)', got '%!s(int=1111)'\n    --- FAIL: TestModp/test_num__2 (0.00s)\n\
    \        tmp15u6q3x1_test.go:38: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__3 (0.00s)\n        tmp15u6q3x1_test.go:38: expected\
    \ '%!s(int=8)', got '%!s(int=22)'\n    --- FAIL: TestModp/test_num__4 (0.00s)\n\
    \        tmp15u6q3x1_test.go:38: expected '%!s(int=1)', got '%!s(int=707)'\n \
    \   --- FAIL: TestModp/test_num__5 (0.00s)\n        tmp15u6q3x1_test.go:38: expected\
    \ '%!s(int=4)', got '%!s(int=25)'\n    --- FAIL: TestModp/test_num__6 (0.00s)\n\
    \        tmp15u6q3x1_test.go:38: expected '%!s(int=3)', got '%!s(int=25)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075116
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n    }\n\
    \    if p < 2 {\n        return modp(n - 1, p+1) + p\n    }\n    if p < 3 {\n\
    \        return modp(n - 1, p+1) + modp(n - 2, p+1) + p\n    }\n    if p < 4 {\n\
    \        return modp(n - 1, p+1) + modp(n - 2, p+1) + modp(n - 3, p+1) + p\n \
    \   }\n    if p < 5 {\n        return modp(n - 1, p+1) + modp(n - 2, p+1) + modp(n\
    \ - 3, p+1) + modp(n - 4, p+1) + p\n    }\n    if p < 6 {\n        return modp(n\
    \ - 1, p+1) + modp(n - 2, p+1) + modp(n - 3, p+1) + modp(n - 4, p+1) + modp(n\
    \ - 5, p+1) + p\n    }\n    if p < 7 {\n        return modp(n - 1, p+1) + modp(n\
    \ - 2, p+1) + modp(n - 3, p+1) + modp(n - 4, p+1) + modp(n - 5, p+1) + modp(n\
    \ - 6, p+1) + p\n    }\n    if p < 8 {\n        return modp(n - 1, p+1) + modp(n\
    \ - 2, p+1) + modp(n - 3, p+1) + modp(n - 4, p+1) + modp(n - 5, p+1) + modp(n\
    \ - 6, p+1) + modp(n - 7, p+1) + p\n    }\n    if p < 9 {\n        return modp(n\
    \ - 1, p+1) + modp(n - 2, p+1) + modp(n - 3, p+1) + modp(n - 4, p+1) + modp(n\
    \ - 5, p+1) + modp(n - 6, p+1) + modp(n - 7, p+1) + modp(n - 8, p+1) + p\n   \
    \ }\n    if p < 10 {\n        return modp(n - 1, p+1) + modp(n - 2, p+1) + modp(n\
    \ - 3, p+1) + modp(n - 4, p+1) + modp(n - 5, p+1) + modp(n - 6, p+1) + modp(n\
    \ - 7, p+1) + modp(n - 8, p+1) + modp(n - 9, p+1) + p\n    }\n    if p < 11 {\n\
    \        return modp(n - 1, p+1) + modp(n - 2, p+1) + modp(n - 3, p+1) + modp(n\
    \ - 4, p+1) + modp(n - 5, p+1) + modp(n - 6, p+1) + modp(n - 7, p+1) + modp(n\
    \ - 8, p+1) + modp(n - 9, p+1) + modp(n - 10, p+1) + p\n    }\n    if p < 12 {\n\
    \        return modp(n - 1, p+1) + \nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz43zs5oe_test.go:48:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075117
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n    }\n\
    \    return modp(n >> 1, p) + p\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmp15u6q3x1_test.go:38: expected '%!s(int=3)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestModp/test_num__1 (0.00s)\n        tmp15u6q3x1_test.go:38: expected\
    \ '%!s(int=2)', got '%!s(int=1111)'\n    --- FAIL: TestModp/test_num__2 (0.00s)\n\
    \        tmp15u6q3x1_test.go:38: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__3 (0.00s)\n        tmp15u6q3x1_test.go:38: expected\
    \ '%!s(int=8)', got '%!s(int=22)'\n    --- FAIL: TestModp/test_num__4 (0.00s)\n\
    \        tmp15u6q3x1_test.go:38: expected '%!s(int=1)', got '%!s(int=707)'\n \
    \   --- FAIL: TestModp/test_num__5 (0.00s)\n        tmp15u6q3x1_test.go:38: expected\
    \ '%!s(int=4)', got '%!s(int=25)'\n    --- FAIL: TestModp/test_num__6 (0.00s)\n\
    \        tmp15u6q3x1_test.go:38: expected '%!s(int=3)', got '%!s(int=25)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075116
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n    }\n\
    \    if p < 2 {\n        return modp(n - 1, p) + p\n    }\n    if p < 3 {\n  \
    \      return modp(n - 1, p) + modp(n - 2, p)\n    }\n    if p < 4 {\n       \
    \ return modp(n - 1, p) + modp(n - 2, p) + modp(n - 3, p)\n    }\n    if p < 5\
    \ {\n        return modp(n - 1, p) + modp(n - 2, p) + modp(n - 3, p) + modp(n\
    \ - 4, p)\n    }\n    if p < 6 {\n        return modp(n - 1, p) + modp(n - 2,\
    \ p) + modp(n - 3, p) + modp(n - 4, p) + modp(n - 5, p)\n    }\n    if p < 7 {\n\
    \        return modp(n - 1, p) + modp(n - 2, p) + modp(n - 3, p) + modp(n - 4,\
    \ p) + modp(n - 5, p) + modp(n - 6, p)\n    }\n    if p < 8 {\n        return\
    \ modp(n - 1, p) + modp(n - 2, p) + modp(n - 3, p) + modp(n - 4, p) + modp(n -\
    \ 5, p) + modp(n - 6, p) + modp(n - 7, p)\n    }\n    if p < 9 {\n        return\
    \ modp(n - 1, p) + modp(n - 2, p) + modp(n - 3, p) + modp(n - 4, p) + modp(n -\
    \ 5, p) + modp(n - 6, p) + modp(n - 7, p) + modp(n - 8, p)\n    }\n    if p <\
    \ 10 {\n        return modp(n - 1, p) + modp(n - 2, p) + modp(n - 3, p) + modp(n\
    \ - 4, p) + modp(n - 5, p) + modp(n - 6, p) + modp(n - 7, p) + modp(n - 8, p)\
    \ + modp(n - 9, p)\n    }\n    if p < 11 {\n        return modp(n - 1, p) + modp(n\
    \ - 2, p) + modp(n - 3, p) + modp(n - 4, p) + modp(n - 5, p) + modp(n - 6, p)\
    \ + modp(n - 7, p) + modp(n - 8, p) + modp(n - 9, p) + modp(n - 10, p)\n    }\n\
    \    if p < 12 {\n        return modp(n - 1, p) + modp(n - 2, p) + modp(n - 3,\
    \ p) + modp(n - 4, p) + modp(n - 5, p) + modp(n - 6, p) + modp(n - 7, p) + modp(n\
    \ - 8, p) + modp(n - 9, p) + modp(n - 10, p) + modp(n - 11, p)\n    }\n    if\
    \ p < 13 {\n        return modp(n - 1, p) + \nfunc TestModp(t *testing.T) {\n\
    \  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5), expected:\
    \ 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpig6ldhgc_test.go:51:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075118
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    r :=\
    \ 0\n    for i := 0; i < n; i++ {\n        r = (r * p + 1) & p\n    }\n    return\
    \ r\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmp72vzqq5t_test.go:36: expected '%!s(int=3)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmp72vzqq5t_test.go:36: expected\
    \ '%!s(int=2)', got '%!s(int=65)'\n    --- FAIL: TestModp/test_num__2 (0.00s)\n\
    \        tmp72vzqq5t_test.go:36: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__3 (0.00s)\n        tmp72vzqq5t_test.go:36: expected\
    \ '%!s(int=8)', got '%!s(int=9)'\n    --- FAIL: TestModp/test_num__4 (0.00s)\n\
    \        tmp72vzqq5t_test.go:36: expected '%!s(int=1)', got '%!s(int=64)'\n  \
    \  --- FAIL: TestModp/test_num__6 (0.00s)\n        tmp72vzqq5t_test.go:36: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075124
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n    }\n\
    \    if p < 2 {\n        return modp(n - 1, p) % p\n    }\n    if p > 2 {\n  \
    \      return modp(n - 1, (p + 1) * (p - 1)) % p\n    }\n    return modp(n - 1,\
    \ (p + 1) * (p - 1)) % p\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual:\
    \ candidate(1101, 101), expected: 2 },\n     { actual: candidate(0, 101), expected:\
    \ 1 },\n     { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100,\
    \ 101), expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n    \
    \ { actual: candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmpfpo_bb9l_test.go:44: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__2 (0.00s)\n        tmpfpo_bb9l_test.go:44: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpfpo_bb9l_test.go:44: expected '%!s(int=8)', got '%!s(int=9)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpfpo_bb9l_test.go:44: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpfpo_bb9l_test.go:44: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpfpo_bb9l_test.go:44: expected\
    \ '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075118
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n    }\n\
    \    return modp(n / 2, p) + p\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpsfs0hyrr_test.go:38: expected '%!s(int=3)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpsfs0hyrr_test.go:38: expected\
    \ '%!s(int=2)', got '%!s(int=1111)'\n    --- FAIL: TestModp/test_num__2 (0.00s)\n\
    \        tmpsfs0hyrr_test.go:38: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__3 (0.00s)\n        tmpsfs0hyrr_test.go:38: expected\
    \ '%!s(int=8)', got '%!s(int=22)'\n    --- FAIL: TestModp/test_num__4 (0.00s)\n\
    \        tmpsfs0hyrr_test.go:38: expected '%!s(int=1)', got '%!s(int=707)'\n \
    \   --- FAIL: TestModp/test_num__5 (0.00s)\n        tmpsfs0hyrr_test.go:38: expected\
    \ '%!s(int=4)', got '%!s(int=25)'\n    --- FAIL: TestModp/test_num__6 (0.00s)\n\
    \        tmpsfs0hyrr_test.go:38: expected '%!s(int=3)', got '%!s(int=25)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075116
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    x :=\
    \ n\n    for {\n        if x&1 != 0 {\n            x >>= 1\n            x ^= p\n\
    \        } else {\n            return x\n        }\n    }\n}\n\nfunc TestModp(t\
    \ *testing.T) {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 5), expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n  \
    \   { actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpvtd5rz2v_test.go:40: expected '%!s(int=3)', got '%!s(int=4)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpvtd5rz2v_test.go:40: expected\
    \ '%!s(int=2)', got '%!s(int=324)'\n    --- FAIL: TestModp/test_num__2 (0.00s)\n\
    \        tmpvtd5rz2v_test.go:40: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__3 (0.00s)\n        tmpvtd5rz2v_test.go:40: expected\
    \ '%!s(int=8)', got '%!s(int=10)'\n    --- FAIL: TestModp/test_num__4 (0.00s)\n\
    \        tmpvtd5rz2v_test.go:40: expected '%!s(int=1)', got '%!s(int=100)'\n \
    \   --- FAIL: TestModp/test_num__5 (0.00s)\n        tmpvtd5rz2v_test.go:40: expected\
    \ '%!s(int=4)', got '%!s(int=30)'\n    --- FAIL: TestModp/test_num__6 (0.00s)\n\
    \        tmpvtd5rz2v_test.go:40: expected '%!s(int=3)', got '%!s(int=10)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075116
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n    }\n\
    \    if p < 2 {\n        return modp(n - 1, p) + p\n    }\n    if p < 3 {\n  \
    \      return modp(n - 2, p) + p\n    }\n    if p < 4 {\n        return modp(n\
    \ - 3, p) + p\n    }\n    if p < 5 {\n        return modp(n - 4, p) + p\n    }\n\
    \    if p < 6 {\n        return modp(n - 5, p) + p\n    }\n    if p < 7 {\n  \
    \      return modp(n - 6, p) + p\n    }\n    if p < 8 {\n        return modp(n\
    \ - 7, p) + p\n    }\n    if p < 9 {\n        return modp(n - 8, p) + p\n    }\n\
    \    if p < 10 {\n        return modp(n - 9, p) + p\n    }\n    if p < 11 {\n\
    \        return modp(n - 10, p) + p\n    }\n    if p < 12 {\n        return modp(n\
    \ - 11, p) + p\n    }\n    if p < 13 {\n        return modp(n - 12, p) + p\n \
    \   }\n    if p < 14 {\n        return modp(n - 13, p) + p\n    }\n    if p <\
    \ 15 {\n        return modp(n - 14, p) + p\n    }\n    if p < 16 {\n        return\
    \ modp(n - 15, p) + p\n    }\n    if p < 17 {\n        return modp(n - 16, p)\
    \ + p\n    }\n    if p < 18 {\n        return modp(n - 17, p) + p\n    }\n   \
    \ if p < 19 {\n        return modp(n - 18, p) + p\n    }\n    if p < 20 {\n  \
    \      return modp(n - 19, p) + p\n    }\n    if p < 21 {\n        return modp(n\
    \ - 20, p) + p\n    }\n    if p < 22 {\n        return modp(n - 21, p) + p\n \
    \   }\n    if p < 23 {\n        return modp(n - 22, p) + p\n    }\n    if p <\
    \ 24 {\n        return modp(n - 23, p) + p\n    }\n    if p < 25 {\n        return\
    \ modp(n - 24, p) + p\n    }\n    if p < 26 {\n        return modp(n - 25, p)\
    \ + p\n    }\n    if p < 27 {\n        return modp(n - 26, p) + p\n    }\n   \
    \ if p < 28 {\n        return modp(n - 27, p) + p\n    }\n    if p < 29 {\n  \
    \      return modp(n - 28, p) + p\n    }\n    if p < 30 {\n        return modp(n\
    \ - 29, p) + p\n    }\n    if p < 31 {\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp49ew5d42_test.go:105:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075117
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    r :=\
    \ 0\n    for i := 0; i < n; i++ {\n        r = (r * p + 1) & p\n    }\n    return\
    \ r\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmp72vzqq5t_test.go:36: expected '%!s(int=3)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmp72vzqq5t_test.go:36: expected\
    \ '%!s(int=2)', got '%!s(int=65)'\n    --- FAIL: TestModp/test_num__2 (0.00s)\n\
    \        tmp72vzqq5t_test.go:36: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__3 (0.00s)\n        tmp72vzqq5t_test.go:36: expected\
    \ '%!s(int=8)', got '%!s(int=9)'\n    --- FAIL: TestModp/test_num__4 (0.00s)\n\
    \        tmp72vzqq5t_test.go:36: expected '%!s(int=1)', got '%!s(int=64)'\n  \
    \  --- FAIL: TestModp/test_num__6 (0.00s)\n        tmp72vzqq5t_test.go:36: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075124
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n    }\n\
    \    if p < 2 {\n        return modp(n - 1, p) % p\n    }\n    if p > p {\n  \
    \      return modp(n - 1, p) % p\n    }\n    if p % 2 == 0 {\n        return modp(n\
    \ - 1, p) % p\n    }\n    return modp(n - 2, p) % p\n}\n\nfunc TestModp(t *testing.T)\
    \ {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5),\
    \ expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     {\
    \ actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpi0zqmjjz_test.go:47: expected '%!s(int=3)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpi0zqmjjz_test.go:47: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__2 (0.00s)\n\
    \        tmpi0zqmjjz_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__3 (0.00s)\n        tmpi0zqmjjz_test.go:47: expected\
    \ '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__4 (0.00s)\n\
    \        tmpi0zqmjjz_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__5 (0.00s)\n        tmpi0zqmjjz_test.go:47: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__6 (0.00s)\n\
    \        tmpi0zqmjjz_test.go:47: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075124
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    r :=\
    \ n\n    for i := 0; i < p; i++ {\n        r = r << 1\n        if r > n {\n  \
    \          r = r - n\n        }\n    }\n    return r\n}\n\nfunc TestModp(t *testing.T)\
    \ {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5),\
    \ expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     {\
    \ actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmpzagj84my_test.go:39: expected '%!s(int=2)', got '%!s(int=1101)'\n\
    \    --- FAIL: TestModp/test_num__2 (0.00s)\n        tmpzagj84my_test.go:39: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpzagj84my_test.go:39: expected '%!s(int=8)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpzagj84my_test.go:39: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpzagj84my_test.go:39: expected '%!s(int=4)', got '%!s(int=30)'\n  \
    \  --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpzagj84my_test.go:39: expected\
    \ '%!s(int=3)', got '%!s(int=31)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660075124
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n    }\n\
    \    return modp(n / 2, p) + p\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpsfs0hyrr_test.go:38: expected '%!s(int=3)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpsfs0hyrr_test.go:38: expected\
    \ '%!s(int=2)', got '%!s(int=1111)'\n    --- FAIL: TestModp/test_num__2 (0.00s)\n\
    \        tmpsfs0hyrr_test.go:38: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__3 (0.00s)\n        tmpsfs0hyrr_test.go:38: expected\
    \ '%!s(int=8)', got '%!s(int=22)'\n    --- FAIL: TestModp/test_num__4 (0.00s)\n\
    \        tmpsfs0hyrr_test.go:38: expected '%!s(int=1)', got '%!s(int=707)'\n \
    \   --- FAIL: TestModp/test_num__5 (0.00s)\n        tmpsfs0hyrr_test.go:38: expected\
    \ '%!s(int=4)', got '%!s(int=25)'\n    --- FAIL: TestModp/test_num__6 (0.00s)\n\
    \        tmpsfs0hyrr_test.go:38: expected '%!s(int=3)', got '%!s(int=25)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075116
- exit_code: null
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    x :=\
    \ n\n    for {\n        if x < (p / 2) {\n            x <<= 1\n        } else\
    \ {\n            x >>= 1\n        }\n        if x == 0 {\n            break\n\
    \        }\n    }\n    return x\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075131
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n    }\n\
    \    if p < 2 {\n        return modp(n - 1, p) + p\n    }\n    if p < 3 {\n  \
    \      return modp(n - 2, p) + p\n    }\n    if p < 4 {\n        return modp(n\
    \ - 3, p) + p\n    }\n    if p < 5 {\n        return modp(n - 4, p) + p\n    }\n\
    \    if p < 6 {\n        return modp(n - 5, p) + p\n    }\n    if p < 7 {\n  \
    \      return modp(n - 6, p) + p\n    }\n    if p < 8 {\n        return modp(n\
    \ - 7, p) + p\n    }\n    if p < 9 {\n        return modp(n - 8, p) + p\n    }\n\
    \    if p < 10 {\n        return modp(n - 9, p) + p\n    }\n    if p < 11 {\n\
    \        return modp(n - 10, p) + p\n    }\n    if p < 12 {\n        return modp(n\
    \ - 11, p) + p\n    }\n    if p < 13 {\n        return modp(n - 12, p) + p\n \
    \   }\n    if p < 14 {\n        return modp(n - 13, p) + p\n    }\n    if p <\
    \ 15 {\n        return modp(n - 14, p) + p\n    }\n    if p < 16 {\n        return\
    \ modp(n - 15, p) + p\n    }\n    if p < 17 {\n        return modp(n - 16, p)\
    \ + p\n    }\n    if p < 18 {\n        return modp(n - 17, p) + p\n    }\n   \
    \ if p < 19 {\n        return modp(n - 18, p) + p\n    }\n    if p < 20 {\n  \
    \      return modp(n - 19, p) + p\n    }\n    if p < 21 {\n        return modp(n\
    \ - 20, p) + p\n    }\n    if p < 22 {\n        return modp(n - 21, p) + p\n \
    \   }\n    if p < 23 {\n        return modp(n - 22, p) + p\n    }\n    if p <\
    \ 24 {\n        return modp(n - 23, p) + p\n    }\n    if p < 25 {\n        return\
    \ modp(n - 24, p) + p\n    }\n    if p < 26 {\n        return modp(n - 25, p)\
    \ + p\n    }\n    if p < 27 {\n        return modp(n - 26, p) + p\n    }\n   \
    \ if p < 28 {\n        return modp(n - 27, p) + p\n    }\n    if p < 29 {\n  \
    \      return modp(n - 28, p) + p\n    }\n    if p < 30 {\n        return modp(n\
    \ - 29, p) + p\n    }\n    if p < 31 {\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp49ew5d42_test.go:105:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075117
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n    }\n\
    \    if p < 2 {\n        return modp(n - 1, p) + p\n    }\n    if p < 4 {\n  \
    \      return modp(n - 2, p) + p\n    }\n    if p < 8 {\n        return modp(n\
    \ - 4, p) + p\n    }\n    if p < 16 {\n        return modp(n - 8, p) + p\n   \
    \ }\n    if p < 32 {\n        return modp(n - 16, p) + p\n    }\n    if p < 64\
    \ {\n        return modp(n - 32, p) + p\n    }\n    if p < 128 {\n        return\
    \ modp(n - 64, p) + p\n    }\n    if p < 256 {\n        return modp(n - 128, p)\
    \ + p\n    }\n    if p < 512 {\n        return modp(n - 256, p) + p\n    }\n \
    \   if p < 1024 {\n        return modp(n - 512, p) + p\n    }\n    if p < 2048\
    \ {\n        return modp(n - 1024, p) + p\n    }\n    if p < 4096 {\n        return\
    \ modp(n - 2048, p) + p\n    }\n    if p < 8192 {\n        return modp(n - 4096,\
    \ p) + p\n    }\n    if p < 16384 {\n        return modp(n - 8192, p) + p\n  \
    \  }\n    if p < 32768 {\n        return modp(n - 16384, p) + p\n    }\n    if\
    \ p < 65536 {\n        return modp(n - 32768, p) + p\n    }\n    if p < 131072\
    \ {\n        return modp(n - 65536, p) + p\n    }\n    if p < 262144 {\n     \
    \   return modp(n - 131072, p) + p\n    }\n    if p < 524288 {\n        return\
    \ modp(n - 262144, p) + p\n    }\n    if p < 1048576 {\n        return modp(n\
    \ - 524288, p) + p\n    }\n    if p < 2097152 {\n        return modp(n - 1048576,\
    \ p) + p\n    }\n    if p < 4194304 {\n        return modp(n - 2097152, p) + p\n\
    \    }\n    if p < 8388608 {\n        return modp(n - 4194304, p) + p\n    }\n\
    \    if p < 16777216 {\n        return modp(n - 8388608, p) + p\n    }\n    if\
    \ p < 33554432 {\n        return modp(n - 16777216, p) + p\n    }\n    if p <\
    \ 67108864 {\n        return modp(n - 33554432, p) + p\n    }\n    if p < 134217728\n\
    func TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101, 101),\
    \ expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n     { actual:\
    \ candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101), expected:\
    \ 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual: candidate(31,\
    \ 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpy6zutyhx_test.go:95:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075124
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n    }\n\
    \    if p < 2 {\n        return modp(n - 1, p) + p\n    }\n    if p > 2 {\n  \
    \      return modp(n - 1, p) - p\n    }\n    if p < p {\n        return modp(n\
    \ - 1, p) + p\n    }\n    if p > p {\n        return modp(n - 1, p) - p\n    }\n\
    \    if p < p {\n        return modp(n - 1, p) + p\n    }\n    if p > p {\n  \
    \      return modp(n - 1, p) - p\n    }\n    if p < p {\n        return modp(n\
    \ - 1, p) + p\n    }\n    if p > p {\n        return modp(n - 1, p) - p\n    }\n\
    \    if p < p {\n        return modp(n - 1, p) + p\n    }\n    if p > p {\n  \
    \      return modp(n - 1, p) - p\n    }\n    if p < p {\n        return modp(n\
    \ - 1, p) + p\n    }\n    if p > p {\n        return modp(n - 1, p) - p\n    }\n\
    \    if p < p {\n        return modp(n - 1, p) + p\n    }\n    if p > p {\n  \
    \      return modp(n - 1, p) - p\n    }\n    if p < p {\n        return modp(n\
    \ - 1, p) + p\n    }\n    if p > p {\n        return modp(n - 1, p) - p\n    }\n\
    \    if p < p {\n        return modp(n - 1, p) + p\n    }\n    if p > p {\n  \
    \      return modp(n - 1, p) - p\n    }\n    if p < p {\n        return modp(n\
    \ - 1, p) + p\n    }\n    if p > p {\n        return modp(n - 1, p) - p\n    }\n\
    \    if p < p {\n        return modp(n - 1, p) + p\n    }\n    if p > p {\n  \
    \      return modp(n - 1, p) - p\n    }\n    if p < p {\n        return modp(n\
    \ - 1, p) + p\n    }\n    if p > p {\n        return modp(n - 1, p) - p\n    }\n\
    \    if p < p {\n        return modp(n - 1, p) + p\n    }\n    if p > p {\n  \
    \      return modp(n - 1, p) - p\n    }\n    if p < p {\n        return modp(n\
    \ - 1, p) + p\n    }\n    if p > p {\n        return modp(n - 1, p) - p\n    }\n\
    \    if p < p {\n        return modp(n - 1, p) + p\n    }\n    if p > p {\n  \
    \      return modp(n - 1, p) - p\n    }\n    if p < p {\n        return modp(n\
    \ - 1, p) + p\n    }\n    if p > p {\n        return modp(n - 1, p) - p\n    }\n\
    \    if p < p {\n        return modp(n - 1, p) + p\n    }\n\nfunc TestModp(t *testing.T)\
    \ {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5),\
    \ expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     {\
    \ actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp66o72ubc_test.go:116:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075124
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n < 0 {\n        n *= -1\n    }\n    if n < p {\n        return n\n    }\n \
    \   if n == p {\n        return n\n    }\n    if n > p {\n        return modp(n\
    \ - p, p)\n    }\n    return 0\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmptt496y22_test.go:44: expected '%!s(int=2)', got '%!s(int=91)'\n  \
    \  --- FAIL: TestModp/test_num__2 (0.00s)\n        tmptt496y22_test.go:44: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmptt496y22_test.go:44: expected '%!s(int=8)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmptt496y22_test.go:44: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmptt496y22_test.go:44: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmptt496y22_test.go:44: expected\
    \ '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075116
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n < 0 {\n        n *= -1\n    }\n    if n < p {\n        return n\n    }\n \
    \   if n == p {\n        return n\n    }\n    if n > p {\n        return modp(n\
    \ - p, p)\n    }\n    return 0\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmptt496y22_test.go:44: expected '%!s(int=2)', got '%!s(int=91)'\n  \
    \  --- FAIL: TestModp/test_num__2 (0.00s)\n        tmptt496y22_test.go:44: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmptt496y22_test.go:44: expected '%!s(int=8)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmptt496y22_test.go:44: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmptt496y22_test.go:44: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmptt496y22_test.go:44: expected\
    \ '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075116
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\nfunc modp(n int, p int) int {\n    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return p\n    }\n\
    \    return modp(n >> 1, p) + p\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmp15u6q3x1_test.go:38: expected '%!s(int=3)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestModp/test_num__1 (0.00s)\n        tmp15u6q3x1_test.go:38: expected\
    \ '%!s(int=2)', got '%!s(int=1111)'\n    --- FAIL: TestModp/test_num__2 (0.00s)\n\
    \        tmp15u6q3x1_test.go:38: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__3 (0.00s)\n        tmp15u6q3x1_test.go:38: expected\
    \ '%!s(int=8)', got '%!s(int=22)'\n    --- FAIL: TestModp/test_num__4 (0.00s)\n\
    \        tmp15u6q3x1_test.go:38: expected '%!s(int=1)', got '%!s(int=707)'\n \
    \   --- FAIL: TestModp/test_num__5 (0.00s)\n        tmp15u6q3x1_test.go:38: expected\
    \ '%!s(int=4)', got '%!s(int=25)'\n    --- FAIL: TestModp/test_num__6 (0.00s)\n\
    \        tmp15u6q3x1_test.go:38: expected '%!s(int=3)', got '%!s(int=25)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075116
