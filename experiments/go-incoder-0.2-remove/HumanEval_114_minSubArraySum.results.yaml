language: go_test.go
name: HumanEval_114_minSubArraySum
results:
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    // Write your code here\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nfunc\
    \ TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpd5ocg9nm_test.go:267:6: expected ''('', found TestMinsubarraysum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075559
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    // Write your code here\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nfunc\
    \ TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpd5ocg9nm_test.go:267:6: expected ''('', found TestMinsubarraysum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075559
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    // Write your code here\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nfunc\
    \ TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpd5ocg9nm_test.go:267:6: expected ''('', found TestMinsubarraysum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075559
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    // Write your code here.\n    \n    return 0\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpvv8qtlok_test.go:41: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpvv8qtlok_test.go:41:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpvv8qtlok_test.go:41: expected '%!s(int=-14)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__3 (0.00s)\n        tmpvv8qtlok_test.go:41:\
    \ expected '%!s(int=-9999999999999999)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpvv8qtlok_test.go:41: expected '%!s(int=-6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpvv8qtlok_test.go:41:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpvv8qtlok_test.go:41: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpvv8qtlok_test.go:41:\
    \ expected '%!s(int=-33)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__9\
    \ (0.00s)\n        tmpvv8qtlok_test.go:41: expected '%!s(int=-10)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__10 (0.00s)\n        tmpvv8qtlok_test.go:41:\
    \ expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpvv8qtlok_test.go:41: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075561
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    // Write your code here\n    \n    return 0\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=-14)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__3 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=-9999999999999999)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=-6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=-33)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__9\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=-10)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__10 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075561
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    // Write your code here\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nfunc\
    \ TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpd5ocg9nm_test.go:267:6: expected ''('', found TestMinsubarraysum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075559
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    if len(nums) == 0 {\n        return 0\n    }\n    \n    min := nums[0]\n\
    \    max := nums[0]\n    \n    for _, v := range nums[1:] {\n        if v > max\
    \ {\n            max = v\n        }\n        if v < min {\n            min = v\n\
    \        }\n    }\n    \n    return min + max\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpmm13v4n0_test.go:55: expected '%!s(int=1)', got '%!s(int=5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpmm13v4n0_test.go:55:\
    \ expected '%!s(int=-6)', got '%!s(int=-4)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpmm13v4n0_test.go:55: expected '%!s(int=-14)', got '%!s(int=-8)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__3 (0.00s)\n        tmpmm13v4n0_test.go:55:\
    \ expected '%!s(int=-9999999999999999)', got '%!s(int=-19999999999999998)'\n \
    \   --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmpmm13v4n0_test.go:55:\
    \ expected '%!s(int=0)', got '%!s(int=1000000)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpmm13v4n0_test.go:55: expected '%!s(int=-6)', got '%!s(int=5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpmm13v4n0_test.go:55:\
    \ expected '%!s(int=-6)', got '%!s(int=95)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpmm13v4n0_test.go:55: expected '%!s(int=3)', got '%!s(int=16)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpmm13v4n0_test.go:55:\
    \ expected '%!s(int=-33)', got '%!s(int=67)'\n    --- FAIL: TestMinsubarraysum/test_num__9\
    \ (0.00s)\n        tmpmm13v4n0_test.go:55: expected '%!s(int=-10)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__10 (0.00s)\n        tmpmm13v4n0_test.go:55:\
    \ expected '%!s(int=7)', got '%!s(int=14)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpmm13v4n0_test.go:55: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075561
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    // Write your code here.\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nfunc\
    \ TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1iy1339v_test.go:267:6: expected ''('', found TestMinsubarraysum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075559
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    // Write your code here\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nfunc\
    \ TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpd5ocg9nm_test.go:267:6: expected ''('', found TestMinsubarraysum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075559
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    sum := 0\n    for _, num := range nums {\n        sum += num\n    }\n   \
    \ return sum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmp0e6ay1qh_test.go:43: expected '%!s(int=1)', got '%!s(int=16)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmp0e6ay1qh_test.go:43:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmp0e6ay1qh_test.go:43: expected '%!s(int=-6)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmp0e6ay1qh_test.go:43:\
    \ expected '%!s(int=-6)', got '%!s(int=99)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmp0e6ay1qh_test.go:43: expected '%!s(int=3)', got '%!s(int=49)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp0e6ay1qh_test.go:43:\
    \ expected '%!s(int=-33)', got '%!s(int=96)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmp0e6ay1qh_test.go:43: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075561
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    // Write your code here\n    \n    return 0\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=-14)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__3 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=-9999999999999999)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=-6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=-33)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__9\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=-10)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__10 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075561
- exit_code: 2
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    result := nums[0]\n    for _, num := range nums[1:] {\n        result = min(result,\
    \ num+result)\n    }\n    return result\n}\n\nfunc TestMinsubarraysum(t *testing.T)\
    \ {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpepjg9339_test.go:14:18: undefined: min

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075560
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    // Write your code here.\n    sum := 0\n    for _, v := range nums {\n  \
    \      sum += v\n    }\n    return sum\n}\n\nfunc TestMinsubarraysum(t *testing.T)\
    \ {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpwyoflajj_test.go:44: expected '%!s(int=1)', got '%!s(int=16)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmpwyoflajj_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpwyoflajj_test.go:44: expected '%!s(int=-6)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpwyoflajj_test.go:44:\
    \ expected '%!s(int=-6)', got '%!s(int=99)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpwyoflajj_test.go:44: expected '%!s(int=3)', got '%!s(int=49)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpwyoflajj_test.go:44:\
    \ expected '%!s(int=-33)', got '%!s(int=96)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpwyoflajj_test.go:44: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075561
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    // Write your code here.\n    sum := 0\n    for _, v := range nums {\n  \
    \      sum += v\n    }\n    return sum\n}\n\nfunc TestMinsubarraysum(t *testing.T)\
    \ {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpwyoflajj_test.go:44: expected '%!s(int=1)', got '%!s(int=16)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmpwyoflajj_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpwyoflajj_test.go:44: expected '%!s(int=-6)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpwyoflajj_test.go:44:\
    \ expected '%!s(int=-6)', got '%!s(int=99)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpwyoflajj_test.go:44: expected '%!s(int=3)', got '%!s(int=49)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpwyoflajj_test.go:44:\
    \ expected '%!s(int=-33)', got '%!s(int=96)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpwyoflajj_test.go:44: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075561
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    if len(nums) == 0 {\n        return 0\n    }\n    \n    min := nums[0]\n\
    \    max := nums[0]\n    \n    for _, v := range nums {\n        if v < min {\n\
    \            min = v\n        }\n        if v > max {\n            max = v\n \
    \       }\n    }\n    \n    return min + minSubArraySum(nums[1:])\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmp25oix4xf_test.go:55: expected '%!s(int=1)', got '%!s(int=10)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmp25oix4xf_test.go:55:\
    \ expected '%!s(int=-6)', got '%!s(int=-9)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmp25oix4xf_test.go:55: expected '%!s(int=-14)', got '%!s(int=-50)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmp25oix4xf_test.go:55:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmp25oix4xf_test.go:55: expected '%!s(int=-6)', got '%!s(int=-25)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmp25oix4xf_test.go:55:\
    \ expected '%!s(int=-6)', got '%!s(int=-30)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmp25oix4xf_test.go:55: expected '%!s(int=3)', got '%!s(int=19)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp25oix4xf_test.go:55:\
    \ expected '%!s(int=-33)', got '%!s(int=-74)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmp25oix4xf_test.go:55: expected '%!s(int=-1)', got '%!s(int=-2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075561
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    if len(nums) == 0 {\n        return 0\n    }\n    \n    sum := nums[0]\n\
    \    for _, v := range nums {\n        sum += v\n    }\n    \n    for i := 1;\
    \ i < len(nums); i++ {\n        sum += nums[i]\n        if sum < nums[0] {\n \
    \           return sum\n        }\n    }\n    \n    return sum\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmphhgctne5_test.go:55: expected '%!s(int=1)', got '%!s(int=32)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmphhgctne5_test.go:55:\
    \ expected '%!s(int=-6)', got '%!s(int=-9)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmphhgctne5_test.go:55: expected '%!s(int=-14)', got '%!s(int=-17)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__3 (0.00s)\n        tmphhgctne5_test.go:55:\
    \ expected '%!s(int=-9999999999999999)', got '%!s(int=-19999999999999998)'\n \
    \   --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmphhgctne5_test.go:55:\
    \ expected '%!s(int=0)', got '%!s(int=2000060)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmphhgctne5_test.go:55: expected '%!s(int=-6)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmphhgctne5_test.go:55:\
    \ expected '%!s(int=-6)', got '%!s(int=198)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmphhgctne5_test.go:55: expected '%!s(int=3)', got '%!s(int=98)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmphhgctne5_test.go:55:\
    \ expected '%!s(int=-33)', got '%!s(int=192)'\n    --- FAIL: TestMinsubarraysum/test_num__9\
    \ (0.00s)\n        tmphhgctne5_test.go:55: expected '%!s(int=-10)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__10 (0.00s)\n        tmphhgctne5_test.go:55:\
    \ expected '%!s(int=7)', got '%!s(int=14)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmphhgctne5_test.go:55: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.009s\nFAIL\n"
  timestamp: 1660075561
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    // Write your code here\n    sum := 0\n    for _, v := range nums {\n   \
    \     sum += v\n    }\n    return sum\n}\n\nfunc TestMinsubarraysum(t *testing.T)\
    \ {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmp21swk1oa_test.go:44: expected '%!s(int=1)', got '%!s(int=16)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmp21swk1oa_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmp21swk1oa_test.go:44: expected '%!s(int=-6)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmp21swk1oa_test.go:44:\
    \ expected '%!s(int=-6)', got '%!s(int=99)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmp21swk1oa_test.go:44: expected '%!s(int=3)', got '%!s(int=49)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp21swk1oa_test.go:44:\
    \ expected '%!s(int=-33)', got '%!s(int=96)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmp21swk1oa_test.go:44: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075561
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    if len(nums) == 0 {\n        return 0\n    }\n    \n    min := nums[0]\n\
    \    max := nums[0]\n    \n    for _, v := range nums[1:] {\n        if v < min\
    \ {\n            min = v\n        }\n        if v > max {\n            max = v\n\
    \        }\n    }\n    \n    return min + minSubArraySum(nums[1:])\n}\n\nfunc\
    \ TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmp9j0ifj7z_test.go:55: expected '%!s(int=1)', got '%!s(int=10)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmp9j0ifj7z_test.go:55:\
    \ expected '%!s(int=-6)', got '%!s(int=-9)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmp9j0ifj7z_test.go:55: expected '%!s(int=-14)', got '%!s(int=-50)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmp9j0ifj7z_test.go:55:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmp9j0ifj7z_test.go:55: expected '%!s(int=-6)', got '%!s(int=-25)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmp9j0ifj7z_test.go:55:\
    \ expected '%!s(int=-6)', got '%!s(int=-30)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmp9j0ifj7z_test.go:55: expected '%!s(int=3)', got '%!s(int=19)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp9j0ifj7z_test.go:55:\
    \ expected '%!s(int=-33)', got '%!s(int=-74)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmp9j0ifj7z_test.go:55: expected '%!s(int=-1)', got '%!s(int=-2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075561
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    // Write your code here\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nfunc\
    \ TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpd5ocg9nm_test.go:267:6: expected ''('', found TestMinsubarraysum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075559
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    // Write your code here\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nfunc\
    \ TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpd5ocg9nm_test.go:267:6: expected ''('', found TestMinsubarraysum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075559
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    sum := 0\n    for _, num := range nums {\n        sum += num\n    }\n   \
    \ return sum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmp0e6ay1qh_test.go:43: expected '%!s(int=1)', got '%!s(int=16)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmp0e6ay1qh_test.go:43:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmp0e6ay1qh_test.go:43: expected '%!s(int=-6)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmp0e6ay1qh_test.go:43:\
    \ expected '%!s(int=-6)', got '%!s(int=99)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmp0e6ay1qh_test.go:43: expected '%!s(int=3)', got '%!s(int=49)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp0e6ay1qh_test.go:43:\
    \ expected '%!s(int=-33)', got '%!s(int=96)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmp0e6ay1qh_test.go:43: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075561
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    // Write your code here.\n    \n    sum := 0\n    for _, v := range nums\
    \ {\n        sum += v\n    }\n    return sum\n}\n\nfunc TestMinsubarraysum(t *testing.T)\
    \ {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmp22dbp7_h_test.go:45: expected '%!s(int=1)', got '%!s(int=16)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmp22dbp7_h_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmp22dbp7_h_test.go:45: expected '%!s(int=-6)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmp22dbp7_h_test.go:45:\
    \ expected '%!s(int=-6)', got '%!s(int=99)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmp22dbp7_h_test.go:45: expected '%!s(int=3)', got '%!s(int=49)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp22dbp7_h_test.go:45:\
    \ expected '%!s(int=-33)', got '%!s(int=96)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmp22dbp7_h_test.go:45: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075561
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    if len(nums) == 0 {\n        return 0\n    }\n    \n    min := nums[0]\n\
    \    max := nums[0]\n    \n    for _, v := range nums {\n        if v > max {\n\
    \            max = v\n        }\n        if v < min {\n            min = v\n \
    \       }\n    }\n    \n    return min + minSubArraySum(nums[1:])\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpjlee5sen_test.go:55: expected '%!s(int=1)', got '%!s(int=10)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpjlee5sen_test.go:55:\
    \ expected '%!s(int=-6)', got '%!s(int=-9)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpjlee5sen_test.go:55: expected '%!s(int=-14)', got '%!s(int=-50)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmpjlee5sen_test.go:55:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpjlee5sen_test.go:55: expected '%!s(int=-6)', got '%!s(int=-25)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpjlee5sen_test.go:55:\
    \ expected '%!s(int=-6)', got '%!s(int=-30)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpjlee5sen_test.go:55: expected '%!s(int=3)', got '%!s(int=19)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpjlee5sen_test.go:55:\
    \ expected '%!s(int=-33)', got '%!s(int=-74)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpjlee5sen_test.go:55: expected '%!s(int=-1)', got '%!s(int=-2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075561
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    // Write your code here\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nfunc\
    \ TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpd5ocg9nm_test.go:267:6: expected ''('', found TestMinsubarraysum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075559
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    // Write your code here\n    \n    return 0\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=-14)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__3 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=-9999999999999999)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=-6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=-33)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__9\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=-10)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__10 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075561
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    // Write your code here\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nfunc\
    \ TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpd5ocg9nm_test.go:267:6: expected ''('', found TestMinsubarraysum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075559
- exit_code: 2
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    \n    // Base case\n    if len(nums) == 0 {\n        return 0\n    }\n  \
    \  \n    // Recursive case\n    \n    // Find the minimum sum of the first sub-array\n\
    \    \n    // Find the minimum sum of the remaining sub-arrays\n    \n    // Return\
    \ the minimum of the two sums\n    \n}\n\nfunc TestMinsubarraysum(t *testing.T)\
    \ {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx7rmtrm2_test.go:26:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075560
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    // Write your code here\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nfunc\
    \ TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpd5ocg9nm_test.go:267:6: expected ''('', found TestMinsubarraysum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075559
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    // Write your code here\n    \n    return 0\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=-14)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__3 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=-9999999999999999)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=-6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=-33)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__9\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=-10)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__10 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075561
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    // Write your code here.\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nfunc\
    \ TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1iy1339v_test.go:267:6: expected ''('', found TestMinsubarraysum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075559
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    // Write your code here\n    \n    return 0\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=-14)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__3 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=-9999999999999999)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=-6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=-33)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__9\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=-10)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__10 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075561
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    // Write your code here\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nfunc\
    \ TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpd5ocg9nm_test.go:267:6: expected ''('', found TestMinsubarraysum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075559
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    if len(nums) == 0 {\n        return 0\n    }\n\n    // The first element\
    \ is the minimum sum\n    sum := nums[0]\n\n    // The rest of the array is the\
    \ sub-array\n    // whose sum is equal to the first element\n    for _, v := range\
    \ nums[1:] {\n        sum += v\n    }\n\n    return sum\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpwb0l6xr2_test.go:52: expected '%!s(int=1)', got '%!s(int=16)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmpwb0l6xr2_test.go:52:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpwb0l6xr2_test.go:52: expected '%!s(int=-6)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpwb0l6xr2_test.go:52:\
    \ expected '%!s(int=-6)', got '%!s(int=99)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpwb0l6xr2_test.go:52: expected '%!s(int=3)', got '%!s(int=49)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpwb0l6xr2_test.go:52:\
    \ expected '%!s(int=-33)', got '%!s(int=96)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpwb0l6xr2_test.go:52: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075561
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    // Write your code here\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nfunc\
    \ TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpd5ocg9nm_test.go:267:6: expected ''('', found TestMinsubarraysum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075559
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    // Write your code here\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nfunc\
    \ TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpd5ocg9nm_test.go:267:6: expected ''('', found TestMinsubarraysum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075559
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    // Write your code here\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nfunc\
    \ TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpd5ocg9nm_test.go:267:6: expected ''('', found TestMinsubarraysum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075559
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    // Write your code here\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nfunc\
    \ TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpd5ocg9nm_test.go:267:6: expected ''('', found TestMinsubarraysum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075559
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    if len(nums) == 0 {\n        return 0\n    }\n    \n    // Initialize min\
    \ and max to first element of nums\n    min := nums[0]\n    max := nums[0]\n \
    \   \n    // Initialize sum to first element of nums\n    sum := nums[0]\n   \
    \ \n    // Initialize min and max to first element of nums\n    for _, num :=\
    \ range nums {\n        if num < min {\n            min = num\n        }\n   \
    \     if num > max {\n            max = num\n        }\n        sum += num\n \
    \   }\n    \n    // Initialize sum to first element of nums\n    for _, num :=\
    \ range nums {\n        if sum < min {\n            min = sum\n        }\n   \
    \     if sum > max {\n            max = sum\n        }\n        sum += num\n \
    \   }\n    \n    return max\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpd_nphdu1_test.go:72: expected '%!s(int=1)', got '%!s(int=30)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpd_nphdu1_test.go:72:\
    \ expected '%!s(int=-6)', got '%!s(int=-1)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpd_nphdu1_test.go:72: expected '%!s(int=-14)', got '%!s(int=2)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmpd_nphdu1_test.go:72:\
    \ expected '%!s(int=0)', got '%!s(int=1000060)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpd_nphdu1_test.go:72: expected '%!s(int=-6)', got '%!s(int=10)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpd_nphdu1_test.go:72:\
    \ expected '%!s(int=-6)', got '%!s(int=303)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpd_nphdu1_test.go:72: expected '%!s(int=3)', got '%!s(int=104)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpd_nphdu1_test.go:72:\
    \ expected '%!s(int=-33)', got '%!s(int=296)'\n    --- FAIL: TestMinsubarraysum/test_num__10\
    \ (0.00s)\n        tmpd_nphdu1_test.go:72: expected '%!s(int=7)', got '%!s(int=14)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__11 (0.00s)\n        tmpd_nphdu1_test.go:72:\
    \ expected '%!s(int=-1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075561
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    // Write your code here.\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nfunc\
    \ TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1iy1339v_test.go:267:6: expected ''('', found TestMinsubarraysum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075559
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    // Write your code here\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nfunc\
    \ TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpd5ocg9nm_test.go:267:6: expected ''('', found TestMinsubarraysum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075559
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    // Write your code here\n    sum := 0\n    for _, num := range nums {\n \
    \       sum += num\n    }\n    return sum\n}\n\nfunc TestMinsubarraysum(t *testing.T)\
    \ {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmperhc_p3d_test.go:44: expected '%!s(int=1)', got '%!s(int=16)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmperhc_p3d_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmperhc_p3d_test.go:44: expected '%!s(int=-6)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmperhc_p3d_test.go:44:\
    \ expected '%!s(int=-6)', got '%!s(int=99)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmperhc_p3d_test.go:44: expected '%!s(int=3)', got '%!s(int=49)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmperhc_p3d_test.go:44:\
    \ expected '%!s(int=-33)', got '%!s(int=96)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmperhc_p3d_test.go:44: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075561
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    // Write your code here\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nfunc\
    \ TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpd5ocg9nm_test.go:267:6: expected ''('', found TestMinsubarraysum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075559
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    if len(nums) == 0 {\n        return 0\n    }\n    \n    min := nums[0]\n\
    \    max := nums[0]\n    \n    for _, n := range nums[1:] {\n        if n > max\
    \ {\n            max = n\n        }\n        if n < min {\n            min = n\n\
    \        }\n    }\n    \n    return min + max\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmprqa3fczf_test.go:55: expected '%!s(int=1)', got '%!s(int=5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmprqa3fczf_test.go:55:\
    \ expected '%!s(int=-6)', got '%!s(int=-4)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmprqa3fczf_test.go:55: expected '%!s(int=-14)', got '%!s(int=-8)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__3 (0.00s)\n        tmprqa3fczf_test.go:55:\
    \ expected '%!s(int=-9999999999999999)', got '%!s(int=-19999999999999998)'\n \
    \   --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmprqa3fczf_test.go:55:\
    \ expected '%!s(int=0)', got '%!s(int=1000000)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmprqa3fczf_test.go:55: expected '%!s(int=-6)', got '%!s(int=5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmprqa3fczf_test.go:55:\
    \ expected '%!s(int=-6)', got '%!s(int=95)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmprqa3fczf_test.go:55: expected '%!s(int=3)', got '%!s(int=16)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmprqa3fczf_test.go:55:\
    \ expected '%!s(int=-33)', got '%!s(int=67)'\n    --- FAIL: TestMinsubarraysum/test_num__9\
    \ (0.00s)\n        tmprqa3fczf_test.go:55: expected '%!s(int=-10)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__10 (0.00s)\n        tmprqa3fczf_test.go:55:\
    \ expected '%!s(int=7)', got '%!s(int=14)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmprqa3fczf_test.go:55: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075561
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    // Write your code here\n    \n    return 0\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=-14)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__3 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=-9999999999999999)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=-6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=-33)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__9\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=-10)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__10 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075561
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    sum := 0\n    for _, v := range nums {\n        sum += v\n    }\n    return\
    \ sum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpl07jdm5v_test.go:43: expected '%!s(int=1)', got '%!s(int=16)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmpl07jdm5v_test.go:43:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpl07jdm5v_test.go:43: expected '%!s(int=-6)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpl07jdm5v_test.go:43:\
    \ expected '%!s(int=-6)', got '%!s(int=99)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpl07jdm5v_test.go:43: expected '%!s(int=3)', got '%!s(int=49)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpl07jdm5v_test.go:43:\
    \ expected '%!s(int=-33)', got '%!s(int=96)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpl07jdm5v_test.go:43: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075561
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    // Write your code here.\n    return 0\n}\n\nfunc TestMinsubarraysum(t *testing.T)\
    \ {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpy12fakoa_test.go:40: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpy12fakoa_test.go:40:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpy12fakoa_test.go:40: expected '%!s(int=-14)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__3 (0.00s)\n        tmpy12fakoa_test.go:40:\
    \ expected '%!s(int=-9999999999999999)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpy12fakoa_test.go:40: expected '%!s(int=-6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpy12fakoa_test.go:40:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpy12fakoa_test.go:40: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpy12fakoa_test.go:40:\
    \ expected '%!s(int=-33)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__9\
    \ (0.00s)\n        tmpy12fakoa_test.go:40: expected '%!s(int=-10)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__10 (0.00s)\n        tmpy12fakoa_test.go:40:\
    \ expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpy12fakoa_test.go:40: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075561
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    // Write your code here\n    \n    return 0\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=-14)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__3 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=-9999999999999999)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=-6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=-33)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__9\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=-10)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__10 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075561
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    // Write your code here\n    \n    return 0\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=-14)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__3 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=-9999999999999999)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=-6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=-33)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__9\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=-10)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__10 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075561
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    \n    // Write your code here\n    \n    return 0\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmp1zg1zz4j_test.go:42: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmp1zg1zz4j_test.go:42:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmp1zg1zz4j_test.go:42: expected '%!s(int=-14)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__3 (0.00s)\n        tmp1zg1zz4j_test.go:42:\
    \ expected '%!s(int=-9999999999999999)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmp1zg1zz4j_test.go:42: expected '%!s(int=-6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmp1zg1zz4j_test.go:42:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmp1zg1zz4j_test.go:42: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp1zg1zz4j_test.go:42:\
    \ expected '%!s(int=-33)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__9\
    \ (0.00s)\n        tmp1zg1zz4j_test.go:42: expected '%!s(int=-10)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__10 (0.00s)\n        tmp1zg1zz4j_test.go:42:\
    \ expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmp1zg1zz4j_test.go:42: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075561
- exit_code: 2
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    if len(nums) == 0 {\n        return 0\n    }\n    \n    // The first element\
    \ is the minimum sum\n    min := nums[0]\n    \n    // The rest of the elements\
    \ are the sums of sub-array\n    // from 1 to len(nums)\n    for i := 1; i < len(nums);\
    \ i++ {\n        sum += nums[i]\n        if sum < min {\n            min = sum\n\
    \        }\n    }\n    return min\n}\n\nfunc TestMinsubarraysum(t *testing.T)\
    \ {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfaghsyt5_test.go:22:9: undefined: sum

    /tmp/tmpfaghsyt5_test.go:23:12: undefined: sum

    /tmp/tmpfaghsyt5_test.go:24:19: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075560
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    sum := 0\n    for _, v := range nums {\n        sum += v\n    }\n    return\
    \ sum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpl07jdm5v_test.go:43: expected '%!s(int=1)', got '%!s(int=16)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmpl07jdm5v_test.go:43:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpl07jdm5v_test.go:43: expected '%!s(int=-6)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpl07jdm5v_test.go:43:\
    \ expected '%!s(int=-6)', got '%!s(int=99)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpl07jdm5v_test.go:43: expected '%!s(int=3)', got '%!s(int=49)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpl07jdm5v_test.go:43:\
    \ expected '%!s(int=-33)', got '%!s(int=96)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpl07jdm5v_test.go:43: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075561
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    // Write your code here.\n    \n    return 0\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpvv8qtlok_test.go:41: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpvv8qtlok_test.go:41:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpvv8qtlok_test.go:41: expected '%!s(int=-14)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__3 (0.00s)\n        tmpvv8qtlok_test.go:41:\
    \ expected '%!s(int=-9999999999999999)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpvv8qtlok_test.go:41: expected '%!s(int=-6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpvv8qtlok_test.go:41:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpvv8qtlok_test.go:41: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpvv8qtlok_test.go:41:\
    \ expected '%!s(int=-33)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__9\
    \ (0.00s)\n        tmpvv8qtlok_test.go:41: expected '%!s(int=-10)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__10 (0.00s)\n        tmpvv8qtlok_test.go:41:\
    \ expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpvv8qtlok_test.go:41: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075561
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    // Write your code here\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nfunc\
    \ TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpd5ocg9nm_test.go:267:6: expected ''('', found TestMinsubarraysum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075559
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    sum := 0\n    for _, v := range nums {\n        sum += v\n    }\n    return\
    \ sum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpl07jdm5v_test.go:43: expected '%!s(int=1)', got '%!s(int=16)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmpl07jdm5v_test.go:43:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpl07jdm5v_test.go:43: expected '%!s(int=-6)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpl07jdm5v_test.go:43:\
    \ expected '%!s(int=-6)', got '%!s(int=99)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpl07jdm5v_test.go:43: expected '%!s(int=3)', got '%!s(int=49)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpl07jdm5v_test.go:43:\
    \ expected '%!s(int=-33)', got '%!s(int=96)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpl07jdm5v_test.go:43: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075561
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    // Write your code here.\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nfunc\
    \ TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1iy1339v_test.go:267:6: expected ''('', found TestMinsubarraysum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075559
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    if len(nums) == 0 {\n        return 0\n    }\n    \n    min := nums[0]\n\
    \    max := nums[0]\n    \n    for _, num := range nums[1:] {\n        if num\
    \ < min {\n            min = num\n        }\n        if num > max {\n        \
    \    max = num\n        }\n    }\n    \n    return min + minSubArraySum(nums[2:])\n\
    }\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [2:1] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [2:1]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.minSubArraySum({0xc0000afc78?, 0x4?, 0x4?})\n\
    \t/tmp/tmpt2mpb28v_test.go:28 +0xaf\ncommand-line-arguments_test.minSubArraySum({0xc0000afc68?,\
    \ 0x0?, 0x0?})\n\t/tmp/tmpt2mpb28v_test.go:28 +0x90\ncommand-line-arguments_test.TestMinsubarraysum(0x0?)\n\
    \t/tmp/tmpt2mpb28v_test.go:39 +0x112\ntesting.tRunner(0xc0000da340, 0x528f48)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075562
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    sum := 0\n    for _, v := range nums {\n        sum += v\n    }\n    return\
    \ sum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpl07jdm5v_test.go:43: expected '%!s(int=1)', got '%!s(int=16)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmpl07jdm5v_test.go:43:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpl07jdm5v_test.go:43: expected '%!s(int=-6)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpl07jdm5v_test.go:43:\
    \ expected '%!s(int=-6)', got '%!s(int=99)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpl07jdm5v_test.go:43: expected '%!s(int=3)', got '%!s(int=49)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpl07jdm5v_test.go:43:\
    \ expected '%!s(int=-33)', got '%!s(int=96)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpl07jdm5v_test.go:43: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075561
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    // Write your code here.\n    \n    return 0\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpvv8qtlok_test.go:41: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpvv8qtlok_test.go:41:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpvv8qtlok_test.go:41: expected '%!s(int=-14)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__3 (0.00s)\n        tmpvv8qtlok_test.go:41:\
    \ expected '%!s(int=-9999999999999999)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpvv8qtlok_test.go:41: expected '%!s(int=-6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpvv8qtlok_test.go:41:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpvv8qtlok_test.go:41: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpvv8qtlok_test.go:41:\
    \ expected '%!s(int=-33)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__9\
    \ (0.00s)\n        tmpvv8qtlok_test.go:41: expected '%!s(int=-10)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__10 (0.00s)\n        tmpvv8qtlok_test.go:41:\
    \ expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpvv8qtlok_test.go:41: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075561
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    // Write your code here\n    \n    return 0\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=-14)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__3 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=-9999999999999999)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=-6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=-33)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__9\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=-10)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__10 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075561
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    sum := 0\n    for _, v := range nums {\n        sum += v\n    }\n    return\
    \ sum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpl07jdm5v_test.go:43: expected '%!s(int=1)', got '%!s(int=16)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmpl07jdm5v_test.go:43:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpl07jdm5v_test.go:43: expected '%!s(int=-6)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpl07jdm5v_test.go:43:\
    \ expected '%!s(int=-6)', got '%!s(int=99)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpl07jdm5v_test.go:43: expected '%!s(int=3)', got '%!s(int=49)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpl07jdm5v_test.go:43:\
    \ expected '%!s(int=-33)', got '%!s(int=96)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpl07jdm5v_test.go:43: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075561
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    sum := 0\n    for _, v := range nums {\n        sum += v\n    }\n    return\
    \ sum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpl07jdm5v_test.go:43: expected '%!s(int=1)', got '%!s(int=16)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmpl07jdm5v_test.go:43:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpl07jdm5v_test.go:43: expected '%!s(int=-6)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpl07jdm5v_test.go:43:\
    \ expected '%!s(int=-6)', got '%!s(int=99)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpl07jdm5v_test.go:43: expected '%!s(int=3)', got '%!s(int=49)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpl07jdm5v_test.go:43:\
    \ expected '%!s(int=-33)', got '%!s(int=96)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpl07jdm5v_test.go:43: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075561
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    // Write your code here.\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nfunc\
    \ TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1iy1339v_test.go:267:6: expected ''('', found TestMinsubarraysum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075559
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    sum := 0\n    for _, v := range nums {\n        sum += v\n    }\n    return\
    \ sum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpl07jdm5v_test.go:43: expected '%!s(int=1)', got '%!s(int=16)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmpl07jdm5v_test.go:43:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpl07jdm5v_test.go:43: expected '%!s(int=-6)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpl07jdm5v_test.go:43:\
    \ expected '%!s(int=-6)', got '%!s(int=99)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpl07jdm5v_test.go:43: expected '%!s(int=3)', got '%!s(int=49)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpl07jdm5v_test.go:43:\
    \ expected '%!s(int=-33)', got '%!s(int=96)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpl07jdm5v_test.go:43: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075561
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    sum := 0\n    for _, num := range nums {\n        sum += num\n    }\n   \
    \ return sum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmp0e6ay1qh_test.go:43: expected '%!s(int=1)', got '%!s(int=16)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmp0e6ay1qh_test.go:43:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmp0e6ay1qh_test.go:43: expected '%!s(int=-6)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmp0e6ay1qh_test.go:43:\
    \ expected '%!s(int=-6)', got '%!s(int=99)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmp0e6ay1qh_test.go:43: expected '%!s(int=3)', got '%!s(int=49)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp0e6ay1qh_test.go:43:\
    \ expected '%!s(int=-33)', got '%!s(int=96)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmp0e6ay1qh_test.go:43: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075561
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    // Write your code here.\n    sum := 0\n    for _, num := range nums {\n\
    \        sum += num\n    }\n    return sum\n}\n\nfunc TestMinsubarraysum(t *testing.T)\
    \ {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpyzpra0rc_test.go:44: expected '%!s(int=1)', got '%!s(int=16)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmpyzpra0rc_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpyzpra0rc_test.go:44: expected '%!s(int=-6)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpyzpra0rc_test.go:44:\
    \ expected '%!s(int=-6)', got '%!s(int=99)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpyzpra0rc_test.go:44: expected '%!s(int=3)', got '%!s(int=49)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpyzpra0rc_test.go:44:\
    \ expected '%!s(int=-33)', got '%!s(int=96)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpyzpra0rc_test.go:44: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075562
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    // Write your code here\n    \n    return 0\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=-14)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__3 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=-9999999999999999)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=-6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=-33)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__9\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=-10)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__10 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075561
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    // Write your code here\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nfunc\
    \ TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpd5ocg9nm_test.go:267:6: expected ''('', found TestMinsubarraysum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075559
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    // Write your code here\n    \n    return 0\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=-14)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__3 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=-9999999999999999)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=-6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=-33)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__9\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=-10)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__10 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075561
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    // Write your code here\n    \n    return 0\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=-14)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__3 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=-9999999999999999)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=-6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=-33)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__9\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=-10)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__10 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075561
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    sum := 0\n    for _, v := range nums {\n        sum += v\n    }\n    return\
    \ sum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpl07jdm5v_test.go:43: expected '%!s(int=1)', got '%!s(int=16)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmpl07jdm5v_test.go:43:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpl07jdm5v_test.go:43: expected '%!s(int=-6)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpl07jdm5v_test.go:43:\
    \ expected '%!s(int=-6)', got '%!s(int=99)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpl07jdm5v_test.go:43: expected '%!s(int=3)', got '%!s(int=49)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpl07jdm5v_test.go:43:\
    \ expected '%!s(int=-33)', got '%!s(int=96)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpl07jdm5v_test.go:43: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075561
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    // Write your code here\n    \n    return 0\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=-14)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__3 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=-9999999999999999)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=-6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=-33)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__9\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=-10)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__10 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075561
- exit_code: 2
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    result := nums[0]\n    for _, num := range nums {\n        result = min(result,\
    \ num+result)\n    }\n    return result\n}\n\nfunc TestMinsubarraysum(t *testing.T)\
    \ {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpiwt5hyyu_test.go:14:18: undefined: min

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075562
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    // Write your code here.\n    \n    \n    return 0\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmp1_vrkb8a_test.go:42: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmp1_vrkb8a_test.go:42:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmp1_vrkb8a_test.go:42: expected '%!s(int=-14)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__3 (0.00s)\n        tmp1_vrkb8a_test.go:42:\
    \ expected '%!s(int=-9999999999999999)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmp1_vrkb8a_test.go:42: expected '%!s(int=-6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmp1_vrkb8a_test.go:42:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmp1_vrkb8a_test.go:42: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp1_vrkb8a_test.go:42:\
    \ expected '%!s(int=-33)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__9\
    \ (0.00s)\n        tmp1_vrkb8a_test.go:42: expected '%!s(int=-10)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__10 (0.00s)\n        tmp1_vrkb8a_test.go:42:\
    \ expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmp1_vrkb8a_test.go:42: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075562
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    // Write your code here\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nfunc\
    \ TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpd5ocg9nm_test.go:267:6: expected ''('', found TestMinsubarraysum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075559
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    // Write your code here\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nfunc\
    \ TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpd5ocg9nm_test.go:267:6: expected ''('', found TestMinsubarraysum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075559
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    // Write your code here\n    \n    return 0\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=-14)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__3 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=-9999999999999999)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=-6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=-33)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__9\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=-10)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__10 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075561
- exit_code: 2
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    if len(nums) == 0 {\n        return 0\n    }\n    \n    // find the minimum\
    \ sum of the first sub-array\n    min := nums[0]\n    for _, v := range nums[1:]\
    \ {\n        min = min(v, min+v)\n    }\n    return min\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg9887rqy_test.go:18:12: v declared but not used

    /tmp/tmpg9887rqy_test.go:19:15: invalid operation: cannot call non-function min
    (variable of type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075562
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    // Write your code here.\n    \n    \n    return 0\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmp1_vrkb8a_test.go:42: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmp1_vrkb8a_test.go:42:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmp1_vrkb8a_test.go:42: expected '%!s(int=-14)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__3 (0.00s)\n        tmp1_vrkb8a_test.go:42:\
    \ expected '%!s(int=-9999999999999999)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmp1_vrkb8a_test.go:42: expected '%!s(int=-6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmp1_vrkb8a_test.go:42:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmp1_vrkb8a_test.go:42: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp1_vrkb8a_test.go:42:\
    \ expected '%!s(int=-33)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__9\
    \ (0.00s)\n        tmp1_vrkb8a_test.go:42: expected '%!s(int=-10)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__10 (0.00s)\n        tmp1_vrkb8a_test.go:42:\
    \ expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmp1_vrkb8a_test.go:42: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075562
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    sum := 0\n    for _, v := range nums {\n        sum += v\n    }\n    return\
    \ sum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpl07jdm5v_test.go:43: expected '%!s(int=1)', got '%!s(int=16)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmpl07jdm5v_test.go:43:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpl07jdm5v_test.go:43: expected '%!s(int=-6)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpl07jdm5v_test.go:43:\
    \ expected '%!s(int=-6)', got '%!s(int=99)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpl07jdm5v_test.go:43: expected '%!s(int=3)', got '%!s(int=49)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpl07jdm5v_test.go:43:\
    \ expected '%!s(int=-33)', got '%!s(int=96)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpl07jdm5v_test.go:43: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075561
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    // Write your code here\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nfunc\
    \ TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpd5ocg9nm_test.go:267:6: expected ''('', found TestMinsubarraysum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075559
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    // Write your code here\n    \n    return 0\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=-14)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__3 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=-9999999999999999)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=-6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=-33)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__9\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=-10)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__10 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075561
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    // Write your code here\n    \n    return 0\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=-14)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__3 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=-9999999999999999)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=-6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=-33)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__9\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=-10)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__10 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075561
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    // Write your code here\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nfunc\
    \ TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpd5ocg9nm_test.go:267:6: expected ''('', found TestMinsubarraysum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075559
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    // Write your code here\n    \n    return 0\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=-14)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__3 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=-9999999999999999)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=-6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=-33)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__9\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=-10)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__10 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075561
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    // Write your code here\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nfunc\
    \ TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpd5ocg9nm_test.go:267:6: expected ''('', found TestMinsubarraysum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075559
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    // Write your code here\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nfunc\
    \ TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpd5ocg9nm_test.go:267:6: expected ''('', found TestMinsubarraysum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075559
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    // Write your code here.\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nfunc\
    \ TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1iy1339v_test.go:267:6: expected ''('', found TestMinsubarraysum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075559
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    if len(nums) == 0 {\n        return 0\n    }\n    \n    min := nums[0]\n\
    \    max := nums[0]\n    for _, num := range nums {\n        if num > max {\n\
    \            max = num\n        }\n        if num < min {\n            min = num\n\
    \        }\n    }\n    \n    return min + minSubArraySum(nums[1 : len(nums)-1])\n\
    }\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [1:0] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [1:0]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.minSubArraySum({0xc0000afc70?, 0x4?, 0x5?})\n\
    \t/tmp/tmpvitfjomt_test.go:27 +0x89\ncommand-line-arguments_test.minSubArraySum({0xc0000afc68?,\
    \ 0x0?, 0x0?})\n\t/tmp/tmpvitfjomt_test.go:27 +0x6a\ncommand-line-arguments_test.TestMinsubarraysum(0x0?)\n\
    \t/tmp/tmpvitfjomt_test.go:38 +0x112\ntesting.tRunner(0xc0000da340, 0x528f48)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660075563
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    // Write your code here.\n    \n    \n    return 0\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmp1_vrkb8a_test.go:42: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmp1_vrkb8a_test.go:42:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmp1_vrkb8a_test.go:42: expected '%!s(int=-14)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__3 (0.00s)\n        tmp1_vrkb8a_test.go:42:\
    \ expected '%!s(int=-9999999999999999)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmp1_vrkb8a_test.go:42: expected '%!s(int=-6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmp1_vrkb8a_test.go:42:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmp1_vrkb8a_test.go:42: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp1_vrkb8a_test.go:42:\
    \ expected '%!s(int=-33)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__9\
    \ (0.00s)\n        tmp1_vrkb8a_test.go:42: expected '%!s(int=-10)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__10 (0.00s)\n        tmp1_vrkb8a_test.go:42:\
    \ expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmp1_vrkb8a_test.go:42: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075562
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    if len(nums) == 0 {\n        return 0\n    }\n    \n    min := nums[0]\n\
    \    max := nums[0]\n    \n    for _, v := range nums[1:] {\n        if v < min\
    \ {\n            min = v\n        }\n        if v > max {\n            max = v\n\
    \        }\n    }\n    \n    return min + minSubArraySum(nums[1..])\n}\n\nfunc\
    \ TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpia894mlv_test.go:28:41: expected selector or type assertion, found '']''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075562
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    if len(nums) == 0 {\n        return 0\n    }\n    \n    min := nums[0]\n\
    \    max := nums[0]\n    \n    for _, v := range nums {\n        if v < min {\n\
    \            min = v\n        }\n        if v > max {\n            max = v\n \
    \       }\n    }\n    \n    return min + minSubArraySum(nums[1:])\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmp25oix4xf_test.go:55: expected '%!s(int=1)', got '%!s(int=10)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmp25oix4xf_test.go:55:\
    \ expected '%!s(int=-6)', got '%!s(int=-9)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmp25oix4xf_test.go:55: expected '%!s(int=-14)', got '%!s(int=-50)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmp25oix4xf_test.go:55:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmp25oix4xf_test.go:55: expected '%!s(int=-6)', got '%!s(int=-25)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmp25oix4xf_test.go:55:\
    \ expected '%!s(int=-6)', got '%!s(int=-30)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmp25oix4xf_test.go:55: expected '%!s(int=3)', got '%!s(int=19)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp25oix4xf_test.go:55:\
    \ expected '%!s(int=-33)', got '%!s(int=-74)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmp25oix4xf_test.go:55: expected '%!s(int=-1)', got '%!s(int=-2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075561
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    // Write your code here\n    \n    return 0\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=-14)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__3 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=-9999999999999999)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=-6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=-33)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__9\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=-10)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__10 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075561
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    // Write your code here\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nfunc\
    \ TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpd5ocg9nm_test.go:267:6: expected ''('', found TestMinsubarraysum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075559
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    // Write your code here\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nfunc\
    \ TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpd5ocg9nm_test.go:267:6: expected ''('', found TestMinsubarraysum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075559
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    // Write your code here\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nfunc\
    \ TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpd5ocg9nm_test.go:267:6: expected ''('', found TestMinsubarraysum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075559
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    \n    // Base case\n    if len(nums) == 0 {\n        return 0\n    }\n  \
    \  \n    // Recursive case\n    min := nums[0]\n    max := nums[0]\n    for _,\
    \ num := range nums[1:] {\n        \n        // If current number is greater than\
    \ the max so far, update max\n        if num > max {\n            max = num\n\
    \        }\n        \n        // If current number is less than the min so far,\
    \ update min\n        if num < min {\n            min = num\n        }\n    }\n\
    \    \n    // Return min + max\n    return min + max\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmp2h0b65pt_test.go:62: expected '%!s(int=1)', got '%!s(int=5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmp2h0b65pt_test.go:62:\
    \ expected '%!s(int=-6)', got '%!s(int=-4)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmp2h0b65pt_test.go:62: expected '%!s(int=-14)', got '%!s(int=-8)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__3 (0.00s)\n        tmp2h0b65pt_test.go:62:\
    \ expected '%!s(int=-9999999999999999)', got '%!s(int=-19999999999999998)'\n \
    \   --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmp2h0b65pt_test.go:62:\
    \ expected '%!s(int=0)', got '%!s(int=1000000)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmp2h0b65pt_test.go:62: expected '%!s(int=-6)', got '%!s(int=5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmp2h0b65pt_test.go:62:\
    \ expected '%!s(int=-6)', got '%!s(int=95)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmp2h0b65pt_test.go:62: expected '%!s(int=3)', got '%!s(int=16)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp2h0b65pt_test.go:62:\
    \ expected '%!s(int=-33)', got '%!s(int=67)'\n    --- FAIL: TestMinsubarraysum/test_num__9\
    \ (0.00s)\n        tmp2h0b65pt_test.go:62: expected '%!s(int=-10)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__10 (0.00s)\n        tmp2h0b65pt_test.go:62:\
    \ expected '%!s(int=7)', got '%!s(int=14)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmp2h0b65pt_test.go:62: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075563
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    sum := 0\n    for _, v := range nums {\n        sum += v\n    }\n    return\
    \ sum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpl07jdm5v_test.go:43: expected '%!s(int=1)', got '%!s(int=16)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmpl07jdm5v_test.go:43:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpl07jdm5v_test.go:43: expected '%!s(int=-6)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpl07jdm5v_test.go:43:\
    \ expected '%!s(int=-6)', got '%!s(int=99)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpl07jdm5v_test.go:43: expected '%!s(int=3)', got '%!s(int=49)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpl07jdm5v_test.go:43:\
    \ expected '%!s(int=-33)', got '%!s(int=96)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpl07jdm5v_test.go:43: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075561
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    if len(nums) == 0 {\n        return 0\n    }\n    \n    min := nums[0]\n\
    \    max := nums[0]\n    \n    for _, v := range nums {\n        if v < min {\n\
    \            min = v\n        }\n        if v > max {\n            max = v\n \
    \       }\n    }\n    \n    return min + minSubArraySum(nums[1 : len(nums)-1])\n\
    }\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [1:0] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [1:0]\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000160000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513620,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.minSubArraySum({0xc00011bc70?, 0x4?, 0x5?})\n\
    \t/tmp/tmpkc1uh977_test.go:28 +0x89\ncommand-line-arguments_test.minSubArraySum({0xc00011bc68?,\
    \ 0x0?, 0x0?})\n\t/tmp/tmpkc1uh977_test.go:28 +0x6a\ncommand-line-arguments_test.TestMinsubarraysum(0x0?)\n\
    \t/tmp/tmpkc1uh977_test.go:39 +0x112\ntesting.tRunner(0xc000103380, 0x528f48)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075563
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    // Write your code here\n    \n    return 0\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=-14)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__3 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=-9999999999999999)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=-6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=-33)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__9\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=-10)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__10 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075561
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    // Write your code here\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nfunc\
    \ TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpd5ocg9nm_test.go:267:6: expected ''('', found TestMinsubarraysum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075559
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    // Write your code here\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nfunc\
    \ TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpd5ocg9nm_test.go:267:6: expected ''('', found TestMinsubarraysum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075559
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    if len(nums) == 0 {\n        return 0\n    }\n    \n    sum := nums[0]\n\
    \    for _, v := range nums[1:] {\n        sum += v\n    }\n    return sum\n}\n\
    \nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpw1jxhqbv_test.go:47: expected '%!s(int=1)', got '%!s(int=16)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmpw1jxhqbv_test.go:47:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpw1jxhqbv_test.go:47: expected '%!s(int=-6)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpw1jxhqbv_test.go:47:\
    \ expected '%!s(int=-6)', got '%!s(int=99)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpw1jxhqbv_test.go:47: expected '%!s(int=3)', got '%!s(int=49)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpw1jxhqbv_test.go:47:\
    \ expected '%!s(int=-33)', got '%!s(int=96)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpw1jxhqbv_test.go:47: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075563
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    // Write your code here\n    \n    return 0\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=-14)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__3 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=-9999999999999999)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=-6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=-33)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__9\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=-10)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__10 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075561
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    // Write your code here\n    \n    return 0\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=-14)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__3 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=-9999999999999999)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=-6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=-33)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__9\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=-10)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__10 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075561
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    // Write your code here\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nfunc\
    \ TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpd5ocg9nm_test.go:267:6: expected ''('', found TestMinsubarraysum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075559
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    // Write your code here.\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nfunc\
    \ TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1iy1339v_test.go:267:6: expected ''('', found TestMinsubarraysum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075559
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    if len(nums) == 0 {\n        return 0\n    }\n    \n    min := nums[0]\n\
    \    max := nums[0]\n    \n    for _, n := range nums[1:] {\n        if n > max\
    \ {\n            max = n\n        }\n        if n < min {\n            min = n\n\
    \        }\n    }\n    \n    return min + max\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmprqa3fczf_test.go:55: expected '%!s(int=1)', got '%!s(int=5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmprqa3fczf_test.go:55:\
    \ expected '%!s(int=-6)', got '%!s(int=-4)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmprqa3fczf_test.go:55: expected '%!s(int=-14)', got '%!s(int=-8)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__3 (0.00s)\n        tmprqa3fczf_test.go:55:\
    \ expected '%!s(int=-9999999999999999)', got '%!s(int=-19999999999999998)'\n \
    \   --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmprqa3fczf_test.go:55:\
    \ expected '%!s(int=0)', got '%!s(int=1000000)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmprqa3fczf_test.go:55: expected '%!s(int=-6)', got '%!s(int=5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmprqa3fczf_test.go:55:\
    \ expected '%!s(int=-6)', got '%!s(int=95)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmprqa3fczf_test.go:55: expected '%!s(int=3)', got '%!s(int=16)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmprqa3fczf_test.go:55:\
    \ expected '%!s(int=-33)', got '%!s(int=67)'\n    --- FAIL: TestMinsubarraysum/test_num__9\
    \ (0.00s)\n        tmprqa3fczf_test.go:55: expected '%!s(int=-10)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__10 (0.00s)\n        tmprqa3fczf_test.go:55:\
    \ expected '%!s(int=7)', got '%!s(int=14)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmprqa3fczf_test.go:55: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075561
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    sum := 0\n    for _, v := range nums {\n        sum += v\n    }\n    return\
    \ sum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpl07jdm5v_test.go:43: expected '%!s(int=1)', got '%!s(int=16)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmpl07jdm5v_test.go:43:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpl07jdm5v_test.go:43: expected '%!s(int=-6)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpl07jdm5v_test.go:43:\
    \ expected '%!s(int=-6)', got '%!s(int=99)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpl07jdm5v_test.go:43: expected '%!s(int=3)', got '%!s(int=49)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpl07jdm5v_test.go:43:\
    \ expected '%!s(int=-33)', got '%!s(int=96)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpl07jdm5v_test.go:43: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075561
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    if len(nums) == 0 {\n        return 0\n    }\n\n    min := nums[0]\n    for\
    \ _, v := range nums[1:] {\n        if v < min {\n            min = v\n      \
    \  }\n    }\n\n    return min\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n\
    \  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__1\
    \ (0.00s)\n        tmpla1olsf7_test.go:50: expected '%!s(int=-6)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__2 (0.00s)\n        tmpla1olsf7_test.go:50:\
    \ expected '%!s(int=-14)', got '%!s(int=-10)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpla1olsf7_test.go:50: expected '%!s(int=-6)', got '%!s(int=-5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpla1olsf7_test.go:50:\
    \ expected '%!s(int=-6)', got '%!s(int=-5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660075563
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    if len(nums) == 0 {\n        return 0\n    }\n    \n    min := nums[0]\n\
    \    max := nums[0]\n    \n    for _, n := range nums[1:] {\n        if n > max\
    \ {\n            max = n\n        }\n        if n < min {\n            min = n\n\
    \        }\n    }\n    \n    return min + max\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmprqa3fczf_test.go:55: expected '%!s(int=1)', got '%!s(int=5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmprqa3fczf_test.go:55:\
    \ expected '%!s(int=-6)', got '%!s(int=-4)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmprqa3fczf_test.go:55: expected '%!s(int=-14)', got '%!s(int=-8)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__3 (0.00s)\n        tmprqa3fczf_test.go:55:\
    \ expected '%!s(int=-9999999999999999)', got '%!s(int=-19999999999999998)'\n \
    \   --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmprqa3fczf_test.go:55:\
    \ expected '%!s(int=0)', got '%!s(int=1000000)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmprqa3fczf_test.go:55: expected '%!s(int=-6)', got '%!s(int=5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmprqa3fczf_test.go:55:\
    \ expected '%!s(int=-6)', got '%!s(int=95)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmprqa3fczf_test.go:55: expected '%!s(int=3)', got '%!s(int=16)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmprqa3fczf_test.go:55:\
    \ expected '%!s(int=-33)', got '%!s(int=67)'\n    --- FAIL: TestMinsubarraysum/test_num__9\
    \ (0.00s)\n        tmprqa3fczf_test.go:55: expected '%!s(int=-10)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__10 (0.00s)\n        tmprqa3fczf_test.go:55:\
    \ expected '%!s(int=7)', got '%!s(int=14)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmprqa3fczf_test.go:55: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075561
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    // Write your code here\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nfunc\
    \ TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpd5ocg9nm_test.go:267:6: expected ''('', found TestMinsubarraysum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075559
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    if len(nums) == 0 {\n        return 0\n    }\n    \n    min := nums[0]\n\
    \    max := nums[0]\n    \n    for _, v := range nums[1:] {\n        if v < min\
    \ {\n            min = v\n        }\n        if v > max {\n            max = v\n\
    \        }\n    }\n    \n    return min + minSubArraySum(nums[1:])\n}\n\nfunc\
    \ TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmp9j0ifj7z_test.go:55: expected '%!s(int=1)', got '%!s(int=10)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmp9j0ifj7z_test.go:55:\
    \ expected '%!s(int=-6)', got '%!s(int=-9)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmp9j0ifj7z_test.go:55: expected '%!s(int=-14)', got '%!s(int=-50)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmp9j0ifj7z_test.go:55:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmp9j0ifj7z_test.go:55: expected '%!s(int=-6)', got '%!s(int=-25)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmp9j0ifj7z_test.go:55:\
    \ expected '%!s(int=-6)', got '%!s(int=-30)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmp9j0ifj7z_test.go:55: expected '%!s(int=3)', got '%!s(int=19)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp9j0ifj7z_test.go:55:\
    \ expected '%!s(int=-33)', got '%!s(int=-74)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmp9j0ifj7z_test.go:55: expected '%!s(int=-1)', got '%!s(int=-2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075561
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    // Write your code here.\n    sum := 0\n    for _, v := range nums {\n  \
    \      sum += v\n    }\n    return sum\n}\n\nfunc TestMinsubarraysum(t *testing.T)\
    \ {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpwyoflajj_test.go:44: expected '%!s(int=1)', got '%!s(int=16)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmpwyoflajj_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpwyoflajj_test.go:44: expected '%!s(int=-6)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpwyoflajj_test.go:44:\
    \ expected '%!s(int=-6)', got '%!s(int=99)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpwyoflajj_test.go:44: expected '%!s(int=3)', got '%!s(int=49)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpwyoflajj_test.go:44:\
    \ expected '%!s(int=-33)', got '%!s(int=96)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpwyoflajj_test.go:44: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075561
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    // Write your code here\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nfunc\
    \ TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpd5ocg9nm_test.go:267:6: expected ''('', found TestMinsubarraysum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075559
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    // Write your code here\n    \n    \n    return 0\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpxgzsld2q_test.go:42: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpxgzsld2q_test.go:42:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpxgzsld2q_test.go:42: expected '%!s(int=-14)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__3 (0.00s)\n        tmpxgzsld2q_test.go:42:\
    \ expected '%!s(int=-9999999999999999)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpxgzsld2q_test.go:42: expected '%!s(int=-6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpxgzsld2q_test.go:42:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpxgzsld2q_test.go:42: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpxgzsld2q_test.go:42:\
    \ expected '%!s(int=-33)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__9\
    \ (0.00s)\n        tmpxgzsld2q_test.go:42: expected '%!s(int=-10)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__10 (0.00s)\n        tmpxgzsld2q_test.go:42:\
    \ expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpxgzsld2q_test.go:42: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075563
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    // Write your code here.\n    \n    \n    return 0\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmp1_vrkb8a_test.go:42: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmp1_vrkb8a_test.go:42:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmp1_vrkb8a_test.go:42: expected '%!s(int=-14)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__3 (0.00s)\n        tmp1_vrkb8a_test.go:42:\
    \ expected '%!s(int=-9999999999999999)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmp1_vrkb8a_test.go:42: expected '%!s(int=-6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmp1_vrkb8a_test.go:42:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmp1_vrkb8a_test.go:42: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp1_vrkb8a_test.go:42:\
    \ expected '%!s(int=-33)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__9\
    \ (0.00s)\n        tmp1_vrkb8a_test.go:42: expected '%!s(int=-10)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__10 (0.00s)\n        tmp1_vrkb8a_test.go:42:\
    \ expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmp1_vrkb8a_test.go:42: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075562
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    sum := 0\n    for _, v := range nums {\n        sum += v\n    }\n    return\
    \ sum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpl07jdm5v_test.go:43: expected '%!s(int=1)', got '%!s(int=16)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmpl07jdm5v_test.go:43:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpl07jdm5v_test.go:43: expected '%!s(int=-6)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpl07jdm5v_test.go:43:\
    \ expected '%!s(int=-6)', got '%!s(int=99)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpl07jdm5v_test.go:43: expected '%!s(int=3)', got '%!s(int=49)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpl07jdm5v_test.go:43:\
    \ expected '%!s(int=-33)', got '%!s(int=96)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpl07jdm5v_test.go:43: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075561
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    // Write your code here\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nfunc\
    \ TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpd5ocg9nm_test.go:267:6: expected ''('', found TestMinsubarraysum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075559
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    // Write your code here\n    \n    return 0\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=-14)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__3 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=-9999999999999999)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=-6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=-33)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__9\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=-10)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__10 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075561
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    // Write your code here\n    \n    return 0\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=-14)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__3 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=-9999999999999999)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=-6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=-33)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__9\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=-10)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__10 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075561
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    sum := 0\n    for _, num := range nums {\n        sum += num\n    }\n   \
    \ return sum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmp0e6ay1qh_test.go:43: expected '%!s(int=1)', got '%!s(int=16)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmp0e6ay1qh_test.go:43:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmp0e6ay1qh_test.go:43: expected '%!s(int=-6)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmp0e6ay1qh_test.go:43:\
    \ expected '%!s(int=-6)', got '%!s(int=99)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmp0e6ay1qh_test.go:43: expected '%!s(int=3)', got '%!s(int=49)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp0e6ay1qh_test.go:43:\
    \ expected '%!s(int=-33)', got '%!s(int=96)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmp0e6ay1qh_test.go:43: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075561
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    // Write your code here\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nfunc\
    \ TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpd5ocg9nm_test.go:267:6: expected ''('', found TestMinsubarraysum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075559
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    if len(nums) == 0 {\n        return 0\n    }\n    \n    min := nums[0]\n\
    \    max := nums[0]\n    \n    for _, v := range nums[1:] {\n        if v < min\
    \ {\n            min = v\n        }\n        if v > max {\n            max = v\n\
    \        }\n    }\n    \n    return min + minSubArraySum(nums[1 : len(nums)-1])\n\
    }\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [1:0] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [1:0]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.minSubArraySum({0xc0000afc70?, 0x4?, 0x5?})\n\
    \t/tmp/tmpm9e2n853_test.go:28 +0x98\ncommand-line-arguments_test.minSubArraySum({0xc0000afc68?,\
    \ 0x0?, 0x0?})\n\t/tmp/tmpm9e2n853_test.go:28 +0x7c\ncommand-line-arguments_test.TestMinsubarraysum(0x0?)\n\
    \t/tmp/tmpm9e2n853_test.go:39 +0x112\ntesting.tRunner(0xc0000da340, 0x528f48)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075563
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    // Write your code here\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nfunc\
    \ TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpd5ocg9nm_test.go:267:6: expected ''('', found TestMinsubarraysum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075559
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    // Write your code here\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nfunc\
    \ TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpd5ocg9nm_test.go:267:6: expected ''('', found TestMinsubarraysum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075559
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    // Write your code here\n    \n    return 0\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=-14)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__3 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=-9999999999999999)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=-6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=-33)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__9\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=-10)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__10 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075561
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    result := 0\n    for _, num := range nums {\n        result += num\n    }\n\
    \    return result\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpwo2phwx6_test.go:43: expected '%!s(int=1)', got '%!s(int=16)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmpwo2phwx6_test.go:43:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpwo2phwx6_test.go:43: expected '%!s(int=-6)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpwo2phwx6_test.go:43:\
    \ expected '%!s(int=-6)', got '%!s(int=99)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpwo2phwx6_test.go:43: expected '%!s(int=3)', got '%!s(int=49)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpwo2phwx6_test.go:43:\
    \ expected '%!s(int=-33)', got '%!s(int=96)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpwo2phwx6_test.go:43: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075563
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    // Write your code here.\n    \n    return 0\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpvv8qtlok_test.go:41: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpvv8qtlok_test.go:41:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpvv8qtlok_test.go:41: expected '%!s(int=-14)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__3 (0.00s)\n        tmpvv8qtlok_test.go:41:\
    \ expected '%!s(int=-9999999999999999)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpvv8qtlok_test.go:41: expected '%!s(int=-6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpvv8qtlok_test.go:41:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpvv8qtlok_test.go:41: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpvv8qtlok_test.go:41:\
    \ expected '%!s(int=-33)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__9\
    \ (0.00s)\n        tmpvv8qtlok_test.go:41: expected '%!s(int=-10)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__10 (0.00s)\n        tmpvv8qtlok_test.go:41:\
    \ expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpvv8qtlok_test.go:41: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075561
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    // Write your code here.\n    \n    var minSum = nums[0]\n    for _, num\
    \ := range nums {\n        minSum = minSum + num\n    }\n    return minSum\n}\n\
    \nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmp00q8_t72_test.go:45: expected '%!s(int=1)', got '%!s(int=18)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmp00q8_t72_test.go:45:\
    \ expected '%!s(int=-6)', got '%!s(int=-7)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmp00q8_t72_test.go:45: expected '%!s(int=-14)', got '%!s(int=-15)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__3 (0.00s)\n        tmp00q8_t72_test.go:45:\
    \ expected '%!s(int=-9999999999999999)', got '%!s(int=-19999999999999998)'\n \
    \   --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmp00q8_t72_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmp00q8_t72_test.go:45: expected '%!s(int=-6)', got '%!s(int=-2)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmp00q8_t72_test.go:45:\
    \ expected '%!s(int=-6)', got '%!s(int=199)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmp00q8_t72_test.go:45: expected '%!s(int=3)', got '%!s(int=59)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp00q8_t72_test.go:45:\
    \ expected '%!s(int=-33)', got '%!s(int=196)'\n    --- FAIL: TestMinsubarraysum/test_num__9\
    \ (0.00s)\n        tmp00q8_t72_test.go:45: expected '%!s(int=-10)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__10 (0.00s)\n        tmp00q8_t72_test.go:45:\
    \ expected '%!s(int=7)', got '%!s(int=14)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmp00q8_t72_test.go:45: expected '%!s(int=-1)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075563
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    // Write your code here\n    sum := 0\n    for _, v := range nums {\n   \
    \     sum += v\n    }\n    return sum\n}\n\nfunc TestMinsubarraysum(t *testing.T)\
    \ {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmp21swk1oa_test.go:44: expected '%!s(int=1)', got '%!s(int=16)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmp21swk1oa_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmp21swk1oa_test.go:44: expected '%!s(int=-6)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmp21swk1oa_test.go:44:\
    \ expected '%!s(int=-6)', got '%!s(int=99)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmp21swk1oa_test.go:44: expected '%!s(int=3)', got '%!s(int=49)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp21swk1oa_test.go:44:\
    \ expected '%!s(int=-33)', got '%!s(int=96)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmp21swk1oa_test.go:44: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075561
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    // Write your code here\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nfunc\
    \ TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpd5ocg9nm_test.go:267:6: expected ''('', found TestMinsubarraysum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075559
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    // Write your code here\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nfunc\
    \ TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpd5ocg9nm_test.go:267:6: expected ''('', found TestMinsubarraysum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075559
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    if len(nums) == 0 {\n        return 0\n    }\n    \n    // Initialize min\
    \ and max to first and last element\n    min := nums[0]\n    max := nums[len(nums)-1]\n\
    \    \n    // Initialize sum to first element\n    sum := nums[0]\n    \n    //\
    \ Initialize current index to 0\n    currentIndex := 0\n    \n    // Iterate through\
    \ all elements and update min and max if needed\n    for i := 1; i < len(nums);\
    \ i++ {\n        if nums[i] < min {\n            min = nums[i]\n        }\n  \
    \      if nums[i] > max {\n            max = nums[i]\n        }\n        \n  \
    \      // Update sum if needed\n        if nums[i] != sum {\n            sum =\
    \ nums[i]\n        }\n        \n        // Update current index\n        currentIndex++\n\
    \    }\n    \n    // Return min + sum\n    return min + sum\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpyye5q55g_test.go:72: expected '%!s(int=1)', got '%!s(int=5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__2 (0.00s)\n        tmpyye5q55g_test.go:72:\
    \ expected '%!s(int=-14)', got '%!s(int=-20)'\n    --- FAIL: TestMinsubarraysum/test_num__3\
    \ (0.00s)\n        tmpyye5q55g_test.go:72: expected '%!s(int=-9999999999999999)',\
    \ got '%!s(int=-19999999999999998)'\n    --- FAIL: TestMinsubarraysum/test_num__4\
    \ (0.00s)\n        tmpyye5q55g_test.go:72: expected '%!s(int=0)', got '%!s(int=1000000)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__5 (0.00s)\n        tmpyye5q55g_test.go:72:\
    \ expected '%!s(int=-6)', got '%!s(int=-10)'\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmpyye5q55g_test.go:72: expected '%!s(int=-6)', got '%!s(int=-10)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__7 (0.00s)\n        tmpyye5q55g_test.go:72:\
    \ expected '%!s(int=3)', got '%!s(int=7)'\n    --- FAIL: TestMinsubarraysum/test_num__8\
    \ (0.00s)\n        tmpyye5q55g_test.go:72: expected '%!s(int=-33)', got '%!s(int=-35)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__9 (0.00s)\n        tmpyye5q55g_test.go:72:\
    \ expected '%!s(int=-10)', got '%!s(int=-20)'\n    --- FAIL: TestMinsubarraysum/test_num__10\
    \ (0.00s)\n        tmpyye5q55g_test.go:72: expected '%!s(int=7)', got '%!s(int=14)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__11 (0.00s)\n        tmpyye5q55g_test.go:72:\
    \ expected '%!s(int=-1)', got '%!s(int=-2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075563
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    if len(nums) == 0 {\n        return 0\n    }\n    \n    min := nums[0]\n\
    \    max := nums[0]\n    for _, n := range nums[1:] {\n        if n < min {\n\
    \            min = n\n        }\n        if n > max {\n            max = n\n \
    \       }\n    }\n    \n    return min + minSubArraySum(nums[1 : len(nums)-1])\n\
    }\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [1:0] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [1:0]\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc0001d6000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513620,\
    \ 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.minSubArraySum({0xc000187c70?, 0x4?, 0x5?})\n\
    \t/tmp/tmp2k366ssd_test.go:27 +0x98\ncommand-line-arguments_test.minSubArraySum({0xc000187c68?,\
    \ 0x0?, 0x0?})\n\t/tmp/tmp2k366ssd_test.go:27 +0x7c\ncommand-line-arguments_test.TestMinsubarraysum(0x0?)\n\
    \t/tmp/tmp2k366ssd_test.go:38 +0x112\ntesting.tRunner(0xc000199040, 0x528f48)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075563
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    // Write your code here\n    \n    return 0\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=-14)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__3 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=-9999999999999999)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=-6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=-33)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__9\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=-10)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__10 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075561
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    // Write your code here\n    \n    return 0\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=-14)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__3 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=-9999999999999999)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=-6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=-33)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__9\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=-10)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__10 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075561
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    // Write your code here.\n    \n    var minSum = nums[0]\n    for _, v :=\
    \ range nums {\n        minSum = minSum + v\n    }\n    return minSum\n}\n\nfunc\
    \ TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpa8e34gzy_test.go:45: expected '%!s(int=1)', got '%!s(int=18)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpa8e34gzy_test.go:45:\
    \ expected '%!s(int=-6)', got '%!s(int=-7)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpa8e34gzy_test.go:45: expected '%!s(int=-14)', got '%!s(int=-15)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__3 (0.00s)\n        tmpa8e34gzy_test.go:45:\
    \ expected '%!s(int=-9999999999999999)', got '%!s(int=-19999999999999998)'\n \
    \   --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmpa8e34gzy_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpa8e34gzy_test.go:45: expected '%!s(int=-6)', got '%!s(int=-2)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpa8e34gzy_test.go:45:\
    \ expected '%!s(int=-6)', got '%!s(int=199)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpa8e34gzy_test.go:45: expected '%!s(int=3)', got '%!s(int=59)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpa8e34gzy_test.go:45:\
    \ expected '%!s(int=-33)', got '%!s(int=196)'\n    --- FAIL: TestMinsubarraysum/test_num__9\
    \ (0.00s)\n        tmpa8e34gzy_test.go:45: expected '%!s(int=-10)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__10 (0.00s)\n        tmpa8e34gzy_test.go:45:\
    \ expected '%!s(int=7)', got '%!s(int=14)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpa8e34gzy_test.go:45: expected '%!s(int=-1)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075563
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    // Write your code here\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nfunc\
    \ TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpd5ocg9nm_test.go:267:6: expected ''('', found TestMinsubarraysum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075559
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    // Write your code here\n    sum := 0\n    for _, v := range nums {\n   \
    \     sum += v\n    }\n    return sum\n}\n\nfunc TestMinsubarraysum(t *testing.T)\
    \ {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmp21swk1oa_test.go:44: expected '%!s(int=1)', got '%!s(int=16)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmp21swk1oa_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmp21swk1oa_test.go:44: expected '%!s(int=-6)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmp21swk1oa_test.go:44:\
    \ expected '%!s(int=-6)', got '%!s(int=99)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmp21swk1oa_test.go:44: expected '%!s(int=3)', got '%!s(int=49)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp21swk1oa_test.go:44:\
    \ expected '%!s(int=-33)', got '%!s(int=96)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmp21swk1oa_test.go:44: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075561
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    sum := 0\n    for _, v := range nums {\n        sum += v\n    }\n    return\
    \ sum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpl07jdm5v_test.go:43: expected '%!s(int=1)', got '%!s(int=16)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmpl07jdm5v_test.go:43:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpl07jdm5v_test.go:43: expected '%!s(int=-6)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpl07jdm5v_test.go:43:\
    \ expected '%!s(int=-6)', got '%!s(int=99)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpl07jdm5v_test.go:43: expected '%!s(int=3)', got '%!s(int=49)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpl07jdm5v_test.go:43:\
    \ expected '%!s(int=-33)', got '%!s(int=96)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpl07jdm5v_test.go:43: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075561
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    // Write your code here\n    \n    return 0\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=-14)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__3 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=-9999999999999999)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=-6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=-33)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__9\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=-10)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__10 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075561
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    if len(nums) == 0 {\n        return 0\n    }\n\n    min := nums[0]\n    for\
    \ _, n := range nums[1:] {\n        if n < min {\n            min = n\n      \
    \  }\n    }\n\n    return min\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n\
    \  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__1\
    \ (0.00s)\n        tmp6671zt82_test.go:50: expected '%!s(int=-6)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__2 (0.00s)\n        tmp6671zt82_test.go:50:\
    \ expected '%!s(int=-14)', got '%!s(int=-10)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmp6671zt82_test.go:50: expected '%!s(int=-6)', got '%!s(int=-5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmp6671zt82_test.go:50:\
    \ expected '%!s(int=-6)', got '%!s(int=-5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660075563
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    // Write your code here\n    \n    return 0\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=-14)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__3 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=-9999999999999999)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=-6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=-33)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__9\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=-10)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__10 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075561
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    // Write your code here\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nfunc\
    \ TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpd5ocg9nm_test.go:267:6: expected ''('', found TestMinsubarraysum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075559
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    result := 0\n    for _, num := range nums {\n        result += num\n    }\n\
    \    return result\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpwo2phwx6_test.go:43: expected '%!s(int=1)', got '%!s(int=16)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmpwo2phwx6_test.go:43:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpwo2phwx6_test.go:43: expected '%!s(int=-6)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpwo2phwx6_test.go:43:\
    \ expected '%!s(int=-6)', got '%!s(int=99)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpwo2phwx6_test.go:43: expected '%!s(int=3)', got '%!s(int=49)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpwo2phwx6_test.go:43:\
    \ expected '%!s(int=-33)', got '%!s(int=96)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpwo2phwx6_test.go:43: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075563
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    // Write your code here\n    \n    return 0\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=-14)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__3 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=-9999999999999999)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=-6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=-33)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__9\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=-10)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__10 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075561
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    // Write your code here.\n    \n    return 0\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpvv8qtlok_test.go:41: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpvv8qtlok_test.go:41:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpvv8qtlok_test.go:41: expected '%!s(int=-14)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__3 (0.00s)\n        tmpvv8qtlok_test.go:41:\
    \ expected '%!s(int=-9999999999999999)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpvv8qtlok_test.go:41: expected '%!s(int=-6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpvv8qtlok_test.go:41:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpvv8qtlok_test.go:41: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpvv8qtlok_test.go:41:\
    \ expected '%!s(int=-33)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__9\
    \ (0.00s)\n        tmpvv8qtlok_test.go:41: expected '%!s(int=-10)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__10 (0.00s)\n        tmpvv8qtlok_test.go:41:\
    \ expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpvv8qtlok_test.go:41: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075561
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    // Write your code here\n    sum := 0\n    for _, v := range nums {\n   \
    \     sum += v\n    }\n    return sum\n}\n\nfunc TestMinsubarraysum(t *testing.T)\
    \ {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmp21swk1oa_test.go:44: expected '%!s(int=1)', got '%!s(int=16)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmp21swk1oa_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmp21swk1oa_test.go:44: expected '%!s(int=-6)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmp21swk1oa_test.go:44:\
    \ expected '%!s(int=-6)', got '%!s(int=99)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmp21swk1oa_test.go:44: expected '%!s(int=3)', got '%!s(int=49)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp21swk1oa_test.go:44:\
    \ expected '%!s(int=-33)', got '%!s(int=96)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmp21swk1oa_test.go:44: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075561
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    // Write your code here\n    sum := 0\n    for _, num := range nums {\n \
    \       sum += num\n    }\n    return sum\n}\n\nfunc TestMinsubarraysum(t *testing.T)\
    \ {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmperhc_p3d_test.go:44: expected '%!s(int=1)', got '%!s(int=16)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmperhc_p3d_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmperhc_p3d_test.go:44: expected '%!s(int=-6)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmperhc_p3d_test.go:44:\
    \ expected '%!s(int=-6)', got '%!s(int=99)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmperhc_p3d_test.go:44: expected '%!s(int=3)', got '%!s(int=49)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmperhc_p3d_test.go:44:\
    \ expected '%!s(int=-33)', got '%!s(int=96)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmperhc_p3d_test.go:44: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075561
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    // Write your code here.\n    \n    var minSum = nums[0]\n    for _, v :=\
    \ range nums {\n        minSum = minSum - v\n    }\n    return minSum\n}\n\nfunc\
    \ TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmph5b72544_test.go:45: expected '%!s(int=1)', got '%!s(int=-14)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmph5b72544_test.go:45:\
    \ expected '%!s(int=-6)', got '%!s(int=5)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmph5b72544_test.go:45: expected '%!s(int=-14)', got '%!s(int=13)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__3 (0.00s)\n        tmph5b72544_test.go:45:\
    \ expected '%!s(int=-9999999999999999)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__4\
    \ (0.00s)\n        tmph5b72544_test.go:45: expected '%!s(int=0)', got '%!s(int=-1000030)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__5 (0.00s)\n        tmph5b72544_test.go:45:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmph5b72544_test.go:45: expected '%!s(int=-6)', got '%!s(int=1)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__7 (0.00s)\n        tmph5b72544_test.go:45:\
    \ expected '%!s(int=3)', got '%!s(int=-39)'\n    --- FAIL: TestMinsubarraysum/test_num__8\
    \ (0.00s)\n        tmph5b72544_test.go:45: expected '%!s(int=-33)', got '%!s(int=4)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__9 (0.00s)\n        tmph5b72544_test.go:45:\
    \ expected '%!s(int=-10)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__10\
    \ (0.00s)\n        tmph5b72544_test.go:45: expected '%!s(int=7)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__11 (0.00s)\n        tmph5b72544_test.go:45:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075563
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    \n    // Write your code here\n    \n    return 0\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmp1zg1zz4j_test.go:42: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmp1zg1zz4j_test.go:42:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmp1zg1zz4j_test.go:42: expected '%!s(int=-14)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__3 (0.00s)\n        tmp1zg1zz4j_test.go:42:\
    \ expected '%!s(int=-9999999999999999)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmp1zg1zz4j_test.go:42: expected '%!s(int=-6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmp1zg1zz4j_test.go:42:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmp1zg1zz4j_test.go:42: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp1zg1zz4j_test.go:42:\
    \ expected '%!s(int=-33)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__9\
    \ (0.00s)\n        tmp1zg1zz4j_test.go:42: expected '%!s(int=-10)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__10 (0.00s)\n        tmp1zg1zz4j_test.go:42:\
    \ expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmp1zg1zz4j_test.go:42: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075561
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    // Write your code here\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nfunc\
    \ TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpd5ocg9nm_test.go:267:6: expected ''('', found TestMinsubarraysum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075559
- exit_code: 2
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    if len(nums) == 0 {\n        return 0\n    }\n    min := nums[0]\n    for\
    \ _, num := range nums[1:] {\n        min = min(num, min)\n    }\n    return min\n\
    }\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpff8ueo3t_test.go:16:12: num declared but not used

    /tmp/tmpff8ueo3t_test.go:17:15: invalid operation: cannot call non-function min
    (variable of type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075563
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    // Write your code here\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nfunc\
    \ TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpd5ocg9nm_test.go:267:6: expected ''('', found TestMinsubarraysum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075559
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    // Write your code here\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nfunc\
    \ TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpd5ocg9nm_test.go:267:6: expected ''('', found TestMinsubarraysum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075559
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    sum := 0\n    for _, v := range nums {\n        sum += v\n    }\n    return\
    \ sum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpl07jdm5v_test.go:43: expected '%!s(int=1)', got '%!s(int=16)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmpl07jdm5v_test.go:43:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpl07jdm5v_test.go:43: expected '%!s(int=-6)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpl07jdm5v_test.go:43:\
    \ expected '%!s(int=-6)', got '%!s(int=99)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpl07jdm5v_test.go:43: expected '%!s(int=3)', got '%!s(int=49)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpl07jdm5v_test.go:43:\
    \ expected '%!s(int=-33)', got '%!s(int=96)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpl07jdm5v_test.go:43: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075561
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    // Write your code here\n    \n    \n    return 0\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpxgzsld2q_test.go:42: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpxgzsld2q_test.go:42:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpxgzsld2q_test.go:42: expected '%!s(int=-14)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__3 (0.00s)\n        tmpxgzsld2q_test.go:42:\
    \ expected '%!s(int=-9999999999999999)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpxgzsld2q_test.go:42: expected '%!s(int=-6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpxgzsld2q_test.go:42:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpxgzsld2q_test.go:42: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpxgzsld2q_test.go:42:\
    \ expected '%!s(int=-33)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__9\
    \ (0.00s)\n        tmpxgzsld2q_test.go:42: expected '%!s(int=-10)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__10 (0.00s)\n        tmpxgzsld2q_test.go:42:\
    \ expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpxgzsld2q_test.go:42: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075563
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    sum := 0\n    for _, v := range nums {\n        sum += v\n    }\n    return\
    \ sum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpl07jdm5v_test.go:43: expected '%!s(int=1)', got '%!s(int=16)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmpl07jdm5v_test.go:43:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpl07jdm5v_test.go:43: expected '%!s(int=-6)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpl07jdm5v_test.go:43:\
    \ expected '%!s(int=-6)', got '%!s(int=99)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpl07jdm5v_test.go:43: expected '%!s(int=3)', got '%!s(int=49)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpl07jdm5v_test.go:43:\
    \ expected '%!s(int=-33)', got '%!s(int=96)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpl07jdm5v_test.go:43: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075561
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    sum := 0\n    for _, v := range nums {\n        sum += v\n    }\n    return\
    \ sum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpl07jdm5v_test.go:43: expected '%!s(int=1)', got '%!s(int=16)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmpl07jdm5v_test.go:43:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpl07jdm5v_test.go:43: expected '%!s(int=-6)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpl07jdm5v_test.go:43:\
    \ expected '%!s(int=-6)', got '%!s(int=99)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpl07jdm5v_test.go:43: expected '%!s(int=3)', got '%!s(int=49)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpl07jdm5v_test.go:43:\
    \ expected '%!s(int=-33)', got '%!s(int=96)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpl07jdm5v_test.go:43: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075561
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    n := len(nums)\n    if n < 2 {\n        return nums[0]\n    }\n    min :=\
    \ nums[0]\n    max := nums[0]\n    for i := 1; i < n; i++ {\n        if nums[i]\
    \ < min {\n            min = nums[i]\n        }\n        if nums[i] > max {\n\
    \            max = nums[i]\n        }\n    }\n    return min + minSubArraySum(nums[1\
    \ : n-1])\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\npanic: runtime error: index out of\
    \ range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range\
    \ [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.minSubArraySum({0xc0000afd08?, 0x0?, 0x0?})\n\
    \t/tmp/tmp5v32gjx0_test.go:14 +0x4f\ncommand-line-arguments_test.minSubArraySum({0xc0000afd00?,\
    \ 0x0?, 0x0?})\n\t/tmp/tmp5v32gjx0_test.go:26 +0x93\ncommand-line-arguments_test.minSubArraySum({0xc0000afcf8?,\
    \ 0x4?, 0x5?})\n\t/tmp/tmp5v32gjx0_test.go:26 +0x93\ncommand-line-arguments_test.minSubArraySum({0xc00007e4f0?,\
    \ 0x0?, 0x0?})\n\t/tmp/tmp5v32gjx0_test.go:26 +0x93\ncommand-line-arguments_test.TestMinsubarraysum(0x0?)\n\
    \t/tmp/tmp5v32gjx0_test.go:36 +0xb4\ntesting.tRunner(0xc0000da340, 0x528f48)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075563
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    // Write your code here\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nfunc\
    \ TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpd5ocg9nm_test.go:267:6: expected ''('', found TestMinsubarraysum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075559
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    sum := 0\n    for _, v := range nums {\n        sum += v\n    }\n    return\
    \ sum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpl07jdm5v_test.go:43: expected '%!s(int=1)', got '%!s(int=16)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmpl07jdm5v_test.go:43:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpl07jdm5v_test.go:43: expected '%!s(int=-6)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpl07jdm5v_test.go:43:\
    \ expected '%!s(int=-6)', got '%!s(int=99)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpl07jdm5v_test.go:43: expected '%!s(int=3)', got '%!s(int=49)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpl07jdm5v_test.go:43:\
    \ expected '%!s(int=-33)', got '%!s(int=96)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpl07jdm5v_test.go:43: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075561
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    // Write your code here.\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nfunc\
    \ TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1iy1339v_test.go:267:6: expected ''('', found TestMinsubarraysum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075559
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    sum := 0\n    for _, num := range nums {\n        sum += num\n    }\n   \
    \ return sum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmp0e6ay1qh_test.go:43: expected '%!s(int=1)', got '%!s(int=16)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmp0e6ay1qh_test.go:43:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmp0e6ay1qh_test.go:43: expected '%!s(int=-6)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmp0e6ay1qh_test.go:43:\
    \ expected '%!s(int=-6)', got '%!s(int=99)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmp0e6ay1qh_test.go:43: expected '%!s(int=3)', got '%!s(int=49)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp0e6ay1qh_test.go:43:\
    \ expected '%!s(int=-33)', got '%!s(int=96)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmp0e6ay1qh_test.go:43: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075561
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    n := len(nums)\n    if n < 2 {\n        return nums[0]\n    }\n    min :=\
    \ nums[0]\n    max := nums[n-1]\n    for i := 1; i < n; i++ {\n        if nums[i]\
    \ > max {\n            max = nums[i]\n        }\n        if nums[i] < min {\n\
    \            min = nums[i]\n        }\n    }\n    return min + minSubArraySum(nums[1\
    \ : n-1])\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\npanic: runtime error: index out of\
    \ range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range\
    \ [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.minSubArraySum({0xc0000afd08?, 0x0?, 0x0?})\n\
    \t/tmp/tmp9mybpjkn_test.go:14 +0x51\ncommand-line-arguments_test.minSubArraySum({0xc0000afd00?,\
    \ 0x0?, 0x0?})\n\t/tmp/tmp9mybpjkn_test.go:26 +0x97\ncommand-line-arguments_test.minSubArraySum({0xc0000afcf8?,\
    \ 0x4?, 0x5?})\n\t/tmp/tmp9mybpjkn_test.go:26 +0x97\ncommand-line-arguments_test.minSubArraySum({0xc00007e4f0?,\
    \ 0x0?, 0x0?})\n\t/tmp/tmp9mybpjkn_test.go:26 +0x97\ncommand-line-arguments_test.TestMinsubarraysum(0x0?)\n\
    \t/tmp/tmp9mybpjkn_test.go:36 +0xb4\ntesting.tRunner(0xc0000cc4e0, 0x528f48)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075563
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    // Write your code here\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nfunc\
    \ TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpd5ocg9nm_test.go:267:6: expected ''('', found TestMinsubarraysum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075559
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    // Write your code here\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nfunc\
    \ TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpd5ocg9nm_test.go:267:6: expected ''('', found TestMinsubarraysum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075559
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    // Write your code here\n    \n    return 0\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=-14)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__3 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=-9999999999999999)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=-6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=-33)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__9\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=-10)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__10 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075561
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    if len(nums) == 0 {\n        return 0\n    }\n    \n    min := nums[0]\n\
    \    max := nums[0]\n    for _, n := range nums[1:] {\n        if n > max {\n\
    \            max = n\n        }\n        if n < min {\n            min = n\n \
    \       }\n    }\n    return min + max\n}\n\nfunc TestMinsubarraysum(t *testing.T)\
    \ {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmprb9s2_ar_test.go:53: expected '%!s(int=1)', got '%!s(int=5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmprb9s2_ar_test.go:53:\
    \ expected '%!s(int=-6)', got '%!s(int=-4)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmprb9s2_ar_test.go:53: expected '%!s(int=-14)', got '%!s(int=-8)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__3 (0.00s)\n        tmprb9s2_ar_test.go:53:\
    \ expected '%!s(int=-9999999999999999)', got '%!s(int=-19999999999999998)'\n \
    \   --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmprb9s2_ar_test.go:53:\
    \ expected '%!s(int=0)', got '%!s(int=1000000)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmprb9s2_ar_test.go:53: expected '%!s(int=-6)', got '%!s(int=5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmprb9s2_ar_test.go:53:\
    \ expected '%!s(int=-6)', got '%!s(int=95)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmprb9s2_ar_test.go:53: expected '%!s(int=3)', got '%!s(int=16)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmprb9s2_ar_test.go:53:\
    \ expected '%!s(int=-33)', got '%!s(int=67)'\n    --- FAIL: TestMinsubarraysum/test_num__9\
    \ (0.00s)\n        tmprb9s2_ar_test.go:53: expected '%!s(int=-10)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__10 (0.00s)\n        tmprb9s2_ar_test.go:53:\
    \ expected '%!s(int=7)', got '%!s(int=14)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmprb9s2_ar_test.go:53: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075563
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    // Write your code here\n    \n    return 0\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=-14)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__3 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=-9999999999999999)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=-6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=-33)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__9\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=-10)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__10 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075561
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    // Write your code here\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nfunc\
    \ TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpd5ocg9nm_test.go:267:6: expected ''('', found TestMinsubarraysum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075559
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    // Write your code here.\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nfunc\
    \ TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1iy1339v_test.go:267:6: expected ''('', found TestMinsubarraysum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075559
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    // Write your code here\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nfunc\
    \ TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpd5ocg9nm_test.go:267:6: expected ''('', found TestMinsubarraysum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075559
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    sum := 0\n    for _, v := range nums {\n        sum += v\n    }\n    return\
    \ sum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpl07jdm5v_test.go:43: expected '%!s(int=1)', got '%!s(int=16)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmpl07jdm5v_test.go:43:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpl07jdm5v_test.go:43: expected '%!s(int=-6)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpl07jdm5v_test.go:43:\
    \ expected '%!s(int=-6)', got '%!s(int=99)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpl07jdm5v_test.go:43: expected '%!s(int=3)', got '%!s(int=49)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpl07jdm5v_test.go:43:\
    \ expected '%!s(int=-33)', got '%!s(int=96)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpl07jdm5v_test.go:43: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075561
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    if len(nums) == 0 {\n        return 0\n    }\n    \n    min := nums[0]\n\
    \    max := nums[0]\n    for _, v := range nums[1:] {\n        if v < min {\n\
    \            min = v\n        }\n        if v > max {\n            max = v\n \
    \       }\n    }\n    \n    return min + minSubArraySum(nums[1:])\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpe35qk0eu_test.go:54: expected '%!s(int=1)', got '%!s(int=10)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpe35qk0eu_test.go:54:\
    \ expected '%!s(int=-6)', got '%!s(int=-9)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpe35qk0eu_test.go:54: expected '%!s(int=-14)', got '%!s(int=-50)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmpe35qk0eu_test.go:54:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpe35qk0eu_test.go:54: expected '%!s(int=-6)', got '%!s(int=-25)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpe35qk0eu_test.go:54:\
    \ expected '%!s(int=-6)', got '%!s(int=-30)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpe35qk0eu_test.go:54: expected '%!s(int=3)', got '%!s(int=19)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpe35qk0eu_test.go:54:\
    \ expected '%!s(int=-33)', got '%!s(int=-74)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpe35qk0eu_test.go:54: expected '%!s(int=-1)', got '%!s(int=-2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075563
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    // Write your code here.\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nfunc\
    \ TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1iy1339v_test.go:267:6: expected ''('', found TestMinsubarraysum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075559
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    if len(nums) == 0 {\n        return 0\n    }\n    \n    min := nums[0]\n\
    \    max := nums[0]\n    \n    for _, n := range nums[1:] {\n        if n > max\
    \ {\n            max = n\n        }\n        if n < min {\n            min = n\n\
    \        }\n    }\n    \n    return min + max\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmprqa3fczf_test.go:55: expected '%!s(int=1)', got '%!s(int=5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmprqa3fczf_test.go:55:\
    \ expected '%!s(int=-6)', got '%!s(int=-4)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmprqa3fczf_test.go:55: expected '%!s(int=-14)', got '%!s(int=-8)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__3 (0.00s)\n        tmprqa3fczf_test.go:55:\
    \ expected '%!s(int=-9999999999999999)', got '%!s(int=-19999999999999998)'\n \
    \   --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmprqa3fczf_test.go:55:\
    \ expected '%!s(int=0)', got '%!s(int=1000000)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmprqa3fczf_test.go:55: expected '%!s(int=-6)', got '%!s(int=5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmprqa3fczf_test.go:55:\
    \ expected '%!s(int=-6)', got '%!s(int=95)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmprqa3fczf_test.go:55: expected '%!s(int=3)', got '%!s(int=16)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmprqa3fczf_test.go:55:\
    \ expected '%!s(int=-33)', got '%!s(int=67)'\n    --- FAIL: TestMinsubarraysum/test_num__9\
    \ (0.00s)\n        tmprqa3fczf_test.go:55: expected '%!s(int=-10)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__10 (0.00s)\n        tmprqa3fczf_test.go:55:\
    \ expected '%!s(int=7)', got '%!s(int=14)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmprqa3fczf_test.go:55: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075561
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    // Write your code here\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nfunc\
    \ TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpd5ocg9nm_test.go:267:6: expected ''('', found TestMinsubarraysum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075559
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    sum := 0\n    for _, v := range nums {\n        sum += v\n    }\n    return\
    \ sum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpl07jdm5v_test.go:43: expected '%!s(int=1)', got '%!s(int=16)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmpl07jdm5v_test.go:43:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpl07jdm5v_test.go:43: expected '%!s(int=-6)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpl07jdm5v_test.go:43:\
    \ expected '%!s(int=-6)', got '%!s(int=99)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpl07jdm5v_test.go:43: expected '%!s(int=3)', got '%!s(int=49)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpl07jdm5v_test.go:43:\
    \ expected '%!s(int=-33)', got '%!s(int=96)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpl07jdm5v_test.go:43: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075561
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    \n    // Write your code here\n    \n    return 0\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmp1zg1zz4j_test.go:42: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmp1zg1zz4j_test.go:42:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmp1zg1zz4j_test.go:42: expected '%!s(int=-14)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__3 (0.00s)\n        tmp1zg1zz4j_test.go:42:\
    \ expected '%!s(int=-9999999999999999)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmp1zg1zz4j_test.go:42: expected '%!s(int=-6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmp1zg1zz4j_test.go:42:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmp1zg1zz4j_test.go:42: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp1zg1zz4j_test.go:42:\
    \ expected '%!s(int=-33)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__9\
    \ (0.00s)\n        tmp1zg1zz4j_test.go:42: expected '%!s(int=-10)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__10 (0.00s)\n        tmp1zg1zz4j_test.go:42:\
    \ expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmp1zg1zz4j_test.go:42: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075561
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    sum := 0\n    for _, v := range nums {\n        sum += v\n    }\n    return\
    \ sum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpl07jdm5v_test.go:43: expected '%!s(int=1)', got '%!s(int=16)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmpl07jdm5v_test.go:43:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpl07jdm5v_test.go:43: expected '%!s(int=-6)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpl07jdm5v_test.go:43:\
    \ expected '%!s(int=-6)', got '%!s(int=99)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpl07jdm5v_test.go:43: expected '%!s(int=3)', got '%!s(int=49)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpl07jdm5v_test.go:43:\
    \ expected '%!s(int=-33)', got '%!s(int=96)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpl07jdm5v_test.go:43: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075561
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    sum := 0\n    for _, v := range nums {\n        sum += v\n    }\n    return\
    \ sum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpl07jdm5v_test.go:43: expected '%!s(int=1)', got '%!s(int=16)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmpl07jdm5v_test.go:43:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpl07jdm5v_test.go:43: expected '%!s(int=-6)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpl07jdm5v_test.go:43:\
    \ expected '%!s(int=-6)', got '%!s(int=99)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpl07jdm5v_test.go:43: expected '%!s(int=3)', got '%!s(int=49)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpl07jdm5v_test.go:43:\
    \ expected '%!s(int=-33)', got '%!s(int=96)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpl07jdm5v_test.go:43: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075561
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    // Write your code here\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nfunc\
    \ TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpd5ocg9nm_test.go:267:6: expected ''('', found TestMinsubarraysum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075559
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    // Write your code here\n    \n    return 0\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=-14)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__3 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=-9999999999999999)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=-6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=-33)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__9\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=-10)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__10 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075561
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    sum := 0\n    for _, v := range nums {\n        sum += v\n    }\n    return\
    \ sum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpl07jdm5v_test.go:43: expected '%!s(int=1)', got '%!s(int=16)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmpl07jdm5v_test.go:43:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpl07jdm5v_test.go:43: expected '%!s(int=-6)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpl07jdm5v_test.go:43:\
    \ expected '%!s(int=-6)', got '%!s(int=99)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpl07jdm5v_test.go:43: expected '%!s(int=3)', got '%!s(int=49)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpl07jdm5v_test.go:43:\
    \ expected '%!s(int=-33)', got '%!s(int=96)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpl07jdm5v_test.go:43: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075561
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    // Write your code here\n    \n    \n    return 0\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpxgzsld2q_test.go:42: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpxgzsld2q_test.go:42:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpxgzsld2q_test.go:42: expected '%!s(int=-14)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__3 (0.00s)\n        tmpxgzsld2q_test.go:42:\
    \ expected '%!s(int=-9999999999999999)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpxgzsld2q_test.go:42: expected '%!s(int=-6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpxgzsld2q_test.go:42:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpxgzsld2q_test.go:42: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpxgzsld2q_test.go:42:\
    \ expected '%!s(int=-33)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__9\
    \ (0.00s)\n        tmpxgzsld2q_test.go:42: expected '%!s(int=-10)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__10 (0.00s)\n        tmpxgzsld2q_test.go:42:\
    \ expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpxgzsld2q_test.go:42: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075563
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    // Write your code here.\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nfunc\
    \ TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1iy1339v_test.go:267:6: expected ''('', found TestMinsubarraysum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075559
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    sum := 0\n    for _, v := range nums {\n        sum += v\n    }\n    return\
    \ sum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpl07jdm5v_test.go:43: expected '%!s(int=1)', got '%!s(int=16)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmpl07jdm5v_test.go:43:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpl07jdm5v_test.go:43: expected '%!s(int=-6)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpl07jdm5v_test.go:43:\
    \ expected '%!s(int=-6)', got '%!s(int=99)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpl07jdm5v_test.go:43: expected '%!s(int=3)', got '%!s(int=49)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpl07jdm5v_test.go:43:\
    \ expected '%!s(int=-33)', got '%!s(int=96)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpl07jdm5v_test.go:43: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075561
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    // Write your code here.\n    return 0\n}\n\nfunc TestMinsubarraysum(t *testing.T)\
    \ {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpy12fakoa_test.go:40: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpy12fakoa_test.go:40:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpy12fakoa_test.go:40: expected '%!s(int=-14)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__3 (0.00s)\n        tmpy12fakoa_test.go:40:\
    \ expected '%!s(int=-9999999999999999)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpy12fakoa_test.go:40: expected '%!s(int=-6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpy12fakoa_test.go:40:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpy12fakoa_test.go:40: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpy12fakoa_test.go:40:\
    \ expected '%!s(int=-33)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__9\
    \ (0.00s)\n        tmpy12fakoa_test.go:40: expected '%!s(int=-10)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__10 (0.00s)\n        tmpy12fakoa_test.go:40:\
    \ expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpy12fakoa_test.go:40: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075561
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    // Write your code here.\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nfunc\
    \ TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1iy1339v_test.go:267:6: expected ''('', found TestMinsubarraysum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075559
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    // Write your code here\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nfunc\
    \ TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpd5ocg9nm_test.go:267:6: expected ''('', found TestMinsubarraysum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075559
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    // Write your code here\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nfunc\
    \ TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpd5ocg9nm_test.go:267:6: expected ''('', found TestMinsubarraysum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075559
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    // Write your code here\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nfunc\
    \ TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpd5ocg9nm_test.go:267:6: expected ''('', found TestMinsubarraysum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075559
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    sum := 0\n    for _, v := range nums {\n        sum += v\n    }\n    return\
    \ sum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpl07jdm5v_test.go:43: expected '%!s(int=1)', got '%!s(int=16)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmpl07jdm5v_test.go:43:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpl07jdm5v_test.go:43: expected '%!s(int=-6)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpl07jdm5v_test.go:43:\
    \ expected '%!s(int=-6)', got '%!s(int=99)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpl07jdm5v_test.go:43: expected '%!s(int=3)', got '%!s(int=49)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpl07jdm5v_test.go:43:\
    \ expected '%!s(int=-33)', got '%!s(int=96)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpl07jdm5v_test.go:43: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075561
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    // Write your code here\n    \n    return 0\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=-14)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__3 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=-9999999999999999)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=-6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=-33)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__9\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=-10)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__10 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075561
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    // Write your code here\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nfunc\
    \ TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpd5ocg9nm_test.go:267:6: expected ''('', found TestMinsubarraysum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075559
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    // Write your code here\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nfunc\
    \ TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpd5ocg9nm_test.go:267:6: expected ''('', found TestMinsubarraysum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075559
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    // Write your code here.\n    \n    return 0\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpvv8qtlok_test.go:41: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpvv8qtlok_test.go:41:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpvv8qtlok_test.go:41: expected '%!s(int=-14)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__3 (0.00s)\n        tmpvv8qtlok_test.go:41:\
    \ expected '%!s(int=-9999999999999999)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpvv8qtlok_test.go:41: expected '%!s(int=-6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpvv8qtlok_test.go:41:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpvv8qtlok_test.go:41: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpvv8qtlok_test.go:41:\
    \ expected '%!s(int=-33)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__9\
    \ (0.00s)\n        tmpvv8qtlok_test.go:41: expected '%!s(int=-10)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__10 (0.00s)\n        tmpvv8qtlok_test.go:41:\
    \ expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpvv8qtlok_test.go:41: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075561
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    sum := 0\n    for _, v := range nums {\n        sum += v\n    }\n    return\
    \ sum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpl07jdm5v_test.go:43: expected '%!s(int=1)', got '%!s(int=16)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmpl07jdm5v_test.go:43:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpl07jdm5v_test.go:43: expected '%!s(int=-6)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpl07jdm5v_test.go:43:\
    \ expected '%!s(int=-6)', got '%!s(int=99)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpl07jdm5v_test.go:43: expected '%!s(int=3)', got '%!s(int=49)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpl07jdm5v_test.go:43:\
    \ expected '%!s(int=-33)', got '%!s(int=96)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpl07jdm5v_test.go:43: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075561
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\nfunc minSubArraySum(nums []int) int {\n\
    \    // Write your code here\n    \n    return 0\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=-14)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__3 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=-9999999999999999)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=-6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=-33)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__9\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=-10)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__10 (0.00s)\n        tmpwi23j6to_test.go:41:\
    \ expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpwi23j6to_test.go:41: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075561
