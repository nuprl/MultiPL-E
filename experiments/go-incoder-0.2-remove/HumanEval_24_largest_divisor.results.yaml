language: go_test.go
name: HumanEval_24_largest_divisor
results:
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    max\
    \ := n\n    for divisor <= n / 2 {\n        if n % divisor == 0 {\n          \
    \  max = divisor\n        }\n        divisor++\n    }\n    return max\n}\n\nfunc\
    \ TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual: candidate(7),\
    \ expected: 1 },\n     { actual: candidate(10), expected: 5 },\n     { actual:\
    \ candidate(100), expected: 50 },\n     { actual: candidate(49), expected: 7 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073432
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    max\
    \ := n\n    for divisor <= n / 2 {\n        if n%divisor == 0 {\n            max\
    \ = divisor\n        }\n        divisor++\n    }\n    return max\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073432
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    max\
    \ := n\n    for divisor < n {\n        if n%divisor == 0 {\n            max =\
    \ divisor\n        }\n        divisor++\n    }\n    return max\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073432
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    max\
    \ := n\n    for divisor <= n / 2 {\n        if n % divisor == 0 {\n          \
    \  max = divisor\n        }\n        divisor++\n    }\n    return max\n}\n\nfunc\
    \ TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual: candidate(7),\
    \ expected: 1 },\n     { actual: candidate(10), expected: 5 },\n     { actual:\
    \ candidate(100), expected: 50 },\n     { actual: candidate(49), expected: 7 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073432
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    divisor_count\
    \ := 0\n    for divisor_count < n {\n        divisor <<= 1\n        if divisor\
    \ > n {\n            divisor = n\n        }\n        if n%divisor == 0 {\n   \
    \         divisor_count++\n        }\n    }\n    return divisor\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpqlcxhdbc_test.go:41: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpqlcxhdbc_test.go:41:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpqlcxhdbc_test.go:41: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpqlcxhdbc_test.go:41:\
    \ expected '%!s(int=50)', got '%!s(int=100)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpqlcxhdbc_test.go:41: expected '%!s(int=7)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073432
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    divisor_count\
    \ := 0\n    for divisor_count < n {\n        divisor <<= 1\n        divisor_count++\n\
    \    }\n    return divisor\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpzmdgcfe2_test.go:36: expected '%!s(int=1)', got '%!s(int=8)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpzmdgcfe2_test.go:36:\
    \ expected '%!s(int=1)', got '%!s(int=128)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpzmdgcfe2_test.go:36: expected '%!s(int=5)', got '%!s(int=1024)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpzmdgcfe2_test.go:36:\
    \ expected '%!s(int=50)', got '%!s(int=0)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpzmdgcfe2_test.go:36: expected '%!s(int=7)', got '%!s(int=562949953421312)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073432
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    max\
    \ := n\n\n    for divisor <= n / 2 {\n        if n % divisor == 0 {\n        \
    \    max = divisor\n        }\n        divisor++\n    }\n\n    return max\n}\n\
    \nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.014s\n"
  timestamp: 1660073432
- exit_code: null
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    divisor_count\
    \ := 0\n    for divisor_count < n {\n        if n%divisor == 0 {\n           \
    \ divisor++\n            divisor_count++\n        }\n    }\n    return divisor\n\
    }\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073443
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    for\
    \ divisor < n && n%divisor == 0 {\n        divisor++\n    }\n    return divisor\n\
    }\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmp6otpqfag_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmp6otpqfag_test.go:34:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmp6otpqfag_test.go:34: expected '%!s(int=5)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmp6otpqfag_test.go:34:\
    \ expected '%!s(int=50)', got '%!s(int=3)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmp6otpqfag_test.go:34: expected '%!s(int=7)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073432
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    divisor_count\
    \ := 0\n    for divisor_count < n {\n        divisor *= 2\n        if divisor\
    \ > n {\n            divisor = n\n            break\n        }\n        divisor_count++\n\
    \    }\n    return divisor\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmp1vlyb6nq_test.go:40: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmp1vlyb6nq_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmp1vlyb6nq_test.go:40: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmp1vlyb6nq_test.go:40:\
    \ expected '%!s(int=50)', got '%!s(int=100)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmp1vlyb6nq_test.go:40: expected '%!s(int=7)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073432
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    divisor_count\
    \ := 1\n    for divisor_count < n {\n        divisor *= 2\n        divisor_count++\n\
    \    }\n    return divisor\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpgqf9on_5_test.go:36: expected '%!s(int=1)', got '%!s(int=4)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpgqf9on_5_test.go:36:\
    \ expected '%!s(int=1)', got '%!s(int=64)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpgqf9on_5_test.go:36: expected '%!s(int=5)', got '%!s(int=512)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpgqf9on_5_test.go:36:\
    \ expected '%!s(int=50)', got '%!s(int=0)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpgqf9on_5_test.go:36: expected '%!s(int=7)', got '%!s(int=281474976710656)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073432
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    max\
    \ := n\n\n    for divisor < n {\n        if n%divisor == 0 {\n            max\
    \ = divisor\n        }\n        divisor++\n    }\n\n    return max\n}\n\nfunc\
    \ TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual: candidate(7),\
    \ expected: 1 },\n     { actual: candidate(10), expected: 5 },\n     { actual:\
    \ candidate(100), expected: 50 },\n     { actual: candidate(49), expected: 7 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073432
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    divisor_count\
    \ := 1\n    for divisor_count < n {\n        divisor *= 2\n        divisor_count++\n\
    \    }\n    return divisor\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpgqf9on_5_test.go:36: expected '%!s(int=1)', got '%!s(int=4)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpgqf9on_5_test.go:36:\
    \ expected '%!s(int=1)', got '%!s(int=64)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpgqf9on_5_test.go:36: expected '%!s(int=5)', got '%!s(int=512)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpgqf9on_5_test.go:36:\
    \ expected '%!s(int=50)', got '%!s(int=0)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpgqf9on_5_test.go:36: expected '%!s(int=7)', got '%!s(int=281474976710656)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073432
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    max\
    \ := n\n    for divisor < n / 2 {\n        divisor *= 2\n        if divisor >\
    \ max {\n            max = divisor\n        }\n    }\n    return max\n}\n\nfunc\
    \ TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual: candidate(7),\
    \ expected: 1 },\n     { actual: candidate(10), expected: 5 },\n     { actual:\
    \ candidate(100), expected: 50 },\n     { actual: candidate(49), expected: 7 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpm3da4ide_test.go:38: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpm3da4ide_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpm3da4ide_test.go:38: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpm3da4ide_test.go:38:\
    \ expected '%!s(int=50)', got '%!s(int=100)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpm3da4ide_test.go:38: expected '%!s(int=7)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n"
  timestamp: 1660073432
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    divisor_count\
    \ := 0\n    for divisor_count < n {\n        divisor <<= 1\n        divisor_count++\n\
    \    }\n    return divisor\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpzmdgcfe2_test.go:36: expected '%!s(int=1)', got '%!s(int=8)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpzmdgcfe2_test.go:36:\
    \ expected '%!s(int=1)', got '%!s(int=128)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpzmdgcfe2_test.go:36: expected '%!s(int=5)', got '%!s(int=1024)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpzmdgcfe2_test.go:36:\
    \ expected '%!s(int=50)', got '%!s(int=0)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpzmdgcfe2_test.go:36: expected '%!s(int=7)', got '%!s(int=562949953421312)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073432
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    divisor_count\
    \ := 1\n    for divisor_count < n {\n        divisor *= 2\n        divisor_count++\n\
    \    }\n    return divisor\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpgqf9on_5_test.go:36: expected '%!s(int=1)', got '%!s(int=4)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpgqf9on_5_test.go:36:\
    \ expected '%!s(int=1)', got '%!s(int=64)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpgqf9on_5_test.go:36: expected '%!s(int=5)', got '%!s(int=512)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpgqf9on_5_test.go:36:\
    \ expected '%!s(int=50)', got '%!s(int=0)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpgqf9on_5_test.go:36: expected '%!s(int=7)', got '%!s(int=281474976710656)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073432
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    max\
    \ := n\n    for divisor < n {\n        if n%divisor == 0 {\n            max =\
    \ divisor\n        }\n        divisor++\n    }\n    return max\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073432
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    max\
    \ := n\n    for divisor < n / 2 {\n        divisor *= 2\n        if divisor >\
    \ max {\n            max = divisor\n        }\n    }\n    return max\n}\n\nfunc\
    \ TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual: candidate(7),\
    \ expected: 1 },\n     { actual: candidate(10), expected: 5 },\n     { actual:\
    \ candidate(100), expected: 50 },\n     { actual: candidate(49), expected: 7 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpm3da4ide_test.go:38: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpm3da4ide_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpm3da4ide_test.go:38: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpm3da4ide_test.go:38:\
    \ expected '%!s(int=50)', got '%!s(int=100)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpm3da4ide_test.go:38: expected '%!s(int=7)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n"
  timestamp: 1660073432
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    max\
    \ := n\n    for divisor < n {\n        if n%divisor == 0 {\n            max =\
    \ divisor\n        }\n        divisor++\n    }\n    return max\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073432
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    max\
    \ := n\n    for divisor < n / 2 {\n        divisor *= 2\n        if divisor >\
    \ max {\n            max = divisor\n        }\n    }\n    return max\n}\n\nfunc\
    \ TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual: candidate(7),\
    \ expected: 1 },\n     { actual: candidate(10), expected: 5 },\n     { actual:\
    \ candidate(100), expected: 50 },\n     { actual: candidate(49), expected: 7 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpm3da4ide_test.go:38: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpm3da4ide_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpm3da4ide_test.go:38: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpm3da4ide_test.go:38:\
    \ expected '%!s(int=50)', got '%!s(int=100)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpm3da4ide_test.go:38: expected '%!s(int=7)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n"
  timestamp: 1660073432
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    max\
    \ := n\n    for divisor <= n / 2 {\n        if n%divisor == 0 {\n            max\
    \ = divisor\n        }\n        divisor++\n    }\n    return max\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073432
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    max\
    \ := n\n    for divisor < n {\n        if n%divisor == 0 {\n            max =\
    \ divisor\n        }\n        divisor++\n    }\n    return max\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073432
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    max\
    \ := n\n    for divisor < n / 2 {\n        divisor *= 2\n        if divisor >\
    \ max {\n            max = divisor\n        }\n    }\n    return max\n}\n\nfunc\
    \ TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual: candidate(7),\
    \ expected: 1 },\n     { actual: candidate(10), expected: 5 },\n     { actual:\
    \ candidate(100), expected: 50 },\n     { actual: candidate(49), expected: 7 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpm3da4ide_test.go:38: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpm3da4ide_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpm3da4ide_test.go:38: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpm3da4ide_test.go:38:\
    \ expected '%!s(int=50)', got '%!s(int=100)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpm3da4ide_test.go:38: expected '%!s(int=7)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n"
  timestamp: 1660073432
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    max\
    \ := n\n    for divisor <= n / 2 {\n        if n % divisor == 0 {\n          \
    \  max = divisor\n        }\n        divisor++\n    }\n    return max\n}\n\nfunc\
    \ TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual: candidate(7),\
    \ expected: 1 },\n     { actual: candidate(10), expected: 5 },\n     { actual:\
    \ candidate(100), expected: 50 },\n     { actual: candidate(49), expected: 7 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073432
- exit_code: null
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    divisor_count\
    \ := 0\n    for divisor_count < n {\n        divisor += 1\n        if n%divisor\
    \ == 0 {\n            divisor_count++\n        }\n    }\n    return divisor\n\
    }\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073443
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    max\
    \ := n\n    for divisor < max && n % divisor == 0 {\n        divisor++\n    }\n\
    \    return divisor\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpvmf68d3e_test.go:35: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpvmf68d3e_test.go:35:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpvmf68d3e_test.go:35: expected '%!s(int=5)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpvmf68d3e_test.go:35:\
    \ expected '%!s(int=50)', got '%!s(int=3)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpvmf68d3e_test.go:35: expected '%!s(int=7)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n"
  timestamp: 1660073432
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    divisor_count\
    \ := 0\n    for divisor_count < n {\n        divisor <<= 1\n        divisor_count++\n\
    \    }\n    return divisor\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpzmdgcfe2_test.go:36: expected '%!s(int=1)', got '%!s(int=8)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpzmdgcfe2_test.go:36:\
    \ expected '%!s(int=1)', got '%!s(int=128)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpzmdgcfe2_test.go:36: expected '%!s(int=5)', got '%!s(int=1024)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpzmdgcfe2_test.go:36:\
    \ expected '%!s(int=50)', got '%!s(int=0)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpzmdgcfe2_test.go:36: expected '%!s(int=7)', got '%!s(int=562949953421312)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073432
- exit_code: null
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    divisor_count\
    \ := 0\n    for divisor_count < n {\n        divisor += 1\n        if n%divisor\
    \ == 0 {\n            divisor_count++\n        }\n    }\n    return divisor\n\
    }\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073443
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    max\
    \ := n\n    for divisor <= max / 2; divisor++ {\n        if n%divisor == 0 {\n\
    \            return divisor\n        }\n    }\n    return max\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp90zpgb0w_test.go:12:29: expected boolean or range expression, found simple
    statement (missing parentheses around composite literal?)

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073431
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    max\
    \ := n\n    for divisor < n {\n        if n%divisor == 0 {\n            max =\
    \ divisor\n        }\n        divisor++\n    }\n    return max\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073432
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    max\
    \ := n\n    for divisor <= n / 2 {\n        if n % divisor == 0 {\n          \
    \  max = divisor\n        }\n        divisor++\n    }\n    return max\n}\n\nfunc\
    \ TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual: candidate(7),\
    \ expected: 1 },\n     { actual: candidate(10), expected: 5 },\n     { actual:\
    \ candidate(100), expected: 50 },\n     { actual: candidate(49), expected: 7 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073432
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    max\
    \ := n\n    for divisor < n / 2 {\n        divisor *= 2\n        if divisor >\
    \ max {\n            max = divisor\n        }\n    }\n    return max\n}\n\nfunc\
    \ TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual: candidate(7),\
    \ expected: 1 },\n     { actual: candidate(10), expected: 5 },\n     { actual:\
    \ candidate(100), expected: 50 },\n     { actual: candidate(49), expected: 7 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpm3da4ide_test.go:38: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpm3da4ide_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpm3da4ide_test.go:38: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpm3da4ide_test.go:38:\
    \ expected '%!s(int=50)', got '%!s(int=100)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpm3da4ide_test.go:38: expected '%!s(int=7)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n"
  timestamp: 1660073432
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    divisor_count\
    \ := 0\n    for divisor_count < n {\n        divisor *= 2\n        if divisor\
    \ > n {\n            divisor = n\n        }\n        divisor_count++\n    }\n\
    \    return divisor\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmp7qa8tg1x_test.go:39: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmp7qa8tg1x_test.go:39:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmp7qa8tg1x_test.go:39: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmp7qa8tg1x_test.go:39:\
    \ expected '%!s(int=50)', got '%!s(int=100)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmp7qa8tg1x_test.go:39: expected '%!s(int=7)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.015s\nFAIL\n"
  timestamp: 1660073432
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    max\
    \ := n\n\n    for divisor < max {\n        if n%divisor == 0 {\n            max\
    \ = divisor\n        }\n        divisor++\n    }\n\n    return max\n}\n\nfunc\
    \ TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual: candidate(7),\
    \ expected: 1 },\n     { actual: candidate(10), expected: 5 },\n     { actual:\
    \ candidate(100), expected: 50 },\n     { actual: candidate(49), expected: 7 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpz8hc0tlq_test.go:40: expected '%!s(int=5)', got '%!s(int=1)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpz8hc0tlq_test.go:40:\
    \ expected '%!s(int=50)', got '%!s(int=1)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpz8hc0tlq_test.go:40: expected '%!s(int=7)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.009s\nFAIL\n"
  timestamp: 1660073432
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    max\
    \ := n\n    for divisor < n {\n        if n%divisor == 0 {\n            max =\
    \ divisor\n        }\n        divisor++\n    }\n    return max\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073432
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    max\
    \ := n\n    for divisor < n {\n        if n%divisor == 0 {\n            max =\
    \ divisor\n        }\n        divisor++\n    }\n    return max\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073432
- exit_code: null
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    divisor_count\
    \ := 0\n    for divisor_count < n {\n        if n%divisor == 0 {\n           \
    \ divisor++\n            divisor_count++\n        }\n    }\n    return divisor\n\
    }\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073443
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    max\
    \ := n\n    for divisor <= n / 2 {\n        if n % divisor == 0 {\n          \
    \  max = divisor\n        }\n        divisor++\n    }\n    return max\n}\n\nfunc\
    \ TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual: candidate(7),\
    \ expected: 1 },\n     { actual: candidate(10), expected: 5 },\n     { actual:\
    \ candidate(100), expected: 50 },\n     { actual: candidate(49), expected: 7 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073432
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    divisor_count\
    \ := 0\n    for divisor_count < n {\n        divisor *= 2\n        if divisor\
    \ > n {\n            divisor = n\n            break\n        }\n        divisor_count++\n\
    \    }\n    return divisor\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmp1vlyb6nq_test.go:40: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmp1vlyb6nq_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmp1vlyb6nq_test.go:40: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmp1vlyb6nq_test.go:40:\
    \ expected '%!s(int=50)', got '%!s(int=100)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmp1vlyb6nq_test.go:40: expected '%!s(int=7)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073432
- exit_code: 2
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    divisor_count\
    \ := 1\n    divisor_count := 0\n    for divisor_count < n {\n        divisor *=\
    \ 2\n        divisor_count++\n    }\n    return divisor\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv193uk3s_test.go:12:19: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073432
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    max\
    \ := n\n\n    for divisor < n {\n        if n%divisor == 0 {\n            max\
    \ = divisor\n        }\n        divisor++\n    }\n\n    return max\n}\n\nfunc\
    \ TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual: candidate(7),\
    \ expected: 1 },\n     { actual: candidate(10), expected: 5 },\n     { actual:\
    \ candidate(100), expected: 50 },\n     { actual: candidate(49), expected: 7 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073432
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    max\
    \ := n\n    for divisor < n {\n        if n%divisor == 0 {\n            max =\
    \ divisor\n        }\n        divisor++\n    }\n    return max\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073432
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    divisor_count\
    \ := 0\n    for divisor_count < n {\n        divisor *= 2\n        if divisor\
    \ > n {\n            break\n        }\n        divisor_count++\n    }\n    return\
    \ divisor\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpls1zb6fp_test.go:39: expected '%!s(int=1)', got '%!s(int=4)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpls1zb6fp_test.go:39:\
    \ expected '%!s(int=1)', got '%!s(int=8)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpls1zb6fp_test.go:39: expected '%!s(int=5)', got '%!s(int=16)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpls1zb6fp_test.go:39:\
    \ expected '%!s(int=50)', got '%!s(int=128)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpls1zb6fp_test.go:39: expected '%!s(int=7)', got '%!s(int=64)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073432
- exit_code: null
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    max\
    \ := n\n\n    for divisor < max {\n        if n%divisor == 0 {\n            divisor++\n\
    \        } else {\n            divisor = 1\n        }\n    }\n\n    return divisor\n\
    }\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073443
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    for\
    \ divisor <= n / 2 {\n        if n % divisor == 0 {\n            return divisor\n\
    \        }\n        divisor++\n    }\n    return n\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmp67__9124_test.go:37: expected '%!s(int=5)', got '%!s(int=1)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmp67__9124_test.go:37:\
    \ expected '%!s(int=50)', got '%!s(int=1)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmp67__9124_test.go:37: expected '%!s(int=7)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073432
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    max\
    \ := n\n    for divisor < n / 2 {\n        divisor *= 2\n        if divisor >\
    \ max {\n            max = divisor\n        }\n    }\n    return max\n}\n\nfunc\
    \ TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual: candidate(7),\
    \ expected: 1 },\n     { actual: candidate(10), expected: 5 },\n     { actual:\
    \ candidate(100), expected: 50 },\n     { actual: candidate(49), expected: 7 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpm3da4ide_test.go:38: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpm3da4ide_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpm3da4ide_test.go:38: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpm3da4ide_test.go:38:\
    \ expected '%!s(int=50)', got '%!s(int=100)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpm3da4ide_test.go:38: expected '%!s(int=7)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n"
  timestamp: 1660073432
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    divisor_count\
    \ := 1\n    for divisor_count < n {\n        divisor *= 2\n        if divisor\
    \ > n {\n            break\n        }\n        divisor_count++\n    }\n    return\
    \ divisor\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpyxwx6sbx_test.go:39: expected '%!s(int=1)', got '%!s(int=4)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpyxwx6sbx_test.go:39:\
    \ expected '%!s(int=1)', got '%!s(int=8)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpyxwx6sbx_test.go:39: expected '%!s(int=5)', got '%!s(int=16)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpyxwx6sbx_test.go:39:\
    \ expected '%!s(int=50)', got '%!s(int=128)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpyxwx6sbx_test.go:39: expected '%!s(int=7)', got '%!s(int=64)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073432
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    max\
    \ := n\n    for divisor <= n / 2 {\n        if n % divisor == 0 {\n          \
    \  max = divisor\n        }\n        divisor++\n    }\n    return max\n}\n\nfunc\
    \ TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual: candidate(7),\
    \ expected: 1 },\n     { actual: candidate(10), expected: 5 },\n     { actual:\
    \ candidate(100), expected: 50 },\n     { actual: candidate(49), expected: 7 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073432
- exit_code: null
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    divisor_count\
    \ := 0\n    for divisor_count < n {\n        divisor += 2\n        if n % divisor\
    \ == 0 {\n            divisor_count++\n        }\n    }\n    return divisor\n\
    }\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073443
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    max\
    \ := n\n    for divisor < n {\n        if n%divisor == 0 {\n            max =\
    \ divisor\n        }\n        divisor++\n    }\n    return max\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073432
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    divisor_count\
    \ := 0\n    for divisor_count < n {\n        divisor <<= 1\n        divisor_count\
    \ += 1\n    }\n    return divisor\n}\n\nfunc TestLargest_Divisor(t *testing.T)\
    \ {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual:\
    \ candidate(10), expected: 5 },\n     { actual: candidate(100), expected: 50 },\n\
    \     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpr29f4bux_test.go:36: expected '%!s(int=1)', got '%!s(int=8)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpr29f4bux_test.go:36:\
    \ expected '%!s(int=1)', got '%!s(int=128)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpr29f4bux_test.go:36: expected '%!s(int=5)', got '%!s(int=1024)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpr29f4bux_test.go:36:\
    \ expected '%!s(int=50)', got '%!s(int=0)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpr29f4bux_test.go:36: expected '%!s(int=7)', got '%!s(int=562949953421312)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073433
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    divisor_count\
    \ := 1\n    for divisor_count < n {\n        divisor *= 2\n        divisor_count++\n\
    \    }\n    return divisor\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpgqf9on_5_test.go:36: expected '%!s(int=1)', got '%!s(int=4)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpgqf9on_5_test.go:36:\
    \ expected '%!s(int=1)', got '%!s(int=64)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpgqf9on_5_test.go:36: expected '%!s(int=5)', got '%!s(int=512)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpgqf9on_5_test.go:36:\
    \ expected '%!s(int=50)', got '%!s(int=0)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpgqf9on_5_test.go:36: expected '%!s(int=7)', got '%!s(int=281474976710656)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073432
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    max\
    \ := n\n    for divisor < n / 2 {\n        if n%divisor == 0 {\n            max\
    \ = divisor\n        }\n        divisor++\n    }\n    return max\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpw79tcn86_test.go:38: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__2 (0.00s)\n        tmpw79tcn86_test.go:38:\
    \ expected '%!s(int=5)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Divisor/test_num__3\
    \ (0.00s)\n        tmpw79tcn86_test.go:38: expected '%!s(int=50)', got '%!s(int=25)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073433
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    max\
    \ := n\n    for divisor <= n / 2 {\n        if n % divisor == 0 {\n          \
    \  max = divisor\n        }\n        divisor++\n    }\n    return max\n}\n\nfunc\
    \ TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual: candidate(7),\
    \ expected: 1 },\n     { actual: candidate(10), expected: 5 },\n     { actual:\
    \ candidate(100), expected: 50 },\n     { actual: candidate(49), expected: 7 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073432
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    max\
    \ := n\n\n    for divisor <= n / 2 {\n        if n % divisor == 0 {\n        \
    \    max = divisor\n        }\n        divisor++\n    }\n\n    return max\n}\n\
    \nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.014s\n"
  timestamp: 1660073432
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    max\
    \ := n\n    for divisor <= n / 2 {\n        if n % divisor == 0 {\n          \
    \  max = divisor\n        }\n        divisor++\n    }\n    return max\n}\n\nfunc\
    \ TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual: candidate(7),\
    \ expected: 1 },\n     { actual: candidate(10), expected: 5 },\n     { actual:\
    \ candidate(100), expected: 50 },\n     { actual: candidate(49), expected: 7 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073432
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    for\
    \ divisor < n / 2; divisor++ {\n        if n%divisor == 0 {\n            return\
    \ divisor\n        }\n    }\n    return n\n}\n\nfunc TestLargest_Divisor(t *testing.T)\
    \ {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual:\
    \ candidate(10), expected: 5 },\n     { actual: candidate(100), expected: 50 },\n\
    \     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpitbqo3vx_test.go:11:26: expected boolean or range expression, found simple
    statement (missing parentheses around composite literal?)

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073433
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    divisor_count\
    \ := 1\n    for divisor_count < n {\n        divisor *= 2\n        divisor_count++\n\
    \    }\n    return divisor\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpgqf9on_5_test.go:36: expected '%!s(int=1)', got '%!s(int=4)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpgqf9on_5_test.go:36:\
    \ expected '%!s(int=1)', got '%!s(int=64)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpgqf9on_5_test.go:36: expected '%!s(int=5)', got '%!s(int=512)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpgqf9on_5_test.go:36:\
    \ expected '%!s(int=50)', got '%!s(int=0)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpgqf9on_5_test.go:36: expected '%!s(int=7)', got '%!s(int=281474976710656)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073432
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    divisor_count\
    \ := 0\n    for divisor_count < n {\n        divisor *= 2\n        if divisor\
    \ > n {\n            divisor = n\n            break\n        }\n        divisor_count++\n\
    \    }\n    return divisor\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmp1vlyb6nq_test.go:40: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmp1vlyb6nq_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmp1vlyb6nq_test.go:40: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmp1vlyb6nq_test.go:40:\
    \ expected '%!s(int=50)', got '%!s(int=100)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmp1vlyb6nq_test.go:40: expected '%!s(int=7)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073432
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    for\
    \ divisor <= n / 2 {\n        if n%divisor == 0 {\n            return divisor\n\
    \        }\n        divisor++\n    }\n    return n\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmp734pgkkv_test.go:37: expected '%!s(int=5)', got '%!s(int=1)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmp734pgkkv_test.go:37:\
    \ expected '%!s(int=50)', got '%!s(int=1)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmp734pgkkv_test.go:37: expected '%!s(int=7)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073434
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    max\
    \ := n\n    for divisor <= max {\n        if n%divisor == 0 {\n            return\
    \ divisor\n        }\n        divisor++\n    }\n    return max\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmp5v3yi6q5_test.go:38: expected '%!s(int=5)', got '%!s(int=1)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmp5v3yi6q5_test.go:38:\
    \ expected '%!s(int=50)', got '%!s(int=1)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmp5v3yi6q5_test.go:38: expected '%!s(int=7)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    max\
    \ := n\n    for divisor < n {\n        if n%divisor == 0 {\n            max =\
    \ divisor\n        }\n        divisor++\n    }\n    return max\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073432
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    max\
    \ := n\n    for divisor < n / 2 {\n        divisor *= 2\n        if divisor >\
    \ max {\n            max = divisor\n        }\n    }\n    return max\n}\n\nfunc\
    \ TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual: candidate(7),\
    \ expected: 1 },\n     { actual: candidate(10), expected: 5 },\n     { actual:\
    \ candidate(100), expected: 50 },\n     { actual: candidate(49), expected: 7 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpm3da4ide_test.go:38: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpm3da4ide_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpm3da4ide_test.go:38: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpm3da4ide_test.go:38:\
    \ expected '%!s(int=50)', got '%!s(int=100)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpm3da4ide_test.go:38: expected '%!s(int=7)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n"
  timestamp: 1660073432
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    divisor_count\
    \ := 0\n    for divisor_count < n {\n        divisor *= 2\n        if divisor\
    \ > n {\n            break\n        }\n        divisor_count++\n    }\n    return\
    \ divisor\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpls1zb6fp_test.go:39: expected '%!s(int=1)', got '%!s(int=4)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpls1zb6fp_test.go:39:\
    \ expected '%!s(int=1)', got '%!s(int=8)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpls1zb6fp_test.go:39: expected '%!s(int=5)', got '%!s(int=16)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpls1zb6fp_test.go:39:\
    \ expected '%!s(int=50)', got '%!s(int=128)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpls1zb6fp_test.go:39: expected '%!s(int=7)', got '%!s(int=64)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073432
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    for\
    \ divisor <= n / 2 {\n        if n%divisor == 0 {\n            return divisor\n\
    \        }\n        divisor++\n    }\n    return n\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmp734pgkkv_test.go:37: expected '%!s(int=5)', got '%!s(int=1)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmp734pgkkv_test.go:37:\
    \ expected '%!s(int=50)', got '%!s(int=1)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmp734pgkkv_test.go:37: expected '%!s(int=7)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073434
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    divisor_count\
    \ := 0\n    for divisor_count < n {\n        divisor <<= 1\n        divisor_count++\n\
    \    }\n    return divisor\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpzmdgcfe2_test.go:36: expected '%!s(int=1)', got '%!s(int=8)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpzmdgcfe2_test.go:36:\
    \ expected '%!s(int=1)', got '%!s(int=128)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpzmdgcfe2_test.go:36: expected '%!s(int=5)', got '%!s(int=1024)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpzmdgcfe2_test.go:36:\
    \ expected '%!s(int=50)', got '%!s(int=0)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpzmdgcfe2_test.go:36: expected '%!s(int=7)', got '%!s(int=562949953421312)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073432
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    max\
    \ := n\n    for divisor < n {\n        if n%divisor == 0 {\n            max =\
    \ divisor\n        }\n        divisor++\n    }\n    return max\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073432
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    max\
    \ := n\n    for divisor < n / 2 {\n        divisor *= 2\n        if divisor >\
    \ max {\n            max = divisor\n        }\n    }\n    return max\n}\n\nfunc\
    \ TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual: candidate(7),\
    \ expected: 1 },\n     { actual: candidate(10), expected: 5 },\n     { actual:\
    \ candidate(100), expected: 50 },\n     { actual: candidate(49), expected: 7 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpm3da4ide_test.go:38: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpm3da4ide_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpm3da4ide_test.go:38: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpm3da4ide_test.go:38:\
    \ expected '%!s(int=50)', got '%!s(int=100)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpm3da4ide_test.go:38: expected '%!s(int=7)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n"
  timestamp: 1660073432
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    max\
    \ := n\n    for divisor <= max && n % divisor == 0 {\n        divisor++\n    }\n\
    \    return divisor\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpdmo3ig3__test.go:35: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpdmo3ig3__test.go:35:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpdmo3ig3__test.go:35: expected '%!s(int=5)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpdmo3ig3__test.go:35:\
    \ expected '%!s(int=50)', got '%!s(int=3)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpdmo3ig3__test.go:35: expected '%!s(int=7)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    max\
    \ := n\n    for divisor < n {\n        if n%divisor == 0 {\n            max =\
    \ divisor\n        }\n        divisor++\n    }\n    return max\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073432
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    max\
    \ := n\n\n    for divisor < max {\n        if n%divisor == 0 {\n            max\
    \ = divisor\n        }\n        divisor++\n    }\n\n    return max\n}\n\nfunc\
    \ TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual: candidate(7),\
    \ expected: 1 },\n     { actual: candidate(10), expected: 5 },\n     { actual:\
    \ candidate(100), expected: 50 },\n     { actual: candidate(49), expected: 7 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpz8hc0tlq_test.go:40: expected '%!s(int=5)', got '%!s(int=1)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpz8hc0tlq_test.go:40:\
    \ expected '%!s(int=50)', got '%!s(int=1)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpz8hc0tlq_test.go:40: expected '%!s(int=7)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.009s\nFAIL\n"
  timestamp: 1660073432
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    max\
    \ := n\n\n    for divisor < max && n % divisor == 0 {\n        divisor++\n   \
    \ }\n\n    return divisor\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpz4enfzlu_test.go:37: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpz4enfzlu_test.go:37:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpz4enfzlu_test.go:37: expected '%!s(int=5)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpz4enfzlu_test.go:37:\
    \ expected '%!s(int=50)', got '%!s(int=3)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpz4enfzlu_test.go:37: expected '%!s(int=7)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073434
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    divisor_count\
    \ := 0\n    for divisor_count < n {\n        divisor *= 2\n        if divisor\
    \ > n {\n            break\n        }\n        divisor_count++\n    }\n    return\
    \ divisor\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpls1zb6fp_test.go:39: expected '%!s(int=1)', got '%!s(int=4)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpls1zb6fp_test.go:39:\
    \ expected '%!s(int=1)', got '%!s(int=8)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpls1zb6fp_test.go:39: expected '%!s(int=5)', got '%!s(int=16)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpls1zb6fp_test.go:39:\
    \ expected '%!s(int=50)', got '%!s(int=128)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpls1zb6fp_test.go:39: expected '%!s(int=7)', got '%!s(int=64)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073432
- exit_code: null
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    divisor_count\
    \ := 0\n    for divisor_count < n {\n        divisor += 2\n        if n%divisor\
    \ == 0 {\n            divisor_count++\n        }\n    }\n    return divisor\n\
    }\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073447
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    max\
    \ := n\n    for divisor < n {\n        if n%divisor == 0 {\n            max =\
    \ divisor\n        }\n        divisor++\n    }\n    return max\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073432
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    max\
    \ := n\n    for divisor <= max / 2; divisor++ {\n        if n % divisor == 0 {\n\
    \            return divisor\n        }\n    }\n    return max\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvs8xlxvj_test.go:12:29: expected boolean or range expression, found simple
    statement (missing parentheses around composite literal?)

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073433
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    max\
    \ := n\n    for divisor < n / 2 {\n        if n % divisor == 0 {\n           \
    \ max = divisor\n        }\n        divisor++\n    }\n    return max\n}\n\nfunc\
    \ TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual: candidate(7),\
    \ expected: 1 },\n     { actual: candidate(10), expected: 5 },\n     { actual:\
    \ candidate(100), expected: 50 },\n     { actual: candidate(49), expected: 7 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpramoqwgd_test.go:38: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__2 (0.00s)\n        tmpramoqwgd_test.go:38:\
    \ expected '%!s(int=5)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Divisor/test_num__3\
    \ (0.00s)\n        tmpramoqwgd_test.go:38: expected '%!s(int=50)', got '%!s(int=25)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073434
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    divisor_count\
    \ := 0\n    for divisor_count < n {\n        divisor *= 2\n        if divisor\
    \ > n {\n            break\n        }\n        divisor_count++\n    }\n    return\
    \ divisor\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpls1zb6fp_test.go:39: expected '%!s(int=1)', got '%!s(int=4)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpls1zb6fp_test.go:39:\
    \ expected '%!s(int=1)', got '%!s(int=8)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpls1zb6fp_test.go:39: expected '%!s(int=5)', got '%!s(int=16)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpls1zb6fp_test.go:39:\
    \ expected '%!s(int=50)', got '%!s(int=128)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpls1zb6fp_test.go:39: expected '%!s(int=7)', got '%!s(int=64)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073432
- exit_code: null
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    divisor_count\
    \ := 0\n    for divisor_count < n {\n        divisor += 1\n        if n%divisor\
    \ == 0 {\n            divisor_count++\n        }\n    }\n    return divisor\n\
    }\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073443
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    max\
    \ := n\n    for divisor < n / 2 {\n        divisor *= 2\n        if divisor >\
    \ max {\n            max = divisor\n        }\n    }\n    return max\n}\n\nfunc\
    \ TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual: candidate(7),\
    \ expected: 1 },\n     { actual: candidate(10), expected: 5 },\n     { actual:\
    \ candidate(100), expected: 50 },\n     { actual: candidate(49), expected: 7 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpm3da4ide_test.go:38: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpm3da4ide_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpm3da4ide_test.go:38: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpm3da4ide_test.go:38:\
    \ expected '%!s(int=50)', got '%!s(int=100)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpm3da4ide_test.go:38: expected '%!s(int=7)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n"
  timestamp: 1660073432
- exit_code: null
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    divisor_count\
    \ := 0\n    for divisor_count < n {\n        if n%divisor == 0 {\n           \
    \ divisor++\n            divisor_count++\n        }\n    }\n    return divisor\n\
    }\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073443
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    max\
    \ := n\n\n    for divisor < n {\n        if n%divisor == 0 {\n            max\
    \ = divisor\n        }\n        divisor++\n    }\n    return max\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073434
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    for\
    \ divisor < n / 2; divisor++ {\n        if n%divisor == 0 {\n            return\
    \ divisor\n        }\n    }\n    return n\n}\n\nfunc TestLargest_Divisor(t *testing.T)\
    \ {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual:\
    \ candidate(10), expected: 5 },\n     { actual: candidate(100), expected: 50 },\n\
    \     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpitbqo3vx_test.go:11:26: expected boolean or range expression, found simple
    statement (missing parentheses around composite literal?)

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073433
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    for\
    \ divisor <= n / 2; divisor++ {\n        if n % divisor == 0 {\n            return\
    \ divisor\n        }\n    }\n    return n\n}\n\nfunc TestLargest_Divisor(t *testing.T)\
    \ {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual:\
    \ candidate(10), expected: 5 },\n     { actual: candidate(100), expected: 50 },\n\
    \     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpu748rd3l_test.go:11:27: expected boolean or range expression, found simple
    statement (missing parentheses around composite literal?)

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073433
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    max\
    \ := n\n    for divisor < n / 2 {\n        divisor *= 2\n        if divisor >\
    \ max {\n            max = divisor\n        }\n    }\n    return max\n}\n\nfunc\
    \ TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual: candidate(7),\
    \ expected: 1 },\n     { actual: candidate(10), expected: 5 },\n     { actual:\
    \ candidate(100), expected: 50 },\n     { actual: candidate(49), expected: 7 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpm3da4ide_test.go:38: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpm3da4ide_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpm3da4ide_test.go:38: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpm3da4ide_test.go:38:\
    \ expected '%!s(int=50)', got '%!s(int=100)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpm3da4ide_test.go:38: expected '%!s(int=7)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n"
  timestamp: 1660073432
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    max\
    \ := n\n    for divisor < n / 2 {\n        divisor *= 2\n        if divisor >\
    \ max {\n            max = divisor\n        }\n    }\n    return max\n}\n\nfunc\
    \ TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual: candidate(7),\
    \ expected: 1 },\n     { actual: candidate(10), expected: 5 },\n     { actual:\
    \ candidate(100), expected: 50 },\n     { actual: candidate(49), expected: 7 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpm3da4ide_test.go:38: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpm3da4ide_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpm3da4ide_test.go:38: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpm3da4ide_test.go:38:\
    \ expected '%!s(int=50)', got '%!s(int=100)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpm3da4ide_test.go:38: expected '%!s(int=7)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n"
  timestamp: 1660073432
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    max\
    \ := n\n    for divisor <= n / 2 {\n        if n % divisor == 0 {\n          \
    \  max = divisor\n        }\n        divisor++\n    }\n    return max\n}\n\nfunc\
    \ TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual: candidate(7),\
    \ expected: 1 },\n     { actual: candidate(10), expected: 5 },\n     { actual:\
    \ candidate(100), expected: 50 },\n     { actual: candidate(49), expected: 7 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073432
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    for\
    \ divisor < n / 2; divisor++ {\n        if n%divisor == 0 {\n            return\
    \ divisor\n        }\n    }\n    return n\n}\n\nfunc TestLargest_Divisor(t *testing.T)\
    \ {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual:\
    \ candidate(10), expected: 5 },\n     { actual: candidate(100), expected: 50 },\n\
    \     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpitbqo3vx_test.go:11:26: expected boolean or range expression, found simple
    statement (missing parentheses around composite literal?)

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073433
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    max\
    \ := n\n    for divisor < n / 2 {\n        divisor *= 2\n        if divisor >\
    \ max {\n            max = divisor\n        }\n    }\n    return max\n}\n\nfunc\
    \ TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual: candidate(7),\
    \ expected: 1 },\n     { actual: candidate(10), expected: 5 },\n     { actual:\
    \ candidate(100), expected: 50 },\n     { actual: candidate(49), expected: 7 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpm3da4ide_test.go:38: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpm3da4ide_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpm3da4ide_test.go:38: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpm3da4ide_test.go:38:\
    \ expected '%!s(int=50)', got '%!s(int=100)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpm3da4ide_test.go:38: expected '%!s(int=7)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n"
  timestamp: 1660073432
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    max\
    \ := n\n    for divisor < n {\n        if n%divisor == 0 {\n            max =\
    \ divisor\n        }\n        divisor++\n    }\n    return max\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073432
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    divisor_count\
    \ := 0\n    for divisor_count < n {\n        divisor *= 2\n        if divisor\
    \ > n {\n            break\n        }\n        divisor_count++\n    }\n    return\
    \ divisor\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpls1zb6fp_test.go:39: expected '%!s(int=1)', got '%!s(int=4)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpls1zb6fp_test.go:39:\
    \ expected '%!s(int=1)', got '%!s(int=8)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpls1zb6fp_test.go:39: expected '%!s(int=5)', got '%!s(int=16)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpls1zb6fp_test.go:39:\
    \ expected '%!s(int=50)', got '%!s(int=128)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpls1zb6fp_test.go:39: expected '%!s(int=7)', got '%!s(int=64)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073432
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    divisor_count\
    \ := 0\n    for divisor_count < n {\n        divisor *= 2\n        if divisor\
    \ > n {\n            break\n        }\n        divisor_count++\n    }\n    return\
    \ divisor\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpls1zb6fp_test.go:39: expected '%!s(int=1)', got '%!s(int=4)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpls1zb6fp_test.go:39:\
    \ expected '%!s(int=1)', got '%!s(int=8)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpls1zb6fp_test.go:39: expected '%!s(int=5)', got '%!s(int=16)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpls1zb6fp_test.go:39:\
    \ expected '%!s(int=50)', got '%!s(int=128)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpls1zb6fp_test.go:39: expected '%!s(int=7)', got '%!s(int=64)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073432
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    max\
    \ := n\n    for divisor <= max && n % divisor == 0 {\n        divisor++\n    }\n\
    \    return divisor\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpdmo3ig3__test.go:35: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpdmo3ig3__test.go:35:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpdmo3ig3__test.go:35: expected '%!s(int=5)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpdmo3ig3__test.go:35:\
    \ expected '%!s(int=50)', got '%!s(int=3)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpdmo3ig3__test.go:35: expected '%!s(int=7)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073434
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    divisor_count\
    \ := 0\n    for divisor_count < n {\n        divisor *= 2\n        if divisor\
    \ > n {\n            break\n        }\n        divisor_count++\n    }\n    return\
    \ divisor\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpls1zb6fp_test.go:39: expected '%!s(int=1)', got '%!s(int=4)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpls1zb6fp_test.go:39:\
    \ expected '%!s(int=1)', got '%!s(int=8)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpls1zb6fp_test.go:39: expected '%!s(int=5)', got '%!s(int=16)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpls1zb6fp_test.go:39:\
    \ expected '%!s(int=50)', got '%!s(int=128)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpls1zb6fp_test.go:39: expected '%!s(int=7)', got '%!s(int=64)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073432
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    max\
    \ := n\n    for divisor < n {\n        if n%divisor == 0 {\n            max =\
    \ divisor\n        }\n        divisor++\n    }\n    return max\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073432
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    divisor_count\
    \ := 0\n    for divisor_count < n {\n        divisor *= 2\n        if divisor\
    \ > n {\n            divisor = n\n        }\n        divisor_count++\n    }\n\
    \    return divisor\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmp7qa8tg1x_test.go:39: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmp7qa8tg1x_test.go:39:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmp7qa8tg1x_test.go:39: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmp7qa8tg1x_test.go:39:\
    \ expected '%!s(int=50)', got '%!s(int=100)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmp7qa8tg1x_test.go:39: expected '%!s(int=7)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.015s\nFAIL\n"
  timestamp: 1660073432
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    for\
    \ divisor <= n / 2; divisor++ {\n        if n%divisor == 0 {\n            return\
    \ divisor\n        }\n    }\n    return n\n}\n\nfunc TestLargest_Divisor(t *testing.T)\
    \ {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual:\
    \ candidate(10), expected: 5 },\n     { actual: candidate(100), expected: 50 },\n\
    \     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp10mo17mj_test.go:11:27: expected boolean or range expression, found simple
    statement (missing parentheses around composite literal?)

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073433
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    max\
    \ := n\n    for divisor <= n / 2 {\n        if n%divisor == 0 {\n            max\
    \ = divisor\n        }\n        divisor++\n    }\n    return max\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073432
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    max\
    \ := n\n    for divisor <= n / 2 {\n        if n % divisor == 0 {\n          \
    \  max = divisor\n        }\n        divisor++\n    }\n    return max\n}\n\nfunc\
    \ TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual: candidate(7),\
    \ expected: 1 },\n     { actual: candidate(10), expected: 5 },\n     { actual:\
    \ candidate(100), expected: 50 },\n     { actual: candidate(49), expected: 7 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073432
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    max\
    \ := n\n    for divisor < n / 2 {\n        divisor *= 2\n        if divisor >\
    \ max {\n            max = divisor\n        }\n    }\n    return max\n}\n\nfunc\
    \ TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual: candidate(7),\
    \ expected: 1 },\n     { actual: candidate(10), expected: 5 },\n     { actual:\
    \ candidate(100), expected: 50 },\n     { actual: candidate(49), expected: 7 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpm3da4ide_test.go:38: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpm3da4ide_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpm3da4ide_test.go:38: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpm3da4ide_test.go:38:\
    \ expected '%!s(int=50)', got '%!s(int=100)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpm3da4ide_test.go:38: expected '%!s(int=7)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n"
  timestamp: 1660073432
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    max\
    \ := n\n    for divisor <= max / 2; divisor++ {\n        if n % divisor == 0 {\n\
    \            max = divisor\n        }\n    }\n    return max\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvx8jm9f5_test.go:12:29: expected boolean or range expression, found simple
    statement (missing parentheses around composite literal?)

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073433
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    max\
    \ := n\n\n    for divisor <= n / 2 {\n        if n % divisor == 0 {\n        \
    \    max = divisor\n        }\n        divisor++\n    }\n\n    return max\n}\n\
    \nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.014s\n"
  timestamp: 1660073432
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    divisor_count\
    \ := 0\n    for divisor_count < n {\n        divisor <<= 1\n        divisor_count++\n\
    \    }\n    return divisor\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpzmdgcfe2_test.go:36: expected '%!s(int=1)', got '%!s(int=8)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpzmdgcfe2_test.go:36:\
    \ expected '%!s(int=1)', got '%!s(int=128)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpzmdgcfe2_test.go:36: expected '%!s(int=5)', got '%!s(int=1024)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpzmdgcfe2_test.go:36:\
    \ expected '%!s(int=50)', got '%!s(int=0)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpzmdgcfe2_test.go:36: expected '%!s(int=7)', got '%!s(int=562949953421312)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073432
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    for\
    \ divisor <= n / 2; divisor++ {\n        if n % divisor == 0 {\n            return\
    \ divisor\n        }\n    }\n    return n\n}\n\nfunc TestLargest_Divisor(t *testing.T)\
    \ {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual:\
    \ candidate(10), expected: 5 },\n     { actual: candidate(100), expected: 50 },\n\
    \     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpu748rd3l_test.go:11:27: expected boolean or range expression, found simple
    statement (missing parentheses around composite literal?)

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073433
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    for\
    \ divisor < n {\n        if n%divisor == 0 {\n            return divisor\n   \
    \     }\n        divisor++\n    }\n    return n\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpjn_4waef_test.go:37: expected '%!s(int=5)', got '%!s(int=1)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpjn_4waef_test.go:37:\
    \ expected '%!s(int=50)', got '%!s(int=1)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpjn_4waef_test.go:37: expected '%!s(int=7)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073434
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    for\
    \ divisor < n / 2; divisor++ {\n        if n%divisor == 0 {\n            return\
    \ divisor\n        }\n    }\n    return n\n}\n\nfunc TestLargest_Divisor(t *testing.T)\
    \ {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual:\
    \ candidate(10), expected: 5 },\n     { actual: candidate(100), expected: 50 },\n\
    \     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpitbqo3vx_test.go:11:26: expected boolean or range expression, found simple
    statement (missing parentheses around composite literal?)

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073433
- exit_code: null
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    divisor_count\
    \ := 0\n    for divisor_count < n {\n        divisor += 1\n        if n%divisor\
    \ == 0 {\n            divisor_count += 1\n        }\n    }\n    return divisor\n\
    }\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073447
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    max\
    \ := n\n    for divisor <= n / 2 {\n        if n % divisor == 0 {\n          \
    \  max = divisor\n        }\n        divisor++\n    }\n    return max\n}\n\nfunc\
    \ TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual: candidate(7),\
    \ expected: 1 },\n     { actual: candidate(10), expected: 5 },\n     { actual:\
    \ candidate(100), expected: 50 },\n     { actual: candidate(49), expected: 7 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073432
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    max\
    \ := n\n    for divisor <= n / 2 {\n        if n%divisor == 0 {\n            max\
    \ = divisor\n        }\n        divisor++\n    }\n    return max\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073432
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    max\
    \ := n\n    for divisor < n / 2 {\n        divisor *= 2\n        if divisor >\
    \ max {\n            max = divisor\n        }\n    }\n    return max\n}\n\nfunc\
    \ TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual: candidate(7),\
    \ expected: 1 },\n     { actual: candidate(10), expected: 5 },\n     { actual:\
    \ candidate(100), expected: 50 },\n     { actual: candidate(49), expected: 7 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpm3da4ide_test.go:38: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpm3da4ide_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpm3da4ide_test.go:38: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpm3da4ide_test.go:38:\
    \ expected '%!s(int=50)', got '%!s(int=100)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpm3da4ide_test.go:38: expected '%!s(int=7)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n"
  timestamp: 1660073432
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    divisor_count\
    \ := 0\n    for divisor_count < n {\n        divisor *= 2\n        divisor_count++\n\
    \    }\n    return divisor\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmp4c4k9w2p_test.go:36: expected '%!s(int=1)', got '%!s(int=8)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmp4c4k9w2p_test.go:36:\
    \ expected '%!s(int=1)', got '%!s(int=128)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmp4c4k9w2p_test.go:36: expected '%!s(int=5)', got '%!s(int=1024)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmp4c4k9w2p_test.go:36:\
    \ expected '%!s(int=50)', got '%!s(int=0)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmp4c4k9w2p_test.go:36: expected '%!s(int=7)', got '%!s(int=562949953421312)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    max\
    \ := n\n    for divisor <= n / 2 {\n        if n % divisor == 0 {\n          \
    \  max = divisor\n        }\n        divisor++\n    }\n    return max\n}\n\nfunc\
    \ TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual: candidate(7),\
    \ expected: 1 },\n     { actual: candidate(10), expected: 5 },\n     { actual:\
    \ candidate(100), expected: 50 },\n     { actual: candidate(49), expected: 7 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073432
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    for\
    \ divisor < n / 2; divisor++ {\n        if n%divisor == 0 {\n            return\
    \ divisor\n        }\n    }\n    return n\n}\n\nfunc TestLargest_Divisor(t *testing.T)\
    \ {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual:\
    \ candidate(10), expected: 5 },\n     { actual: candidate(100), expected: 50 },\n\
    \     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpitbqo3vx_test.go:11:26: expected boolean or range expression, found simple
    statement (missing parentheses around composite literal?)

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073433
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    max\
    \ := n\n    for divisor < n / 2 {\n        divisor *= 2\n        if divisor >\
    \ max {\n            max = divisor\n        }\n    }\n    return max\n}\n\nfunc\
    \ TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual: candidate(7),\
    \ expected: 1 },\n     { actual: candidate(10), expected: 5 },\n     { actual:\
    \ candidate(100), expected: 50 },\n     { actual: candidate(49), expected: 7 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpm3da4ide_test.go:38: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpm3da4ide_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpm3da4ide_test.go:38: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpm3da4ide_test.go:38:\
    \ expected '%!s(int=50)', got '%!s(int=100)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpm3da4ide_test.go:38: expected '%!s(int=7)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n"
  timestamp: 1660073432
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    divisor_count\
    \ := 0\n    for divisor_count < n {\n        divisor *= 2\n        if divisor\
    \ > n {\n            break\n        }\n        divisor_count++\n    }\n    return\
    \ divisor\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpls1zb6fp_test.go:39: expected '%!s(int=1)', got '%!s(int=4)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpls1zb6fp_test.go:39:\
    \ expected '%!s(int=1)', got '%!s(int=8)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpls1zb6fp_test.go:39: expected '%!s(int=5)', got '%!s(int=16)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpls1zb6fp_test.go:39:\
    \ expected '%!s(int=50)', got '%!s(int=128)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpls1zb6fp_test.go:39: expected '%!s(int=7)', got '%!s(int=64)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073432
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    max\
    \ := n\n    for divisor < max && n % divisor == 0 {\n        divisor++\n    }\n\
    \    return divisor\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpvmf68d3e_test.go:35: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpvmf68d3e_test.go:35:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpvmf68d3e_test.go:35: expected '%!s(int=5)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpvmf68d3e_test.go:35:\
    \ expected '%!s(int=50)', got '%!s(int=3)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpvmf68d3e_test.go:35: expected '%!s(int=7)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n"
  timestamp: 1660073432
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    max\
    \ := n\n    for divisor < n / 2 {\n        divisor *= 2\n        if divisor >\
    \ max {\n            max = divisor\n        }\n    }\n    return max\n}\n\nfunc\
    \ TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual: candidate(7),\
    \ expected: 1 },\n     { actual: candidate(10), expected: 5 },\n     { actual:\
    \ candidate(100), expected: 50 },\n     { actual: candidate(49), expected: 7 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpm3da4ide_test.go:38: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpm3da4ide_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpm3da4ide_test.go:38: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpm3da4ide_test.go:38:\
    \ expected '%!s(int=50)', got '%!s(int=100)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpm3da4ide_test.go:38: expected '%!s(int=7)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n"
  timestamp: 1660073432
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    max\
    \ := n\n\n    for divisor < n {\n        if n%divisor == 0 {\n            max\
    \ = divisor\n        }\n        divisor++\n    }\n\n    return max\n}\n\nfunc\
    \ TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual: candidate(7),\
    \ expected: 1 },\n     { actual: candidate(10), expected: 5 },\n     { actual:\
    \ candidate(100), expected: 50 },\n     { actual: candidate(49), expected: 7 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073432
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    max\
    \ := n\n    for divisor < n / 2 {\n        if n % divisor == 0 {\n           \
    \ max = divisor\n        }\n        divisor++\n    }\n    return max\n}\n\nfunc\
    \ TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual: candidate(7),\
    \ expected: 1 },\n     { actual: candidate(10), expected: 5 },\n     { actual:\
    \ candidate(100), expected: 50 },\n     { actual: candidate(49), expected: 7 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpramoqwgd_test.go:38: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__2 (0.00s)\n        tmpramoqwgd_test.go:38:\
    \ expected '%!s(int=5)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Divisor/test_num__3\
    \ (0.00s)\n        tmpramoqwgd_test.go:38: expected '%!s(int=50)', got '%!s(int=25)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073434
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    divisor_count\
    \ := 0\n    for divisor_count < n {\n        divisor *= 2\n        divisor_count++\n\
    \    }\n    return divisor\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmp4c4k9w2p_test.go:36: expected '%!s(int=1)', got '%!s(int=8)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmp4c4k9w2p_test.go:36:\
    \ expected '%!s(int=1)', got '%!s(int=128)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmp4c4k9w2p_test.go:36: expected '%!s(int=5)', got '%!s(int=1024)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmp4c4k9w2p_test.go:36:\
    \ expected '%!s(int=50)', got '%!s(int=0)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmp4c4k9w2p_test.go:36: expected '%!s(int=7)', got '%!s(int=562949953421312)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073434
- exit_code: null
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    divisor_count\
    \ := 0\n    for divisor_count < n {\n        divisor += 1\n        if n%divisor\
    \ == 0 {\n            divisor_count += 1\n        }\n    }\n    return divisor\n\
    }\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073447
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    max\
    \ := n\n    for divisor <= n / 2 {\n        if n%divisor == 0 {\n            max\
    \ = divisor\n        }\n        divisor++\n    }\n    return max\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073432
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    divisor_count\
    \ := 0\n    for divisor_count < n {\n        divisor *= 2\n        if divisor\
    \ > n {\n            break\n        }\n        divisor_count++\n    }\n    return\
    \ divisor\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpls1zb6fp_test.go:39: expected '%!s(int=1)', got '%!s(int=4)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpls1zb6fp_test.go:39:\
    \ expected '%!s(int=1)', got '%!s(int=8)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpls1zb6fp_test.go:39: expected '%!s(int=5)', got '%!s(int=16)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpls1zb6fp_test.go:39:\
    \ expected '%!s(int=50)', got '%!s(int=128)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpls1zb6fp_test.go:39: expected '%!s(int=7)', got '%!s(int=64)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073432
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    max\
    \ := n\n    for divisor < n {\n        if n%divisor == 0 {\n            max =\
    \ divisor\n        }\n        divisor++\n    }\n    return max\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073432
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    for\
    \ divisor < n && n%divisor == 0 {\n        divisor++\n    }\n    return divisor\n\
    }\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmp6otpqfag_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmp6otpqfag_test.go:34:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmp6otpqfag_test.go:34: expected '%!s(int=5)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmp6otpqfag_test.go:34:\
    \ expected '%!s(int=50)', got '%!s(int=3)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmp6otpqfag_test.go:34: expected '%!s(int=7)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073432
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    max\
    \ := n\n    for divisor <= n / 2 {\n        if n % divisor == 0 {\n          \
    \  max = divisor\n        }\n        divisor++\n    }\n    return max\n}\n\nfunc\
    \ TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual: candidate(7),\
    \ expected: 1 },\n     { actual: candidate(10), expected: 5 },\n     { actual:\
    \ candidate(100), expected: 50 },\n     { actual: candidate(49), expected: 7 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073432
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    max\
    \ := n\n    for divisor < n / 2 {\n        divisor *= 2\n        if divisor >\
    \ max {\n            max = divisor\n        }\n    }\n    return max\n}\n\nfunc\
    \ TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual: candidate(7),\
    \ expected: 1 },\n     { actual: candidate(10), expected: 5 },\n     { actual:\
    \ candidate(100), expected: 50 },\n     { actual: candidate(49), expected: 7 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpm3da4ide_test.go:38: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpm3da4ide_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpm3da4ide_test.go:38: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpm3da4ide_test.go:38:\
    \ expected '%!s(int=50)', got '%!s(int=100)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpm3da4ide_test.go:38: expected '%!s(int=7)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n"
  timestamp: 1660073432
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    max\
    \ := n\n    for divisor <= n / 2 {\n        if n % divisor == 0 {\n          \
    \  max = divisor\n        }\n        divisor++\n    }\n    return max\n}\n\nfunc\
    \ TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual: candidate(7),\
    \ expected: 1 },\n     { actual: candidate(10), expected: 5 },\n     { actual:\
    \ candidate(100), expected: 50 },\n     { actual: candidate(49), expected: 7 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073432
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    max\
    \ := n\n    for divisor < n / 2 {\n        divisor *= 2\n        if divisor >\
    \ max {\n            max = divisor\n        }\n    }\n    return max\n}\n\nfunc\
    \ TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual: candidate(7),\
    \ expected: 1 },\n     { actual: candidate(10), expected: 5 },\n     { actual:\
    \ candidate(100), expected: 50 },\n     { actual: candidate(49), expected: 7 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpm3da4ide_test.go:38: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpm3da4ide_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpm3da4ide_test.go:38: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpm3da4ide_test.go:38:\
    \ expected '%!s(int=50)', got '%!s(int=100)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpm3da4ide_test.go:38: expected '%!s(int=7)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n"
  timestamp: 1660073432
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    max\
    \ := n\n    for divisor < max && n % divisor == 0 {\n        divisor++\n    }\n\
    \    return divisor\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpvmf68d3e_test.go:35: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpvmf68d3e_test.go:35:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpvmf68d3e_test.go:35: expected '%!s(int=5)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpvmf68d3e_test.go:35:\
    \ expected '%!s(int=50)', got '%!s(int=3)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpvmf68d3e_test.go:35: expected '%!s(int=7)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n"
  timestamp: 1660073432
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    max\
    \ := n\n    for divisor <= n / 2 {\n        if n % divisor == 0 {\n          \
    \  max = divisor\n        }\n        divisor++\n    }\n    return max\n}\n\nfunc\
    \ TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual: candidate(7),\
    \ expected: 1 },\n     { actual: candidate(10), expected: 5 },\n     { actual:\
    \ candidate(100), expected: 50 },\n     { actual: candidate(49), expected: 7 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073432
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    max\
    \ := n\n    for divisor <= n / 2 {\n        if n % divisor == 0 {\n          \
    \  max = divisor\n        }\n        divisor++\n    }\n    return max\n}\n\nfunc\
    \ TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual: candidate(7),\
    \ expected: 1 },\n     { actual: candidate(10), expected: 5 },\n     { actual:\
    \ candidate(100), expected: 50 },\n     { actual: candidate(49), expected: 7 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073432
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    max\
    \ := n\n    for divisor <= n / 2 {\n        if n % divisor == 0 {\n          \
    \  max = divisor\n        }\n        divisor++\n    }\n    return max\n}\n\nfunc\
    \ TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual: candidate(7),\
    \ expected: 1 },\n     { actual: candidate(10), expected: 5 },\n     { actual:\
    \ candidate(100), expected: 50 },\n     { actual: candidate(49), expected: 7 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073432
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    max\
    \ := n\n    for divisor < n {\n        if n%divisor == 0 {\n            max =\
    \ divisor\n        }\n        divisor++\n    }\n    return max\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073432
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    max\
    \ := n\n\n    for divisor < max && n % divisor == 0 {\n        divisor++\n   \
    \ }\n\n    return divisor\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpz4enfzlu_test.go:37: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpz4enfzlu_test.go:37:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpz4enfzlu_test.go:37: expected '%!s(int=5)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpz4enfzlu_test.go:37:\
    \ expected '%!s(int=50)', got '%!s(int=3)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpz4enfzlu_test.go:37: expected '%!s(int=7)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073434
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    max\
    \ := n\n\n    for divisor < max && n % divisor == 0 {\n        divisor++\n   \
    \ }\n\n    return divisor\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpz4enfzlu_test.go:37: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpz4enfzlu_test.go:37:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpz4enfzlu_test.go:37: expected '%!s(int=5)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpz4enfzlu_test.go:37:\
    \ expected '%!s(int=50)', got '%!s(int=3)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpz4enfzlu_test.go:37: expected '%!s(int=7)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073434
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    divisor_count\
    \ := 1\n    for divisor_count < n {\n        divisor <<= 1\n        divisor_count++\n\
    \    }\n    return divisor\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpkwfd3nne_test.go:36: expected '%!s(int=1)', got '%!s(int=4)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpkwfd3nne_test.go:36:\
    \ expected '%!s(int=1)', got '%!s(int=64)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpkwfd3nne_test.go:36: expected '%!s(int=5)', got '%!s(int=512)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpkwfd3nne_test.go:36:\
    \ expected '%!s(int=50)', got '%!s(int=0)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpkwfd3nne_test.go:36: expected '%!s(int=7)', got '%!s(int=281474976710656)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073434
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    for\
    \ divisor < n {\n        if n%divisor == 0 {\n            return divisor\n   \
    \     }\n        divisor++\n    }\n    return n\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpjn_4waef_test.go:37: expected '%!s(int=5)', got '%!s(int=1)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpjn_4waef_test.go:37:\
    \ expected '%!s(int=50)', got '%!s(int=1)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpjn_4waef_test.go:37: expected '%!s(int=7)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    max\
    \ := n\n    for divisor <= n / 2 {\n        if n % divisor == 0 {\n          \
    \  max = divisor\n        }\n        divisor++\n    }\n    return max\n}\n\nfunc\
    \ TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual: candidate(7),\
    \ expected: 1 },\n     { actual: candidate(10), expected: 5 },\n     { actual:\
    \ candidate(100), expected: 50 },\n     { actual: candidate(49), expected: 7 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073432
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    divisor_count\
    \ := 1\n    for divisor_count < n {\n        divisor *= 2\n        divisor_count++\n\
    \    }\n    return divisor\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpgqf9on_5_test.go:36: expected '%!s(int=1)', got '%!s(int=4)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpgqf9on_5_test.go:36:\
    \ expected '%!s(int=1)', got '%!s(int=64)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpgqf9on_5_test.go:36: expected '%!s(int=5)', got '%!s(int=512)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpgqf9on_5_test.go:36:\
    \ expected '%!s(int=50)', got '%!s(int=0)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpgqf9on_5_test.go:36: expected '%!s(int=7)', got '%!s(int=281474976710656)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073432
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    max\
    \ := n\n    for divisor < n / 2 {\n        divisor *= 2\n        if divisor >\
    \ max {\n            max = divisor\n        }\n    }\n    return max\n}\n\nfunc\
    \ TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual: candidate(7),\
    \ expected: 1 },\n     { actual: candidate(10), expected: 5 },\n     { actual:\
    \ candidate(100), expected: 50 },\n     { actual: candidate(49), expected: 7 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpm3da4ide_test.go:38: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpm3da4ide_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpm3da4ide_test.go:38: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpm3da4ide_test.go:38:\
    \ expected '%!s(int=50)', got '%!s(int=100)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpm3da4ide_test.go:38: expected '%!s(int=7)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n"
  timestamp: 1660073432
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    divisor_count\
    \ := 0\n    for divisor_count < n {\n        divisor *= 2\n        if divisor\
    \ > n {\n            break\n        }\n        divisor_count++\n    }\n    return\
    \ divisor\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpls1zb6fp_test.go:39: expected '%!s(int=1)', got '%!s(int=4)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpls1zb6fp_test.go:39:\
    \ expected '%!s(int=1)', got '%!s(int=8)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpls1zb6fp_test.go:39: expected '%!s(int=5)', got '%!s(int=16)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpls1zb6fp_test.go:39:\
    \ expected '%!s(int=50)', got '%!s(int=128)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpls1zb6fp_test.go:39: expected '%!s(int=7)', got '%!s(int=64)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073432
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    max\
    \ := n\n    for divisor < n / 2 {\n        divisor *= 2\n        if divisor >\
    \ max {\n            max = divisor\n        }\n    }\n    return max\n}\n\nfunc\
    \ TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual: candidate(7),\
    \ expected: 1 },\n     { actual: candidate(10), expected: 5 },\n     { actual:\
    \ candidate(100), expected: 50 },\n     { actual: candidate(49), expected: 7 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpm3da4ide_test.go:38: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpm3da4ide_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpm3da4ide_test.go:38: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpm3da4ide_test.go:38:\
    \ expected '%!s(int=50)', got '%!s(int=100)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpm3da4ide_test.go:38: expected '%!s(int=7)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n"
  timestamp: 1660073432
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    divisor_count\
    \ := 0\n    for divisor_count < n {\n        divisor <<= 1\n        if divisor\
    \ > n {\n            divisor = n\n        }\n        divisor_count++\n    }\n\
    \    return divisor\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmp85o_flz4_test.go:39: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmp85o_flz4_test.go:39:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmp85o_flz4_test.go:39: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmp85o_flz4_test.go:39:\
    \ expected '%!s(int=50)', got '%!s(int=100)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmp85o_flz4_test.go:39: expected '%!s(int=7)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073434
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    max\
    \ := n\n    for divisor < max && n % divisor == 0 {\n        divisor++\n    }\n\
    \    return divisor\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpvmf68d3e_test.go:35: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpvmf68d3e_test.go:35:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpvmf68d3e_test.go:35: expected '%!s(int=5)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpvmf68d3e_test.go:35:\
    \ expected '%!s(int=50)', got '%!s(int=3)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpvmf68d3e_test.go:35: expected '%!s(int=7)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n"
  timestamp: 1660073432
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    max\
    \ := n\n    for divisor <= n / 2 {\n        if n % divisor == 0 {\n          \
    \  max = divisor\n        }\n        divisor++\n    }\n    return max\n}\n\nfunc\
    \ TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual: candidate(7),\
    \ expected: 1 },\n     { actual: candidate(10), expected: 5 },\n     { actual:\
    \ candidate(100), expected: 50 },\n     { actual: candidate(49), expected: 7 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073432
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    max\
    \ := n\n    for divisor < n / 2 {\n        divisor *= 2\n        if divisor >\
    \ max {\n            max = divisor\n        }\n    }\n    return max\n}\n\nfunc\
    \ TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual: candidate(7),\
    \ expected: 1 },\n     { actual: candidate(10), expected: 5 },\n     { actual:\
    \ candidate(100), expected: 50 },\n     { actual: candidate(49), expected: 7 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpm3da4ide_test.go:38: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpm3da4ide_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpm3da4ide_test.go:38: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpm3da4ide_test.go:38:\
    \ expected '%!s(int=50)', got '%!s(int=100)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpm3da4ide_test.go:38: expected '%!s(int=7)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n"
  timestamp: 1660073432
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    for\
    \ divisor < n {\n        if n%divisor == 0 {\n            return divisor\n   \
    \     }\n        divisor++\n    }\n    return n\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpjn_4waef_test.go:37: expected '%!s(int=5)', got '%!s(int=1)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpjn_4waef_test.go:37:\
    \ expected '%!s(int=50)', got '%!s(int=1)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpjn_4waef_test.go:37: expected '%!s(int=7)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073434
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    divisor_count\
    \ := 1\n    for divisor_count < n {\n        divisor *= 2\n        divisor_count++\n\
    \    }\n    return divisor\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpgqf9on_5_test.go:36: expected '%!s(int=1)', got '%!s(int=4)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpgqf9on_5_test.go:36:\
    \ expected '%!s(int=1)', got '%!s(int=64)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpgqf9on_5_test.go:36: expected '%!s(int=5)', got '%!s(int=512)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpgqf9on_5_test.go:36:\
    \ expected '%!s(int=50)', got '%!s(int=0)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpgqf9on_5_test.go:36: expected '%!s(int=7)', got '%!s(int=281474976710656)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073432
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    max\
    \ := n\n    for divisor < n {\n        if n%divisor == 0 {\n            max =\
    \ divisor\n        }\n        divisor++\n    }\n    return max\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073432
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    max\
    \ := n\n\n    for divisor <= n / 2 {\n        if n % divisor == 0 {\n        \
    \    max = divisor\n        }\n        divisor++\n    }\n\n    return max\n}\n\
    \nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.014s\n"
  timestamp: 1660073432
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    max\
    \ := n\n    for divisor <= n / 2 {\n        if n % divisor == 0 {\n          \
    \  max = divisor\n        }\n        divisor++\n    }\n    return max\n}\n\nfunc\
    \ TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual: candidate(7),\
    \ expected: 1 },\n     { actual: candidate(10), expected: 5 },\n     { actual:\
    \ candidate(100), expected: 50 },\n     { actual: candidate(49), expected: 7 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073432
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    divisor_count\
    \ := 0\n    for divisor_count < n {\n        divisor <<= 1\n        divisor_count\
    \ += 1\n    }\n    return divisor\n}\n\nfunc TestLargest_Divisor(t *testing.T)\
    \ {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual:\
    \ candidate(10), expected: 5 },\n     { actual: candidate(100), expected: 50 },\n\
    \     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpr29f4bux_test.go:36: expected '%!s(int=1)', got '%!s(int=8)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpr29f4bux_test.go:36:\
    \ expected '%!s(int=1)', got '%!s(int=128)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpr29f4bux_test.go:36: expected '%!s(int=5)', got '%!s(int=1024)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpr29f4bux_test.go:36:\
    \ expected '%!s(int=50)', got '%!s(int=0)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpr29f4bux_test.go:36: expected '%!s(int=7)', got '%!s(int=562949953421312)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073433
- exit_code: null
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    divisor_count\
    \ := 0\n    for divisor_count < n {\n        if n%divisor == 0 {\n           \
    \ divisor++\n            divisor_count++\n        }\n    }\n    return divisor\n\
    }\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073443
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    for\
    \ divisor <= n / 2; divisor++ {\n        if n%divisor == 0 {\n            return\
    \ divisor\n        }\n    }\n    return n\n}\n\nfunc TestLargest_Divisor(t *testing.T)\
    \ {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual:\
    \ candidate(10), expected: 5 },\n     { actual: candidate(100), expected: 50 },\n\
    \     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp10mo17mj_test.go:11:27: expected boolean or range expression, found simple
    statement (missing parentheses around composite literal?)

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073433
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    max\
    \ := n\n    for divisor <= n / 2 {\n        if n % divisor == 0 {\n          \
    \  max = divisor\n        }\n        divisor++\n    }\n    return max\n}\n\nfunc\
    \ TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual: candidate(7),\
    \ expected: 1 },\n     { actual: candidate(10), expected: 5 },\n     { actual:\
    \ candidate(100), expected: 50 },\n     { actual: candidate(49), expected: 7 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073432
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    max\
    \ := n\n    for divisor < n {\n        if n%divisor == 0 {\n            max =\
    \ divisor\n        }\n        divisor++\n    }\n    return max\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073432
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    max\
    \ := n\n    for divisor <= n / 2 {\n        if n % divisor == 0 {\n          \
    \  max = divisor\n        }\n        divisor++\n    }\n    return max\n}\n\nfunc\
    \ TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual: candidate(7),\
    \ expected: 1 },\n     { actual: candidate(10), expected: 5 },\n     { actual:\
    \ candidate(100), expected: 50 },\n     { actual: candidate(49), expected: 7 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073432
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    max\
    \ := n\n    for divisor <= n / 2 {\n        if n % divisor == 0 {\n          \
    \  max = divisor\n        }\n        divisor++\n    }\n    return max\n}\n\nfunc\
    \ TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual: candidate(7),\
    \ expected: 1 },\n     { actual: candidate(10), expected: 5 },\n     { actual:\
    \ candidate(100), expected: 50 },\n     { actual: candidate(49), expected: 7 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073432
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    max\
    \ := n\n    for divisor <= n / 2 {\n        if n % divisor == 0 {\n          \
    \  max = divisor\n        }\n        divisor++\n    }\n    return max\n}\n\nfunc\
    \ TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual: candidate(7),\
    \ expected: 1 },\n     { actual: candidate(10), expected: 5 },\n     { actual:\
    \ candidate(100), expected: 50 },\n     { actual: candidate(49), expected: 7 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073432
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    max\
    \ := n\n    for divisor < n {\n        if n%divisor == 0 {\n            max =\
    \ divisor\n        }\n        divisor++\n    }\n    return max\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073432
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    divisor_count\
    \ := 0\n    for divisor_count < n {\n        divisor *= 2\n        if divisor\
    \ > n {\n            divisor = n\n            break\n        }\n        divisor_count++\n\
    \    }\n    return divisor\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmp1vlyb6nq_test.go:40: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmp1vlyb6nq_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmp1vlyb6nq_test.go:40: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmp1vlyb6nq_test.go:40:\
    \ expected '%!s(int=50)', got '%!s(int=100)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmp1vlyb6nq_test.go:40: expected '%!s(int=7)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073432
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    for\
    \ divisor < n {\n        if n%divisor == 0 {\n            return divisor\n   \
    \     }\n        divisor++\n    }\n    return n\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpjn_4waef_test.go:37: expected '%!s(int=5)', got '%!s(int=1)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpjn_4waef_test.go:37:\
    \ expected '%!s(int=50)', got '%!s(int=1)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpjn_4waef_test.go:37: expected '%!s(int=7)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073434
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    for\
    \ divisor <= n / 2; divisor++ {\n        if n % divisor == 0 {\n            return\
    \ divisor\n        }\n    }\n    return n\n}\n\nfunc TestLargest_Divisor(t *testing.T)\
    \ {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual:\
    \ candidate(10), expected: 5 },\n     { actual: candidate(100), expected: 50 },\n\
    \     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpu748rd3l_test.go:11:27: expected boolean or range expression, found simple
    statement (missing parentheses around composite literal?)

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073433
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    max\
    \ := n\n    for divisor <= n / 2 {\n        if n % divisor == 0 {\n          \
    \  max = divisor\n        }\n        divisor++\n    }\n    return max\n}\n\nfunc\
    \ TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual: candidate(7),\
    \ expected: 1 },\n     { actual: candidate(10), expected: 5 },\n     { actual:\
    \ candidate(100), expected: 50 },\n     { actual: candidate(49), expected: 7 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073432
- exit_code: null
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    divisor_count\
    \ := 0\n    for divisor_count < n {\n        divisor += 1\n        if n%divisor\
    \ == 0 {\n            divisor_count += 1\n        }\n    }\n    return divisor\n\
    }\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073447
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    divisor_count\
    \ := 0\n    for divisor_count < n {\n        divisor <<= 1\n        if divisor\
    \ > n {\n            divisor = n\n        }\n        if n%divisor == 0 {\n   \
    \         divisor_count++\n        }\n    }\n    return divisor\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpqlcxhdbc_test.go:41: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpqlcxhdbc_test.go:41:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpqlcxhdbc_test.go:41: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpqlcxhdbc_test.go:41:\
    \ expected '%!s(int=50)', got '%!s(int=100)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpqlcxhdbc_test.go:41: expected '%!s(int=7)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073432
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    max\
    \ := n\n    for divisor < n {\n        if n%divisor == 0 {\n            max =\
    \ divisor\n        }\n        divisor++\n    }\n    return max\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073432
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    divisor_count\
    \ := 0\n    for divisor_count < n {\n        divisor <<= 1\n        divisor_count++\n\
    \    }\n    return divisor\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpzmdgcfe2_test.go:36: expected '%!s(int=1)', got '%!s(int=8)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpzmdgcfe2_test.go:36:\
    \ expected '%!s(int=1)', got '%!s(int=128)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpzmdgcfe2_test.go:36: expected '%!s(int=5)', got '%!s(int=1024)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpzmdgcfe2_test.go:36:\
    \ expected '%!s(int=50)', got '%!s(int=0)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpzmdgcfe2_test.go:36: expected '%!s(int=7)', got '%!s(int=562949953421312)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073432
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    for\
    \ divisor < n / 2; divisor++ {\n        if n%divisor == 0 {\n            return\
    \ divisor\n        }\n    }\n    return n\n}\n\nfunc TestLargest_Divisor(t *testing.T)\
    \ {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual:\
    \ candidate(10), expected: 5 },\n     { actual: candidate(100), expected: 50 },\n\
    \     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpitbqo3vx_test.go:11:26: expected boolean or range expression, found simple
    statement (missing parentheses around composite literal?)

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073433
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    max\
    \ := n\n    for divisor < n / 2 {\n        divisor *= 2\n        if divisor >\
    \ max {\n            max = divisor\n        }\n    }\n    return max\n}\n\nfunc\
    \ TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual: candidate(7),\
    \ expected: 1 },\n     { actual: candidate(10), expected: 5 },\n     { actual:\
    \ candidate(100), expected: 50 },\n     { actual: candidate(49), expected: 7 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpm3da4ide_test.go:38: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpm3da4ide_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpm3da4ide_test.go:38: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpm3da4ide_test.go:38:\
    \ expected '%!s(int=50)', got '%!s(int=100)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpm3da4ide_test.go:38: expected '%!s(int=7)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n"
  timestamp: 1660073432
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    max\
    \ := n\n    for divisor < n / 2 {\n        divisor *= 2\n        if divisor >\
    \ max {\n            max = divisor\n        }\n    }\n    return max\n}\n\nfunc\
    \ TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual: candidate(7),\
    \ expected: 1 },\n     { actual: candidate(10), expected: 5 },\n     { actual:\
    \ candidate(100), expected: 50 },\n     { actual: candidate(49), expected: 7 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpm3da4ide_test.go:38: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpm3da4ide_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpm3da4ide_test.go:38: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpm3da4ide_test.go:38:\
    \ expected '%!s(int=50)', got '%!s(int=100)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpm3da4ide_test.go:38: expected '%!s(int=7)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n"
  timestamp: 1660073432
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    for\
    \ divisor < n {\n        if n%divisor == 0 {\n            return divisor\n   \
    \     }\n        divisor++\n    }\n    return n\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpjn_4waef_test.go:37: expected '%!s(int=5)', got '%!s(int=1)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpjn_4waef_test.go:37:\
    \ expected '%!s(int=50)', got '%!s(int=1)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpjn_4waef_test.go:37: expected '%!s(int=7)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073434
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    divisor_count\
    \ := 1\n    for divisor_count < n {\n        divisor *= 2\n        divisor_count++\n\
    \    }\n    return divisor\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpgqf9on_5_test.go:36: expected '%!s(int=1)', got '%!s(int=4)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpgqf9on_5_test.go:36:\
    \ expected '%!s(int=1)', got '%!s(int=64)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpgqf9on_5_test.go:36: expected '%!s(int=5)', got '%!s(int=512)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpgqf9on_5_test.go:36:\
    \ expected '%!s(int=50)', got '%!s(int=0)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpgqf9on_5_test.go:36: expected '%!s(int=7)', got '%!s(int=281474976710656)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073432
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    max\
    \ := n\n\n    for divisor <= max / 2 {\n        if n%divisor == 0 {\n        \
    \    max = divisor\n        }\n        divisor++\n    }\n\n    return max\n}\n\
    \nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpy13yobrl_test.go:40: expected '%!s(int=5)', got '%!s(int=1)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpy13yobrl_test.go:40:\
    \ expected '%!s(int=50)', got '%!s(int=1)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpy13yobrl_test.go:40: expected '%!s(int=7)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073434
- exit_code: null
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    divisor_count\
    \ := 0\n    for divisor_count < n {\n        divisor += 1\n        if n%divisor\
    \ == 0 {\n            divisor_count += 1\n        }\n    }\n    return divisor\n\
    }\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073447
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    max\
    \ := n\n    for divisor <= n / 2 {\n        if n%divisor == 0 {\n            max\
    \ = divisor\n        }\n        divisor++\n    }\n    return max\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073432
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    max\
    \ := n\n\n    for divisor <= max / 2 {\n        if n%divisor == 0 {\n        \
    \    return divisor\n        }\n        divisor++\n    }\n    return max\n}\n\n\
    func TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual: candidate(7),\
    \ expected: 1 },\n     { actual: candidate(10), expected: 5 },\n     { actual:\
    \ candidate(100), expected: 50 },\n     { actual: candidate(49), expected: 7 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpqfk3pwsf_test.go:39: expected '%!s(int=5)', got '%!s(int=1)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpqfk3pwsf_test.go:39:\
    \ expected '%!s(int=50)', got '%!s(int=1)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpqfk3pwsf_test.go:39: expected '%!s(int=7)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    max\
    \ := n\n    for divisor < n {\n        if n%divisor == 0 {\n            max =\
    \ divisor\n        }\n        divisor++\n    }\n    return max\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073432
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    max\
    \ := n\n\n    for divisor <= max {\n        if n%divisor == 0 {\n            return\
    \ divisor\n        }\n        divisor++\n    }\n\n    return max\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpq5b3uu9h_test.go:40: expected '%!s(int=5)', got '%!s(int=1)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpq5b3uu9h_test.go:40:\
    \ expected '%!s(int=50)', got '%!s(int=1)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpq5b3uu9h_test.go:40: expected '%!s(int=7)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073435
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    max\
    \ := n\n\n    for divisor < max && n % divisor == 0 {\n        divisor++\n   \
    \ }\n\n    return divisor\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpz4enfzlu_test.go:37: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpz4enfzlu_test.go:37:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpz4enfzlu_test.go:37: expected '%!s(int=5)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpz4enfzlu_test.go:37:\
    \ expected '%!s(int=50)', got '%!s(int=3)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpz4enfzlu_test.go:37: expected '%!s(int=7)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    max\
    \ := n\n    for divisor < n {\n        if n%divisor == 0 {\n            max =\
    \ divisor\n        }\n        divisor++\n    }\n    return max\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073432
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    max\
    \ := n\n    for divisor < n / 2 {\n        divisor *= 2\n        if divisor >\
    \ max {\n            max = divisor\n        }\n    }\n    return max\n}\n\nfunc\
    \ TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual: candidate(7),\
    \ expected: 1 },\n     { actual: candidate(10), expected: 5 },\n     { actual:\
    \ candidate(100), expected: 50 },\n     { actual: candidate(49), expected: 7 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpm3da4ide_test.go:38: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpm3da4ide_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpm3da4ide_test.go:38: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpm3da4ide_test.go:38:\
    \ expected '%!s(int=50)', got '%!s(int=100)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpm3da4ide_test.go:38: expected '%!s(int=7)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n"
  timestamp: 1660073432
- exit_code: null
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    divisor_count\
    \ := 0\n    for divisor_count < n {\n        divisor += 1\n        if n%divisor\
    \ == 0 {\n            divisor_count += 1\n        }\n    }\n    return divisor\n\
    }\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073447
- exit_code: null
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    divisor_count\
    \ := 0\n    for divisor_count < n {\n        divisor += 1\n        if n%divisor\
    \ == 0 {\n            divisor_count++\n        }\n    }\n    return divisor\n\
    }\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073443
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    max\
    \ := n\n\n    for divisor < max && n % divisor == 0 {\n        divisor++\n   \
    \ }\n\n    return divisor\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpz4enfzlu_test.go:37: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpz4enfzlu_test.go:37:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpz4enfzlu_test.go:37: expected '%!s(int=5)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpz4enfzlu_test.go:37:\
    \ expected '%!s(int=50)', got '%!s(int=3)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpz4enfzlu_test.go:37: expected '%!s(int=7)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073434
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    max\
    \ := n\n    for divisor < n {\n        if n%divisor == 0 {\n            max =\
    \ divisor\n        }\n        divisor++\n    }\n    return max\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073432
- exit_code: null
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    divisor_count\
    \ := 0\n    for divisor_count < n {\n        divisor += 1\n        if n%divisor\
    \ == 0 {\n            divisor_count++\n        }\n    }\n    return divisor\n\
    }\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073443
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    max\
    \ := n\n    for divisor <= n / 2 {\n        if n%divisor == 0 {\n            max\
    \ = divisor\n        }\n        divisor++\n    }\n    return max\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073432
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    divisor_count\
    \ := 1\n    for divisor_count < n {\n        divisor *= 2\n        divisor_count++\n\
    \    }\n    return divisor\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpgqf9on_5_test.go:36: expected '%!s(int=1)', got '%!s(int=4)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpgqf9on_5_test.go:36:\
    \ expected '%!s(int=1)', got '%!s(int=64)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpgqf9on_5_test.go:36: expected '%!s(int=5)', got '%!s(int=512)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpgqf9on_5_test.go:36:\
    \ expected '%!s(int=50)', got '%!s(int=0)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpgqf9on_5_test.go:36: expected '%!s(int=7)', got '%!s(int=281474976710656)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073432
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    max\
    \ := n\n    for divisor < n / 2 {\n        if n%divisor == 0 {\n            max\
    \ = divisor\n        }\n        divisor++\n    }\n    return max\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpw79tcn86_test.go:38: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__2 (0.00s)\n        tmpw79tcn86_test.go:38:\
    \ expected '%!s(int=5)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Divisor/test_num__3\
    \ (0.00s)\n        tmpw79tcn86_test.go:38: expected '%!s(int=50)', got '%!s(int=25)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073433
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    max\
    \ := n\n    for divisor < n {\n        if n%divisor == 0 {\n            max =\
    \ divisor\n        }\n        divisor++\n    }\n    return max\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073432
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    max\
    \ := n\n    for divisor < n {\n        if n%divisor == 0 {\n            max =\
    \ divisor\n        }\n        divisor++\n    }\n    return max\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073432
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    divisor_count\
    \ := 0\n    for divisor_count < n {\n        divisor <<= 1\n        divisor_count\
    \ += 1\n    }\n    return divisor\n}\n\nfunc TestLargest_Divisor(t *testing.T)\
    \ {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual:\
    \ candidate(10), expected: 5 },\n     { actual: candidate(100), expected: 50 },\n\
    \     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpr29f4bux_test.go:36: expected '%!s(int=1)', got '%!s(int=8)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpr29f4bux_test.go:36:\
    \ expected '%!s(int=1)', got '%!s(int=128)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpr29f4bux_test.go:36: expected '%!s(int=5)', got '%!s(int=1024)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpr29f4bux_test.go:36:\
    \ expected '%!s(int=50)', got '%!s(int=0)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpr29f4bux_test.go:36: expected '%!s(int=7)', got '%!s(int=562949953421312)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073433
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    max\
    \ := n\n\n    for divisor < n / 2 {\n        divisor *= 2\n        if divisor\
    \ > max {\n            max = divisor\n        }\n    }\n\n    return max\n}\n\n\
    func TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual: candidate(7),\
    \ expected: 1 },\n     { actual: candidate(10), expected: 5 },\n     { actual:\
    \ candidate(100), expected: 50 },\n     { actual: candidate(49), expected: 7 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpiwqsz53u_test.go:40: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpiwqsz53u_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpiwqsz53u_test.go:40: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpiwqsz53u_test.go:40:\
    \ expected '%!s(int=50)', got '%!s(int=100)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpiwqsz53u_test.go:40: expected '%!s(int=7)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073435
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    max\
    \ := n\n    for divisor <= max / 2; divisor++ {\n        if n % divisor == 0 {\n\
    \            return divisor\n        }\n    }\n    return max\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvs8xlxvj_test.go:12:29: expected boolean or range expression, found simple
    statement (missing parentheses around composite literal?)

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073433
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    max\
    \ := n\n    for divisor <= n / 2 {\n        if n%divisor == 0 {\n            max\
    \ = divisor\n        }\n        divisor++\n    }\n    return max\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073432
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    for\
    \ divisor < n / 2; divisor++ {\n        if n % divisor == 0 {\n            break\n\
    \        }\n    }\n    return divisor\n}\n\nfunc TestLargest_Divisor(t *testing.T)\
    \ {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual:\
    \ candidate(10), expected: 5 },\n     { actual: candidate(100), expected: 50 },\n\
    \     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpmg7gk30g_test.go:11:26: expected boolean or range expression, found simple
    statement (missing parentheses around composite literal?)

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073434
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    for\
    \ divisor <= n / 2; divisor++ {\n        if n%divisor == 0 {\n            return\
    \ divisor\n        }\n    }\n    return n\n}\n\nfunc TestLargest_Divisor(t *testing.T)\
    \ {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual:\
    \ candidate(10), expected: 5 },\n     { actual: candidate(100), expected: 50 },\n\
    \     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp10mo17mj_test.go:11:27: expected boolean or range expression, found simple
    statement (missing parentheses around composite literal?)

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073433
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n int) int {\n    divisor := 1\n    max\
    \ := n\n    for divisor < n / 2 {\n        divisor *= 2\n        if divisor >\
    \ max {\n            max = divisor\n        }\n    }\n    return max\n}\n\nfunc\
    \ TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual: candidate(7),\
    \ expected: 1 },\n     { actual: candidate(10), expected: 5 },\n     { actual:\
    \ candidate(100), expected: 50 },\n     { actual: candidate(49), expected: 7 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpm3da4ide_test.go:38: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpm3da4ide_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpm3da4ide_test.go:38: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpm3da4ide_test.go:38:\
    \ expected '%!s(int=50)', got '%!s(int=100)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpm3da4ide_test.go:38: expected '%!s(int=7)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n"
  timestamp: 1660073432
