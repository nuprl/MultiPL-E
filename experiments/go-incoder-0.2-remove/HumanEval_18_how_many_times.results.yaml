language: go_test.go
name: HumanEval_18_how_many_times
results:
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    start := 0\n    end := 0\n    for start < len(myString)\
    \ {\n        end = start\n        end += strings.Index(myString[start:], substring)\n\
    \        if end == -1 {\n            break\n        }\n        count += end -\
    \ start\n        start = end + len(substring)\n    }\n    return count\n}\n\n\
    func TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n     { actual:\
    \ candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\"\
    , \"cac\"), expected: 4 },\n     { actual: candidate(\"john doe\", \"john\"),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_dwg5nva_test.go:15:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074318
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    for _, letter := range myString {\n        if letter\
    \ == substring {\n            count++\n        }\n    }\n    return count\n}\n\
    \nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n     { actual:\
    \ candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\"\
    , \"cac\"), expected: 4 },\n     { actual: candidate(\"john doe\", \"john\"),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpukxy5l40_test.go:12:22: invalid operation: letter == substring (mismatched
    types rune and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074318
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    result := 0\n    start := 0\n    end := 0\n    found := false\n \
    \   for start < len(myString) {\n        end = start + len(substring)\n      \
    \  if end > len(myString) {\n            break\n        }\n        if myString[start:end]\
    \ == substring {\n            found = true\n            break\n        }\n   \
    \     start = end + 1\n    }\n    if found {\n        result = 1\n    }\n    return\
    \ result\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n\
    \     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual:\
    \ candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual: candidate(\"\
    john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\n    --- FAIL: TestHow_Many_Times/test_num__1\
    \ (0.00s)\n        tmpy4xunh8h_test.go:47: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestHow_Many_Times/test_num__2 (0.00s)\n        tmpy4xunh8h_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074318
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    start := 0\n    end := 0\n    for start < len(myString)\
    \ {\n        end = strings.Index(myString[start:], substring)\n        if end\
    \ != -1 {\n            count += end - start\n            start = end + len(substring)\n\
    \        } else {\n            start = len(myString)\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n\
    \     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual:\
    \ candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual: candidate(\"\
    john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuplxyom8_test.go:14:15: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074318
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    start := 0\n    end := 0\n    for start < len(myString)\
    \ {\n        end = start\n        end += strings.Index(myString[start:], substring)\n\
    \        if end > start {\n            count++\n        }\n        start = end\
    \ + len(substring)\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzpchfwk5_test.go:15:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074318
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    for _, s := range myString {\n        if s == substring\
    \ {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprnmnoosj_test.go:12:17: invalid operation: s == substring (mismatched
    types rune and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074318
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    start := 0\n    end := 0\n    for start < len(myString)\
    \ {\n        end = strings.Index(myString[start:], substring)\n        if end\
    \ != -1 {\n            count += end - start\n            start = end + len(substring)\n\
    \        } else {\n            start = len(myString)\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n\
    \     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual:\
    \ candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual: candidate(\"\
    john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuplxyom8_test.go:14:15: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074318
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    i := 0\n    j := 0\n    for ; i < len(myString);\
    \ i++ {\n        if myString[i] == substring {\n            count++\n        \
    \    j = i\n        }\n    }\n    for ; j < len(myString); j++ {\n        if myString[j]\
    \ == substring {\n            count++\n            i = j\n        }\n    }\n \
    \   return count\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate :=\
    \ how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\", \"x\"\
    ), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n\
    \     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual:\
    \ candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplnznwmj6_test.go:14:27: invalid operation: myString[i] == substring (mismatched
    types byte and string)

    /tmp/tmplnznwmj6_test.go:20:27: invalid operation: myString[j] == substring (mismatched
    types byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074318
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    start := 0\n    end := 0\n    for start < len(myString)\
    \ {\n        end = start\n        for end < len(myString) && myString[end] ==\
    \ substring[start] {\n            end++\n        }\n        if end == len(myString)\
    \ {\n            count++\n        }\n        start = end\n    }\n    return count\n\
    }\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n\
    \     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual:\
    \ candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual: candidate(\"\
    john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\npanic: runtime error: index out of\
    \ range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range\
    \ [1] with length 1\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.how_many_times(...)\n\t/tmp/tmpgpjbq9g1_test.go:15\n\
    command-line-arguments_test.TestHow_Many_Times(0x0?)\n\t/tmp/tmpgpjbq9g1_test.go:34\
    \ +0x3b7\ntesting.tRunner(0xc000103380, 0x527f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074318
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    result := 0\n    start := 0\n    end := 0\n    found := false\n \
    \   for start < len(myString) {\n        end = len(myString)\n        if end >\
    \ start {\n            found = myString[start:end] == substring\n            if\
    \ found {\n                result += end - start\n            }\n            start\
    \ = end\n        }\n    }\n    return result\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\n    --- FAIL: TestHow_Many_Times/test_num__1\
    \ (0.00s)\n        tmppclmfa79_test.go:43: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestHow_Many_Times/test_num__2 (0.00s)\n        tmppclmfa79_test.go:43:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestHow_Many_Times/test_num__3\
    \ (0.00s)\n        tmppclmfa79_test.go:43: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074318
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    for _, char := range myString {\n        if char\
    \ == substring {\n            count++\n        }\n    }\n    return count\n}\n\
    \nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n     { actual:\
    \ candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\"\
    , \"cac\"), expected: 4 },\n     { actual: candidate(\"john doe\", \"john\"),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprm1p4ezy_test.go:12:20: invalid operation: char == substring (mismatched
    types rune and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074318
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    start := 0\n    end := 0\n    for start < len(myString)\
    \ {\n        end = strings.Index(myString[start:], substring)\n        if end\
    \ != -1 {\n            count += end - start\n        }\n        start = end +\
    \ len(substring)\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp7pqefse_test.go:14:15: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074318
- exit_code: null
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    result := 0\n    start := 0\n    end := 0\n    for start < len(myString)\
    \ {\n        end = start\n        for end < len(myString) && myString[end] ==\
    \ substring[0] {\n            end++\n        }\n        if end > start {\n   \
    \         result += end - start\n        }\n        start = end\n    }\n    return\
    \ result\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n\
    \     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual:\
    \ candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual: candidate(\"\
    john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074329
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    result := 0\n    start := 0\n    end := 0\n    found := false\n \
    \   for start < len(myString) {\n        end = start\n        for end < len(myString)\
    \ && myString[end] == substring[start] {\n            end++\n        }\n     \
    \   if end == len(myString) {\n            found = true\n            break\n \
    \       }\n        if myString[start] == substring[end] {\n            found =\
    \ true\n        }\n        if found {\n            result += end - start\n   \
    \         start = end\n            found = false\n        }\n    }\n    if found\
    \ {\n        result += end - start\n    }\n    return result\n}\n\nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\npanic: runtime error: index out of\
    \ range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range\
    \ [1] with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.how_many_times({0x51db36?, 0x5d2fb0?}, {0x51d187?,\
    \ 0xc0000f8dd0?})\n\t/tmp/tmp50hrbnq__test.go:23 +0x9a\ncommand-line-arguments_test.TestHow_Many_Times(0x0?)\n\
    \t/tmp/tmp50hrbnq__test.go:46 +0x7b\ntesting.tRunner(0xc0001a0340, 0x527f60)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074318
- exit_code: null
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    start := 0\n    end := 0\n    for start < len(myString)\
    \ {\n        end = start\n        for end < len(myString) && myString[end] ==\
    \ substring[0] {\n            end++\n        }\n        if end > start {\n   \
    \         count += end - start\n        }\n        start = end\n    }\n    return\
    \ count\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n\
    \     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual:\
    \ candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual: candidate(\"\
    john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074329
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    result := 0\n    lastIndex := strings.Index(myString, substring)\n\
    \    if lastIndex == -1 {\n        return result\n    }\n    for i := lastIndex\
    \ + 1; i < len(myString); i++ {\n        if myString[i] == substring[0] {\n  \
    \          result += how_many_times(myString[i+1:], substring[1:])\n        }\
    \ else {\n            result += how_many_times(myString[i:], substring)\n    \
    \    }\n    }\n    return result\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n\
    \  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1nsj7a4l_test.go:11:18: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074318
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    start := 0\n    end := 0\n    for start < len(myString)\
    \ {\n        end = strings.Index(myString[start:], substring)\n        if end\
    \ != -1 {\n            count += end - start\n            start = end + len(substring)\n\
    \        } else {\n            start = len(myString)\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n\
    \     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual:\
    \ candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual: candidate(\"\
    john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuplxyom8_test.go:14:15: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074318
- exit_code: null
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    start := 0\n    end := 0\n    found := false\n  \
    \  for start < len(myString) {\n        end = len(myString)\n        found = false\n\
    \        for end > start {\n            if myString[end-1] == substring[0] {\n\
    \                end -= 1\n                found = true\n            } else {\n\
    \                end -= 1\n            }\n        }\n        if found {\n    \
    \        count++\n            start = end\n        }\n    }\n    return count\n\
    }\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n\
    \     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual:\
    \ candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual: candidate(\"\
    john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074329
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    start := 0\n    end := 0\n    found := false\n  \
    \  for start < len(myString) {\n        end = len(myString)\n        if end >\
    \ start {\n            found = strings.Contains(myString[start:end], substring)\n\
    \            if found {\n                count++\n            }\n        }\n \
    \       start = end + 1\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxu23r5dg_test.go:17:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074318
- exit_code: null
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    start := 0\n    end := 0\n    for start < len(myString)\
    \ {\n        end = start\n        for end < len(myString) && myString[end] ==\
    \ substring[0] {\n            end++\n        }\n        if end > start {\n   \
    \         count += end - start\n        }\n        start = end\n    }\n    return\
    \ count\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n\
    \     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual:\
    \ candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual: candidate(\"\
    john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074329
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    for _, char := range myString {\n        if char\
    \ == substring {\n            count++\n        }\n    }\n    return count\n}\n\
    \nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n     { actual:\
    \ candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\"\
    , \"cac\"), expected: 4 },\n     { actual: candidate(\"john doe\", \"john\"),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprm1p4ezy_test.go:12:20: invalid operation: char == substring (mismatched
    types rune and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074318
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    result := 0\n    start := 0\n    end := 0\n    found := false\n \
    \   for start < len(myString) {\n        end = len(myString)\n        if end >\
    \ start {\n            end = start\n        }\n        if myString[start] == substring\
    \ {\n            found = true\n        }\n        if found {\n            result\
    \ += end - start\n            start = end + 1\n        }\n    }\n    return result\n\
    }\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n\
    \     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual:\
    \ candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual: candidate(\"\
    john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2o60f9js_test.go:19:31: invalid operation: myString[start] == substring
    (mismatched types byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074318
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    result := 0\n    start := 0\n    end := 0\n    for start < len(myString)\
    \ {\n        end = strings.Index(myString[start:], substring)\n        if end\
    \ != -1 {\n            result += end - start\n            start = end + len(substring)\n\
    \        } else {\n            result += len(substring)\n        }\n    }\n  \
    \  return result\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate :=\
    \ how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\", \"x\"\
    ), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n\
    \     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual:\
    \ candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsc9tn125_test.go:14:15: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074318
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    result := 0\n    start := 0\n    end := 0\n    found := false\n \
    \   for start < len(myString) {\n        end = len(myString)\n        for end\
    \ > start {\n            if myString[start] == substring[0] {\n              \
    \  if myString[end-1] == substring[1] {\n                    found = true\n  \
    \                  break\n                }\n            }\n            end--\n\
    \        }\n        if found {\n            result += 1\n            found = false\n\
    \        }\n        start = end\n    }\n    return result\n}\n\nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\npanic: runtime error: index out of\
    \ range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range\
    \ [1] with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.how_many_times(...)\n\t/tmp/tmpxw84uu5o_test.go:18\n\
    command-line-arguments_test.TestHow_Many_Times(0x0?)\n\t/tmp/tmpxw84uu5o_test.go:42\
    \ +0x3c5\ntesting.tRunner(0xc0001a01a0, 0x527f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074318
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    start := 0\n    end := 0\n    found := false\n  \
    \  for start < len(myString) {\n        end = len(myString)\n        if end >\
    \ start {\n            end = start\n        }\n        if myString[start] == substring[0]\
    \ {\n            count++\n            start = end + 1\n            found = true\n\
    \        }\n        if found {\n            if myString[start] == substring[1]\
    \ {\n                count++\n                start = end + 1\n              \
    \  found = true\n            }\n            if found {\n                if myString[start]\
    \ == substring[2] {\n                    count++\n                    start =\
    \ end + 1\n                    found = true\n                }\n             \
    \   if found {\n                    if myString[start] == substring[3] {\n   \
    \                     count++\n                        start = end + 1\n     \
    \                   found = true\n                    }\n                    if\
    \ found {\n                        if myString[start] == substring[4] {\n    \
    \                        count++\n                            start = end + 1\n\
    \                            found = true\n                        }\n       \
    \                 if found {\n                            if myString[start] ==\
    \ substring[5] {\n                                count++\n                  \
    \              start = end + 1\n                                found = true\n\
    \                            }\n                            if found {\n     \
    \                           if myString[start] == substring[6] {\n           \
    \                         count++\n                                    start =\
    \ end + 1\n                                    found = true\n                \
    \                }\n                                if found {\n             \
    \                       if myString[start] == substring[7] {\n               \
    \                         count++\n                                        start\
    \ = end + 1\n                                        found = true\n          \
    \                          }\n                                    if found {\n\
    \                                        if myString[start] == substring[8] {\n\
    \                                            count++\n                       \
    \                     start = end + 1\n                                      \
    \      found = true\n                                        }\n             \
    \                           if found {\n                                     \
    \       if myString[start] == substring[9] {\n                               \
    \                 count++\n                                                start\
    \ = end + 1\n                                                found = true\n  \
    \                                          }\n                               \
    \             if found {\n                                                if myString[start]\
    \ == substring[10] {\n                                                    count++\n\
    \                                                    start = end + 1\n       \
    \                                             found = true\n                 \
    \                               }\n                                          \
    \      if found {\n                                                    if myString[start]\
    \ == substring[11] {\n                                                       \
    \ count++\n                                                        start = end\
    \ + 1\n                                                        found = true\n\
    \                                                    }\n                     \
    \                               if found {\n                                 \
    \                       if myString[start] == substring[12] {\n              \
    \                                              count++\n                     \
    \                                       start = end + 1\n                    \
    \                                        found = true\n                      \
    \                                  }\n                                       \
    \                 if found {\n                                               \
    \             if myString[start] == substring[13] {\n                        \
    \                                        count++\n                           \
    \                                     start = end + 1\n                      \
    \                                          found = true\n                    \
    \                                        }\n                                 \
    \                           if found {\n                                     \
    \                           if myString[start] == substring[14] {\n          \
    \                                                          count++\n         \
    \                                                           start = end + 1\n\
    \                                                                    found = true\n\
    \                                                                }\n         \
    \                                                       if found {\n         \
    \                       \nfunc TestHow_Many_Times(t *testing.T) {\n  candidate\
    \ := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\", \"x\"\
    ), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n\
    \     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual:\
    \ candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpv676y2fg_test.go:110:6: expected ''('', found TestHow_Many_Times

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074317
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    result := 0\n    start := 0\n    end := 0\n    found := false\n \
    \   for start < len(myString) {\n        end = start\n        for end < len(myString)\
    \ && found == false {\n            if myString[end] == substring[0] {\n      \
    \          if end < len(myString) {\n                    end += 1\n          \
    \      }\n                if myString[end] == substring[1] {\n               \
    \     found = true\n                }\n            }\n            end += 1\n \
    \       }\n        if found == true {\n            result += 1\n            found\
    \ = false\n        }\n        start = end\n    }\n    return result\n}\n\nfunc\
    \ TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n     { actual:\
    \ candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\"\
    , \"cac\"), expected: 4 },\n     { actual: candidate(\"john doe\", \"john\"),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\npanic: runtime error: index out of\
    \ range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range\
    \ [1] with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.how_many_times({0x51db36?, 0x5d2fb0?}, {0x51d187?,\
    \ 0xc0000f8dd0?})\n\t/tmp/tmp1ck2gn6a_test.go:21 +0x97\ncommand-line-arguments_test.TestHow_Many_Times(0x0?)\n\
    \t/tmp/tmp1ck2gn6a_test.go:44 +0x7b\ntesting.tRunner(0xc0001a0340, 0x527f60)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074318
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    start := 0\n    end := 0\n    for start < len(myString)\
    \ {\n        end = strings.Index(myString[start:], substring)\n        if end\
    \ != -1 {\n            count += end - start\n            start = end + len(substring)\n\
    \        } else {\n            start = len(myString)\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n\
    \     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual:\
    \ candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual: candidate(\"\
    john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuplxyom8_test.go:14:15: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074318
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    for _, s := range myString {\n        if s == substring\
    \ {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprnmnoosj_test.go:12:17: invalid operation: s == substring (mismatched
    types rune and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074318
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    start := 0\n    end := 0\n    for start < len(myString)\
    \ {\n        end = start + 1\n        for end < len(myString) && myString[end]\
    \ == substring[start] {\n            end++\n        }\n        if end > start\
    \ {\n            count += end - start\n        }\n        start = end\n    }\n\
    \    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate :=\
    \ how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\", \"x\"\
    ), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n\
    \     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual:\
    \ candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\npanic: runtime error: index out of\
    \ range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range\
    \ [1] with length 1\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.how_many_times(...)\n\t/tmp/tmp46wcfnve_test.go:15\n\
    command-line-arguments_test.TestHow_Many_Times(0x0?)\n\t/tmp/tmp46wcfnve_test.go:34\
    \ +0x3f7\ntesting.tRunner(0xc0001991e0, 0x527f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074318
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    for _, s := range myString {\n        if s == substring\
    \ {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprnmnoosj_test.go:12:17: invalid operation: s == substring (mismatched
    types rune and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074318
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    start := 0\n    end := 0\n    for start < len(myString)\
    \ {\n        end = start + len(substring)\n        if myString[start:end] == substring\
    \ {\n            count++\n        }\n        start = end + 1\n    }\n    return\
    \ count\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n\
    \     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual:\
    \ candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual: candidate(\"\
    john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [:11] with length 9 [recovered]\n\tpanic: runtime error: slice\
    \ bounds out of range [:11] with length 9\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000158000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000158000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.how_many_times(...)\n\t/tmp/tmp93e7zyk3_test.go:15\n\
    command-line-arguments_test.TestHow_Many_Times(0x0?)\n\t/tmp/tmp93e7zyk3_test.go:32\
    \ +0x392\ntesting.tRunner(0xc0001036c0, 0x527f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074319
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    start := 0\n    end := 0\n    for start < len(myString)\
    \ {\n        end = start\n        for end < len(myString) && myString[end] ==\
    \ substring[start] {\n            end++\n        }\n        if end == len(myString)\
    \ {\n            return count\n        }\n        count += end - start\n     \
    \   start = end\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\npanic: runtime error: index out of\
    \ range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range\
    \ [1] with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.how_many_times(...)\n\t/tmp/tmpiezu1lv9_test.go:15\n\
    command-line-arguments_test.TestHow_Many_Times(0x0?)\n\t/tmp/tmpiezu1lv9_test.go:35\
    \ +0x3d7\ntesting.tRunner(0xc0001a01a0, 0x527f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074320
- exit_code: null
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    start := 0\n    end := 0\n    for start < len(myString)\
    \ {\n        end = start\n        for end < len(myString) && myString[end] ==\
    \ substring[0] {\n            end++\n        }\n        if end > start {\n   \
    \         count++\n        }\n        start = end\n    }\n    return count\n}\n\
    \nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n     { actual:\
    \ candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\"\
    , \"cac\"), expected: 4 },\n     { actual: candidate(\"john doe\", \"john\"),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074333
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    result := 0\n    start := 0\n    end := 0\n    found := false\n \
    \   for start < len(myString) {\n        end = len(myString)\n        if end >\
    \ start {\n            found = strings.Contains(myString[start:], substring)\n\
    \            if found {\n                result += end - start\n             \
    \   start = end + len(substring)\n            }\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n\
    \     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual:\
    \ candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual: candidate(\"\
    john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptabbi0ab_test.go:17:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074320
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    result := 0\n    start := 0\n    end := 0\n    for start < len(myString)\
    \ {\n        end = strings.Index(myString[start:], substring)\n        if end\
    \ != -1 {\n            result += end - start\n            start = end + len(substring)\n\
    \        } else {\n            result += len(substring)\n        }\n    }\n  \
    \  return result\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate :=\
    \ how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\", \"x\"\
    ), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n\
    \     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual:\
    \ candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsc9tn125_test.go:14:15: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074318
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    for _, s := range myString {\n        if s == substring\
    \ {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprnmnoosj_test.go:12:17: invalid operation: s == substring (mismatched
    types rune and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074318
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    start := 0\n    end := 0\n    for start < len(myString)\
    \ {\n        end = strings.Index(myString[start:], substring)\n        if end\
    \ != -1 {\n            count += end - start\n            start = end + len(substring)\n\
    \        } else {\n            start = len(myString)\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n\
    \     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual:\
    \ candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual: candidate(\"\
    john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuplxyom8_test.go:14:15: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074318
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    result := 0\n    index := 0\n    for index < len(myString) {\n  \
    \      if myString[index] == substring {\n            index += 1\n           \
    \ result += 1\n        } else {\n            index += 1\n        }\n    }\n  \
    \  return result\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate :=\
    \ how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\", \"x\"\
    ), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n\
    \     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual:\
    \ candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcyeomeu__test.go:13:31: invalid operation: myString[index] == substring
    (mismatched types byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074320
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    result := 0\n    start := 0\n    end := 0\n    found := false\n \
    \   for start < len(myString) {\n        end = start\n        for end < len(myString)\
    \ && found == false {\n            if myString[end] == substring[0] {\n      \
    \          end = end + 1\n                if end == len(myString) {\n        \
    \            found = true\n                }\n            } else {\n         \
    \       end = end + 1\n            }\n        }\n        if found == true {\n\
    \            result = result + 1\n        }\n        start = end + 1\n    }\n\
    \    return result\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate\
    \ := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\", \"x\"\
    ), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n\
    \     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual:\
    \ candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\n    --- FAIL: TestHow_Many_Times/test_num__1\
    \ (0.00s)\n        tmpiq4jqkr8_test.go:50: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestHow_Many_Times/test_num__2 (0.00s)\n        tmpiq4jqkr8_test.go:50:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestHow_Many_Times/test_num__3\
    \ (0.00s)\n        tmpiq4jqkr8_test.go:50: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074320
- exit_code: null
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    start := 0\n    end := 0\n    found := false\n  \
    \  for start < len(myString) {\n        end = len(myString)\n        if end >\
    \ start {\n            found = myString[start:end] == substring\n            if\
    \ found {\n                count++\n                start = end\n            }\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074333
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    i := 0\n    for ; i < len(myString); i++ {\n    \
    \    if myString[i] == substring {\n            count++\n        } else {\n  \
    \          if myString[i] != substring[0] {\n                count--\n       \
    \     }\n        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5o_n5d2u_test.go:13:27: invalid operation: myString[i] == substring (mismatched
    types byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074320
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    start := 0\n    end := 0\n    found := false\n  \
    \  for start < len(myString) {\n        end = start + len(substring)\n       \
    \ if end > len(myString) {\n            break\n        }\n        if myString[start:end]\
    \ == substring {\n            found = true\n            count++\n        }\n \
    \       start = end + 1\n    }\n    if found == false {\n        return 0\n  \
    \  }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate\
    \ := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\", \"x\"\
    ), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n\
    \     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual:\
    \ candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\n    --- FAIL: TestHow_Many_Times/test_num__2\
    \ (0.00s)\n        tmpcr4aii1u_test.go:47: expected '%!s(int=4)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074320
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    result := 0\n    start := 0\n    end := 0\n    found := false\n \
    \   for start < len(myString) {\n        end = start\n        found = false\n\
    \        for end < len(myString) {\n            if myString[end] == substring[0]\
    \ {\n                if end < len(myString) {\n                    if myString[end]\
    \ == substring[1] {\n                        found = true\n                  \
    \      break\n                    }\n                }\n            }\n      \
    \      end++\n        }\n        if found {\n            result += end - start\n\
    \        }\n        start = end + 1\n    }\n    return result\n}\n\nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\npanic: runtime error: index out of\
    \ range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range\
    \ [1] with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.how_many_times(...)\n\t/tmp/tmpmx896zvh_test.go:20\n\
    command-line-arguments_test.TestHow_Many_Times(0x0?)\n\t/tmp/tmpmx896zvh_test.go:44\
    \ +0x392\ntesting.tRunner(0xc0001a0340, 0x527f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074320
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    result := 0\n    start := 0\n    end := 0\n    found := false\n \
    \   for start < len(myString) {\n        end = start\n        found = false\n\
    \        for end < len(myString) {\n            if myString[end] == substring[0]\
    \ {\n                if end < len(myString) {\n                    if myString[end]\
    \ == substring[1] {\n                        found = true\n                  \
    \      break\n                    }\n                }\n            }\n      \
    \      end++\n        }\n        if found {\n            result++\n        }\n\
    \        start++\n    }\n    return result\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\npanic: runtime error: index out of\
    \ range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range\
    \ [1] with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.how_many_times(...)\n\t/tmp/tmphh2aj9pc_test.go:20\n\
    command-line-arguments_test.TestHow_Many_Times(0x0?)\n\t/tmp/tmphh2aj9pc_test.go:44\
    \ +0x338\ntesting.tRunner(0xc0001a0340, 0x527f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074320
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    result := 0\n    for _, v := range myString {\n        if v == substring\
    \ {\n            result++\n        }\n    }\n    return result\n}\n\nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgfwf5ixm_test.go:12:17: invalid operation: v == substring (mismatched
    types rune and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074320
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    result := 0\n    start := 0\n    end := 0\n    found := false\n \
    \   for start < len(myString) {\n        end = len(myString)\n        if end >\
    \ start {\n            found = strings.Contains(myString[start:end], substring)\n\
    \            if found {\n                result += end - start\n             \
    \   start = end + len(substring)\n            }\n        }\n    }\n    if found\
    \ {\n        return result\n    }\n    return -1\n}\n\nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa4d4fsy6_test.go:17:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074320
- exit_code: null
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    start := 0\n    end := 0\n    for start < len(myString)\
    \ {\n        end = start\n        for end < len(myString) && myString[end] ==\
    \ substring[0] {\n            end += 1\n        }\n        if end > start {\n\
    \            count += end - start\n        }\n        start = end\n    }\n   \
    \ return count\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n\
    \     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual:\
    \ candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual: candidate(\"\
    john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074333
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    for _, s := range myString {\n        if s == substring\
    \ {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprnmnoosj_test.go:12:17: invalid operation: s == substring (mismatched
    types rune and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074318
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    start := 0\n    end := 0\n    for start < len(myString)\
    \ {\n        end = start + len(substring)\n        if end > len(myString) {\n\
    \            break\n        }\n        if myString[start:end] == substring {\n\
    \            count++\n        }\n        start = end + 1\n    }\n    return count\n\
    }\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n\
    \     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual:\
    \ candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual: candidate(\"\
    john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\n    --- FAIL: TestHow_Many_Times/test_num__2\
    \ (0.00s)\n        tmpbcflzbmc_test.go:42: expected '%!s(int=4)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074320
- exit_code: null
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    start := 0\n    end := 0\n    for start < len(myString)\
    \ {\n        end = start\n        for end < len(myString) && myString[end] ==\
    \ substring[0] {\n            end++\n        }\n        if end > start {\n   \
    \         count += end - start\n        }\n        start = end\n    }\n    return\
    \ count\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n\
    \     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual:\
    \ candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual: candidate(\"\
    john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074329
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    start := 0\n    end := 0\n    found := false\n  \
    \  for start < len(myString) {\n        end = start\n        for end < len(myString)\
    \ && found == false {\n            if myString[end] == substring[0] {\n      \
    \          found = true\n                count++\n            }\n            end++\n\
    \        }\n        if found == true {\n            count++\n            start\
    \ = end + 1\n        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\n    --- FAIL: TestHow_Many_Times/test_num__1\
    \ (0.00s)\n        tmpx6s0un6r_test.go:47: expected '%!s(int=4)', got '%!s(int=7)'\n\
    \    --- FAIL: TestHow_Many_Times/test_num__2 (0.00s)\n        tmpx6s0un6r_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=9)'\n    --- FAIL: TestHow_Many_Times/test_num__3\
    \ (0.00s)\n        tmpx6s0un6r_test.go:47: expected '%!s(int=1)', got '%!s(int=8)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074320
- exit_code: null
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    result := 0\n    start := 0\n    end := 0\n    for start < len(myString)\
    \ {\n        end = start\n        for end < len(myString) && myString[end] ==\
    \ substring[0] {\n            end += 1\n        }\n        if end > start {\n\
    \            result += end - start\n        }\n        start = end\n    }\n  \
    \  return result\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate :=\
    \ how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\", \"x\"\
    ), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n\
    \     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual:\
    \ candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074333
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    start := 0\n    end := 0\n    for start < len(myString)\
    \ {\n        end = strings.Index(myString[start:], substring)\n        if end\
    \ != -1 {\n            count += end - start\n            start = end + len(substring)\n\
    \        } else {\n            start = len(myString)\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n\
    \     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual:\
    \ candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual: candidate(\"\
    john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuplxyom8_test.go:14:15: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074318
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    result := 0\n    start := 0\n    end := 0\n    for start < len(myString)\
    \ {\n        end = start\n        foundAt := false\n        for end < len(myString)\
    \ {\n            if myString[end] == substring[0] {\n                if myString[end]\
    \ == substring[1] {\n                    foundAt = true\n                } else\
    \ {\n                    foundAt = false\n                    break\n        \
    \        }\n            } else {\n                foundAt = false\n          \
    \      break\n            }\n            end++\n        }\n        if foundAt\
    \ {\n            result++\n        }\n        start++\n    }\n    return result\n\
    }\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n\
    \     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual:\
    \ candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual: candidate(\"\
    john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\npanic: runtime error: index out of\
    \ range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range\
    \ [1] with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.how_many_times(...)\n\t/tmp/tmpo8gqf5y__test.go:18\n\
    command-line-arguments_test.TestHow_Many_Times(0x0?)\n\t/tmp/tmpo8gqf5y__test.go:46\
    \ +0x34a\ntesting.tRunner(0xc0001a0340, 0x527f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074320
- exit_code: null
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    result := 0\n    start := 0\n    end := 0\n    found := false\n \
    \   for start < len(myString) {\n        end = start + 1\n        for end < len(myString)\
    \ {\n            if myString[end] == substring[0] {\n                if myString[end]\
    \ == substring[1] {\n                    found = true\n                } else\
    \ {\n                    found = false\n                    break\n          \
    \      }\n            } else {\n                found = false\n              \
    \  break\n            }\n            end++\n        }\n        if found {\n  \
    \          result += end - start\n            start = end\n            found =\
    \ false\n        }\n    }\n    return result\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074333
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    start := 0\n    end := 0\n    for start < len(myString)\
    \ {\n        end = strings.Index(myString[start:], substring)\n        if end\
    \ != -1 {\n            count++\n            start = end + len(substring)\n   \
    \     } else {\n            start = len(myString)\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n\
    \     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual:\
    \ candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual: candidate(\"\
    john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_bgyvjgw_test.go:14:15: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074320
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    for _, char := range myString {\n        if char\
    \ == substring {\n            count++\n        }\n    }\n    return count\n}\n\
    \nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n     { actual:\
    \ candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\"\
    , \"cac\"), expected: 4 },\n     { actual: candidate(\"john doe\", \"john\"),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprm1p4ezy_test.go:12:20: invalid operation: char == substring (mismatched
    types rune and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074318
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    start := 0\n    end := 0\n    for start < len(myString)\
    \ {\n        end = start\n        end += strings.Index(myString[start:], substring)\n\
    \        if end == -1 {\n            end = len(myString)\n        }\n        count\
    \ += end - start\n        start = end + len(substring)\n    }\n    return count\n\
    }\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n\
    \     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual:\
    \ candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual: candidate(\"\
    john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdehbad2a_test.go:15:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074321
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    i := 0\n    for ; i < len(myString); i++ {\n    \
    \    if myString[i] == substring {\n            count++\n        }\n        if\
    \ myString[i] == substring[0] && myString[i+1] == substring[1] {\n           \
    \ count++\n        }\n        if myString[i] == substring[0] && myString[i+1]\
    \ == substring[1] && myString[i+2] == substring[2] {\n            count++\n  \
    \      }\n        if myString[i] == substring[0] && myString[i+1] == substring[1]\
    \ && myString[i+2] == substring[2] && myString[i+3] == substring[3] {\n      \
    \      count++\n        }\n        if myString[i] == substring[0] && myString[i+1]\
    \ == substring[1] && myString[i+2] == substring[2] && myString[i+3] == substring[3]\
    \ && myString[i+4] == substring[4] {\n            count++\n        }\n       \
    \ if myString[i] == substring[0] && myString[i+1] == substring[1] && myString[i+2]\
    \ == substring[2] && myString[i+3] == substring[3] && myString[i+4] == substring[4]\
    \ && myString[i+5] == substring[5] {\n            count++\n        }\n       \
    \ if myString[i] == substring[0] && myString[i+1] == substring[1] && myString[i+2]\
    \ == substring[2] && myString[i+3] == substring[3] && myString[i+4] == substring[4]\
    \ && myString[i+5] == substring[5] && myString[i+6] == substring[6] {\n      \
    \      count++\n        }\n        if myString[i] == substring[0] && myString[i+1]\
    \ == substring[1] && myString[i+2] == substring[2] && myString[i+3] == substring[3]\
    \ && myString[i+4] == substring[4] && myString[i+5] == substring[5] && myString[i+6]\
    \ == substring[6] && myString[i+7] == substring[7] {\n            count++\n  \
    \      }\n        if myString[i] == substring[0] && myString[i+1] == substring[1]\
    \ && myString[i+2] == substring[2] && myString[i+3] == substring[3] && myString[i+4]\
    \ == substring[4] && myString[i+5] == substring[5] && myString[i+6] == substring[6]\
    \ && myString[i+7] == substring[7] && myString[i+8] == substring[8] {\n      \
    \      count++\n        }\n        if myString[i] == substring[0] && myString[i+1]\
    \ == substring[1] && myString[i+2] == substring[2] && myString[i+3] == substring[3]\
    \ && myString[i+4] == substring[4] && myString[i+5] == substring[5] && myString[i+6]\
    \ == substring[6] && myString[i+7] == substring[7] && myString[i+8] == substring[8]\
    \ && myString[i+9] == substring[9] {\n            count++\n        }\n       \
    \ if my\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n\
    \     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual:\
    \ candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual: candidate(\"\
    john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpeo4lzb0o_test.go:44:6: expected ''('', found TestHow_Many_Times

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074321
- exit_code: null
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    start := 0\n    end := 0\n    found := false\n  \
    \  for start < len(myString) {\n        end = start\n        found = false\n \
    \       for end < len(myString) {\n            if myString[end] == substring[0]\
    \ {\n                if myString[end+len(substring)-1] == substring[len(substring)-1]\
    \ {\n                    found = true\n                    break\n           \
    \     }\n            }\n            end += 1\n        }\n        if found {\n\
    \            count += 1\n        }\n        start = end\n    }\n    return count\n\
    }\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n\
    \     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual:\
    \ candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual: candidate(\"\
    john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074335
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    start := 0\n    end := 0\n    found := false\n  \
    \  for start < len(myString) {\n        end = start + len(substring)\n       \
    \ if end > len(myString) {\n            end = len(myString)\n        }\n     \
    \   if myString[start:end] == substring {\n            found = true\n        \
    \    count++\n        }\n        start = end + 1\n    }\n    if !found {\n   \
    \     return 0\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\n    --- FAIL: TestHow_Many_Times/test_num__2\
    \ (0.00s)\n        tmp76875ety_test.go:47: expected '%!s(int=4)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074321
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    start := 0\n    end := 0\n    found := false\n  \
    \  for start < len(myString) {\n        end = start\n        found = false\n \
    \       for end < len(myString) {\n            if myString[end] == substring[0]\
    \ {\n                if myString[end] == substring[1] {\n                    found\
    \ = true\n                } else {\n                    found = false\n      \
    \              break\n                }\n            } else {\n              \
    \  found = false\n                break\n            }\n            end++\n  \
    \      }\n        if found {\n            count++\n        }\n        start++\n\
    \    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate\
    \ := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\", \"x\"\
    ), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n\
    \     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual:\
    \ candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\npanic: runtime error: index out of\
    \ range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range\
    \ [1] with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.how_many_times(...)\n\t/tmp/tmp5p_b2wny_test.go:19\n\
    command-line-arguments_test.TestHow_Many_Times(0x0?)\n\t/tmp/tmp5p_b2wny_test.go:47\
    \ +0x34a\ntesting.tRunner(0xc000120340, 0x527f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.014s\nFAIL\n"
  timestamp: 1660074321
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    for _, s := range myString {\n        if s == substring\
    \ {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprnmnoosj_test.go:12:17: invalid operation: s == substring (mismatched
    types rune and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074318
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    for _, char := range myString {\n        if char\
    \ == substring {\n            count++\n        }\n    }\n    return count\n}\n\
    \nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n     { actual:\
    \ candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\"\
    , \"cac\"), expected: 4 },\n     { actual: candidate(\"john doe\", \"john\"),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprm1p4ezy_test.go:12:20: invalid operation: char == substring (mismatched
    types rune and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074318
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    start := 0\n    end := 0\n    for start < len(myString)\
    \ {\n        end = strings.Index(myString[start:], substring)\n        if end\
    \ != -1 {\n            count += end - start\n        }\n        start = end +\
    \ len(substring)\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp7pqefse_test.go:14:15: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074318
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    start := 0\n    end := 0\n    for start < len(myString)\
    \ {\n        end = strings.Index(myString[start:], substring)\n        if end\
    \ != -1 {\n            count += end - start\n            start = end + len(substring)\n\
    \        } else {\n            start = len(myString)\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n\
    \     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual:\
    \ candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual: candidate(\"\
    john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuplxyom8_test.go:14:15: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074318
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    i := 0\n    j := 0\n    for ; i < len(myString);\
    \ i++ {\n        if myString[i] == substring {\n            count++\n        \
    \    j = i\n        }\n    }\n    for ; j < len(myString); j++ {\n        if myString[j]\
    \ == substring {\n            count++\n            i = j\n        }\n    }\n \
    \   return count\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate :=\
    \ how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\", \"x\"\
    ), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n\
    \     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual:\
    \ candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplnznwmj6_test.go:14:27: invalid operation: myString[i] == substring (mismatched
    types byte and string)

    /tmp/tmplnznwmj6_test.go:20:27: invalid operation: myString[j] == substring (mismatched
    types byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074318
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    for _, char := range myString {\n        if char\
    \ == substring {\n            count++\n        }\n    }\n    return count\n}\n\
    \nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n     { actual:\
    \ candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\"\
    , \"cac\"), expected: 4 },\n     { actual: candidate(\"john doe\", \"john\"),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprm1p4ezy_test.go:12:20: invalid operation: char == substring (mismatched
    types rune and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074318
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    for _, char := range myString {\n        if char\
    \ == substring {\n            count++\n        }\n    }\n    return count\n}\n\
    \nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n     { actual:\
    \ candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\"\
    , \"cac\"), expected: 4 },\n     { actual: candidate(\"john doe\", \"john\"),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprm1p4ezy_test.go:12:20: invalid operation: char == substring (mismatched
    types rune and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074318
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    for _, s := range myString {\n        if s == substring\
    \ {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprnmnoosj_test.go:12:17: invalid operation: s == substring (mismatched
    types rune and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074318
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    for _, char := range myString {\n        if char\
    \ == substring {\n            count++\n        }\n    }\n    return count\n}\n\
    \nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n     { actual:\
    \ candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\"\
    , \"cac\"), expected: 4 },\n     { actual: candidate(\"john doe\", \"john\"),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprm1p4ezy_test.go:12:20: invalid operation: char == substring (mismatched
    types rune and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074318
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    result := 0\n    for _, char := range myString {\n        if char\
    \ == substring {\n            result += 1\n        }\n    }\n    return result\n\
    }\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n\
    \     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual:\
    \ candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual: candidate(\"\
    john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvq_v7skp_test.go:12:20: invalid operation: char == substring (mismatched
    types rune and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074321
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    result := 0\n    lastIndex := strings.LastIndex(myString, substring)\n\
    \    if lastIndex == -1 {\n        return result\n    }\n    for i := lastIndex\
    \ + 1; i < len(myString); i++ {\n        if myString[i] == substring[0] {\n  \
    \          result += how_many_times(myString[i+1:], substring[1:])\n        }\
    \ else {\n            result += how_many_times(myString[i:], substring)\n    \
    \    }\n    }\n    return result\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n\
    \  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_2xemqdv_test.go:11:18: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074321
- exit_code: null
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    result := 0\n    start := 0\n    end := 0\n    for start < len(myString)\
    \ {\n        end = start\n        for end < len(myString) && myString[end] ==\
    \ substring[0] {\n            end++\n        }\n        if end > start {\n   \
    \         result += end - start\n        }\n        start = end\n    }\n    return\
    \ result\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n\
    \     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual:\
    \ candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual: candidate(\"\
    john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074329
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    for _, char := range myString {\n        if char\
    \ == substring {\n            count++\n        }\n    }\n    return count\n}\n\
    \nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n     { actual:\
    \ candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\"\
    , \"cac\"), expected: 4 },\n     { actual: candidate(\"john doe\", \"john\"),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprm1p4ezy_test.go:12:20: invalid operation: char == substring (mismatched
    types rune and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074318
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    result := 0\n    for _, letter := range myString {\n        if letter\
    \ == substring {\n            result += 1\n        }\n    }\n    return result\n\
    }\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n\
    \     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual:\
    \ candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual: candidate(\"\
    john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy7cw8us4_test.go:12:22: invalid operation: letter == substring (mismatched
    types rune and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074321
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    for _, char := range myString {\n        if char\
    \ == substring {\n            count++\n        }\n    }\n    return count\n}\n\
    \nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n     { actual:\
    \ candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\"\
    , \"cac\"), expected: 4 },\n     { actual: candidate(\"john doe\", \"john\"),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprm1p4ezy_test.go:12:20: invalid operation: char == substring (mismatched
    types rune and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074318
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    for _, char := range myString {\n        if char\
    \ == substring {\n            count++\n        }\n    }\n    return count\n}\n\
    \nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n     { actual:\
    \ candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\"\
    , \"cac\"), expected: 4 },\n     { actual: candidate(\"john doe\", \"john\"),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprm1p4ezy_test.go:12:20: invalid operation: char == substring (mismatched
    types rune and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074318
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    for _, letter := range myString {\n        if letter\
    \ == substring {\n            count++\n        }\n    }\n    return count\n}\n\
    \nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n     { actual:\
    \ candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\"\
    , \"cac\"), expected: 4 },\n     { actual: candidate(\"john doe\", \"john\"),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpukxy5l40_test.go:12:22: invalid operation: letter == substring (mismatched
    types rune and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074318
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    result := 0\n    start := 0\n    end := 0\n    found := false\n \
    \   for start < len(myString) {\n        end = start\n        for end < len(myString)\
    \ {\n            if myString[end] == substring[0] {\n                if end <\
    \ len(myString) {\n                    if myString[end] == substring[1] {\n  \
    \                      found = true\n                        break\n         \
    \           }\n                }\n            }\n            end++\n        }\n\
    \        if found {\n            result += 1\n            found = false\n    \
    \    }\n        start = end\n    }\n    return result\n}\n\nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\npanic: runtime error: index out of\
    \ range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range\
    \ [1] with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.how_many_times(...)\n\t/tmp/tmpr5yb80uv_test.go:19\n\
    command-line-arguments_test.TestHow_Many_Times(0x0?)\n\t/tmp/tmpr5yb80uv_test.go:44\
    \ +0x352\ntesting.tRunner(0xc0001924e0, 0x527f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074322
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    start := 0\n    end := 0\n    for start < len(myString)\
    \ {\n        end = strings.Index(myString[start:], substring)\n        if end\
    \ != -1 {\n            count += end - start\n            start = end + len(substring)\n\
    \        } else {\n            start = len(myString)\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n\
    \     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual:\
    \ candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual: candidate(\"\
    john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuplxyom8_test.go:14:15: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074318
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    start := 0\n    end := 0\n    for start < len(myString)\
    \ {\n        end = strings.Index(myString[start:], substring)\n        if end\
    \ != -1 {\n            count++\n            start = end + len(substring)\n   \
    \     } else {\n            start = len(myString)\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n\
    \     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual:\
    \ candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual: candidate(\"\
    john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_bgyvjgw_test.go:14:15: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074320
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    i := 0\n    j := 0\n    for ; i < len(myString);\
    \ i++ {\n        if myString[i] == substring {\n            count++\n        }\n\
    \        if myString[j] == substring {\n            count++\n        }\n     \
    \   if myString[i] == substring && myString[j] == substring {\n            count++\n\
    \        }\n        if myString[i] != substring && myString[j] != substring {\n\
    \            count++\n        }\n        if myString[i] == substring || myString[j]\
    \ == substring {\n            count++\n        }\n        if myString[i] != substring\
    \ && myString[j] == substring {\n            count++\n        }\n        if myString[i]\
    \ != substring && myString[j] != substring {\n            count++\n        }\n\
    \        if myString[i] == substring && myString[j] != substring {\n         \
    \   count++\n        }\n        if myString[i] != substring && myString[j] ==\
    \ substring {\n            count++\n        }\n        if myString[i] != substring\
    \ && myString[j] != substring {\n            count++\n        }\n        if myString[i]\
    \ == substring || myString[j] != substring {\n            count++\n        }\n\
    \        if myString[i] != substring && myString[j] == substring {\n         \
    \   count++\n        }\n        if myString[i] != substring && myString[j] !=\
    \ substring {\n            count++\n        }\n        if myString[i] == substring\
    \ || myString[j] != substring {\n            count++\n        }\n        if myString[i]\
    \ != substring && myString[j] != substring {\n            count++\n        }\n\
    \        if myString[i] == substring || myString[j] != substring {\n         \
    \   count++\n        }\n        if myString[i] != substring && myString[j] !=\
    \ substring {\n            count++\n        }\n        if myString[i] == substring\
    \ || myString[j] != substring {\n            count++\n        }\n        if myString[i]\
    \ != substring && myString[j] != substring {\n            count++\n        }\n\
    \        if myString[i] == substring || myString[j] != substring {\n         \
    \   count++\n        }\n        if myString[i] != substring && myString[j] !=\
    \ substring {\n            count++\n        }\n        if myString[i] == substring\
    \ || myString[j] != substring {\n            count++\n        }\n        if myString[i]\
    \ != substring && myString[j] != substring {\n            count++\n        }\n\
    \        if myString[i] == substring \nfunc TestHow_Many_Times(t *testing.T) {\n\
    \  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpp_8i2m6v_test.go:84:6: expected ''('', found TestHow_Many_Times

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074321
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    start := 0\n    end := 0\n    found := false\n  \
    \  for start < len(myString) {\n        end = start\n        found = false\n \
    \       for end < len(myString) {\n            if myString[end] == substring[0]\
    \ {\n                if myString[end+len(substring)-1] == substring[len(substring)-1]\
    \ {\n                    found = true\n                    break\n           \
    \     } else {\n                    end += 1 // skip the character after the first\
    \ character\n                }\n            } else {\n                end += 1\
    \ // skip the character before the first character\n            }\n        }\n\
    \        if found {\n            count++\n            start = end + 1 // skip\
    \ the character after the last character\n        }\n    }\n    return count\n\
    }\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n\
    \     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual:\
    \ candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual: candidate(\"\
    john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\npanic: runtime error: index out of\
    \ range [10] with length 9 [recovered]\n\tpanic: runtime error: index out of range\
    \ [10] with length 9\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc0001ce000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc0001ce000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.how_many_times({0x51e06b?, 0x5d2fb0?}, {0x51d2b5?,\
    \ 0xc000192f70?})\n\t/tmp/tmpoztbtdwz_test.go:19 +0x92\ncommand-line-arguments_test.TestHow_Many_Times(0x0?)\n\
    \t/tmp/tmpoztbtdwz_test.go:46 +0xa8\ntesting.tRunner(0xc00019b040, 0x527f60)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074322
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    start := 0\n    end := 0\n    for start < len(myString)\
    \ {\n        end = strings.Index(myString[start:], substring)\n        if end\
    \ != -1 {\n            count += end - start\n            start = end + len(substring)\n\
    \        } else {\n            count++\n            start = len(myString)\n  \
    \      }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpio1wa65n_test.go:14:15: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074321
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    result := 0\n    start := 0\n    end := 0\n    found := false\n \
    \   for start < len(myString) {\n        end = start + len(substring)\n      \
    \  if end > len(myString) {\n            break\n        }\n        if myString[start:end]\
    \ == substring {\n            found = true\n            break\n        }\n   \
    \     start = end + 1\n    }\n    if found {\n        result = 1\n    }\n    return\
    \ result\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n\
    \     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual:\
    \ candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual: candidate(\"\
    john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\n    --- FAIL: TestHow_Many_Times/test_num__1\
    \ (0.00s)\n        tmpy4xunh8h_test.go:47: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestHow_Many_Times/test_num__2 (0.00s)\n        tmpy4xunh8h_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074318
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    for _, char := range myString {\n        if char\
    \ == substring {\n            count++\n        }\n    }\n    return count\n}\n\
    \nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n     { actual:\
    \ candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\"\
    , \"cac\"), expected: 4 },\n     { actual: candidate(\"john doe\", \"john\"),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprm1p4ezy_test.go:12:20: invalid operation: char == substring (mismatched
    types rune and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074318
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    start := 0\n    end := 0\n    found := false\n  \
    \  for start < len(myString) {\n        end = len(myString)\n        for end >\
    \ start {\n            found = myString[start:end] == substring\n            if\
    \ found {\n                count++\n                break\n            }\n   \
    \         end--\n        }\n        if found {\n            break\n        }\n\
    \        start++\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\n    --- FAIL: TestHow_Many_Times/test_num__1\
    \ (0.00s)\n        tmpymfmptcu_test.go:48: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestHow_Many_Times/test_num__2 (0.00s)\n        tmpymfmptcu_test.go:48:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074322
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    start := 0\n    end := 0\n    for start < len(myString)\
    \ {\n        end = strings.Index(myString[start:], substring)\n        if end\
    \ != -1 {\n            count++\n            start = end + len(substring)\n   \
    \     } else {\n            start = len(myString)\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n\
    \     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual:\
    \ candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual: candidate(\"\
    john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_bgyvjgw_test.go:14:15: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074320
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    i := 0\n    for ; i < len(myString); i++ {\n    \
    \    if myString[i] == substring[0] {\n            count++\n            i++\n\
    \            for ; i < len(myString); i++ {\n                if myString[i] ==\
    \ substring[1] {\n                    count++\n                    i++\n     \
    \           }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\npanic: runtime error: index out of\
    \ range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range\
    \ [1] with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.how_many_times(...)\n\t/tmp/tmpgpxmcpj8_test.go:17\n\
    command-line-arguments_test.TestHow_Many_Times(0x0?)\n\t/tmp/tmpgpxmcpj8_test.go:35\
    \ +0x70\ntesting.tRunner(0xc0001a0340, 0x527f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074322
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    for _, char := range myString {\n        if char\
    \ == substring {\n            count++\n        }\n    }\n    return count\n}\n\
    \nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n     { actual:\
    \ candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\"\
    , \"cac\"), expected: 4 },\n     { actual: candidate(\"john doe\", \"john\"),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprm1p4ezy_test.go:12:20: invalid operation: char == substring (mismatched
    types rune and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074318
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    start := 0\n    end := 0\n    for start < len(myString)\
    \ {\n        end = strings.Index(myString[start:], substring)\n        if end\
    \ != -1 {\n            count++\n            start = end + len(substring)\n   \
    \     } else {\n            start = len(myString)\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n\
    \     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual:\
    \ candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual: candidate(\"\
    john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_bgyvjgw_test.go:14:15: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074320
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    start := 0\n    end := 0\n    for start < len(myString)\
    \ {\n        end = strings.Index(myString[start:], substring)\n        if end\
    \ != -1 {\n            count += end - start\n            start = end + len(substring)\n\
    \        } else {\n            start = len(myString)\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n\
    \     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual:\
    \ candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual: candidate(\"\
    john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuplxyom8_test.go:14:15: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074318
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    start := 0\n    end := 0\n    found := false\n  \
    \  for start < len(myString) {\n        end = len(myString)\n        for end >\
    \ start {\n            found = myString[start:end] == substring\n            if\
    \ found {\n                count++\n                break\n            }\n   \
    \         end--\n        }\n        if found {\n            break\n        }\n\
    \        start++\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\n    --- FAIL: TestHow_Many_Times/test_num__1\
    \ (0.00s)\n        tmpymfmptcu_test.go:48: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestHow_Many_Times/test_num__2 (0.00s)\n        tmpymfmptcu_test.go:48:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074322
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    result := 0\n    start := 0\n    end := 0\n    found := false\n \
    \   for start < len(myString) {\n        end = start\n        found = false\n\
    \        for end < len(myString) {\n            if myString[end] == substring[0]\
    \ {\n                if myString[end] == substring[1] {\n                    found\
    \ = true\n                } else {\n                    found = false\n      \
    \              break\n                }\n            } else {\n              \
    \  found = false\n                break\n            }\n            end++\n  \
    \      }\n        if found {\n            result++\n        }\n        start++\n\
    \    }\n    return result\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate\
    \ := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\", \"x\"\
    ), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n\
    \     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual:\
    \ candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\npanic: runtime error: index out of\
    \ range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range\
    \ [1] with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.how_many_times(...)\n\t/tmp/tmpffz9y5mm_test.go:19\n\
    command-line-arguments_test.TestHow_Many_Times(0x0?)\n\t/tmp/tmpffz9y5mm_test.go:47\
    \ +0x34a\ntesting.tRunner(0xc0001a0340, 0x527f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074322
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    result := 0\n    start := 0\n    end := 0\n    for start < len(myString)\
    \ {\n        end = strings.Index(myString[start:], substring)\n        if end\
    \ != -1 {\n            result += end - start\n            start = end + len(substring)\n\
    \        } else {\n            result += len(substring)\n        }\n    }\n  \
    \  return result\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate :=\
    \ how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\", \"x\"\
    ), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n\
    \     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual:\
    \ candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsc9tn125_test.go:14:15: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074318
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    result := 0\n    start := 0\n    end := 0\n    found := false\n \
    \   for start < len(myString) {\n        end = start\n        for end < len(myString)\
    \ && myString[end] == substring[start] {\n            end += 1\n        }\n  \
    \      if end > start {\n            found = true\n            break\n       \
    \ }\n        start += 1\n    }\n    if found {\n        result = end - start\n\
    \    }\n    return result\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate\
    \ := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\", \"x\"\
    ), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n\
    \     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual:\
    \ candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\n    --- FAIL: TestHow_Many_Times/test_num__1\
    \ (0.00s)\n        tmpele2hspo_test.go:47: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestHow_Many_Times/test_num__2 (0.00s)\n        tmpele2hspo_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074322
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    start := 0\n    end := 0\n    for start < len(myString)\
    \ {\n        end = start\n        foundAt := false\n        for end < len(myString)\
    \ {\n            if myString[end] == substring[0] {\n                if myString[end]\
    \ == substring[1] {\n                    foundAt = true\n                } else\
    \ {\n                    foundAt = false\n                    break\n        \
    \        }\n            } else {\n                foundAt = false\n          \
    \      break\n            }\n            end++\n        }\n        if foundAt\
    \ {\n            count++\n        }\n        start = end\n    }\n    return count\n\
    }\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n\
    \     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual:\
    \ candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual: candidate(\"\
    john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\npanic: runtime error: index out of\
    \ range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range\
    \ [1] with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.how_many_times(...)\n\t/tmp/tmp_o2aad7u_test.go:18\n\
    command-line-arguments_test.TestHow_Many_Times(0x0?)\n\t/tmp/tmp_o2aad7u_test.go:46\
    \ +0x1b\ntesting.tRunner(0xc0001a01a0, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074322
- exit_code: null
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    start := 0\n    end := 0\n    for start < len(myString)\
    \ {\n        end = start\n        for end < len(myString) && myString[end] ==\
    \ substring[0] {\n            end += 1\n        }\n        if end > start {\n\
    \            count += end - start\n        }\n        start = end\n    }\n   \
    \ return count\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n\
    \     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual:\
    \ candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual: candidate(\"\
    john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074333
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    start := 0\n    end := 0\n    for start < len(myString)\
    \ {\n        end = strings.Index(myString[start:], substring)\n        if end\
    \ != -1 {\n            count += end - start\n            start = end + len(substring)\n\
    \        } else {\n            start = len(myString)\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n\
    \     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual:\
    \ candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual: candidate(\"\
    john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuplxyom8_test.go:14:15: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074318
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    result := 0\n    start := 0\n    end := 0\n    found := false\n \
    \   for start < len(myString) {\n        end = len(myString)\n        if end >\
    \ start {\n            end = start\n        }\n        if myString[start] == substring[0]\
    \ {\n            found = true\n            end += 1\n        }\n        for end\
    \ < len(myString) && myString[end] == substring[end] {\n            end += 1\n\
    \        }\n        if found {\n            result += end - start\n          \
    \  start = end\n            found = false\n        }\n    }\n    return result\n\
    }\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n\
    \     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual:\
    \ candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual: candidate(\"\
    john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\npanic: runtime error: index out of\
    \ range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range\
    \ [1] with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.how_many_times({0x51db36?, 0x5d2fb0?}, {0x51d187?,\
    \ 0xc0000f8dd0?})\n\t/tmp/tmpt3najfcr_test.go:23 +0x9f\ncommand-line-arguments_test.TestHow_Many_Times(0x0?)\n\
    \t/tmp/tmpt3najfcr_test.go:43 +0x7b\ntesting.tRunner(0xc0001a01a0, 0x527f60)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074322
- exit_code: null
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    result := 0\n    start := 0\n    end := 0\n    found := false\n \
    \   for start < len(myString) {\n        end = len(myString)\n        if end >\
    \ start {\n            end = start\n        }\n        if myString[start] == substring[0]\
    \ {\n            found = true\n        }\n        if myString[end] == substring[len(substring)-1]\
    \ {\n            found = true\n        }\n        if found {\n            result\
    \ += end - start + 1\n            start = end + 1\n            found = false\n\
    \        }\n    }\n    return result\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074336
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    result := 0\n    start := 0\n    end := 0\n    found := false\n \
    \   for start < len(myString) {\n        end = start\n        for end < len(myString)\
    \ {\n            if myString[end] == substring[0] {\n                end += 1\n\
    \                continue\n            }\n            if myString[end] == substring[1]\
    \ {\n                end += 1\n                continue\n            }\n     \
    \       if myString[end] == substring[2] {\n                end += 1\n       \
    \         continue\n            }\n            if myString[end] == substring[3]\
    \ {\n                end += 1\n                continue\n            }\n     \
    \       if myString[end] == substring[4] {\n                end += 1\n       \
    \         continue\n            }\n            if myString[end] == substring[5]\
    \ {\n                end += 1\n                continue\n            }\n     \
    \       if myString[end] == substring[6] {\n                end += 1\n       \
    \         continue\n            }\n            if myString[end] == substring[7]\
    \ {\n                end += 1\n                continue\n            }\n     \
    \       if myString[end] == substring[8] {\n                end += 1\n       \
    \         continue\n            }\n            if myString[end] == substring[9]\
    \ {\n                end += 1\n                continue\n            }\n     \
    \       if myString[end] == substring[10] {\n                end += 1\n      \
    \          continue\n            }\n            if myString[end] == substring[11]\
    \ {\n                end += 1\n                continue\n            }\n     \
    \       if myString[end] == substring[12] {\n                end += 1\n      \
    \          continue\n            }\n            if myString[end] == substring[13]\
    \ {\n                end += 1\n                continue\n            }\n     \
    \       if myString[end] == substring[14] {\n                end += 1\n      \
    \          continue\n            }\n            if myString[end] == substring[15]\
    \ {\n                end += 1\n                continue\n            }\n     \
    \       if myString[end] == substring[16] {\n                end += 1\n      \
    \          continue\n            }\n            if myString[end] == substring[17]\
    \ {\n                end += 1\n                continue\n            }\n     \
    \       if myString[end] == substring[18] {\n                end += 1\n      \
    \          continue\n            }\n            if myString[end] == substring[19]\
    \ {\n                end += 1\n                continue\n            }\n     \
    \       if myString[end] == substring[20] {\n                end += 1\n      \
    \          continue\n            }\n            if myString[end] == substring[21]\
    \ {\n                end += 1\n                continue\n            }\n     \
    \       if myString[end] == substring[22] {\n                end += 1\n      \
    \          continue\n            }\n            if myString[end] == substring[23]\
    \ {\n                end += 1\n                continue\n            }\n     \
    \       if myString[end] == substring[24] {\n                end += 1\n      \
    \          continue\n            }\n            if myString[end] == substring[25]\
    \ {\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n\
    \     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual:\
    \ candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual: candidate(\"\
    john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpdxx_agpr_test.go:119:6: expected ''('', found TestHow_Many_Times

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074322
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    result := 0\n    start := 0\n    end := 0\n    found := false\n \
    \   for start < len(myString) {\n        end = start\n        for end < len(myString)\
    \ {\n            if myString[end] == substring[0] {\n                if end <\
    \ len(myString) {\n                    if myString[end] == substring[1] {\n  \
    \                      found = true\n                        break\n         \
    \           }\n                }\n            }\n            end++\n        }\n\
    \        if found {\n            result += end - start\n            found = false\n\
    \        }\n        start = end + 1\n    }\n    return result\n}\n\nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\npanic: runtime error: index out of\
    \ range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range\
    \ [1] with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.how_many_times(...)\n\t/tmp/tmpuu4059h2_test.go:19\n\
    command-line-arguments_test.TestHow_Many_Times(0x0?)\n\t/tmp/tmpuu4059h2_test.go:44\
    \ +0x392\ntesting.tRunner(0xc0001a01a0, 0x527f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074323
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    result := 0\n    start := 0\n    end := 0\n    found := false\n \
    \   for start < len(myString) {\n        end = start + 1\n        for end < len(myString)\
    \ {\n            if myString[end] == substring[0] {\n                if myString[end]\
    \ == substring[1] {\n                    found = true\n                } else\
    \ {\n                    found = false\n                    break\n          \
    \      }\n            } else {\n                found = false\n              \
    \  break\n            }\n            end++\n        }\n        if found {\n  \
    \          result = result + 1\n        }\n        start = end + 1\n    }\n  \
    \  return result\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate :=\
    \ how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\", \"x\"\
    ), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n\
    \     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual:\
    \ candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\n    --- FAIL: TestHow_Many_Times/test_num__1\
    \ (0.00s)\n        tmp4f4xn8f5_test.go:54: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestHow_Many_Times/test_num__2 (0.00s)\n        tmp4f4xn8f5_test.go:54:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestHow_Many_Times/test_num__3\
    \ (0.00s)\n        tmp4f4xn8f5_test.go:54: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074323
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    for _, s := range myString {\n        if s == substring\
    \ {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprnmnoosj_test.go:12:17: invalid operation: s == substring (mismatched
    types rune and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074318
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    for _, char := range myString {\n        if char\
    \ == substring {\n            count++\n        }\n    }\n    return count\n}\n\
    \nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n     { actual:\
    \ candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\"\
    , \"cac\"), expected: 4 },\n     { actual: candidate(\"john doe\", \"john\"),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprm1p4ezy_test.go:12:20: invalid operation: char == substring (mismatched
    types rune and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074318
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    for _, letter := range myString {\n        if letter\
    \ == substring {\n            count++\n        }\n    }\n    return count\n}\n\
    \nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n     { actual:\
    \ candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\"\
    , \"cac\"), expected: 4 },\n     { actual: candidate(\"john doe\", \"john\"),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpukxy5l40_test.go:12:22: invalid operation: letter == substring (mismatched
    types rune and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074318
- exit_code: null
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    start := 0\n    end := 0\n    for start < len(myString)\
    \ {\n        end = start\n        for end < len(myString) && myString[end] ==\
    \ substring[0] {\n            end++\n        }\n        if end > start {\n   \
    \         count += end - start\n        }\n        start = end\n    }\n    return\
    \ count\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n\
    \     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual:\
    \ candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual: candidate(\"\
    john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074329
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    for _, s := range myString {\n        if s == substring\
    \ {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprnmnoosj_test.go:12:17: invalid operation: s == substring (mismatched
    types rune and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074318
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    start := 0\n    end := 0\n    found := false\n  \
    \  for start < len(myString) {\n        end = start\n        found = false\n \
    \       for end < len(myString) {\n            if myString[end] == substring[0]\
    \ {\n                if myString[end] == substring[1] {\n                    found\
    \ = true\n                    break\n                } else {\n              \
    \      end++\n                }\n            } else {\n                end++\n\
    \            }\n        }\n        if found {\n            count++\n         \
    \   start = end + 1\n        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\npanic: runtime error: index out of\
    \ range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range\
    \ [1] with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.how_many_times(...)\n\t/tmp/tmpmpp9h9al_test.go:19\n\
    command-line-arguments_test.TestHow_Many_Times(0x0?)\n\t/tmp/tmpmpp9h9al_test.go:45\
    \ +0x3a\ntesting.tRunner(0xc0001924e0, 0x527d48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074323
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    for _, char := range myString {\n        if char\
    \ == substring {\n            count++\n        }\n    }\n    return count\n}\n\
    \nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n     { actual:\
    \ candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\"\
    , \"cac\"), expected: 4 },\n     { actual: candidate(\"john doe\", \"john\"),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprm1p4ezy_test.go:12:20: invalid operation: char == substring (mismatched
    types rune and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074318
- exit_code: null
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    result := 0\n    start := 0\n    end := 0\n    found := false\n \
    \   for start < len(myString) {\n        end = start + 1\n        for end < len(myString)\
    \ {\n            if myString[end] == substring[0] {\n                if myString[end]\
    \ == substring[1] {\n                    found = true\n                } else\
    \ {\n                    found = false\n                    break\n          \
    \      }\n            } else {\n                found = false\n              \
    \  break\n            }\n            end++\n        }\n        if found {\n  \
    \          result++\n            start = end + 1\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n\
    \     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual:\
    \ candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual: candidate(\"\
    john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074336
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    for _, char := range myString {\n        if char\
    \ == substring {\n            count++\n        }\n    }\n    return count\n}\n\
    \nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n     { actual:\
    \ candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\"\
    , \"cac\"), expected: 4 },\n     { actual: candidate(\"john doe\", \"john\"),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprm1p4ezy_test.go:12:20: invalid operation: char == substring (mismatched
    types rune and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074318
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    for _, char := range myString {\n        if char\
    \ == substring {\n            count++\n        }\n    }\n    return count\n}\n\
    \nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n     { actual:\
    \ candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\"\
    , \"cac\"), expected: 4 },\n     { actual: candidate(\"john doe\", \"john\"),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprm1p4ezy_test.go:12:20: invalid operation: char == substring (mismatched
    types rune and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074318
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    start := 0\n    end := 0\n    found := false\n  \
    \  for start < len(myString) {\n        end = len(myString)\n        found = false\n\
    \        for end > start {\n            if myString[start] == substring[0] {\n\
    \                if myString[end-1] == substring[1] {\n                    found\
    \ = true\n                    break\n                } else {\n              \
    \      end--\n                }\n            } else {\n                end--\n\
    \            }\n        }\n        if found {\n            count++\n        }\n\
    \        start = end\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\npanic: runtime error: index out of\
    \ range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range\
    \ [1] with length 1\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.how_many_times(...)\n\t/tmp/tmp6agyp_4o_test.go:19\n\
    command-line-arguments_test.TestHow_Many_Times(0x0?)\n\t/tmp/tmp6agyp_4o_test.go:45\
    \ +0x3d6\ntesting.tRunner(0xc000103380, 0x527f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074323
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    start := 0\n    end := 0\n    for start < len(myString)\
    \ {\n        end = strings.Index(myString[start:], substring)\n        if end\
    \ != -1 {\n            count += end - start\n        }\n        start = end +\
    \ len(substring)\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp7pqefse_test.go:14:15: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074318
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    result := 0\n    start := 0\n    end := 0\n    found := false\n \
    \   for start < len(myString) {\n        end = len(myString)\n        found =\
    \ false\n        for end > start {\n            if myString[start] == substring[0]\
    \ {\n                if myString[end-1] == substring[len(substring)-1] {\n   \
    \                 found = true\n                } else {\n                   \
    \ found = false\n                }\n            } else {\n                found\
    \ = false\n            }\n            end--\n        }\n        if found {\n \
    \           result++\n        }\n        start++\n    }\n    return result\n}\n\
    \nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n     { actual:\
    \ candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\"\
    , \"cac\"), expected: 4 },\n     { actual: candidate(\"john doe\", \"john\"),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\n    --- FAIL: TestHow_Many_Times/test_num__2\
    \ (0.00s)\n        tmppyjp3acl_test.go:53: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestHow_Many_Times/test_num__3 (0.00s)\n        tmppyjp3acl_test.go:53:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074323
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    for _, s := range myString {\n        if s == substring\
    \ {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprnmnoosj_test.go:12:17: invalid operation: s == substring (mismatched
    types rune and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074318
- exit_code: null
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    start := 0\n    end := 0\n    found := false\n  \
    \  for start < len(myString) {\n        end = start\n        for end < len(myString)\
    \ && found == false {\n            if myString[end] == substring[0] {\n      \
    \          if end == start {\n                    found = true\n             \
    \   } else {\n                    found = false\n                }\n         \
    \   } else {\n                found = false\n            }\n            end++\n\
    \        }\n        if found == true {\n            count++\n            start\
    \ = end\n        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074337
- exit_code: null
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    result := 0\n    start := 0\n    end := 0\n    for start < len(myString)\
    \ {\n        end = start\n        for end < len(myString) && myString[end] ==\
    \ substring[0] {\n            end++\n        }\n        if end > start {\n   \
    \         result += end - start\n        }\n        start = end\n    }\n    return\
    \ result\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n\
    \     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual:\
    \ candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual: candidate(\"\
    john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074329
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    start := 0\n    end := 0\n    found := false\n  \
    \  for start < len(myString) {\n        end = start\n        for end < len(myString)\
    \ && found == false {\n            if myString[end] == substring[0] {\n      \
    \          if end < len(myString) {\n                    if myString[end] == substring[1]\
    \ {\n                        found = true\n                    }\n           \
    \     }\n            }\n            end++\n        }\n        if found == true\
    \ {\n            count++\n        }\n        start = end\n    }\n    return count\n\
    }\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n\
    \     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual:\
    \ candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual: candidate(\"\
    john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\npanic: runtime error: index out of\
    \ range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range\
    \ [1] with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.how_many_times(...)\n\t/tmp/tmpz0x9t8_8_test.go:19\n\
    command-line-arguments_test.TestHow_Many_Times(0x0?)\n\t/tmp/tmpz0x9t8_8_test.go:42\
    \ +0x374\ntesting.tRunner(0xc0001964e0, 0x527f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660074323
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    result := 0\n    start := 0\n    end := 0\n    found := false\n \
    \   for start < len(myString) {\n        end = start\n        found = false\n\
    \        for end < len(myString) {\n            if myString[end] == substring[0]\
    \ {\n                if end < len(myString) {\n                    if myString[end]\
    \ == substring[1] {\n                        found = true\n                  \
    \      break\n                    }\n                }\n            }\n      \
    \      end += 1\n        }\n        if found {\n            result += end - start\n\
    \        }\n        start = end + 1\n    }\n    return result\n}\n\nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\npanic: runtime error: index out of\
    \ range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range\
    \ [1] with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.how_many_times(...)\n\t/tmp/tmpc_paioso_test.go:20\n\
    command-line-arguments_test.TestHow_Many_Times(0x0?)\n\t/tmp/tmpc_paioso_test.go:44\
    \ +0x392\ntesting.tRunner(0xc0001a0340, 0x527f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074323
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    start := 0\n    end := 0\n    for start < len(myString)\
    \ {\n        end = start\n        end += strings.Index(myString[start:], substring)\n\
    \        if end == -1 {\n            break\n        }\n        count += end -\
    \ start\n        start = end + len(substring)\n    }\n    return count\n}\n\n\
    func TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n     { actual:\
    \ candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\"\
    , \"cac\"), expected: 4 },\n     { actual: candidate(\"john doe\", \"john\"),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_dwg5nva_test.go:15:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074318
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    for _, s := range myString {\n        if s == substring\
    \ {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprnmnoosj_test.go:12:17: invalid operation: s == substring (mismatched
    types rune and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074318
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    i := 0\n    for ; i < len(myString); i++ {\n    \
    \    if myString[i] == substring {\n            count++\n        }\n    }\n  \
    \  return count\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate :=\
    \ how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\", \"x\"\
    ), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n\
    \     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual:\
    \ candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1d_bwhd7_test.go:13:27: invalid operation: myString[i] == substring (mismatched
    types byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074323
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    start := 0\n    end := 0\n    for start < len(myString)\
    \ {\n        end = strings.Index(myString[start:], substring)\n        if end\
    \ != -1 {\n            count++\n            start = end + len(substring)\n   \
    \     } else {\n            start = len(myString)\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n\
    \     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual:\
    \ candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual: candidate(\"\
    john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_bgyvjgw_test.go:14:15: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074320
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    start := 0\n    end := 0\n    for start < len(myString)\
    \ {\n        end = start + len(substring)\n        if myString[start:end] == substring\
    \ {\n            count++\n        }\n        start = end\n    }\n    return count\n\
    }\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n\
    \     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual:\
    \ candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual: candidate(\"\
    john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\n    --- FAIL: TestHow_Many_Times/test_num__2\
    \ (0.00s)\n        tmpejiv9owh_test.go:39: expected '%!s(int=4)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074323
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    start := 0\n    end := 0\n    found := false\n  \
    \  for start < len(myString) {\n        end = start + 1\n        for end < len(myString)\
    \ {\n            if myString[end] == substring[0] {\n                if myString[end]\
    \ == substring[1] {\n                    count++\n                    end = end\
    \ + 1\n                } else {\n                    end = end + 1\n         \
    \       }\n            } else {\n                end = end + 1\n            }\n\
    \        }\n        if myString[start] == substring[0] {\n            found =\
    \ true\n        }\n        if found {\n            break\n        }\n        start\
    \ = start + 1\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\npanic: runtime error: index out of\
    \ range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range\
    \ [1] with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.how_many_times({0x51db36?, 0x5d2fb0?}, {0x51d187?,\
    \ 0xc0000f8dd0?})\n\t/tmp/tmpyuq8_pv6_test.go:18 +0xa5\ncommand-line-arguments_test.TestHow_Many_Times(0x0?)\n\
    \t/tmp/tmpyuq8_pv6_test.go:47 +0x7b\ntesting.tRunner(0xc0001924e0, 0x527f60)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074323
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    i := 0\n    for ; i < len(myString); i++ {\n    \
    \    if myString[i] == substring {\n            count++\n        }\n        if\
    \ myString[i] > substring {\n            break\n        }\n    }\n    return count\n\
    }\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n\
    \     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual:\
    \ candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual: candidate(\"\
    john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuxbwntbb_test.go:13:27: invalid operation: myString[i] == substring (mismatched
    types byte and string)

    /tmp/tmpuxbwntbb_test.go:16:26: invalid operation: myString[i] > substring (mismatched
    types byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074323
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    start := 0\n    end := 0\n    found := false\n  \
    \  for start < len(myString) {\n        end = start\n        for end < len(myString)\
    \ && myString[end] == substring[end] {\n            end += 1\n        }\n    \
    \    if end > start {\n            count += end - start\n            start = end\n\
    \            found = true\n        }\n    }\n    if !found {\n        return -1\n\
    \    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate\
    \ := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\", \"x\"\
    ), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n\
    \     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual:\
    \ candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\npanic: runtime error: index out of\
    \ range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range\
    \ [1] with length 1\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.how_many_times(...)\n\t/tmp/tmpmcv54ypp_test.go:16\n\
    command-line-arguments_test.TestHow_Many_Times(0x0?)\n\t/tmp/tmpmcv54ypp_test.go:39\
    \ +0x469\ntesting.tRunner(0xc000103380, 0x527f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660074324
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    start := 0\n    end := 0\n    found := false\n  \
    \  for start < len(myString) {\n        end = start + 1\n        for end < len(myString)\
    \ {\n            if myString[end] == substring[0] {\n                if myString[end]\
    \ == substring[1] {\n                    count++\n                    end = end\
    \ + 1\n                } else {\n                    end = end + 1\n         \
    \       }\n            } else {\n                end = end + 1\n            }\n\
    \        }\n        if myString[start] == substring[0] {\n            count++\n\
    \            start = start + 1\n        } else {\n            start = start +\
    \ 1\n        }\n        if count == len(substring) {\n            found = true\n\
    \            break\n        }\n    }\n    if !found {\n        return 0\n    }\n\
    \    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate :=\
    \ how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\", \"x\"\
    ), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n\
    \     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual:\
    \ candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\npanic: runtime error: index out of\
    \ range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range\
    \ [1] with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.how_many_times({0x51db36?, 0x5d2fb0?}, {0x51d187?,\
    \ 0xc0000f8f70?})\n\t/tmp/tmp93dak_e6_test.go:18 +0xc7\ncommand-line-arguments_test.TestHow_Many_Times(0x0?)\n\
    \t/tmp/tmp93dak_e6_test.go:53 +0x7b\ntesting.tRunner(0xc0001964e0, 0x527f60)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074324
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    start := 0\n    end := 0\n    for start < len(myString)\
    \ {\n        end = strings.Index(myString[start:], substring)\n        if end\
    \ != -1 {\n            count += end - start\n            start = end + len(substring)\n\
    \        } else {\n            start = len(myString)\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n\
    \     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual:\
    \ candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual: candidate(\"\
    john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuplxyom8_test.go:14:15: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074318
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    result := 0\n    for _, s := range myString {\n        if s == substring\
    \ {\n            result++\n        }\n    }\n    return result\n}\n\nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpddqnokdg_test.go:12:17: invalid operation: s == substring (mismatched
    types rune and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074324
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    for _, char := range myString {\n        if char\
    \ == substring {\n            count++\n        }\n    }\n    return count\n}\n\
    \nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n     { actual:\
    \ candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\"\
    , \"cac\"), expected: 4 },\n     { actual: candidate(\"john doe\", \"john\"),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprm1p4ezy_test.go:12:20: invalid operation: char == substring (mismatched
    types rune and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074318
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    result := 0\n    start := 0\n    end := 0\n    found := false\n \
    \   for start < len(myString) {\n        end = len(myString)\n        if end >\
    \ start {\n            found = strings.Contains(myString[start:], substring)\n\
    \            if found {\n                result += 1\n                start =\
    \ end + len(substring)\n            } else {\n                end = start\n  \
    \          }\n        }\n    }\n    if found {\n        return result\n    } else\
    \ {\n        return 0\n    }\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n \
    \ candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpt4y04xvn_test.go:17:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074324
- exit_code: null
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    start := 0\n    end := 0\n    for start < len(myString)\
    \ {\n        end = start\n        for end < len(myString) && myString[end] ==\
    \ substring[0] {\n            end++\n        }\n        if end > start {\n   \
    \         count += end - start\n        }\n        start = end\n    }\n    return\
    \ count\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n\
    \     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual:\
    \ candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual: candidate(\"\
    john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074329
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    result := 0\n    start := 0\n    end := 0\n    found := false\n \
    \   for start < len(myString) {\n        end = start + len(substring)\n      \
    \  if end > len(myString) {\n            end = len(myString)\n        }\n    \
    \    if myString[start:end] == substring {\n            found = true\n       \
    \     break\n        }\n        start = end + 1\n    }\n    if found {\n     \
    \   result = 1\n    }\n    return result\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\n    --- FAIL: TestHow_Many_Times/test_num__1\
    \ (0.00s)\n        tmpjmgvmcqw_test.go:47: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestHow_Many_Times/test_num__2 (0.00s)\n        tmpjmgvmcqw_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074325
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    result := 0\n    lastIndex := 0\n    foundIndex := false\n    for\
    \ i := 0; i < len(myString); i++ {\n        if myString[i] == substring {\n  \
    \          foundIndex = true\n            lastIndex = i\n        }\n        if\
    \ foundIndex {\n            result += lastIndex - i\n            lastIndex = 0\n\
    \            foundIndex = false\n        }\n    }\n    if lastIndex > 0 {\n  \
    \      result += lastIndex\n    }\n    return result\n}\n\nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy5zioil4_test.go:14:27: invalid operation: myString[i] == substring (mismatched
    types byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074324
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    result := 0\n    start := 0\n    end := 0\n    found := false\n \
    \   for start < len(myString) {\n        end = start\n        found = false\n\
    \        for end < len(myString) {\n            if myString[end] == substring[0]\
    \ {\n                if end < len(myString) {\n                    if myString[end]\
    \ == substring[1] {\n                        found = true\n                  \
    \      break\n                    }\n                }\n            }\n      \
    \      end++\n        }\n        if found {\n            result += 1\n       \
    \ }\n        start = end\n    }\n    return result\n}\n\nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\npanic: runtime error: index out of\
    \ range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range\
    \ [1] with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.how_many_times(...)\n\t/tmp/tmpg13yletg_test.go:20\n\
    command-line-arguments_test.TestHow_Many_Times(0x0?)\n\t/tmp/tmpg13yletg_test.go:44\
    \ +0x352\ntesting.tRunner(0xc0001a01a0, 0x527f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074325
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    start := 0\n    end := 0\n    for start < len(myString)\
    \ {\n        end = strings.Index(myString[start:], substring)\n        if end\
    \ != -1 {\n            count += end - start\n            start = end + len(substring)\n\
    \        } else {\n            start = len(myString)\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n\
    \     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual:\
    \ candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual: candidate(\"\
    john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuplxyom8_test.go:14:15: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074318
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    for _, char := range myString {\n        if char\
    \ == substring {\n            count++\n        }\n    }\n    return count\n}\n\
    \nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n     { actual:\
    \ candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\"\
    , \"cac\"), expected: 4 },\n     { actual: candidate(\"john doe\", \"john\"),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprm1p4ezy_test.go:12:20: invalid operation: char == substring (mismatched
    types rune and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074318
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    start := 0\n    end := 0\n    for start < len(myString)\
    \ {\n        end = start\n        end += strings.Index(myString[start:], substring)\n\
    \        if end > start {\n            count += end - start\n        }\n     \
    \   start = end + len(substring)\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp5l_b71b_test.go:15:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074325
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    start := 0\n    end := 0\n    for start < len(myString)\
    \ {\n        end = strings.Index(myString[start:], substring)\n        if end\
    \ != -1 {\n            count += end - start\n            start = end + len(substring)\n\
    \        } else {\n            start = len(myString)\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n\
    \     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual:\
    \ candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual: candidate(\"\
    john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuplxyom8_test.go:14:15: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074318
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    start := 0\n    end := 0\n    for start < len(myString)\
    \ {\n        end = strings.Index(myString[start:], substring)\n        if end\
    \ != -1 {\n            count++\n            start = end + len(substring)\n   \
    \     } else {\n            start = len(myString)\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n\
    \     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual:\
    \ candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual: candidate(\"\
    john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_bgyvjgw_test.go:14:15: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074320
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    start := 0\n    end := 0\n    for start < len(myString)\
    \ {\n        end = strings.Index(myString[start:], substring)\n        if end\
    \ != -1 {\n            count++\n            start = end + len(substring)\n   \
    \     } else {\n            start = len(myString)\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n\
    \     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual:\
    \ candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual: candidate(\"\
    john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_bgyvjgw_test.go:14:15: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074320
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    result := 0\n    start := 0\n    end := 0\n    found := false\n \
    \   for start < len(myString) {\n        end = start + len(substring)\n      \
    \  if end > len(myString) {\n            break\n        }\n        if myString[start:end]\
    \ == substring {\n            found = true\n            result++\n        }\n\
    \        start = end + 1\n    }\n    if found {\n        return result\n    }\n\
    \    return 0\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n\
    \     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual:\
    \ candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual: candidate(\"\
    john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\n    --- FAIL: TestHow_Many_Times/test_num__2\
    \ (0.00s)\n        tmpmovicjvm_test.go:47: expected '%!s(int=4)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.014s\nFAIL\n"
  timestamp: 1660074325
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    start := 0\n    end := 0\n    found := false\n  \
    \  for start < len(myString) {\n        end = start\n        found = false\n \
    \       for end < len(myString) {\n            if myString[end] == substring[0]\
    \ {\n                if myString[end] == substring[1] {\n                    found\
    \ = true\n                    break\n                } else {\n              \
    \      end += 1\n                }\n            } else {\n                end\
    \ += 1\n            }\n        }\n        if found {\n            count += end\
    \ - start\n        }\n        start = end + 1\n    }\n    return count\n}\n\n\
    func TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n     { actual:\
    \ candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\"\
    , \"cac\"), expected: 4 },\n     { actual: candidate(\"john doe\", \"john\"),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\npanic: runtime error: index out of\
    \ range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range\
    \ [1] with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.how_many_times(...)\n\t/tmp/tmpknep2l5f_test.go:19\n\
    command-line-arguments_test.TestHow_Many_Times(0x0?)\n\t/tmp/tmpknep2l5f_test.go:45\
    \ +0x3a9\ntesting.tRunner(0xc0001964e0, 0x527f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074325
- exit_code: null
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    result := 0\n    start := 0\n    end := 0\n    for start < len(myString)\
    \ {\n        end = start\n        for end < len(myString) && myString[end] ==\
    \ substring[0] {\n            end += 1\n        }\n        if end > start {\n\
    \            result += end - start\n        }\n        start = end\n    }\n  \
    \  return result\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate :=\
    \ how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\", \"x\"\
    ), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n\
    \     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual:\
    \ candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074333
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    start := 0\n    end := 0\n    found := false\n  \
    \  for start < len(myString) {\n        end = start + len(substring)\n       \
    \ if end > len(myString) {\n            end = len(myString)\n        }\n     \
    \   if myString[start:end] == substring {\n            found = true\n        \
    \    count++\n        }\n        start = end + 1\n    }\n    if !found {\n   \
    \     return -1\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\n    --- FAIL: TestHow_Many_Times/test_num__0\
    \ (0.00s)\n        tmp86rid4e6_test.go:47: expected '%!s(int=0)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestHow_Many_Times/test_num__2 (0.00s)\n        tmp86rid4e6_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074325
- exit_code: null
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    start := 0\n    end := 0\n    for start < len(myString)\
    \ {\n        end = start\n        for end < len(myString) && myString[end] ==\
    \ substring[0] {\n            end += 1\n        }\n        if end > start {\n\
    \            count += end - start\n        }\n        start = end\n    }\n   \
    \ return count\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n\
    \     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual:\
    \ candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual: candidate(\"\
    john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074333
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    result := 0\n    start := 0\n    end := 0\n    for start < len(myString)\
    \ {\n        end = strings.Index(myString[start:], substring)\n        if end\
    \ != -1 {\n            result += end - start\n            start = end + len(substring)\n\
    \        } else {\n            result += len(substring)\n        }\n    }\n  \
    \  return result\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate :=\
    \ how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\", \"x\"\
    ), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n\
    \     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual:\
    \ candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsc9tn125_test.go:14:15: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074318
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    start := 0\n    end := 0\n    for start < len(myString)\
    \ {\n        end = strings.Index(myString[start:], substring)\n        if end\
    \ != -1 {\n            count += end - start\n            start = end + len(substring)\n\
    \        } else {\n            start = len(myString)\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n\
    \     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual:\
    \ candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual: candidate(\"\
    john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuplxyom8_test.go:14:15: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074318
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    for _, char := range myString {\n        if char\
    \ == substring {\n            count++\n        }\n    }\n    return count\n}\n\
    \nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n     { actual:\
    \ candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\"\
    , \"cac\"), expected: 4 },\n     { actual: candidate(\"john doe\", \"john\"),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprm1p4ezy_test.go:12:20: invalid operation: char == substring (mismatched
    types rune and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074318
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    result := 0\n    start := 0\n    end := 0\n    for start < len(myString)\
    \ {\n        end = strings.Index(myString[start:], substring)\n        if end\
    \ != -1 {\n            result += end - start\n            start = end + len(substring)\n\
    \        } else {\n            result += len(substring)\n        }\n    }\n  \
    \  return result\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate :=\
    \ how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\", \"x\"\
    ), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n\
    \     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual:\
    \ candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsc9tn125_test.go:14:15: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074318
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    result := 0\n    i := 0\n    for ; i < len(myString); i++ {\n   \
    \     if myString[i] == substring[0] {\n            if myString[i+1] == substring[1]\
    \ {\n                if myString[i+2] == substring[2] {\n                    result\
    \ += 3\n                    i += 3\n                } else {\n               \
    \     result += 2\n                    i += 2\n                }\n           \
    \ } else {\n                result += 1\n                i += 1\n            }\n\
    \        } else {\n            result += 1\n            i = 0\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate\
    \ := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\", \"x\"\
    ), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n\
    \     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual:\
    \ candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\npanic: runtime error: index out of\
    \ range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range\
    \ [1] with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.how_many_times(...)\n\t/tmp/tmpkksdzxmh_test.go:14\n\
    command-line-arguments_test.TestHow_Many_Times(0x0?)\n\t/tmp/tmpkksdzxmh_test.go:42\
    \ +0x429\ntesting.tRunner(0xc0001924e0, 0x527f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074325
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    result := 0\n    start := 0\n    end := 0\n    found := false\n \
    \   for start < len(myString) {\n        end = start\n        for end < len(myString)\
    \ && found == false {\n            if myString[end] == substring[0] {\n      \
    \          if end < len(myString) {\n                    if myString[end] == substring[1]\
    \ {\n                        found = true\n                    }\n           \
    \     }\n            }\n            end++\n        }\n        if found == true\
    \ {\n            result++\n        }\n        start = end\n    }\n    return result\n\
    }\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n\
    \     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual:\
    \ candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual: candidate(\"\
    john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\npanic: runtime error: index out of\
    \ range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range\
    \ [1] with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.how_many_times(...)\n\t/tmp/tmpw6efwz5j_test.go:19\n\
    command-line-arguments_test.TestHow_Many_Times(0x0?)\n\t/tmp/tmpw6efwz5j_test.go:42\
    \ +0x374\ntesting.tRunner(0xc0001a0340, 0x527f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.018s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    for _, s := range myString {\n        if s == substring\
    \ {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprnmnoosj_test.go:12:17: invalid operation: s == substring (mismatched
    types rune and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074318
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    start := 0\n    end := 0\n    for start < len(myString)\
    \ {\n        end = start + len(substring)\n        if end > len(myString) {\n\
    \            end = len(myString)\n        }\n        if myString[start:end] ==\
    \ substring {\n            count++\n        }\n        start = end + 1\n    }\n\
    \    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate :=\
    \ how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\", \"x\"\
    ), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n\
    \     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual:\
    \ candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\n    --- FAIL: TestHow_Many_Times/test_num__2\
    \ (0.00s)\n        tmpj33uv6v5_test.go:42: expected '%!s(int=4)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    start := 0\n    end := 0\n    found := false\n  \
    \  for start < len(myString) {\n        end = start + len(substring)\n       \
    \ if end > len(myString) {\n            break\n        }\n        if myString[start:end]\
    \ == substring {\n            found = true\n            count++\n        }\n \
    \       start = end + 1\n    }\n    if !found {\n        return -1\n    }\n  \
    \  return count\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate :=\
    \ how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\", \"x\"\
    ), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n\
    \     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual:\
    \ candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\n    --- FAIL: TestHow_Many_Times/test_num__0\
    \ (0.00s)\n        tmp_e2gxf0u_test.go:47: expected '%!s(int=0)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestHow_Many_Times/test_num__2 (0.00s)\n        tmp_e2gxf0u_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    for _, s := range myString {\n        if s == substring\
    \ {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprnmnoosj_test.go:12:17: invalid operation: s == substring (mismatched
    types rune and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074318
- exit_code: null
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    start := 0\n    end := 0\n    for start < len(myString)\
    \ {\n        end = start\n        for end < len(myString) && myString[end] ==\
    \ substring[0] {\n            end++\n        }\n        if end > start {\n   \
    \         count += end - start\n        }\n        start = end\n    }\n    return\
    \ count\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n\
    \     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual:\
    \ candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual: candidate(\"\
    john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074329
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    start := 0\n    end := 0\n    found := false\n  \
    \  for start < len(myString) {\n        end = start\n        for end < len(myString)\
    \ && found == false {\n            if myString[end] == substring[0] {\n      \
    \          if end < len(myString) {\n                    if myString[end] == substring[1]\
    \ {\n                        found = true\n                    }\n           \
    \         end++\n                } else {\n                    found = true\n\
    \                }\n            } else {\n                end++\n            }\n\
    \        }\n        if found == true {\n            count++\n            start\
    \ = end\n            found = false\n        }\n    }\n    return count\n}\n\n\
    func TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n     { actual:\
    \ candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\"\
    , \"cac\"), expected: 4 },\n     { actual: candidate(\"john doe\", \"john\"),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\npanic: runtime error: index out of\
    \ range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range\
    \ [1] with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.how_many_times({0x51db36?, 0x5d2fb0?}, {0x51d187?,\
    \ 0xc0000f8dd0?})\n\t/tmp/tmp6ghuz8ay_test.go:19 +0x94\ncommand-line-arguments_test.TestHow_Many_Times(0x0?)\n\
    \t/tmp/tmp6ghuz8ay_test.go:47 +0x7b\ntesting.tRunner(0xc0001a0340, 0x527f60)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    for _, char := range myString {\n        if char\
    \ == substring {\n            count++\n        }\n    }\n    return count\n}\n\
    \nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n     { actual:\
    \ candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\"\
    , \"cac\"), expected: 4 },\n     { actual: candidate(\"john doe\", \"john\"),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprm1p4ezy_test.go:12:20: invalid operation: char == substring (mismatched
    types rune and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074318
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    start := 0\n    end := 0\n    for start < len(myString)\
    \ {\n        end = start + len(substring)\n        if end > len(myString) {\n\
    \            break\n        }\n        if myString[start:end] == substring {\n\
    \            count++\n        }\n        start = end + 1\n    }\n    return count\n\
    }\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n\
    \     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual:\
    \ candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual: candidate(\"\
    john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\n    --- FAIL: TestHow_Many_Times/test_num__2\
    \ (0.00s)\n        tmpbcflzbmc_test.go:42: expected '%!s(int=4)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074320
- exit_code: null
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    result := 0\n    start := 0\n    end := 0\n    for start < len(myString)\
    \ {\n        end = start\n        for end < len(myString) && myString[end] ==\
    \ substring[0] {\n            end++\n        }\n        if end > start {\n   \
    \         result += end - start\n        }\n        start = end\n    }\n    return\
    \ result\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n\
    \     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual:\
    \ candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual: candidate(\"\
    john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074329
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    start := 0\n    end := 0\n    for start < len(myString)\
    \ {\n        end = strings.Index(myString[start:], substring)\n        if end\
    \ != -1 {\n            count += end - start\n            start = end + len(substring)\n\
    \        } else {\n            start = len(myString)\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n\
    \     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual:\
    \ candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual: candidate(\"\
    john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuplxyom8_test.go:14:15: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074318
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    for _, char := range myString {\n        if char\
    \ == substring {\n            count++\n        }\n    }\n    return count\n}\n\
    \nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n     { actual:\
    \ candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\"\
    , \"cac\"), expected: 4 },\n     { actual: candidate(\"john doe\", \"john\"),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprm1p4ezy_test.go:12:20: invalid operation: char == substring (mismatched
    types rune and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074318
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    result := 0\n    start := 0\n    end := 0\n    found := false\n \
    \   for start < len(myString) {\n        end = start\n        found = false\n\
    \        for end < len(myString) {\n            if myString[end] == substring[0]\
    \ {\n                if myString[end] == substring[1] {\n                    found\
    \ = true\n                    break\n                }\n            }\n      \
    \      end++\n        }\n        if found {\n            result += end - start\n\
    \        }\n        start = end + 1\n    }\n    return result\n}\n\nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\npanic: runtime error: index out of\
    \ range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range\
    \ [1] with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.how_many_times(...)\n\t/tmp/tmpe5y7hp58_test.go:19\n\
    command-line-arguments_test.TestHow_Many_Times(0x0?)\n\t/tmp/tmpe5y7hp58_test.go:42\
    \ +0x392\ntesting.tRunner(0xc0001a0340, 0x527f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    start := 0\n    end := 0\n    for start < len(myString)\
    \ {\n        end = strings.Index(myString[start:], substring)\n        if end\
    \ != -1 {\n            count += end - start\n            start = end + len(substring)\n\
    \        } else {\n            start = len(myString)\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n\
    \     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual:\
    \ candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual: candidate(\"\
    john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuplxyom8_test.go:14:15: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074318
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    for _, s := range myString {\n        if s == substring\
    \ {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprnmnoosj_test.go:12:17: invalid operation: s == substring (mismatched
    types rune and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074318
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    start := 0\n    end := 0\n    for start < len(myString)\
    \ {\n        end = strings.Index(myString[start:], substring)\n        if end\
    \ != -1 {\n            count++\n            start = end + len(substring)\n   \
    \     } else {\n            start = len(myString)\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n\
    \     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual:\
    \ candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual: candidate(\"\
    john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_bgyvjgw_test.go:14:15: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074320
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    result := 0\n    start := 0\n    end := 0\n    found := false\n \
    \   for start < len(myString) {\n        end = start\n        for end < len(myString)\
    \ {\n            if myString[end] == substring[0] {\n                end += 1\n\
    \                continue\n            }\n            if myString[end] == substring[1]\
    \ {\n                end += 1\n                continue\n            }\n     \
    \       if myString[end] == substring[2] {\n                end += 1\n       \
    \         continue\n            }\n            if myString[end] == substring[3]\
    \ {\n                end += 1\n                continue\n            }\n     \
    \       if myString[end] == substring[4] {\n                end += 1\n       \
    \         continue\n            }\n            if myString[end] == substring[5]\
    \ {\n                end += 1\n                continue\n            }\n     \
    \       if myString[end] == substring[6] {\n                end += 1\n       \
    \         continue\n            }\n            if myString[end] == substring[7]\
    \ {\n                end += 1\n                continue\n            }\n     \
    \       if myString[end] == substring[8] {\n                end += 1\n       \
    \         continue\n            }\n            if myString[end] == substring[9]\
    \ {\n                end += 1\n                continue\n            }\n     \
    \       if myString[end] == substring[10] {\n                end += 1\n      \
    \          continue\n            }\n            if myString[end] == substring[11]\
    \ {\n                end += 1\n                continue\n            }\n     \
    \       if myString[end] == substring[12] {\n                end += 1\n      \
    \          continue\n            }\n            if myString[end] == substring[13]\
    \ {\n                end += 1\n                continue\n            }\n     \
    \       if myString[end] == substring[14] {\n                end += 1\n      \
    \          continue\n            }\n            if myString[end] == substring[15]\
    \ {\n                end += 1\n                continue\n            }\n     \
    \       if myString[end] == substring[16] {\n                end += 1\n      \
    \          continue\n            }\n            if myString[end] == substring[17]\
    \ {\n                end += 1\n                continue\n            }\n     \
    \       if myString[end] == substring[18] {\n                end += 1\n      \
    \          continue\n            }\n            if myString[end] == substring[19]\
    \ {\n                end += 1\n                continue\n            }\n     \
    \       if myString[end] == substring[20] {\n                end += 1\n      \
    \          continue\n            }\n            if myString[end] == substring[21]\
    \ {\n                end += 1\n                continue\n            }\n     \
    \       if myString[end] == substring[22] {\n                end += 1\n      \
    \          continue\n            }\n            if myString[end] == substring[23]\
    \ {\n                end += 1\n                continue\n            }\n     \
    \       if myString[end] == substring[24] {\n                end += 1\n      \
    \          continue\n            }\n            if myString[end] == substring[25]\
    \ {\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n\
    \     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual:\
    \ candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual: candidate(\"\
    john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpdxx_agpr_test.go:119:6: expected ''('', found TestHow_Many_Times

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074322
- exit_code: null
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    start := 0\n    end := 0\n    found := false\n  \
    \  for start < len(myString) {\n        end = start\n        for end < len(myString)\
    \ && found == false {\n            if myString[end] == substring[0] {\n      \
    \          if end < len(myString) {\n                    end += 1\n          \
    \      } else {\n                    found = true\n                }\n       \
    \     } else {\n                end += 1\n            }\n        }\n        if\
    \ found == true {\n            count += end - start\n            start = end +\
    \ 1\n            found = false\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n     { actual:\
    \ candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\"\
    , \"cac\"), expected: 4 },\n     { actual: candidate(\"john doe\", \"john\"),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074340
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    start := 0\n    end := 0\n    for start < len(myString)\
    \ {\n        end = start + len(substring)\n        if end > len(myString) {\n\
    \            break\n        }\n        if myString[start:end] == substring {\n\
    \            count++\n            start = end + 1\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n\
    \     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual:\
    \ candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual: candidate(\"\
    john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\n    --- FAIL: TestHow_Many_Times/test_num__2\
    \ (0.00s)\n        tmp846dyfv5_test.go:42: expected '%!s(int=4)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    for _, char := range myString {\n        if char\
    \ == substring {\n            count++\n        }\n    }\n    return count\n}\n\
    \nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n     { actual:\
    \ candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\"\
    , \"cac\"), expected: 4 },\n     { actual: candidate(\"john doe\", \"john\"),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprm1p4ezy_test.go:12:20: invalid operation: char == substring (mismatched
    types rune and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074318
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    result := 0\n    start := 0\n    end := 0\n    for start < len(myString)\
    \ {\n        end = strings.Index(myString[start:], substring)\n        if end\
    \ != -1 {\n            result += end - start\n            start = end + len(substring)\n\
    \        } else {\n            result += len(substring)\n        }\n    }\n  \
    \  return result\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate :=\
    \ how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\", \"x\"\
    ), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n\
    \     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual:\
    \ candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsc9tn125_test.go:14:15: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074318
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    for _, s := range myString {\n        if s == substring\
    \ {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprnmnoosj_test.go:12:17: invalid operation: s == substring (mismatched
    types rune and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074318
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    start := 0\n    end := 0\n    for start < len(myString)\
    \ {\n        end = strings.Index(myString[start:], substring)\n        if end\
    \ != -1 {\n            count++\n            start = end + len(substring)\n   \
    \     } else {\n            start = len(myString)\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n\
    \     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual:\
    \ candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual: candidate(\"\
    john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_bgyvjgw_test.go:14:15: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074320
- exit_code: null
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    start := 0\n    end := 0\n    found := false\n  \
    \  for start < len(myString) {\n        end = start\n        for end < len(myString)\
    \ && found == false {\n            if myString[end] == substring[0] {\n      \
    \          end = end + 1\n                if end == len(myString) {\n        \
    \            found = true\n                }\n            } else {\n         \
    \       end = end + 1\n            }\n        }\n        if found == true {\n\
    \            count = count + 1\n            start = end + 1\n        }\n    }\n\
    \    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate :=\
    \ how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\", \"x\"\
    ), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n\
    \     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual:\
    \ candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074340
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    for _, char := range myString {\n        if char\
    \ == substring {\n            count++\n        }\n    }\n    return count\n}\n\
    \nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n     { actual:\
    \ candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\"\
    , \"cac\"), expected: 4 },\n     { actual: candidate(\"john doe\", \"john\"),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprm1p4ezy_test.go:12:20: invalid operation: char == substring (mismatched
    types rune and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074318
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    result := 0\n    start := 0\n    end := 0\n    for start < len(myString)\
    \ {\n        end = start + len(substring)\n        if end > len(myString) {\n\
    \            end = len(myString)\n        }\n        if myString[start:end] ==\
    \ substring {\n            result += 1\n        }\n        start = end\n    }\n\
    \    return result\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate\
    \ := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\", \"x\"\
    ), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n\
    \     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual:\
    \ candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\n    --- FAIL: TestHow_Many_Times/test_num__2\
    \ (0.00s)\n        tmpe_048dgv_test.go:42: expected '%!s(int=4)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.011s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    for _, char := range myString {\n        if char\
    \ == substring {\n            count++\n        }\n    }\n    return count\n}\n\
    \nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n     { actual:\
    \ candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\"\
    , \"cac\"), expected: 4 },\n     { actual: candidate(\"john doe\", \"john\"),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprm1p4ezy_test.go:12:20: invalid operation: char == substring (mismatched
    types rune and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074318
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    for _, char := range myString {\n        if char\
    \ == substring {\n            count++\n        }\n    }\n    return count\n}\n\
    \nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n     { actual:\
    \ candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\"\
    , \"cac\"), expected: 4 },\n     { actual: candidate(\"john doe\", \"john\"),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprm1p4ezy_test.go:12:20: invalid operation: char == substring (mismatched
    types rune and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074318
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    start := 0\n    end := 0\n    for start < len(myString)\
    \ {\n        end = strings.Index(myString[start:], substring)\n        if end\
    \ != -1 {\n            count += end - start\n        }\n        start = end +\
    \ len(substring)\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp7pqefse_test.go:14:15: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074318
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    start := 0\n    end := 0\n    for start < len(myString)\
    \ {\n        end = strings.Index(myString[start:], substring)\n        if end\
    \ != -1 {\n            count += end - start\n            start = end + len(substring)\n\
    \        } else {\n            start = len(myString)\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n\
    \     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual:\
    \ candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual: candidate(\"\
    john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuplxyom8_test.go:14:15: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074318
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    for _, s := range myString {\n        if s == substring\
    \ {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprnmnoosj_test.go:12:17: invalid operation: s == substring (mismatched
    types rune and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074318
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    for _, char := range myString {\n        if char\
    \ == substring {\n            count++\n        }\n    }\n    return count\n}\n\
    \nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n     { actual:\
    \ candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\"\
    , \"cac\"), expected: 4 },\n     { actual: candidate(\"john doe\", \"john\"),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprm1p4ezy_test.go:12:20: invalid operation: char == substring (mismatched
    types rune and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074318
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    start := 0\n    end := 0\n    for start < len(myString)\
    \ {\n        end = start\n        end += strings.Index(myString[start:], substring)\n\
    \        if end > start {\n            count++\n        }\n        start = end\
    \ + len(substring)\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzpchfwk5_test.go:15:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074318
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    for _, letter := range myString {\n        if letter\
    \ == substring {\n            count++\n        }\n    }\n    return count\n}\n\
    \nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n     { actual:\
    \ candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\"\
    , \"cac\"), expected: 4 },\n     { actual: candidate(\"john doe\", \"john\"),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpukxy5l40_test.go:12:22: invalid operation: letter == substring (mismatched
    types rune and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074318
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    result := 0\n    start := 0\n    end := 0\n    found := false\n \
    \   for start < len(myString) {\n        end = start + len(substring)\n      \
    \  if end > len(myString) {\n            break\n        }\n        if myString[start:end]\
    \ == substring {\n            found = true\n            break\n        }\n   \
    \     start = end + 1\n    }\n    if found {\n        result = 1\n    }\n    return\
    \ result\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n\
    \     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual:\
    \ candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual: candidate(\"\
    john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\n    --- FAIL: TestHow_Many_Times/test_num__1\
    \ (0.00s)\n        tmpy4xunh8h_test.go:47: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestHow_Many_Times/test_num__2 (0.00s)\n        tmpy4xunh8h_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074318
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    start := 0\n    end := 0\n    for start < len(myString)\
    \ {\n        end = strings.Index(myString[start:], substring)\n        if end\
    \ != -1 {\n            count++\n            start = end + len(substring)\n   \
    \     } else {\n            start = len(myString)\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n\
    \     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual:\
    \ candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual: candidate(\"\
    john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_bgyvjgw_test.go:14:15: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074320
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    result := 0\n    start := 0\n    end := 0\n    found := false\n \
    \   for start < len(myString) {\n        end = start\n        for end < len(myString)\
    \ && found == false {\n            if myString[end] == substring[0] {\n      \
    \          found = true\n            }\n            if myString[end] == substring[1]\
    \ {\n                found = true\n            }\n            if myString[end]\
    \ == substring[2] {\n                found = true\n            }\n           \
    \ if myString[end] == substring[3] {\n                found = true\n         \
    \   }\n            if myString[end] == substring[4] {\n                found =\
    \ true\n            }\n            if myString[end] == substring[5] {\n      \
    \          found = true\n            }\n            if myString[end] == substring[6]\
    \ {\n                found = true\n            }\n            if myString[end]\
    \ == substring[7] {\n                found = true\n            }\n           \
    \ if myString[end] == substring[8] {\n                found = true\n         \
    \   }\n            if myString[end] == substring[9] {\n                found =\
    \ true\n            }\n            if myString[end] == substring[10] {\n     \
    \           found = true\n            }\n            if myString[end] == substring[11]\
    \ {\n                found = true\n            }\n            if myString[end]\
    \ == substring[12] {\n                found = true\n            }\n          \
    \  if myString[end] == substring[13] {\n                found = true\n       \
    \     }\n            if myString[end] == substring[14] {\n                found\
    \ = true\n            }\n            if myString[end] == substring[15] {\n   \
    \             found = true\n            }\n            if myString[end] == substring[16]\
    \ {\n                found = true\n            }\n            if myString[end]\
    \ == substring[17] {\n                found = true\n            }\n          \
    \  if myString[end] == substring[18] {\n                found = true\n       \
    \     }\n            if myString[end] == substring[19] {\n                found\
    \ = true\n            }\n            if myString[end] == substring[20] {\n   \
    \             found = true\n            }\n            if myString[end] == substring[21]\
    \ {\n                found = true\n            }\n            if myString[end]\
    \ == substring[22] {\n                found = true\n            }\n          \
    \  if myString[end] == substring[23] {\n                found = true\n       \
    \     }\n            if myString[end] == substring[24] {\n                found\
    \ = true\n            }\n            if myString[end] == substring[25] {\n   \
    \             found = true\n            }\n            if myString[end] == substring[26]\
    \ {\n                found = true\n            }\n            if myString[end]\
    \ == substring[27] {\n                found = true\n            }\n          \
    \  if myString[end\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n\
    \     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual:\
    \ candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual: candidate(\"\
    john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbu0frsz8_test.go:101:28: expected '']'', found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074326
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    start := 0\n    end := 0\n    for start < len(myString)\
    \ {\n        end = strings.Index(myString[start:], substring)\n        if end\
    \ != -1 {\n            count += end - start\n            start = end + len(substring)\n\
    \        } else {\n            start = len(myString)\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n\
    \     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual:\
    \ candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual: candidate(\"\
    john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuplxyom8_test.go:14:15: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074318
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    start := 0\n    end := 0\n    found := false\n  \
    \  for start < len(myString) {\n        end = start + 1\n        for end < len(myString)\
    \ {\n            if myString[end] == substring[0] {\n                if myString[end]\
    \ == substring[1] {\n                    count++\n                    end = end\
    \ + 1\n                } else {\n                    end = end + 1\n         \
    \       }\n            } else {\n                end = end + 1\n            }\n\
    \        }\n        if myString[start] == substring[0] {\n            count++\n\
    \            start = start + 1\n        } else {\n            start = start +\
    \ 1\n        }\n    }\n    if found {\n        return count\n    } else {\n  \
    \      return 0\n    }\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate\
    \ := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\", \"x\"\
    ), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n\
    \     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual:\
    \ candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\npanic: runtime error: index out of\
    \ range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range\
    \ [1] with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.how_many_times({0x51db36?, 0x5d2fb0?}, {0x51d187?,\
    \ 0xc0000f8d00?})\n\t/tmp/tmpq5gj5e4a_test.go:18 +0x9d\ncommand-line-arguments_test.TestHow_Many_Times(0x0?)\n\
    \t/tmp/tmpq5gj5e4a_test.go:50 +0x7b\ntesting.tRunner(0xc0001924e0, 0x527f60)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    i := 0\n    for ; i < len(myString); i++ {\n    \
    \    if myString[i] == substring {\n            count++\n        }\n        if\
    \ myString[i] == substring[0] {\n            count++\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n\
    \     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual:\
    \ candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual: candidate(\"\
    john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk9clspm2_test.go:13:27: invalid operation: myString[i] == substring (mismatched
    types byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074326
- exit_code: null
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    start := 0\n    end := 0\n    for start < len(myString)\
    \ {\n        end = start\n        for end < len(myString) && myString[end] ==\
    \ substring[0] {\n            end++\n        }\n        if end > start {\n   \
    \         count += end - start\n        }\n        start = end\n    }\n    return\
    \ count\n}\n\nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n\
    \     { actual: candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual:\
    \ candidate(\"cacacacac\", \"cac\"), expected: 4 },\n     { actual: candidate(\"\
    john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074329
- exit_code: null
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    start := 0\n    end := 0\n    for start < len(myString)\
    \ {\n        end = start\n        end += len(substring)\n        if myString[start:end]\
    \ == substring {\n            count++\n        }\n    }\n    return count\n}\n\
    \nfunc TestHow_Many_Times(t *testing.T) {\n  candidate := how_many_times\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\", \"x\"), expected: 0 },\n     { actual:\
    \ candidate(\"xyxyxyx\", \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\"\
    , \"cac\"), expected: 4 },\n     { actual: candidate(\"john doe\", \"john\"),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074341
- exit_code: 1
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    start := 0\n    end := 0\n    found := false\n  \
    \  for start < len(myString) {\n        end = start + len(substring)\n       \
    \ if end > len(myString) {\n            end = len(myString)\n        }\n     \
    \   if myString[start:end] == substring {\n            found = true\n        \
    \    break\n        }\n        start = end + 1\n    }\n    if found {\n      \
    \  count++\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t *testing.T)\
    \ {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\", \"x\"), expected:\
    \ 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected: 4 },\n   \
    \  { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHow_Many_Times (0.00s)\n    --- FAIL: TestHow_Many_Times/test_num__1\
    \ (0.00s)\n        tmp835_7hat_test.go:47: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestHow_Many_Times/test_num__2 (0.00s)\n        tmp835_7hat_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074326
- exit_code: 2
  program: "package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nfunc how_many_times(myString string, substring string)\
    \ int {\n    count := 0\n    start := 0\n    end := 0\n    for start < len(myString)\
    \ {\n        end = start\n        end += strings.Index(myString[start:], substring)\n\
    \        if end > start {\n            count += end - start\n        }\n     \
    \   start = end + len(substring)\n    }\n    return count\n}\n\nfunc TestHow_Many_Times(t\
    \ *testing.T) {\n  candidate := how_many_times\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\", \"x\"), expected: 0 },\n     { actual: candidate(\"xyxyxyx\"\
    , \"x\"), expected: 4 },\n     { actual: candidate(\"cacacacac\", \"cac\"), expected:\
    \ 4 },\n     { actual: candidate(\"john doe\", \"john\"), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp5l_b71b_test.go:15:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074325
