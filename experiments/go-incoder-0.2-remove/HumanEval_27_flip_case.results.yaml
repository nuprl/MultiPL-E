language: go_test.go
name: HumanEval_27_flip_case
results:
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += string([]byte{char - 'a', char})\n        } else {\n  \
    \          result += string([]byte{char})\n        }\n    }\n    return result\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq4iqgwey_test.go:13:37: cannot use char - ''a'' (value of type rune) as
    type byte in array or slice literal

    /tmp/tmpq4iqgwey_test.go:13:49: cannot use char (variable of type rune) as type
    byte in array or slice literal

    /tmp/tmpq4iqgwey_test.go:15:37: cannot use char (variable of type rune) as type
    byte in array or slice literal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    var flippedString\
    \ string\n    for _, char := range myString {\n        if char >= 'a' && char\
    \ <= 'z' {\n            flippedString += string(char - 'a') + string(char - 'A')\n\
    \        } else {\n            flippedString += char\n        }\n    }\n    return\
    \ flippedString\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbwbti6l9_test.go:15:13: invalid operation: flippedString += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += char - 'a'\n        } else {\n            result += char\n\
    \        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7dmdnur8_test.go:13:13: invalid operation: result += char - ''a'' (mismatched
    types string and rune)

    /tmp/tmp7dmdnur8_test.go:15:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    var flippedString\
    \ string\n    for _, char := range myString {\n        if char >= 'a' && char\
    \ <= 'z' {\n            flippedString += string(char - 'a' + 'A')\n        } else\
    \ {\n            flippedString += char\n        }\n    }\n    return flippedString\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp59a5o1o5_test.go:15:13: invalid operation: flippedString += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    var newString string\n\
    \    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            newString += string(char - 'a' + 'A')\n        } else {\n       \
    \     newString += char\n        }\n    }\n    return newString\n}\n\nfunc TestFlip_Case(t\
    \ *testing.T) {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected:\
    \ \"hELLO!\" },\n     { actual: candidate(\"These violent delights have violent\
    \ ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw5vgdkxd_test.go:15:13: invalid operation: newString += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += string([]byte{char - 'a', char})\n        } else {\n  \
    \          result += string([]byte{char})\n        }\n    }\n    return result\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq4iqgwey_test.go:13:37: cannot use char - ''a'' (value of type rune) as
    type byte in array or slice literal

    /tmp/tmpq4iqgwey_test.go:13:49: cannot use char (variable of type rune) as type
    byte in array or slice literal

    /tmp/tmpq4iqgwey_test.go:15:37: cannot use char (variable of type rune) as type
    byte in array or slice literal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += string(char - 'a') + string(char - 'A')\n        } else\
    \ {\n            result += char\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"These violent delights\
    \ have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg4quy52n_test.go:15:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    var result string\n\
    \    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += string(char - 'a' + 'A')\n        } else {\n          \
    \  result += char\n        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t\
    \ *testing.T) {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected:\
    \ \"hELLO!\" },\n     { actual: candidate(\"These violent delights have violent\
    \ ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa6dkism3_test.go:15:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += char + ('A' - 'a')\n        } else {\n            result\
    \ += char\n        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpeh251rpe_test.go:13:13: invalid operation: result += char + (''A'' - ''a'')
    (mismatched types string and rune)

    /tmp/tmpeh251rpe_test.go:15:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += char - 'a'\n        } else {\n            result += char\n\
    \        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7dmdnur8_test.go:13:13: invalid operation: result += char - ''a'' (mismatched
    types string and rune)

    /tmp/tmp7dmdnur8_test.go:15:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    var newString string\n\
    \    for _, letter := range myString {\n        if letter == 'a' {\n         \
    \   newString += 'A'\n        } else if letter == 'b' {\n            newString\
    \ += 'B'\n        } else if letter == 'c' {\n            newString += 'C'\n  \
    \      } else if letter == 'd' {\n            newString += 'D'\n        } else\
    \ if letter == 'e' {\n            newString += 'E'\n        } else if letter ==\
    \ 'f' {\n            newString += 'F'\n        } else if letter == 'g' {\n   \
    \         newString += 'G'\n        } else if letter == 'h' {\n            newString\
    \ += 'H'\n        } else if letter == 'i' {\n            newString += 'I'\n  \
    \      } else if letter == 'j' {\n            newString += 'J'\n        } else\
    \ if letter == 'k' {\n            newString += 'K'\n        } else if letter ==\
    \ 'l' {\n            newString += 'L'\n        } else if letter == 'm' {\n   \
    \         newString += 'M'\n        } else if letter == 'n' {\n            newString\
    \ += 'N'\n        } else if letter == 'o' {\n            newString += 'O'\n  \
    \      } else if letter == 'p' {\n            newString += 'P'\n        } else\
    \ if letter == 'q' {\n            newString += 'Q'\n        } else if letter ==\
    \ 'r' {\n            newString += 'R'\n        } else if letter == 's' {\n   \
    \         newString += 'S'\n        } else if letter == 't' {\n            newString\
    \ += 'T'\n        } else if letter == 'u' {\n            newString += 'U'\n  \
    \      } else if letter == 'v' {\n            newString += 'V'\n        } else\
    \ if letter == 'w' {\n            newString += 'W'\n        } else if letter ==\
    \ 'x' {\n            newString += 'X'\n        } else if letter == 'y' {\n   \
    \         newString += 'Y'\n        } else if letter == 'z' {\n            newString\
    \ += 'Z'\n        }\n    }\n    return newString\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy3f25vx4_test.go:13:13: invalid operation: newString += ''A'' (mismatched
    types string and untyped rune)

    /tmp/tmpy3f25vx4_test.go:15:13: invalid operation: newString += ''B'' (mismatched
    types string and untyped rune)

    /tmp/tmpy3f25vx4_test.go:17:13: invalid operation: newString += ''C'' (mismatched
    types string and untyped rune)

    /tmp/tmpy3f25vx4_test.go:19:13: invalid operation: newString += ''D'' (mismatched
    types string and untyped rune)

    /tmp/tmpy3f25vx4_test.go:21:13: invalid operation: newString += ''E'' (mismatched
    types string and untyped rune)

    /tmp/tmpy3f25vx4_test.go:23:13: invalid operation: newString += ''F'' (mismatched
    types string and untyped rune)

    /tmp/tmpy3f25vx4_test.go:25:13: invalid operation: newString += ''G'' (mismatched
    types string and untyped rune)

    /tmp/tmpy3f25vx4_test.go:27:13: invalid operation: newString += ''H'' (mismatched
    types string and untyped rune)

    /tmp/tmpy3f25vx4_test.go:29:13: invalid operation: newString += ''I'' (mismatched
    types string and untyped rune)

    /tmp/tmpy3f25vx4_test.go:31:13: invalid operation: newString += ''J'' (mismatched
    types string and untyped rune)

    /tmp/tmpy3f25vx4_test.go:31:13: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += char - 'a'\n        } else {\n            result += char\n\
    \        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7dmdnur8_test.go:13:13: invalid operation: result += char - ''a'' (mismatched
    types string and rune)

    /tmp/tmp7dmdnur8_test.go:15:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += char - 'a' + 'A'\n        } else {\n            result\
    \ += char\n        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprrst4qkw_test.go:13:13: invalid operation: result += char - ''a'' + ''A''
    (mismatched types string and rune)

    /tmp/tmprrst4qkw_test.go:15:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += char - 'a'\n        } else {\n            result += char\n\
    \        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7dmdnur8_test.go:13:13: invalid operation: result += char - ''a'' (mismatched
    types string and rune)

    /tmp/tmp7dmdnur8_test.go:15:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    var result string\n\
    \    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += string(char - 'a') + string(char - 'A')\n        } else\
    \ {\n            result += char\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"These violent delights\
    \ have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx1m8g20k_test.go:15:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += char - 'a' + 'A'\n        } else {\n            result\
    \ += char\n        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprrst4qkw_test.go:13:13: invalid operation: result += char - ''a'' + ''A''
    (mismatched types string and rune)

    /tmp/tmprrst4qkw_test.go:15:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, letter := range myString {\n        if letter == 'a' {\n          \
    \  result += \"A\"\n        } else if letter == 'b' {\n            result += \"\
    B\"\n        } else if letter == 'c' {\n            result += \"C\"\n        }\
    \ else if letter == 'd' {\n            result += \"D\"\n        } else if letter\
    \ == 'e' {\n            result += \"E\"\n        } else if letter == 'f' {\n \
    \           result += \"F\"\n        } else if letter == 'g' {\n            result\
    \ += \"G\"\n        } else if letter == 'h' {\n            result += \"H\"\n \
    \       } else if letter == 'i' {\n            result += \"I\"\n        } else\
    \ if letter == 'j' {\n            result += \"J\"\n        } else if letter ==\
    \ 'k' {\n            result += \"K\"\n        } else if letter == 'l' {\n    \
    \        result += \"L\"\n        } else if letter == 'm' {\n            result\
    \ += \"M\"\n        } else if letter == 'n' {\n            result += \"N\"\n \
    \       } else if letter == 'o' {\n            result += \"O\"\n        } else\
    \ if letter == 'p' {\n            result += \"P\"\n        } else if letter ==\
    \ 'q' {\n            result += \"Q\"\n        } else if letter == 'r' {\n    \
    \        result += \"R\"\n        } else if letter == 's' {\n            result\
    \ += \"S\"\n        } else if letter == 't' {\n            result += \"T\"\n \
    \       } else if letter == 'u' {\n            result += \"U\"\n        } else\
    \ if letter == 'v' {\n            result += \"V\"\n        } else if letter ==\
    \ 'w' {\n            result += \"W\"\n        } else if letter == 'x' {\n    \
    \        result += \"X\"\n        } else if letter == 'y' {\n            result\
    \ += \"Y\"\n        } else if letter == 'z' {\n            result += \"Z\"\n \
    \       }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFlip_Case (0.00s)\n    --- FAIL: TestFlip_Case/test_num__1\
    \ (0.00s)\n        tmpng3pabvv_test.go:84: expected 'hELLO!', got 'ELLO'\n   \
    \ --- FAIL: TestFlip_Case/test_num__2 (0.00s)\n        tmpng3pabvv_test.go:84:\
    \ expected 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS', got 'HESEVIOLENTDELIGHTSHAVEVIOLENTENDS'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073376
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, letter := range myString {\n        if letter == letter.toUpper() {\n\
    \            result += letter.toLower()\n        } else {\n            result\
    \ += letter\n        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_740ng9a_test.go:12:29: letter.toUpper undefined (type rune has no field
    or method toUpper)

    /tmp/tmp_740ng9a_test.go:13:30: letter.toLower undefined (type rune has no field
    or method toLower)

    /tmp/tmp_740ng9a_test.go:15:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    var flippedString\
    \ string\n    for _, letter := range myString {\n        if letter == 'a' {\n\
    \            flippedString += 'A'\n        } else if letter == 'b' {\n       \
    \     flippedString += 'B'\n        } else if letter == 'c' {\n            flippedString\
    \ += 'C'\n        } else if letter == 'd' {\n            flippedString += 'D'\n\
    \        } else if letter == 'e' {\n            flippedString += 'E'\n       \
    \ } else if letter == 'f' {\n            flippedString += 'F'\n        } else\
    \ if letter == 'g' {\n            flippedString += 'G'\n        } else if letter\
    \ == 'h' {\n            flippedString += 'H'\n        } else if letter == 'i'\
    \ {\n            flippedString += 'I'\n        } else if letter == 'j' {\n   \
    \         flippedString += 'J'\n        } else if letter == 'k' {\n          \
    \  flippedString += 'K'\n        } else if letter == 'l' {\n            flippedString\
    \ += 'L'\n        } else if letter == 'm' {\n            flippedString += 'M'\n\
    \        } else if letter == 'n' {\n            flippedString += 'N'\n       \
    \ } else if letter == 'o' {\n            flippedString += 'O'\n        } else\
    \ if letter == 'p' {\n            flippedString += 'P'\n        } else if letter\
    \ == 'q' {\n            flippedString += 'Q'\n        } else if letter == 'r'\
    \ {\n            flippedString += 'R'\n        } else if letter == 's' {\n   \
    \         flippedString += 'S'\n        } else if letter == 't' {\n          \
    \  flippedString += 'T'\n        } else if letter == 'u' {\n            flippedString\
    \ += 'U'\n        } else if letter == 'v' {\n            flippedString += 'V'\n\
    \        } else if letter == 'w' {\n            flippedString += 'W'\n       \
    \ } else if letter == 'x' {\n            flippedString += 'X'\n        } else\
    \ if letter == 'y' {\n            flippedString += 'Y'\n        } else if letter\
    \ == 'z' {\n            flippedString += 'Z'\n        } else {\n            fmt.Println(\"\
    Error: invalid letter\")\n        }\n    }\n    return flippedString\n}\n\nfunc\
    \ TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"These violent delights\
    \ have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2ra27sge_test.go:13:13: invalid operation: flippedString += ''A'' (mismatched
    types string and untyped rune)

    /tmp/tmp2ra27sge_test.go:15:13: invalid operation: flippedString += ''B'' (mismatched
    types string and untyped rune)

    /tmp/tmp2ra27sge_test.go:17:13: invalid operation: flippedString += ''C'' (mismatched
    types string and untyped rune)

    /tmp/tmp2ra27sge_test.go:19:13: invalid operation: flippedString += ''D'' (mismatched
    types string and untyped rune)

    /tmp/tmp2ra27sge_test.go:21:13: invalid operation: flippedString += ''E'' (mismatched
    types string and untyped rune)

    /tmp/tmp2ra27sge_test.go:23:13: invalid operation: flippedString += ''F'' (mismatched
    types string and untyped rune)

    /tmp/tmp2ra27sge_test.go:25:13: invalid operation: flippedString += ''G'' (mismatched
    types string and untyped rune)

    /tmp/tmp2ra27sge_test.go:27:13: invalid operation: flippedString += ''H'' (mismatched
    types string and untyped rune)

    /tmp/tmp2ra27sge_test.go:29:13: invalid operation: flippedString += ''I'' (mismatched
    types string and untyped rune)

    /tmp/tmp2ra27sge_test.go:31:13: invalid operation: flippedString += ''J'' (mismatched
    types string and untyped rune)

    /tmp/tmp2ra27sge_test.go:31:13: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += char - 'a' + 'A'\n        } else {\n            result\
    \ += char\n        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprrst4qkw_test.go:13:13: invalid operation: result += char - ''a'' + ''A''
    (mismatched types string and rune)

    /tmp/tmprrst4qkw_test.go:15:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += string(char - 'a') + string(char - 'A')\n        } else\
    \ {\n            result += char\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"These violent delights\
    \ have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg4quy52n_test.go:15:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    var newString string\n\
    \    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            newString += string(char - 'a') + string(char - 'A')\n        } else\
    \ {\n            newString += char\n        }\n    }\n    return newString\n}\n\
    \nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"These violent delights\
    \ have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb2mzllk4_test.go:15:13: invalid operation: newString += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += char - 'a'\n        } else {\n            result += char\n\
    \        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7dmdnur8_test.go:13:13: invalid operation: result += char - ''a'' (mismatched
    types string and rune)

    /tmp/tmp7dmdnur8_test.go:15:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    var result string\n\
    \    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += string(char - 'a' + 'A')\n        } else {\n          \
    \  result += char\n        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t\
    \ *testing.T) {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected:\
    \ \"hELLO!\" },\n     { actual: candidate(\"These violent delights have violent\
    \ ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa6dkism3_test.go:15:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, letter := range myString {\n        if letter == letter.toUpper() {\n\
    \            result += letter.toLower()\n        } else {\n            result\
    \ += letter.toUpper()\n        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t\
    \ *testing.T) {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected:\
    \ \"hELLO!\" },\n     { actual: candidate(\"These violent delights have violent\
    \ ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptbq63e5c_test.go:12:29: letter.toUpper undefined (type rune has no field
    or method toUpper)

    /tmp/tmptbq63e5c_test.go:13:30: letter.toLower undefined (type rune has no field
    or method toLower)

    /tmp/tmptbq63e5c_test.go:15:30: letter.toUpper undefined (type rune has no field
    or method toUpper)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    var result string\n\
    \    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += char - 'a' + 'A'\n        } else {\n            result\
    \ += char\n        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmmxqlq0c_test.go:13:13: invalid operation: result += char - ''a'' + ''A''
    (mismatched types string and rune)

    /tmp/tmpmmxqlq0c_test.go:15:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, letter := range myString {\n        if letter == letter.toUpper() {\n\
    \            result += letter.toLower()\n        } else {\n            result\
    \ += letter.toUpper()\n        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t\
    \ *testing.T) {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected:\
    \ \"hELLO!\" },\n     { actual: candidate(\"These violent delights have violent\
    \ ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptbq63e5c_test.go:12:29: letter.toUpper undefined (type rune has no field
    or method toUpper)

    /tmp/tmptbq63e5c_test.go:13:30: letter.toLower undefined (type rune has no field
    or method toLower)

    /tmp/tmptbq63e5c_test.go:15:30: letter.toUpper undefined (type rune has no field
    or method toUpper)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += char - 'a' + 'A'\n        } else {\n            result\
    \ += char\n        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprrst4qkw_test.go:13:13: invalid operation: result += char - ''a'' + ''A''
    (mismatched types string and rune)

    /tmp/tmprrst4qkw_test.go:15:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += string(char - 'a') + string(char - 'A')\n        } else\
    \ {\n            result += char\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"These violent delights\
    \ have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg4quy52n_test.go:15:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, letter := range myString {\n        if letter == 'a' {\n          \
    \  result += \"A\"\n        } else if letter == 'b' {\n            result += \"\
    B\"\n        } else if letter == 'c' {\n            result += \"C\"\n        }\
    \ else if letter == 'd' {\n            result += \"D\"\n        } else if letter\
    \ == 'e' {\n            result += \"E\"\n        } else if letter == 'f' {\n \
    \           result += \"F\"\n        } else if letter == 'g' {\n            result\
    \ += \"G\"\n        } else if letter == 'h' {\n            result += \"H\"\n \
    \       } else if letter == 'i' {\n            result += \"I\"\n        } else\
    \ if letter == 'j' {\n            result += \"J\"\n        } else if letter ==\
    \ 'k' {\n            result += \"K\"\n        } else if letter == 'l' {\n    \
    \        result += \"L\"\n        } else if letter == 'm' {\n            result\
    \ += \"M\"\n        } else if letter == 'n' {\n            result += \"N\"\n \
    \       } else if letter == 'o' {\n            result += \"O\"\n        } else\
    \ if letter == 'p' {\n            result += \"P\"\n        } else if letter ==\
    \ 'q' {\n            result += \"Q\"\n        } else if letter == 'r' {\n    \
    \        result += \"R\"\n        } else if letter == 's' {\n            result\
    \ += \"S\"\n        } else if letter == 't' {\n            result += \"T\"\n \
    \       } else if letter == 'u' {\n            result += \"U\"\n        } else\
    \ if letter == 'v' {\n            result += \"V\"\n        } else if letter ==\
    \ 'w' {\n            result += \"W\"\n        } else if letter == 'x' {\n    \
    \        result += \"X\"\n        } else if letter == 'y' {\n            result\
    \ += \"Y\"\n        } else if letter == 'z' {\n            result += \"Z\"\n \
    \       }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFlip_Case (0.00s)\n    --- FAIL: TestFlip_Case/test_num__1\
    \ (0.00s)\n        tmpng3pabvv_test.go:84: expected 'hELLO!', got 'ELLO'\n   \
    \ --- FAIL: TestFlip_Case/test_num__2 (0.00s)\n        tmpng3pabvv_test.go:84:\
    \ expected 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS', got 'HESEVIOLENTDELIGHTSHAVEVIOLENTENDS'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073376
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += char - 'a' + 'A'\n        } else {\n            result\
    \ += char\n        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprrst4qkw_test.go:13:13: invalid operation: result += char - ''a'' + ''A''
    (mismatched types string and rune)

    /tmp/tmprrst4qkw_test.go:15:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += char + ('A' - 'a')\n        } else {\n            result\
    \ += char\n        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpeh251rpe_test.go:13:13: invalid operation: result += char + (''A'' - ''a'')
    (mismatched types string and rune)

    /tmp/tmpeh251rpe_test.go:15:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += string([]byte{char - 'a', char})\n        } else {\n  \
    \          result += string([]byte{char})\n        }\n    }\n    return result\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq4iqgwey_test.go:13:37: cannot use char - ''a'' (value of type rune) as
    type byte in array or slice literal

    /tmp/tmpq4iqgwey_test.go:13:49: cannot use char (variable of type rune) as type
    byte in array or slice literal

    /tmp/tmpq4iqgwey_test.go:15:37: cannot use char (variable of type rune) as type
    byte in array or slice literal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += string(char - 'a') + string(char - 'A')\n        } else\
    \ {\n            result += char\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"These violent delights\
    \ have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg4quy52n_test.go:15:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    var newString string\n\
    \    for _, letter := range myString {\n        if letter == 'a' {\n         \
    \   newString += 'A'\n        } else if letter == 'A' {\n            newString\
    \ += 'a'\n        } else {\n            newString += letter\n        }\n    }\n\
    \    return newString\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate :=\
    \ flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp38t75_q6_test.go:13:13: invalid operation: newString += ''A'' (mismatched
    types string and untyped rune)

    /tmp/tmp38t75_q6_test.go:15:13: invalid operation: newString += ''a'' (mismatched
    types string and untyped rune)

    /tmp/tmp38t75_q6_test.go:17:13: invalid operation: newString += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += char - 'a' + 'A'\n        } else {\n            result\
    \ += char\n        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprrst4qkw_test.go:13:13: invalid operation: result += char - ''a'' + ''A''
    (mismatched types string and rune)

    /tmp/tmprrst4qkw_test.go:15:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += char - 'a' + 'A'\n        } else {\n            result\
    \ += char\n        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprrst4qkw_test.go:13:13: invalid operation: result += char - ''a'' + ''A''
    (mismatched types string and rune)

    /tmp/tmprrst4qkw_test.go:15:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += string([]byte{char - 'a', char})\n        } else {\n  \
    \          result += string([]byte{char})\n        }\n    }\n    return result\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq4iqgwey_test.go:13:37: cannot use char - ''a'' (value of type rune) as
    type byte in array or slice literal

    /tmp/tmpq4iqgwey_test.go:13:49: cannot use char (variable of type rune) as type
    byte in array or slice literal

    /tmp/tmpq4iqgwey_test.go:15:37: cannot use char (variable of type rune) as type
    byte in array or slice literal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    var result string\n\
    \    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result = result + string(char - 'a') + string(char + 'A' - 'a')\n\
    \        } else {\n            result = result + string(char)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate :=\
    \ flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFlip_Case (0.00s)\n    --- FAIL: TestFlip_Case/test_num__1\
    \ (0.00s)\n        tmpsmktk8ue_test.go:36: expected 'hELLO!', got 'H\x04E\vL\v\
    L\x0EO!'\n    --- FAIL: TestFlip_Case/test_num__2 (0.00s)\n        tmpsmktk8ue_test.go:36:\
    \ expected 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS', got 'T\aH\x04E\x12S\x04\
    E \x15V\bI\x0EO\vL\x04E\nN\x13T \x03D\x04E\vL\bI\x06G\aH\x13T\x12S \aH\0A\x15\
    V\x04E \x15V\bI\x0EO\vL\x04E\nN\x13T \x04E\nN\x03D\x12S'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073376
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += char + ('A' - 'a')\n        } else {\n            result\
    \ += char\n        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpeh251rpe_test.go:13:13: invalid operation: result += char + (''A'' - ''a'')
    (mismatched types string and rune)

    /tmp/tmpeh251rpe_test.go:15:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    var result string\n\
    \    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += string(char - 'a') + string(char - 'A')\n        } else\
    \ {\n            result += char\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"These violent delights\
    \ have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx1m8g20k_test.go:15:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += string([]byte{char - 'a', char})\n        } else {\n  \
    \          result += string([]byte{char})\n        }\n    }\n    return result\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq4iqgwey_test.go:13:37: cannot use char - ''a'' (value of type rune) as
    type byte in array or slice literal

    /tmp/tmpq4iqgwey_test.go:13:49: cannot use char (variable of type rune) as type
    byte in array or slice literal

    /tmp/tmpq4iqgwey_test.go:15:37: cannot use char (variable of type rune) as type
    byte in array or slice literal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += char - 'a' + 'A'\n        } else {\n            result\
    \ += char\n        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprrst4qkw_test.go:13:13: invalid operation: result += char - ''a'' + ''A''
    (mismatched types string and rune)

    /tmp/tmprrst4qkw_test.go:15:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += char - 'a'\n        } else {\n            result += char\n\
    \        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7dmdnur8_test.go:13:13: invalid operation: result += char - ''a'' (mismatched
    types string and rune)

    /tmp/tmp7dmdnur8_test.go:15:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += string([]byte{char - 'a', char})\n        } else {\n  \
    \          result += string([]byte{char})\n        }\n    }\n    return result\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq4iqgwey_test.go:13:37: cannot use char - ''a'' (value of type rune) as
    type byte in array or slice literal

    /tmp/tmpq4iqgwey_test.go:13:49: cannot use char (variable of type rune) as type
    byte in array or slice literal

    /tmp/tmpq4iqgwey_test.go:15:37: cannot use char (variable of type rune) as type
    byte in array or slice literal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += char - 'a' + 'A'\n        } else {\n            result\
    \ += char\n        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprrst4qkw_test.go:13:13: invalid operation: result += char - ''a'' + ''A''
    (mismatched types string and rune)

    /tmp/tmprrst4qkw_test.go:15:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += char - 'a'\n        } else {\n            result += char\n\
    \        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7dmdnur8_test.go:13:13: invalid operation: result += char - ''a'' (mismatched
    types string and rune)

    /tmp/tmp7dmdnur8_test.go:15:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += char - 'a'\n        } else {\n            result += char\n\
    \        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7dmdnur8_test.go:13:13: invalid operation: result += char - ''a'' (mismatched
    types string and rune)

    /tmp/tmp7dmdnur8_test.go:15:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    var result string\n\
    \    for _, char := range myString {\n        switch char {\n        case 'a':\n\
    \            result += \"A\"\n        case 'b':\n            result += \"B\"\n\
    \        case 'c':\n            result += \"C\"\n        case 'd':\n         \
    \   result += \"D\"\n        case 'e':\n            result += \"E\"\n        case\
    \ 'f':\n            result += \"F\"\n        case 'g':\n            result +=\
    \ \"G\"\n        case 'h':\n            result += \"H\"\n        case 'i':\n \
    \           result += \"I\"\n        case 'j':\n            result += \"J\"\n\
    \        case 'k':\n            result += \"K\"\n        case 'l':\n         \
    \   result += \"L\"\n        case 'm':\n            result += \"M\"\n        case\
    \ 'n':\n            result += \"N\"\n        case 'o':\n            result +=\
    \ \"O\"\n        case 'p':\n            result += \"P\"\n        case 'q':\n \
    \           result += \"Q\"\n        case 'r':\n            result += \"R\"\n\
    \        case 's':\n            result += \"S\"\n        case 't':\n         \
    \   result += \"T\"\n        case 'u':\n            result += \"U\"\n        case\
    \ 'v':\n            result += \"V\"\n        case 'w':\n            result +=\
    \ \"W\"\n        case 'x':\n            result += \"X\"\n        case 'y':\n \
    \           result += \"Y\"\n        case 'z':\n            result += \"Z\"\n\
    \        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFlip_Case (0.00s)\n    --- FAIL: TestFlip_Case/test_num__1\
    \ (0.00s)\n        tmpgdeek2n0_test.go:85: expected 'hELLO!', got 'ELLO'\n   \
    \ --- FAIL: TestFlip_Case/test_num__2 (0.00s)\n        tmpgdeek2n0_test.go:85:\
    \ expected 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS', got 'HESEVIOLENTDELIGHTSHAVEVIOLENTENDS'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073376
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    var result string\n\
    \    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += string(char - 'a') + string(char - 'A')\n        } else\
    \ {\n            result += char\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"These violent delights\
    \ have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx1m8g20k_test.go:15:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += char - 'a'\n        } else {\n            result += char\n\
    \        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7dmdnur8_test.go:13:13: invalid operation: result += char - ''a'' (mismatched
    types string and rune)

    /tmp/tmp7dmdnur8_test.go:15:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, letter := range myString {\n        if letter == 'a' {\n          \
    \  result += \"A\"\n        } else if letter == 'b' {\n            result += \"\
    B\"\n        } else if letter == 'c' {\n            result += \"C\"\n        }\
    \ else if letter == 'd' {\n            result += \"D\"\n        } else if letter\
    \ == 'e' {\n            result += \"E\"\n        } else if letter == 'f' {\n \
    \           result += \"F\"\n        } else if letter == 'g' {\n            result\
    \ += \"G\"\n        } else if letter == 'h' {\n            result += \"H\"\n \
    \       } else if letter == 'i' {\n            result += \"I\"\n        } else\
    \ if letter == 'j' {\n            result += \"J\"\n        } else if letter ==\
    \ 'k' {\n            result += \"K\"\n        } else if letter == 'l' {\n    \
    \        result += \"L\"\n        } else if letter == 'm' {\n            result\
    \ += \"M\"\n        } else if letter == 'n' {\n            result += \"N\"\n \
    \       } else if letter == 'o' {\n            result += \"O\"\n        } else\
    \ if letter == 'p' {\n            result += \"P\"\n        } else if letter ==\
    \ 'q' {\n            result += \"Q\"\n        } else if letter == 'r' {\n    \
    \        result += \"R\"\n        } else if letter == 's' {\n            result\
    \ += \"S\"\n        } else if letter == 't' {\n            result += \"T\"\n \
    \       } else if letter == 'u' {\n            result += \"U\"\n        } else\
    \ if letter == 'v' {\n            result += \"V\"\n        } else if letter ==\
    \ 'w' {\n            result += \"W\"\n        } else if letter == 'x' {\n    \
    \        result += \"X\"\n        } else if letter == 'y' {\n            result\
    \ += \"Y\"\n        } else if letter == 'z' {\n            result += \"Z\"\n \
    \       }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFlip_Case (0.00s)\n    --- FAIL: TestFlip_Case/test_num__1\
    \ (0.00s)\n        tmpng3pabvv_test.go:84: expected 'hELLO!', got 'ELLO'\n   \
    \ --- FAIL: TestFlip_Case/test_num__2 (0.00s)\n        tmpng3pabvv_test.go:84:\
    \ expected 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS', got 'HESEVIOLENTDELIGHTSHAVEVIOLENTENDS'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073376
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += string([]byte{char - 'a' + 'A'})\n        } else {\n  \
    \          result += string([]byte{char})\n        }\n    }\n    return result\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfw7muu8e_test.go:13:37: cannot use char - ''a'' + ''A'' (value of type
    rune) as type byte in array or slice literal

    /tmp/tmpfw7muu8e_test.go:15:37: cannot use char (variable of type rune) as type
    byte in array or slice literal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, letter := range myString {\n        if letter == letter.toUpper() {\n\
    \            result += letter.toLower()\n        } else {\n            result\
    \ += letter.toUpper()\n        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t\
    \ *testing.T) {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected:\
    \ \"hELLO!\" },\n     { actual: candidate(\"These violent delights have violent\
    \ ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptbq63e5c_test.go:12:29: letter.toUpper undefined (type rune has no field
    or method toUpper)

    /tmp/tmptbq63e5c_test.go:13:30: letter.toLower undefined (type rune has no field
    or method toLower)

    /tmp/tmptbq63e5c_test.go:15:30: letter.toUpper undefined (type rune has no field
    or method toUpper)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += char - 'a'\n        } else {\n            result += char\n\
    \        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7dmdnur8_test.go:13:13: invalid operation: result += char - ''a'' (mismatched
    types string and rune)

    /tmp/tmp7dmdnur8_test.go:15:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, letter := range myString {\n        if letter == letter.toUpper() {\n\
    \            result += letter.toLower()\n        } else {\n            result\
    \ += letter.toUpper()\n        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t\
    \ *testing.T) {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected:\
    \ \"hELLO!\" },\n     { actual: candidate(\"These violent delights have violent\
    \ ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptbq63e5c_test.go:12:29: letter.toUpper undefined (type rune has no field
    or method toUpper)

    /tmp/tmptbq63e5c_test.go:13:30: letter.toLower undefined (type rune has no field
    or method toLower)

    /tmp/tmptbq63e5c_test.go:15:30: letter.toUpper undefined (type rune has no field
    or method toUpper)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += char - 'a'\n        } else {\n            result += char\n\
    \        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7dmdnur8_test.go:13:13: invalid operation: result += char - ''a'' (mismatched
    types string and rune)

    /tmp/tmp7dmdnur8_test.go:15:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    var result string\n\
    \    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += string(char - 'a') + string(char - 'A')\n        } else\
    \ {\n            result += char\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"These violent delights\
    \ have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx1m8g20k_test.go:15:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += string([]byte{byte(char)})\n        } else {\n        \
    \    result += string([]byte{byte(char) - 32})\n        }\n    }\n    return result\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFlip_Case (0.00s)\n    --- FAIL: TestFlip_Case/test_num__1\
    \ (0.00s)\n        tmp0an71x4l_test.go:36: expected 'hELLO!', got '(ello\x01'\n\
    \    --- FAIL: TestFlip_Case/test_num__2 (0.00s)\n        tmp0an71x4l_test.go:36:\
    \ expected 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS', got '4hese\0violent\0delights\0\
    have\0violent\0ends'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073376
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += char - 'a'\n        } else {\n            result += char\n\
    \        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7dmdnur8_test.go:13:13: invalid operation: result += char - ''a'' (mismatched
    types string and rune)

    /tmp/tmp7dmdnur8_test.go:15:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += string([]byte{char - 'a', char})\n        } else {\n  \
    \          result += string([]byte{char})\n        }\n    }\n    return result\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq4iqgwey_test.go:13:37: cannot use char - ''a'' (value of type rune) as
    type byte in array or slice literal

    /tmp/tmpq4iqgwey_test.go:13:49: cannot use char (variable of type rune) as type
    byte in array or slice literal

    /tmp/tmpq4iqgwey_test.go:15:37: cannot use char (variable of type rune) as type
    byte in array or slice literal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += string([]byte{char - 'a', char})\n        } else {\n  \
    \          result += string([]byte{char})\n        }\n    }\n    return result\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq4iqgwey_test.go:13:37: cannot use char - ''a'' (value of type rune) as
    type byte in array or slice literal

    /tmp/tmpq4iqgwey_test.go:13:49: cannot use char (variable of type rune) as type
    byte in array or slice literal

    /tmp/tmpq4iqgwey_test.go:15:37: cannot use char (variable of type rune) as type
    byte in array or slice literal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += char + ('A' - 'a')\n        } else {\n            result\
    \ += char\n        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpeh251rpe_test.go:13:13: invalid operation: result += char + (''A'' - ''a'')
    (mismatched types string and rune)

    /tmp/tmpeh251rpe_test.go:15:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += char - 'a'\n        } else {\n            result += char\n\
    \        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7dmdnur8_test.go:13:13: invalid operation: result += char - ''a'' (mismatched
    types string and rune)

    /tmp/tmp7dmdnur8_test.go:15:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += string([]byte{char - 'a', char})\n        } else {\n  \
    \          result += string([]byte{char})\n        }\n    }\n    return result\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq4iqgwey_test.go:13:37: cannot use char - ''a'' (value of type rune) as
    type byte in array or slice literal

    /tmp/tmpq4iqgwey_test.go:13:49: cannot use char (variable of type rune) as type
    byte in array or slice literal

    /tmp/tmpq4iqgwey_test.go:15:37: cannot use char (variable of type rune) as type
    byte in array or slice literal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    var result string\n\
    \    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += string(char - 'a' + 'A')\n        } else {\n          \
    \  result += char\n        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t\
    \ *testing.T) {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected:\
    \ \"hELLO!\" },\n     { actual: candidate(\"These violent delights have violent\
    \ ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa6dkism3_test.go:15:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += string([]byte{char - 'a', char})\n        } else {\n  \
    \          result += string([]byte{char})\n        }\n    }\n    return result\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq4iqgwey_test.go:13:37: cannot use char - ''a'' (value of type rune) as
    type byte in array or slice literal

    /tmp/tmpq4iqgwey_test.go:13:49: cannot use char (variable of type rune) as type
    byte in array or slice literal

    /tmp/tmpq4iqgwey_test.go:15:37: cannot use char (variable of type rune) as type
    byte in array or slice literal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += char + ('A' - 'a')\n        } else {\n            result\
    \ += char\n        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpeh251rpe_test.go:13:13: invalid operation: result += char + (''A'' - ''a'')
    (mismatched types string and rune)

    /tmp/tmpeh251rpe_test.go:15:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += string([]byte{char - 'a', char})\n        } else {\n  \
    \          result += string([]byte{char})\n        }\n    }\n    return result\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq4iqgwey_test.go:13:37: cannot use char - ''a'' (value of type rune) as
    type byte in array or slice literal

    /tmp/tmpq4iqgwey_test.go:13:49: cannot use char (variable of type rune) as type
    byte in array or slice literal

    /tmp/tmpq4iqgwey_test.go:15:37: cannot use char (variable of type rune) as type
    byte in array or slice literal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += char - 'a' + 'A'\n        } else {\n            result\
    \ += char\n        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprrst4qkw_test.go:13:13: invalid operation: result += char - ''a'' + ''A''
    (mismatched types string and rune)

    /tmp/tmprrst4qkw_test.go:15:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += string([]byte{char - 'a', char})\n        } else {\n  \
    \          result += string([]byte{char})\n        }\n    }\n    return result\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq4iqgwey_test.go:13:37: cannot use char - ''a'' (value of type rune) as
    type byte in array or slice literal

    /tmp/tmpq4iqgwey_test.go:13:49: cannot use char (variable of type rune) as type
    byte in array or slice literal

    /tmp/tmpq4iqgwey_test.go:15:37: cannot use char (variable of type rune) as type
    byte in array or slice literal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    var result string\n\
    \    for _, char := range myString {\n        switch char {\n        case 'a':\n\
    \            result = 'A'\n        case 'b':\n            result = 'B'\n     \
    \   case 'c':\n            result = 'C'\n        case 'd':\n            result\
    \ = 'D'\n        case 'e':\n            result = 'E'\n        case 'f':\n    \
    \        result = 'F'\n        case 'g':\n            result = 'G'\n        case\
    \ 'h':\n            result = 'H'\n        case 'i':\n            result = 'I'\n\
    \        case 'j':\n            result = 'J'\n        case 'k':\n            result\
    \ = 'K'\n        case 'l':\n            result = 'L'\n        case 'm':\n    \
    \        result = 'M'\n        case 'n':\n            result = 'N'\n        case\
    \ 'o':\n            result = 'O'\n        case 'p':\n            result = 'P'\n\
    \        case 'q':\n            result = 'Q'\n        case 'r':\n            result\
    \ = 'R'\n        case 's':\n            result = 'S'\n        case 't':\n    \
    \        result = 'T'\n        case 'u':\n            result = 'U'\n        case\
    \ 'v':\n            result = 'V'\n        case 'w':\n            result = 'W'\n\
    \        case 'x':\n            result = 'X'\n        case 'y':\n            result\
    \ = 'Y'\n        case 'z':\n            result = 'Z'\n        default:\n     \
    \       result = char\n        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t\
    \ *testing.T) {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected:\
    \ \"hELLO!\" },\n     { actual: candidate(\"These violent delights have violent\
    \ ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpplmyy4b5_test.go:14:22: cannot use ''A'' (untyped rune constant 65) as
    string value in assignment

    /tmp/tmpplmyy4b5_test.go:16:22: cannot use ''B'' (untyped rune constant 66) as
    string value in assignment

    /tmp/tmpplmyy4b5_test.go:18:22: cannot use ''C'' (untyped rune constant 67) as
    string value in assignment

    /tmp/tmpplmyy4b5_test.go:20:22: cannot use ''D'' (untyped rune constant 68) as
    string value in assignment

    /tmp/tmpplmyy4b5_test.go:22:22: cannot use ''E'' (untyped rune constant 69) as
    string value in assignment

    /tmp/tmpplmyy4b5_test.go:24:22: cannot use ''F'' (untyped rune constant 70) as
    string value in assignment

    /tmp/tmpplmyy4b5_test.go:26:22: cannot use ''G'' (untyped rune constant 71) as
    string value in assignment

    /tmp/tmpplmyy4b5_test.go:28:22: cannot use ''H'' (untyped rune constant 72) as
    string value in assignment

    /tmp/tmpplmyy4b5_test.go:30:22: cannot use ''I'' (untyped rune constant 73) as
    string value in assignment

    /tmp/tmpplmyy4b5_test.go:32:22: cannot use ''J'' (untyped rune constant 74) as
    string value in assignment

    /tmp/tmpplmyy4b5_test.go:32:22: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += char + ('A' - 'a')\n        } else {\n            result\
    \ += char\n        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpeh251rpe_test.go:13:13: invalid operation: result += char + (''A'' - ''a'')
    (mismatched types string and rune)

    /tmp/tmpeh251rpe_test.go:15:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += string([]byte{char - 'a', char})\n        } else {\n  \
    \          result += string([]byte{char})\n        }\n    }\n    return result\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq4iqgwey_test.go:13:37: cannot use char - ''a'' (value of type rune) as
    type byte in array or slice literal

    /tmp/tmpq4iqgwey_test.go:13:49: cannot use char (variable of type rune) as type
    byte in array or slice literal

    /tmp/tmpq4iqgwey_test.go:15:37: cannot use char (variable of type rune) as type
    byte in array or slice literal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    var result string\n\
    \    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += char - 'a' + 'A'\n        } else {\n            result\
    \ += char\n        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmmxqlq0c_test.go:13:13: invalid operation: result += char - ''a'' + ''A''
    (mismatched types string and rune)

    /tmp/tmpmmxqlq0c_test.go:15:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += char - 'a'\n        } else {\n            result += char\n\
    \        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7dmdnur8_test.go:13:13: invalid operation: result += char - ''a'' (mismatched
    types string and rune)

    /tmp/tmp7dmdnur8_test.go:15:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    var newString string\n\
    \    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            newString += string(char - 'a') + string(char - 'A')\n        } else\
    \ {\n            newString += char\n        }\n    }\n    return newString\n}\n\
    \nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"These violent delights\
    \ have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb2mzllk4_test.go:15:13: invalid operation: newString += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += char - 'a'\n        } else {\n            result += char\n\
    \        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7dmdnur8_test.go:13:13: invalid operation: result += char - ''a'' (mismatched
    types string and rune)

    /tmp/tmp7dmdnur8_test.go:15:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    var result string\n\
    \    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += char - 'a'\n        } else {\n            result += char\n\
    \        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp356x2z4n_test.go:13:13: invalid operation: result += char - ''a'' (mismatched
    types string and rune)

    /tmp/tmp356x2z4n_test.go:15:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073376
- exit_code: 1
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, letter := range myString {\n        if letter == 'a' {\n          \
    \  letter = 'A'\n        }\n        if letter == 'A' {\n            letter = 'a'\n\
    \        }\n        if letter == '-' {\n            letter = '_'\n        }\n\
    \        if letter == '_' {\n            letter = '-'\n        }\n        if letter\
    \ == '.' {\n            letter = '_'\n        }\n        if letter == '_' {\n\
    \            letter = '.'\n        }\n        if letter == '/' {\n           \
    \ letter = '_'\n        }\n        if letter == '_' {\n            letter = '/'\n\
    \        }\n        if letter == '\\\\' {\n            letter = '_'\n        }\n\
    \        if letter == '_' {\n            letter = '\\\\'\n        }\n        if\
    \ letter == '?' {\n            letter = '_'\n        }\n        if letter == '_'\
    \ {\n            letter = '?'\n        }\n        if letter == '!' {\n       \
    \     letter = '_'\n        }\n        if letter == '_' {\n            letter\
    \ = '!'\n        }\n        if letter == '@' {\n            letter = '_'\n   \
    \     }\n        if letter == '_' {\n            letter = '@'\n        }\n   \
    \     if letter == '#' {\n            letter = '_'\n        }\n        if letter\
    \ == '_' {\n            letter = '#'\n        }\n        if letter == '$' {\n\
    \            letter = '_'\n        }\n        if letter == '_' {\n           \
    \ letter = '$'\n        }\n        if letter == '%' {\n            letter = '_'\n\
    \        }\n        if letter == '_' {\n            letter = '%'\n        }\n\
    \        if letter == '^' {\n            letter = '_'\n        }\n        if letter\
    \ == '_' {\n            letter = '^'\n        }\n        if letter == '&' {\n\
    \            letter = '_'\n        }\n        if letter == '_' {\n           \
    \ letter = '&'\n        }\n        if letter == '*' {\n            letter = '_'\n\
    \        }\n        if letter == '_' {\n            letter = '*'\n        }\n\
    \        if letter == '(' {\n            letter = '_'\n        }\n        if letter\
    \ == '_' {\n            letter = '('\n        }\n        if letter == ')' {\n\
    \            letter = '_'\n        }\n        if letter == '_' {\n           \
    \ letter = ')'\n        }\n        if letter == '+' {\n            letter = '_'\n\
    \        }\n        if letter == '_' {\n            letter = '+'\n        }\n\
    \        if letter == '=' {\n            letter = '_'\n        }\n        if letter\
    \ == '\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpzwdy7kw6_test.go:117:22: rune literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073376
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, letter := range myString {\n        if letter == 'a' {\n          \
    \  result += \"A\"\n        } else if letter == 'b' {\n            result += \"\
    B\"\n        } else if letter == 'c' {\n            result += \"C\"\n        }\
    \ else if letter == 'd' {\n            result += \"D\"\n        } else if letter\
    \ == 'e' {\n            result += \"E\"\n        } else if letter == 'f' {\n \
    \           result += \"F\"\n        } else if letter == 'g' {\n            result\
    \ += \"G\"\n        } else if letter == 'h' {\n            result += \"H\"\n \
    \       } else if letter == 'i' {\n            result += \"I\"\n        } else\
    \ if letter == 'j' {\n            result += \"J\"\n        } else if letter ==\
    \ 'k' {\n            result += \"K\"\n        } else if letter == 'l' {\n    \
    \        result += \"L\"\n        } else if letter == 'm' {\n            result\
    \ += \"M\"\n        } else if letter == 'n' {\n            result += \"N\"\n \
    \       } else if letter == 'o' {\n            result += \"O\"\n        } else\
    \ if letter == 'p' {\n            result += \"P\"\n        } else if letter ==\
    \ 'q' {\n            result += \"Q\"\n        } else if letter == 'r' {\n    \
    \        result += \"R\"\n        } else if letter == 's' {\n            result\
    \ += \"S\"\n        } else if letter == 't' {\n            result += \"T\"\n \
    \       } else if letter == 'u' {\n            result += \"U\"\n        } else\
    \ if letter == 'v' {\n            result += \"V\"\n        } else if letter ==\
    \ 'w' {\n            result += \"W\"\n        } else if letter == 'x' {\n    \
    \        result += \"X\"\n        } else if letter == 'y' {\n            result\
    \ += \"Y\"\n        } else if letter == 'z' {\n            result += \"Z\"\n \
    \       } else {\n            result += letter\n        }\n    }\n    return result\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7m_p3a_k_test.go:65:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073376
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    var newString string\n\
    \    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            newString += string(char - 'a') + string(char - 'A')\n        } else\
    \ {\n            newString += char\n        }\n    }\n    return newString\n}\n\
    \nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"These violent delights\
    \ have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb2mzllk4_test.go:15:13: invalid operation: newString += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    var result string\n\
    \    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += string(char - 'a' + 'A')\n        } else {\n          \
    \  result += char\n        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t\
    \ *testing.T) {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected:\
    \ \"hELLO!\" },\n     { actual: candidate(\"These violent delights have violent\
    \ ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa6dkism3_test.go:15:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += string([]byte{char - 'a', char})\n        } else {\n  \
    \          result += string([]byte{char})\n        }\n    }\n    return result\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq4iqgwey_test.go:13:37: cannot use char - ''a'' (value of type rune) as
    type byte in array or slice literal

    /tmp/tmpq4iqgwey_test.go:13:49: cannot use char (variable of type rune) as type
    byte in array or slice literal

    /tmp/tmpq4iqgwey_test.go:15:37: cannot use char (variable of type rune) as type
    byte in array or slice literal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += string([]byte{char - 'a', char})\n        } else {\n  \
    \          result += string([]byte{char})\n        }\n    }\n    return result\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq4iqgwey_test.go:13:37: cannot use char - ''a'' (value of type rune) as
    type byte in array or slice literal

    /tmp/tmpq4iqgwey_test.go:13:49: cannot use char (variable of type rune) as type
    byte in array or slice literal

    /tmp/tmpq4iqgwey_test.go:15:37: cannot use char (variable of type rune) as type
    byte in array or slice literal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += char - 'a' + 'A'\n        } else {\n            result\
    \ += char\n        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprrst4qkw_test.go:13:13: invalid operation: result += char - ''a'' + ''A''
    (mismatched types string and rune)

    /tmp/tmprrst4qkw_test.go:15:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    var myStringLower\
    \ string\n    var myStringUpper string\n    var myStringUpperLower string\n\n\
    \    myStringLower = strings.ToLower(myString)\n    myStringUpper = strings.ToUpper(myString)\n\
    \    myStringUpperLower = strings.ToUpper(myStringLower)\n\n    return myStringUpperLower\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2fe7v8c5_test.go:14:21: undefined: strings

    /tmp/tmp2fe7v8c5_test.go:15:21: undefined: strings

    /tmp/tmp2fe7v8c5_test.go:16:26: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073376
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    var newString string\n\
    \    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            newString += string(char - 'a' + 'A')\n        } else {\n       \
    \     newString += char\n        }\n    }\n    return newString\n}\n\nfunc TestFlip_Case(t\
    \ *testing.T) {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected:\
    \ \"hELLO!\" },\n     { actual: candidate(\"These violent delights have violent\
    \ ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw5vgdkxd_test.go:15:13: invalid operation: newString += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += char - 'a'\n        } else {\n            result += char\n\
    \        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7dmdnur8_test.go:13:13: invalid operation: result += char - ''a'' (mismatched
    types string and rune)

    /tmp/tmp7dmdnur8_test.go:15:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += char - 'a'\n        } else {\n            result += char\n\
    \        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7dmdnur8_test.go:13:13: invalid operation: result += char - ''a'' (mismatched
    types string and rune)

    /tmp/tmp7dmdnur8_test.go:15:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += string(char - 'a') + string(char - 'A')\n        } else\
    \ {\n            result += char\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"These violent delights\
    \ have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg4quy52n_test.go:15:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += char - 'a'\n        } else {\n            result += char\n\
    \        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7dmdnur8_test.go:13:13: invalid operation: result += char - ''a'' (mismatched
    types string and rune)

    /tmp/tmp7dmdnur8_test.go:15:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    var result string\n\
    \    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += string(char - 'a' + 'A')\n        } else {\n          \
    \  result += char\n        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t\
    \ *testing.T) {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected:\
    \ \"hELLO!\" },\n     { actual: candidate(\"These violent delights have violent\
    \ ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa6dkism3_test.go:15:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += char + ('A' - 'a')\n        } else {\n            result\
    \ += char\n        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpeh251rpe_test.go:13:13: invalid operation: result += char + (''A'' - ''a'')
    (mismatched types string and rune)

    /tmp/tmpeh251rpe_test.go:15:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    var newString string\n\
    \    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            newString += string(char - 'a' + 'A')\n        } else {\n       \
    \     newString += string(char)\n        }\n    }\n    return newString\n}\n\n\
    func TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"These violent delights\
    \ have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFlip_Case (0.00s)\n    --- FAIL: TestFlip_Case/test_num__1\
    \ (0.00s)\n        tmpjjktubq3_test.go:36: expected 'hELLO!', got 'HELLO!'\n \
    \   --- FAIL: TestFlip_Case/test_num__2 (0.00s)\n        tmpjjktubq3_test.go:36:\
    \ expected 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS', got 'THESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073377
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += char - 'a'\n        } else {\n            result += char\n\
    \        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7dmdnur8_test.go:13:13: invalid operation: result += char - ''a'' (mismatched
    types string and rune)

    /tmp/tmp7dmdnur8_test.go:15:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, letter := range myString {\n        if letter == 'a' {\n          \
    \  result += \"A\"\n        } else if letter == 'b' {\n            result += \"\
    B\"\n        } else if letter == 'c' {\n            result += \"C\"\n        }\
    \ else if letter == 'd' {\n            result += \"D\"\n        } else if letter\
    \ == 'e' {\n            result += \"E\"\n        } else if letter == 'f' {\n \
    \           result += \"F\"\n        } else if letter == 'g' {\n            result\
    \ += \"G\"\n        } else if letter == 'h' {\n            result += \"H\"\n \
    \       } else if letter == 'i' {\n            result += \"I\"\n        } else\
    \ if letter == 'j' {\n            result += \"J\"\n        } else if letter ==\
    \ 'k' {\n            result += \"K\"\n        } else if letter == 'l' {\n    \
    \        result += \"L\"\n        } else if letter == 'm' {\n            result\
    \ += \"M\"\n        } else if letter == 'n' {\n            result += \"N\"\n \
    \       } else if letter == 'o' {\n            result += \"O\"\n        } else\
    \ if letter == 'p' {\n            result += \"P\"\n        } else if letter ==\
    \ 'q' {\n            result += \"Q\"\n        } else if letter == 'r' {\n    \
    \        result += \"R\"\n        } else if letter == 's' {\n            result\
    \ += \"S\"\n        } else if letter == 't' {\n            result += \"T\"\n \
    \       } else if letter == 'u' {\n            result += \"U\"\n        } else\
    \ if letter == 'v' {\n            result += \"V\"\n        } else if letter ==\
    \ 'w' {\n            result += \"W\"\n        } else if letter == 'x' {\n    \
    \        result += \"X\"\n        } else if letter == 'y' {\n            result\
    \ += \"Y\"\n        } else if letter == 'z' {\n            result += \"Z\"\n \
    \       } else {\n            result += letter\n        }\n    }\n    return result\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7m_p3a_k_test.go:65:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073376
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, letter := range myString {\n        if letter == ' ' {\n          \
    \  result += \" \"\n        } else {\n            result += string([]byte{letter,\
    \ unicode.ToLower(letter)})\n        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t\
    \ *testing.T) {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected:\
    \ \"hELLO!\" },\n     { actual: candidate(\"These violent delights have violent\
    \ ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbrqpxb62_test.go:15:37: cannot use letter (variable of type rune) as type
    byte in array or slice literal

    /tmp/tmpbrqpxb62_test.go:15:45: undefined: unicode

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073376
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += string(char - 'a') + string(char - 'A')\n        } else\
    \ {\n            result += char\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"These violent delights\
    \ have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg4quy52n_test.go:15:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    var result string\n\
    \    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += string(char - 'a') + string(char - 'A')\n        } else\
    \ {\n            result += char\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"These violent delights\
    \ have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx1m8g20k_test.go:15:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += char - 'a'\n        } else {\n            result += char\n\
    \        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7dmdnur8_test.go:13:13: invalid operation: result += char - ''a'' (mismatched
    types string and rune)

    /tmp/tmp7dmdnur8_test.go:15:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += char - 'a'\n        } else {\n            result += char\n\
    \        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7dmdnur8_test.go:13:13: invalid operation: result += char - ''a'' (mismatched
    types string and rune)

    /tmp/tmp7dmdnur8_test.go:15:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += string([]byte{byte(char)})\n        } else {\n        \
    \    result += string([]byte{byte(char) - 32})\n        }\n    }\n    return result\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFlip_Case (0.00s)\n    --- FAIL: TestFlip_Case/test_num__1\
    \ (0.00s)\n        tmp0an71x4l_test.go:36: expected 'hELLO!', got '(ello\x01'\n\
    \    --- FAIL: TestFlip_Case/test_num__2 (0.00s)\n        tmp0an71x4l_test.go:36:\
    \ expected 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS', got '4hese\0violent\0delights\0\
    have\0violent\0ends'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073376
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    var result string\n\
    \    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += string(char - 'a' + 'A')\n        } else {\n          \
    \  result += char\n        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t\
    \ *testing.T) {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected:\
    \ \"hELLO!\" },\n     { actual: candidate(\"These violent delights have violent\
    \ ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa6dkism3_test.go:15:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, letter := range myString {\n        if letter == 'a' {\n          \
    \  result += \"A\"\n        } else if letter == 'b' {\n            result += \"\
    B\"\n        } else if letter == 'c' {\n            result += \"C\"\n        }\
    \ else if letter == 'd' {\n            result += \"D\"\n        } else if letter\
    \ == 'e' {\n            result += \"E\"\n        } else if letter == 'f' {\n \
    \           result += \"F\"\n        } else if letter == 'g' {\n            result\
    \ += \"G\"\n        } else if letter == 'h' {\n            result += \"H\"\n \
    \       } else if letter == 'i' {\n            result += \"I\"\n        } else\
    \ if letter == 'j' {\n            result += \"J\"\n        } else if letter ==\
    \ 'k' {\n            result += \"K\"\n        } else if letter == 'l' {\n    \
    \        result += \"L\"\n        } else if letter == 'm' {\n            result\
    \ += \"M\"\n        } else if letter == 'n' {\n            result += \"N\"\n \
    \       } else if letter == 'o' {\n            result += \"O\"\n        } else\
    \ if letter == 'p' {\n            result += \"P\"\n        } else if letter ==\
    \ 'q' {\n            result += \"Q\"\n        } else if letter == 'r' {\n    \
    \        result += \"R\"\n        } else if letter == 's' {\n            result\
    \ += \"S\"\n        } else if letter == 't' {\n            result += \"T\"\n \
    \       } else if letter == 'u' {\n            result += \"U\"\n        } else\
    \ if letter == 'v' {\n            result += \"V\"\n        } else if letter ==\
    \ 'w' {\n            result += \"W\"\n        } else if letter == 'x' {\n    \
    \        result += \"X\"\n        } else if letter == 'y' {\n            result\
    \ += \"Y\"\n        } else if letter == 'z' {\n            result += \"Z\"\n \
    \       } else {\n            result += letter\n        }\n    }\n    return result\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7m_p3a_k_test.go:65:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073376
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += string([]byte{char - 'a', char})\n        } else {\n  \
    \          result += string([]byte{char})\n        }\n    }\n    return result\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq4iqgwey_test.go:13:37: cannot use char - ''a'' (value of type rune) as
    type byte in array or slice literal

    /tmp/tmpq4iqgwey_test.go:13:49: cannot use char (variable of type rune) as type
    byte in array or slice literal

    /tmp/tmpq4iqgwey_test.go:15:37: cannot use char (variable of type rune) as type
    byte in array or slice literal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    var result string\n\
    \    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result = result + string(char - 'a') + string(char - 'A')\n     \
    \   } else {\n            result = result + char\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx9h_rkgx_test.go:15:22: invalid operation: result + char (mismatched types
    string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073376
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    var result string\n\
    \    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result = result + string(char - 'a') + string(char - 'A')\n     \
    \   } else {\n            result = result + char\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx9h_rkgx_test.go:15:22: invalid operation: result + char (mismatched types
    string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073376
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    var result string\n\
    \    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += string(char - 'a' + 'A')\n        } else {\n          \
    \  result += char\n        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t\
    \ *testing.T) {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected:\
    \ \"hELLO!\" },\n     { actual: candidate(\"These violent delights have violent\
    \ ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa6dkism3_test.go:15:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += string([]byte{char - 'a', char})\n        } else {\n  \
    \          result += string([]byte{char})\n        }\n    }\n    return result\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq4iqgwey_test.go:13:37: cannot use char - ''a'' (value of type rune) as
    type byte in array or slice literal

    /tmp/tmpq4iqgwey_test.go:13:49: cannot use char (variable of type rune) as type
    byte in array or slice literal

    /tmp/tmpq4iqgwey_test.go:15:37: cannot use char (variable of type rune) as type
    byte in array or slice literal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += string([]byte{byte(char)})\n        } else {\n        \
    \    result += string([]byte{byte(char) - 32})\n        }\n    }\n    return result\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFlip_Case (0.00s)\n    --- FAIL: TestFlip_Case/test_num__1\
    \ (0.00s)\n        tmp0an71x4l_test.go:36: expected 'hELLO!', got '(ello\x01'\n\
    \    --- FAIL: TestFlip_Case/test_num__2 (0.00s)\n        tmp0an71x4l_test.go:36:\
    \ expected 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS', got '4hese\0violent\0delights\0\
    have\0violent\0ends'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073376
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += char - 'a'\n        } else {\n            result += char\n\
    \        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7dmdnur8_test.go:13:13: invalid operation: result += char - ''a'' (mismatched
    types string and rune)

    /tmp/tmp7dmdnur8_test.go:15:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += char + ('A' - 'a')\n        } else {\n            result\
    \ += char\n        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpeh251rpe_test.go:13:13: invalid operation: result += char + (''A'' - ''a'')
    (mismatched types string and rune)

    /tmp/tmpeh251rpe_test.go:15:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, letter := range myString {\n        if letter == letter.toUpper() {\n\
    \            result += letter.toLower()\n        } else {\n            result\
    \ += letter\n        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_740ng9a_test.go:12:29: letter.toUpper undefined (type rune has no field
    or method toUpper)

    /tmp/tmp_740ng9a_test.go:13:30: letter.toLower undefined (type rune has no field
    or method toLower)

    /tmp/tmp_740ng9a_test.go:15:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    var newString string\n\
    \    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            newString += string(char - 'a' + 'A')\n        } else {\n       \
    \     newString += string(char)\n        }\n    }\n    return newString\n}\n\n\
    func TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"These violent delights\
    \ have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFlip_Case (0.00s)\n    --- FAIL: TestFlip_Case/test_num__1\
    \ (0.00s)\n        tmpjjktubq3_test.go:36: expected 'hELLO!', got 'HELLO!'\n \
    \   --- FAIL: TestFlip_Case/test_num__2 (0.00s)\n        tmpjjktubq3_test.go:36:\
    \ expected 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS', got 'THESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073377
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    var result string\n\
    \    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += string(char - 'a') + string(char - 'A')\n        } else\
    \ {\n            result += char\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"These violent delights\
    \ have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx1m8g20k_test.go:15:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, letter := range myString {\n        if letter == 'a' {\n          \
    \  result += \"A\"\n        } else if letter == 'b' {\n            result += \"\
    B\"\n        } else if letter == 'c' {\n            result += \"C\"\n        }\
    \ else if letter == 'd' {\n            result += \"D\"\n        } else if letter\
    \ == 'e' {\n            result += \"E\"\n        } else if letter == 'f' {\n \
    \           result += \"F\"\n        } else if letter == 'g' {\n            result\
    \ += \"G\"\n        } else if letter == 'h' {\n            result += \"H\"\n \
    \       } else if letter == 'i' {\n            result += \"I\"\n        } else\
    \ if letter == 'j' {\n            result += \"J\"\n        } else if letter ==\
    \ 'k' {\n            result += \"K\"\n        } else if letter == 'l' {\n    \
    \        result += \"L\"\n        } else if letter == 'm' {\n            result\
    \ += \"M\"\n        } else if letter == 'n' {\n            result += \"N\"\n \
    \       } else if letter == 'o' {\n            result += \"O\"\n        } else\
    \ if letter == 'p' {\n            result += \"P\"\n        } else if letter ==\
    \ 'q' {\n            result += \"Q\"\n        } else if letter == 'r' {\n    \
    \        result += \"R\"\n        } else if letter == 's' {\n            result\
    \ += \"S\"\n        } else if letter == 't' {\n            result += \"T\"\n \
    \       } else if letter == 'u' {\n            result += \"U\"\n        } else\
    \ if letter == 'v' {\n            result += \"V\"\n        } else if letter ==\
    \ 'w' {\n            result += \"W\"\n        } else if letter == 'x' {\n    \
    \        result += \"X\"\n        } else if letter == 'y' {\n            result\
    \ += \"Y\"\n        } else if letter == 'z' {\n            result += \"Z\"\n \
    \       } else {\n            result += letter\n        }\n    }\n    return result\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7m_p3a_k_test.go:65:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073376
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += char - 'a'\n        } else {\n            result += char\n\
    \        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7dmdnur8_test.go:13:13: invalid operation: result += char - ''a'' (mismatched
    types string and rune)

    /tmp/tmp7dmdnur8_test.go:15:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    var newString string\n\
    \    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            newString += string(char - 'a') + string(char - 'A')\n        } else\
    \ {\n            newString += char\n        }\n    }\n    return newString\n}\n\
    \nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"These violent delights\
    \ have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb2mzllk4_test.go:15:13: invalid operation: newString += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += char - 'a' + 'A'\n        } else {\n            result\
    \ += char\n        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprrst4qkw_test.go:13:13: invalid operation: result += char - ''a'' + ''A''
    (mismatched types string and rune)

    /tmp/tmprrst4qkw_test.go:15:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += char - 'a' + 'A'\n        } else {\n            result\
    \ += char\n        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprrst4qkw_test.go:13:13: invalid operation: result += char - ''a'' + ''A''
    (mismatched types string and rune)

    /tmp/tmprrst4qkw_test.go:15:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += char - 'a' + 'A'\n        } else {\n            result\
    \ += char\n        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprrst4qkw_test.go:13:13: invalid operation: result += char - ''a'' + ''A''
    (mismatched types string and rune)

    /tmp/tmprrst4qkw_test.go:15:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += string(char - 'a') + string(char - 'A')\n        } else\
    \ {\n            result += char\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"These violent delights\
    \ have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg4quy52n_test.go:15:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    var result string\n\
    \    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += string(char - 'a' + 'A')\n        } else {\n          \
    \  result += char\n        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t\
    \ *testing.T) {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected:\
    \ \"hELLO!\" },\n     { actual: candidate(\"These violent delights have violent\
    \ ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa6dkism3_test.go:15:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    var newString string\n\
    \    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            newString += string(char - 'a' + 'A')\n        } else {\n       \
    \     newString += char\n        }\n    }\n    return newString\n}\n\nfunc TestFlip_Case(t\
    \ *testing.T) {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected:\
    \ \"hELLO!\" },\n     { actual: candidate(\"These violent delights have violent\
    \ ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw5vgdkxd_test.go:15:13: invalid operation: newString += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += string(char - 'a') + string(char - 'A')\n        } else\
    \ {\n            result += char\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"These violent delights\
    \ have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg4quy52n_test.go:15:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += char - 'a'\n        } else {\n            result += char\n\
    \        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7dmdnur8_test.go:13:13: invalid operation: result += char - ''a'' (mismatched
    types string and rune)

    /tmp/tmp7dmdnur8_test.go:15:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, letter := range myString {\n        if letter == letter.toUpper() {\n\
    \            result += letter.toLower()\n        } else {\n            result\
    \ += letter\n        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_740ng9a_test.go:12:29: letter.toUpper undefined (type rune has no field
    or method toUpper)

    /tmp/tmp_740ng9a_test.go:13:30: letter.toLower undefined (type rune has no field
    or method toLower)

    /tmp/tmp_740ng9a_test.go:15:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += char - 'a'\n        } else {\n            result += char\n\
    \        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7dmdnur8_test.go:13:13: invalid operation: result += char - ''a'' (mismatched
    types string and rune)

    /tmp/tmp7dmdnur8_test.go:15:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += string([]byte{char - 'a', char})\n        } else {\n  \
    \          result += string([]byte{char})\n        }\n    }\n    return result\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq4iqgwey_test.go:13:37: cannot use char - ''a'' (value of type rune) as
    type byte in array or slice literal

    /tmp/tmpq4iqgwey_test.go:13:49: cannot use char (variable of type rune) as type
    byte in array or slice literal

    /tmp/tmpq4iqgwey_test.go:15:37: cannot use char (variable of type rune) as type
    byte in array or slice literal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += string(char - 'a') + string(char - 'A')\n        } else\
    \ {\n            result += char\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"These violent delights\
    \ have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg4quy52n_test.go:15:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += string([]byte{char - 'a', char})\n        } else {\n  \
    \          result += string([]byte{char})\n        }\n    }\n    return result\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq4iqgwey_test.go:13:37: cannot use char - ''a'' (value of type rune) as
    type byte in array or slice literal

    /tmp/tmpq4iqgwey_test.go:13:49: cannot use char (variable of type rune) as type
    byte in array or slice literal

    /tmp/tmpq4iqgwey_test.go:15:37: cannot use char (variable of type rune) as type
    byte in array or slice literal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += char - 'a' + 'A'\n        } else {\n            result\
    \ += char\n        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprrst4qkw_test.go:13:13: invalid operation: result += char - ''a'' + ''A''
    (mismatched types string and rune)

    /tmp/tmprrst4qkw_test.go:15:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += string([]byte{char - 'a', char})\n        } else {\n  \
    \          result += string([]byte{char})\n        }\n    }\n    return result\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq4iqgwey_test.go:13:37: cannot use char - ''a'' (value of type rune) as
    type byte in array or slice literal

    /tmp/tmpq4iqgwey_test.go:13:49: cannot use char (variable of type rune) as type
    byte in array or slice literal

    /tmp/tmpq4iqgwey_test.go:15:37: cannot use char (variable of type rune) as type
    byte in array or slice literal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += char - 'a' + 'A'\n        } else {\n            result\
    \ += char\n        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprrst4qkw_test.go:13:13: invalid operation: result += char - ''a'' + ''A''
    (mismatched types string and rune)

    /tmp/tmprrst4qkw_test.go:15:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    var result string\n\
    \    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += string(char - 'a') + string(char - 'A')\n        } else\
    \ {\n            result += char\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"These violent delights\
    \ have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx1m8g20k_test.go:15:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += char + ('A' - 'a')\n        } else {\n            result\
    \ += char\n        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpeh251rpe_test.go:13:13: invalid operation: result += char + (''A'' - ''a'')
    (mismatched types string and rune)

    /tmp/tmpeh251rpe_test.go:15:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += char - 'a' + 'A'\n        } else {\n            result\
    \ += char\n        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprrst4qkw_test.go:13:13: invalid operation: result += char - ''a'' + ''A''
    (mismatched types string and rune)

    /tmp/tmprrst4qkw_test.go:15:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += string([]byte{char - 'a', char})\n        } else {\n  \
    \          result += string([]byte{char})\n        }\n    }\n    return result\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq4iqgwey_test.go:13:37: cannot use char - ''a'' (value of type rune) as
    type byte in array or slice literal

    /tmp/tmpq4iqgwey_test.go:13:49: cannot use char (variable of type rune) as type
    byte in array or slice literal

    /tmp/tmpq4iqgwey_test.go:15:37: cannot use char (variable of type rune) as type
    byte in array or slice literal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += char - 'a'\n        } else {\n            result += char\n\
    \        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7dmdnur8_test.go:13:13: invalid operation: result += char - ''a'' (mismatched
    types string and rune)

    /tmp/tmp7dmdnur8_test.go:15:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += string([]byte{char - 'a', char})\n        } else {\n  \
    \          result += string([]byte{char})\n        }\n    }\n    return result\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq4iqgwey_test.go:13:37: cannot use char - ''a'' (value of type rune) as
    type byte in array or slice literal

    /tmp/tmpq4iqgwey_test.go:13:49: cannot use char (variable of type rune) as type
    byte in array or slice literal

    /tmp/tmpq4iqgwey_test.go:15:37: cannot use char (variable of type rune) as type
    byte in array or slice literal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += string([]byte{char - 'a', char})\n        } else {\n  \
    \          result += string([]byte{char})\n        }\n    }\n    return result\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq4iqgwey_test.go:13:37: cannot use char - ''a'' (value of type rune) as
    type byte in array or slice literal

    /tmp/tmpq4iqgwey_test.go:13:49: cannot use char (variable of type rune) as type
    byte in array or slice literal

    /tmp/tmpq4iqgwey_test.go:15:37: cannot use char (variable of type rune) as type
    byte in array or slice literal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += char - 'a'\n        } else {\n            result += char\n\
    \        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7dmdnur8_test.go:13:13: invalid operation: result += char - ''a'' (mismatched
    types string and rune)

    /tmp/tmp7dmdnur8_test.go:15:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    var newString string\n\
    \    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            newString += string(char - 'a' + 'A')\n        } else {\n       \
    \     newString += char\n        }\n    }\n    return newString\n}\n\nfunc TestFlip_Case(t\
    \ *testing.T) {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected:\
    \ \"hELLO!\" },\n     { actual: candidate(\"These violent delights have violent\
    \ ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw5vgdkxd_test.go:15:13: invalid operation: newString += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    var result string\n\
    \    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += string(char - 'a' + 'A')\n        } else {\n          \
    \  result += char\n        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t\
    \ *testing.T) {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected:\
    \ \"hELLO!\" },\n     { actual: candidate(\"These violent delights have violent\
    \ ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa6dkism3_test.go:15:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, letter := range myString {\n        if letter == 'a' {\n          \
    \  result += \"A\"\n        } else if letter == 'b' {\n            result += \"\
    B\"\n        } else if letter == 'c' {\n            result += \"C\"\n        }\
    \ else if letter == 'd' {\n            result += \"D\"\n        } else if letter\
    \ == 'e' {\n            result += \"E\"\n        } else if letter == 'f' {\n \
    \           result += \"F\"\n        } else if letter == 'g' {\n            result\
    \ += \"G\"\n        } else if letter == 'h' {\n            result += \"H\"\n \
    \       } else if letter == 'i' {\n            result += \"I\"\n        } else\
    \ if letter == 'j' {\n            result += \"J\"\n        } else if letter ==\
    \ 'k' {\n            result += \"K\"\n        } else if letter == 'l' {\n    \
    \        result += \"L\"\n        } else if letter == 'm' {\n            result\
    \ += \"M\"\n        } else if letter == 'n' {\n            result += \"N\"\n \
    \       } else if letter == 'o' {\n            result += \"O\"\n        } else\
    \ if letter == 'p' {\n            result += \"P\"\n        } else if letter ==\
    \ 'q' {\n            result += \"Q\"\n        } else if letter == 'r' {\n    \
    \        result += \"R\"\n        } else if letter == 's' {\n            result\
    \ += \"S\"\n        } else if letter == 't' {\n            result += \"T\"\n \
    \       } else if letter == 'u' {\n            result += \"U\"\n        } else\
    \ if letter == 'v' {\n            result += \"V\"\n        } else if letter ==\
    \ 'w' {\n            result += \"W\"\n        } else if letter == 'x' {\n    \
    \        result += \"X\"\n        } else if letter == 'y' {\n            result\
    \ += \"Y\"\n        } else if letter == 'z' {\n            result += \"Z\"\n \
    \       } else {\n            result += letter\n        }\n    }\n    return result\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7m_p3a_k_test.go:65:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073376
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += char - 'a'\n        } else {\n            result += char\n\
    \        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7dmdnur8_test.go:13:13: invalid operation: result += char - ''a'' (mismatched
    types string and rune)

    /tmp/tmp7dmdnur8_test.go:15:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    var result string\n\
    \    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += string(char - 'a' + 'A')\n        } else {\n          \
    \  result += char\n        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t\
    \ *testing.T) {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected:\
    \ \"hELLO!\" },\n     { actual: candidate(\"These violent delights have violent\
    \ ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa6dkism3_test.go:15:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += char + ('A' - 'a')\n        } else {\n            result\
    \ += char\n        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpeh251rpe_test.go:13:13: invalid operation: result += char + (''A'' - ''a'')
    (mismatched types string and rune)

    /tmp/tmpeh251rpe_test.go:15:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += string([]byte{char - 'a', char})\n        } else {\n  \
    \          result += string([]byte{char})\n        }\n    }\n    return result\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq4iqgwey_test.go:13:37: cannot use char - ''a'' (value of type rune) as
    type byte in array or slice literal

    /tmp/tmpq4iqgwey_test.go:13:49: cannot use char (variable of type rune) as type
    byte in array or slice literal

    /tmp/tmpq4iqgwey_test.go:15:37: cannot use char (variable of type rune) as type
    byte in array or slice literal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += char - 'a'\n        } else {\n            result += char\n\
    \        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7dmdnur8_test.go:13:13: invalid operation: result += char - ''a'' (mismatched
    types string and rune)

    /tmp/tmp7dmdnur8_test.go:15:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += string([]byte{char - 'a', char})\n        } else {\n  \
    \          result += string([]byte{char})\n        }\n    }\n    return result\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq4iqgwey_test.go:13:37: cannot use char - ''a'' (value of type rune) as
    type byte in array or slice literal

    /tmp/tmpq4iqgwey_test.go:13:49: cannot use char (variable of type rune) as type
    byte in array or slice literal

    /tmp/tmpq4iqgwey_test.go:15:37: cannot use char (variable of type rune) as type
    byte in array or slice literal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += char + ('A' - 'a')\n        } else {\n            result\
    \ += char\n        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpeh251rpe_test.go:13:13: invalid operation: result += char + (''A'' - ''a'')
    (mismatched types string and rune)

    /tmp/tmpeh251rpe_test.go:15:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += char - 'a'\n        } else {\n            result += char\n\
    \        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7dmdnur8_test.go:13:13: invalid operation: result += char - ''a'' (mismatched
    types string and rune)

    /tmp/tmp7dmdnur8_test.go:15:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += char - 'a'\n        } else {\n            result += char\n\
    \        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7dmdnur8_test.go:13:13: invalid operation: result += char - ''a'' (mismatched
    types string and rune)

    /tmp/tmp7dmdnur8_test.go:15:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    var result string\n\
    \    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += string(char - 'a' + 'A')\n        } else {\n          \
    \  result += char\n        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t\
    \ *testing.T) {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected:\
    \ \"hELLO!\" },\n     { actual: candidate(\"These violent delights have violent\
    \ ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa6dkism3_test.go:15:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += char - 'a'\n        } else {\n            result += char\n\
    \        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7dmdnur8_test.go:13:13: invalid operation: result += char - ''a'' (mismatched
    types string and rune)

    /tmp/tmp7dmdnur8_test.go:15:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    var result string\n\
    \    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += char - 'a' + 'A'\n        } else {\n            result\
    \ += char\n        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmmxqlq0c_test.go:13:13: invalid operation: result += char - ''a'' + ''A''
    (mismatched types string and rune)

    /tmp/tmpmmxqlq0c_test.go:15:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    var newString string\n\
    \    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            newString += string(char - 'a') + string(char - 'A')\n        } else\
    \ {\n            newString += char\n        }\n    }\n    return newString\n}\n\
    \nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"These violent delights\
    \ have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb2mzllk4_test.go:15:13: invalid operation: newString += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += char - 'a'\n        } else {\n            result += char\n\
    \        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7dmdnur8_test.go:13:13: invalid operation: result += char - ''a'' (mismatched
    types string and rune)

    /tmp/tmp7dmdnur8_test.go:15:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    var result string\n\
    \    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += string(char - 'a') + string(char - 'A')\n        } else\
    \ {\n            result += char\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"These violent delights\
    \ have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx1m8g20k_test.go:15:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += char - 'a' + 'A'\n        } else {\n            result\
    \ += char\n        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprrst4qkw_test.go:13:13: invalid operation: result += char - ''a'' + ''A''
    (mismatched types string and rune)

    /tmp/tmprrst4qkw_test.go:15:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    var result string\n\
    \    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += string(char - 'a') + string(char - 'A')\n        } else\
    \ {\n            result += char\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"These violent delights\
    \ have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx1m8g20k_test.go:15:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    var result string\n\
    \    for _, char := range myString {\n        switch char {\n        case 'a':\n\
    \            result = 'A'\n        case 'b':\n            result = 'B'\n     \
    \   case 'c':\n            result = 'C'\n        case 'd':\n            result\
    \ = 'D'\n        case 'e':\n            result = 'E'\n        case 'f':\n    \
    \        result = 'F'\n        case 'g':\n            result = 'G'\n        case\
    \ 'h':\n            result = 'H'\n        case 'i':\n            result = 'I'\n\
    \        case 'j':\n            result = 'J'\n        case 'k':\n            result\
    \ = 'K'\n        case 'l':\n            result = 'L'\n        case 'm':\n    \
    \        result = 'M'\n        case 'n':\n            result = 'N'\n        case\
    \ 'o':\n            result = 'O'\n        case 'p':\n            result = 'P'\n\
    \        case 'q':\n            result = 'Q'\n        case 'r':\n            result\
    \ = 'R'\n        case 's':\n            result = 'S'\n        case 't':\n    \
    \        result = 'T'\n        case 'u':\n            result = 'U'\n        case\
    \ 'v':\n            result = 'V'\n        case 'w':\n            result = 'W'\n\
    \        case 'x':\n            result = 'X'\n        case 'y':\n            result\
    \ = 'Y'\n        case 'z':\n            result = 'Z'\n        default:\n     \
    \       result = char\n        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t\
    \ *testing.T) {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected:\
    \ \"hELLO!\" },\n     { actual: candidate(\"These violent delights have violent\
    \ ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpplmyy4b5_test.go:14:22: cannot use ''A'' (untyped rune constant 65) as
    string value in assignment

    /tmp/tmpplmyy4b5_test.go:16:22: cannot use ''B'' (untyped rune constant 66) as
    string value in assignment

    /tmp/tmpplmyy4b5_test.go:18:22: cannot use ''C'' (untyped rune constant 67) as
    string value in assignment

    /tmp/tmpplmyy4b5_test.go:20:22: cannot use ''D'' (untyped rune constant 68) as
    string value in assignment

    /tmp/tmpplmyy4b5_test.go:22:22: cannot use ''E'' (untyped rune constant 69) as
    string value in assignment

    /tmp/tmpplmyy4b5_test.go:24:22: cannot use ''F'' (untyped rune constant 70) as
    string value in assignment

    /tmp/tmpplmyy4b5_test.go:26:22: cannot use ''G'' (untyped rune constant 71) as
    string value in assignment

    /tmp/tmpplmyy4b5_test.go:28:22: cannot use ''H'' (untyped rune constant 72) as
    string value in assignment

    /tmp/tmpplmyy4b5_test.go:30:22: cannot use ''I'' (untyped rune constant 73) as
    string value in assignment

    /tmp/tmpplmyy4b5_test.go:32:22: cannot use ''J'' (untyped rune constant 74) as
    string value in assignment

    /tmp/tmpplmyy4b5_test.go:32:22: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    var myString2 string\n\
    \    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            myString2 += string(char - 'a') + string(char - 'A')\n        } else\
    \ {\n            myString2 += string(char)\n        }\n    }\n    return myString2\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFlip_Case (0.00s)\n    --- FAIL: TestFlip_Case/test_num__1\
    \ (0.00s)\n        tmpmkcjrzmf_test.go:36: expected 'hELLO!', got 'H\x04$\v+\v\
    +\x0E.!'\n    --- FAIL: TestFlip_Case/test_num__2 (0.00s)\n        tmpmkcjrzmf_test.go:36:\
    \ expected 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS', got 'T\a'\x04$\x122\x04\
    $ \x155\b(\x0E.\v+\x04$\n-\x133 \x03#\x04$\v+\b(\x06&\a'\x133\x122 \a'\0 \x15\
    5\x04$ \x155\b(\x0E.\v+\x04$\n-\x133 \x04$\n-\x03#\x122'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073377
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += char + ('A' - 'a')\n        } else {\n            result\
    \ += char\n        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpeh251rpe_test.go:13:13: invalid operation: result += char + (''A'' - ''a'')
    (mismatched types string and rune)

    /tmp/tmpeh251rpe_test.go:15:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += string([]byte{char - 'a', char})\n        } else {\n  \
    \          result += string([]byte{char})\n        }\n    }\n    return result\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq4iqgwey_test.go:13:37: cannot use char - ''a'' (value of type rune) as
    type byte in array or slice literal

    /tmp/tmpq4iqgwey_test.go:13:49: cannot use char (variable of type rune) as type
    byte in array or slice literal

    /tmp/tmpq4iqgwey_test.go:15:37: cannot use char (variable of type rune) as type
    byte in array or slice literal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += string([]byte{char - 'a', char})\n        } else {\n  \
    \          result += string([]byte{char})\n        }\n    }\n    return result\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq4iqgwey_test.go:13:37: cannot use char - ''a'' (value of type rune) as
    type byte in array or slice literal

    /tmp/tmpq4iqgwey_test.go:13:49: cannot use char (variable of type rune) as type
    byte in array or slice literal

    /tmp/tmpq4iqgwey_test.go:15:37: cannot use char (variable of type rune) as type
    byte in array or slice literal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += char - 'a' + 'A'\n        } else {\n            result\
    \ += char\n        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprrst4qkw_test.go:13:13: invalid operation: result += char - ''a'' + ''A''
    (mismatched types string and rune)

    /tmp/tmprrst4qkw_test.go:15:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += char - 'a' + 'A'\n        } else {\n            result\
    \ += char\n        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprrst4qkw_test.go:13:13: invalid operation: result += char - ''a'' + ''A''
    (mismatched types string and rune)

    /tmp/tmprrst4qkw_test.go:15:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += char - 'a'\n        } else {\n            result += char\n\
    \        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7dmdnur8_test.go:13:13: invalid operation: result += char - ''a'' (mismatched
    types string and rune)

    /tmp/tmp7dmdnur8_test.go:15:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += char + ('A' - 'a')\n        } else {\n            result\
    \ += char\n        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpeh251rpe_test.go:13:13: invalid operation: result += char + (''A'' - ''a'')
    (mismatched types string and rune)

    /tmp/tmpeh251rpe_test.go:15:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += char - 'a'\n        } else {\n            result += char\n\
    \        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7dmdnur8_test.go:13:13: invalid operation: result += char - ''a'' (mismatched
    types string and rune)

    /tmp/tmp7dmdnur8_test.go:15:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += string(char - 'a') + string(char - 'A')\n        } else\
    \ {\n            result += char\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"These violent delights\
    \ have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg4quy52n_test.go:15:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += char - 'a' + 'A'\n        } else {\n            result\
    \ += char\n        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprrst4qkw_test.go:13:13: invalid operation: result += char - ''a'' + ''A''
    (mismatched types string and rune)

    /tmp/tmprrst4qkw_test.go:15:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += string([]byte{char - 'a', char})\n        } else {\n  \
    \          result += string([]byte{char})\n        }\n    }\n    return result\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq4iqgwey_test.go:13:37: cannot use char - ''a'' (value of type rune) as
    type byte in array or slice literal

    /tmp/tmpq4iqgwey_test.go:13:49: cannot use char (variable of type rune) as type
    byte in array or slice literal

    /tmp/tmpq4iqgwey_test.go:15:37: cannot use char (variable of type rune) as type
    byte in array or slice literal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += char - 'a' + 'A'\n        } else {\n            result\
    \ += char\n        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprrst4qkw_test.go:13:13: invalid operation: result += char - ''a'' + ''A''
    (mismatched types string and rune)

    /tmp/tmprrst4qkw_test.go:15:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 1
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, letter := range myString {\n        if letter == 'a' {\n          \
    \  result += \"A\"\n        } else if letter == 'b' {\n            result += \"\
    B\"\n        } else if letter == 'c' {\n            result += \"C\"\n        }\
    \ else if letter == 'd' {\n            result += \"D\"\n        } else if letter\
    \ == 'e' {\n            result += \"E\"\n        } else if letter == 'f' {\n \
    \           result += \"F\"\n        } else if letter == 'g' {\n            result\
    \ += \"G\"\n        } else if letter == 'h' {\n            result += \"H\"\n \
    \       } else if letter == 'i' {\n            result += \"I\"\n        } else\
    \ if letter == 'j' {\n            result += \"J\"\n        } else if letter ==\
    \ 'k' {\n            result += \"K\"\n        } else if letter == 'l' {\n    \
    \        result += \"L\"\n        } else if letter == 'm' {\n            result\
    \ += \"M\"\n        } else if letter == 'n' {\n            result += \"N\"\n \
    \       } else if letter == 'o' {\n            result += \"O\"\n        } else\
    \ if letter == 'p' {\n            result += \"P\"\n        } else if letter ==\
    \ 'q' {\n            result += \"Q\"\n        } else if letter == 'r' {\n    \
    \        result += \"R\"\n        } else if letter == 's' {\n            result\
    \ += \"S\"\n        } else if letter == 't' {\n            result += \"T\"\n \
    \       } else if letter == 'u' {\n            result += \"U\"\n        } else\
    \ if letter == 'v' {\n            result += \"V\"\n        } else if letter ==\
    \ 'w' {\n            result += \"W\"\n        } else if letter == 'x' {\n    \
    \        result += \"X\"\n        } else if letter == 'y' {\n            result\
    \ += \"Y\"\n        } else if letter == 'z' {\n            result += \"Z\"\n \
    \       }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFlip_Case (0.00s)\n    --- FAIL: TestFlip_Case/test_num__1\
    \ (0.00s)\n        tmpng3pabvv_test.go:84: expected 'hELLO!', got 'ELLO'\n   \
    \ --- FAIL: TestFlip_Case/test_num__2 (0.00s)\n        tmpng3pabvv_test.go:84:\
    \ expected 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS', got 'HESEVIOLENTDELIGHTSHAVEVIOLENTENDS'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073376
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    var result string\n\
    \    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += string(char - 'a') + string(char - 'A')\n        } else\
    \ {\n            result += char\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"These violent delights\
    \ have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx1m8g20k_test.go:15:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    var result string\n\
    \    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += string(char - 'a') + string(char - 'A')\n        } else\
    \ {\n            result += char\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"These violent delights\
    \ have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx1m8g20k_test.go:15:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += string(char - 'a') + string(char - 'A')\n        } else\
    \ {\n            result += char\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"These violent delights\
    \ have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg4quy52n_test.go:15:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += string(char - 'a') + string(char - 'A')\n        } else\
    \ {\n            result += char\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"These violent delights\
    \ have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg4quy52n_test.go:15:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += char - 'a' + 'A'\n        } else {\n            result\
    \ += char\n        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprrst4qkw_test.go:13:13: invalid operation: result += char - ''a'' + ''A''
    (mismatched types string and rune)

    /tmp/tmprrst4qkw_test.go:15:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += string([]byte{char - 'a', char})\n        } else {\n  \
    \          result += string([]byte{char})\n        }\n    }\n    return result\n\
    }\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq4iqgwey_test.go:13:37: cannot use char - ''a'' (value of type rune) as
    type byte in array or slice literal

    /tmp/tmpq4iqgwey_test.go:13:49: cannot use char (variable of type rune) as type
    byte in array or slice literal

    /tmp/tmpq4iqgwey_test.go:15:37: cannot use char (variable of type rune) as type
    byte in array or slice literal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += string(char - 'a') + string(char - 'A')\n        } else\
    \ {\n            result += char\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"These violent delights\
    \ have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg4quy52n_test.go:15:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    var result string\n\
    \    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += string(char - 'a') + string(char - 'A')\n        } else\
    \ {\n            result += char\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"These violent delights\
    \ have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx1m8g20k_test.go:15:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    var newString string\n\
    \    for _, letter := range myString {\n        if letter == 'a' {\n         \
    \   newString += \"A\"\n        } else if letter == 'b' {\n            newString\
    \ += \"B\"\n        } else if letter == 'c' {\n            newString += \"C\"\n\
    \        } else if letter == 'd' {\n            newString += \"D\"\n        }\
    \ else if letter == 'e' {\n            newString += \"E\"\n        } else if letter\
    \ == 'f' {\n            newString += \"F\"\n        } else if letter == 'g' {\n\
    \            newString += \"G\"\n        } else if letter == 'h' {\n         \
    \   newString += \"H\"\n        } else if letter == 'i' {\n            newString\
    \ += \"I\"\n        } else if letter == 'j' {\n            newString += \"J\"\n\
    \        } else if letter == 'k' {\n            newString += \"K\"\n        }\
    \ else if letter == 'l' {\n            newString += \"L\"\n        } else if letter\
    \ == 'm' {\n            newString += \"M\"\n        } else if letter == 'n' {\n\
    \            newString += \"N\"\n        } else if letter == 'o' {\n         \
    \   newString += \"O\"\n        } else if letter == 'p' {\n            newString\
    \ += \"P\"\n        } else if letter == 'q' {\n            newString += \"Q\"\n\
    \        } else if letter == 'r' {\n            newString += \"R\"\n        }\
    \ else if letter == 's' {\n            newString += \"S\"\n        } else if letter\
    \ == 't' {\n            newString += \"T\"\n        } else if letter == 'u' {\n\
    \            newString += \"U\"\n        } else if letter == 'v' {\n         \
    \   newString += \"V\"\n        } else if letter == 'w' {\n            newString\
    \ += \"W\"\n        } else if letter == 'x' {\n            newString += \"X\"\n\
    \        } else if letter == 'y' {\n            newString += \"Y\"\n        }\
    \ else if letter == 'z' {\n            newString += \"Z\"\n        } else {\n\
    \            newString += letter\n        }\n    }\n    return newString\n}\n\n\
    func TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"These violent delights\
    \ have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps2vt_rks_test.go:65:13: invalid operation: newString += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073376
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    var result string\n\
    \    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += char - 'a'\n        } else {\n            result += char\n\
    \        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp356x2z4n_test.go:13:13: invalid operation: result += char - ''a'' (mismatched
    types string and rune)

    /tmp/tmp356x2z4n_test.go:15:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073376
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += string(char - 'a') + string(char - 'A')\n        } else\
    \ {\n            result += char\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"These violent delights\
    \ have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg4quy52n_test.go:15:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    var result string\n\
    \    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += string(char - 'a' + 'A')\n        } else {\n          \
    \  result += char\n        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t\
    \ *testing.T) {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected:\
    \ \"hELLO!\" },\n     { actual: candidate(\"These violent delights have violent\
    \ ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa6dkism3_test.go:15:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, letter := range myString {\n        if letter == ' ' {\n          \
    \  result = result + \" \"\n        } else {\n            result = result + string([]byte{letter,\
    \ unicode.ToLower(letter)})\n        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t\
    \ *testing.T) {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected:\
    \ \"hELLO!\" },\n     { actual: candidate(\"These violent delights have violent\
    \ ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2tqt6spt_test.go:15:45: cannot use letter (variable of type rune) as type
    byte in array or slice literal

    /tmp/tmp2tqt6spt_test.go:15:53: undefined: unicode

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073376
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += char + ('A' - 'a')\n        } else {\n            result\
    \ += char\n        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpeh251rpe_test.go:13:13: invalid operation: result += char + (''A'' - ''a'')
    (mismatched types string and rune)

    /tmp/tmpeh251rpe_test.go:15:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    var result string\n\
    \    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += string(char - 'a') + string(char - 'A')\n        } else\
    \ {\n            result += char\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"These violent delights\
    \ have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx1m8g20k_test.go:15:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    var result string\n\
    \    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += string(char - 'a') + string(char - 'A')\n        } else\
    \ {\n            result += char\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"These violent delights\
    \ have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx1m8g20k_test.go:15:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    var newString string\n\
    \    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            newString += string(char - 'a') + string(char - 'A')\n        } else\
    \ {\n            newString += char\n        }\n    }\n    return newString\n}\n\
    \nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"These violent delights\
    \ have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb2mzllk4_test.go:15:13: invalid operation: newString += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += char - 'a'\n        } else {\n            result += char\n\
    \        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7dmdnur8_test.go:13:13: invalid operation: result += char - ''a'' (mismatched
    types string and rune)

    /tmp/tmp7dmdnur8_test.go:15:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += char + ('A' - 'a')\n        } else {\n            result\
    \ += char\n        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpeh251rpe_test.go:13:13: invalid operation: result += char + (''A'' - ''a'')
    (mismatched types string and rune)

    /tmp/tmpeh251rpe_test.go:15:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += char - 'a'\n        } else {\n            result += char\n\
    \        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7dmdnur8_test.go:13:13: invalid operation: result += char - ''a'' (mismatched
    types string and rune)

    /tmp/tmp7dmdnur8_test.go:15:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += char - 'a' + 'A'\n        } else {\n            result\
    \ += char\n        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprrst4qkw_test.go:13:13: invalid operation: result += char - ''a'' + ''A''
    (mismatched types string and rune)

    /tmp/tmprrst4qkw_test.go:15:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\nfunc flip_case(myString string) string {\n    result := \"\"\n \
    \   for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            result += char - 'a'\n        } else {\n            result += char\n\
    \        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7dmdnur8_test.go:13:13: invalid operation: result += char - ''a'' (mismatched
    types string and rune)

    /tmp/tmp7dmdnur8_test.go:15:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073375
