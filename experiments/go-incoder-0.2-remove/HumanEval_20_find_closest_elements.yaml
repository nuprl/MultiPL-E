name: HumanEval_20_find_closest_elements
language: go_test.go
prompt: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
  \n)\n\n// From a supplied list of numbers (of length at least two) select and return\
  \ two that are the closest to each\n// other and return them in order (smaller number,\
  \ larger number).\nfunc find_closest_elements(numbers []float64) []interface{} {\n"
tests: "func TestFind_Closest_Elements(t *testing.T) {\n  candidate := find_closest_elements\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
  \ 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual: candidate([]float64{1.0,\
  \ 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0,\
  \ 2.0, 3.0, 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual:\
  \ candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0,\
  \ 2.0} },\n     { actual: candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected:\
  \ []interface{}{2.2, 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
  test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
  \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
  , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    sort.Float64s(numbers)\n    smallestIndex := 0\n    largestIndex\
    \ := len(numbers) - 1\n    smallestDist := math.MaxFloat64\n    largestDist :=\
    \ math.MaxFloat64\n    for i := 0; i < len(numbers); i++ {\n        dist := math.Abs(numbers[i]\
    \ - numbers[smallestIndex])\n        if dist < smallestDist {\n            smallestIndex\
    \ = i\n            smallestDist = dist\n        }\n        dist = math.Abs(numbers[i]\
    \ - numbers[largestIndex])\n        if dist > largestDist {\n            largestIndex\
    \ = i\n            largestDist = dist\n        }\n    }\n    return []interface{}{numbers[smallestIndex],\
    \ numbers[largestIndex]}\n}\n", "    smallestNumber := numbers[0]\n    largestNumber\
    \ := numbers[0]\n    for _, number := range numbers[1:] {\n        if number <\
    \ smallestNumber {\n            smallestNumber = number\n        } else if number\
    \ > largestNumber {\n            largestNumber = number\n        }\n    }\n  \
    \  return []interface{}{smallestNumber, largestNumber}\n}\n", "    smallest :=\
    \ numbers[0]\n    largest := numbers[0]\n    smallestIndex := 0\n    largestIndex\
    \ := 0\n\n    for i := 1; i < len(numbers); i++ {\n        if numbers[i] < smallest\
    \ {\n            smallest = numbers[i]\n            smallestIndex = i\n      \
    \  }\n        if numbers[i] > largest {\n            largest = numbers[i]\n  \
    \          largestIndex = i\n        }\n    }\n\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    smallest := numbers[0]\n    largest := numbers[0]\n   \
    \ smallest := numbers[0]\n    largest := numbers[0]\n    for _, number := range\
    \ numbers {\n        if number < smallest {\n            smallest = number\n \
    \       }\n        if number > largest {\n            largest = number\n     \
    \   }\n    }\n    return []interface{}{smallest, largest}\n}\n", "    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    smallest := numbers[0]\n    largest\
    \ := numbers[0]\n    for _, number := range numbers {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n    result := []interface{}{smallest,\
    \ largest}\n    return result\n}\n", "    smallest := numbers[0]\n    largest\
    \ := numbers[0]\n    for _, number := range numbers {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    smallest := numbers[0]\n    largest := numbers[0]\n   \
    \ for _, number := range numbers[1:] {\n        if number < smallest {\n     \
    \       smallest = number\n        }\n        if number > largest {\n        \
    \    largest = number\n        }\n    }\n    return []interface{}{smallest, largest}\n\
    }\n", "    smallest := numbers[0]\n    largest := numbers[0]\n    smallest :=\
    \ numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers {\n\
    \        if number < smallest {\n            smallest = number\n        }\n  \
    \      if number > largest {\n            largest = number\n        }\n    }\n\
    \    return []interface{}{smallest, largest}\n}\n", "    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers[1:] {\n       \
    \ if number < smallest {\n            smallest = number\n        }\n        if\
    \ number > largest {\n            largest = number\n        }\n    }\n    return\
    \ []interface{}{smallest, largest}\n}\n", "    sort.Sort(sort.Float64Slice(numbers))\n\
    \    smallest := numbers[0]\n    largest := numbers[0]\n    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    smallestNumber := numbers[0]\n    largestNumber := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < smallestNumber {\n\
    \            smallestNumber = number\n        }\n        if number > largestNumber\
    \ {\n            largestNumber = number\n        }\n    }\n    return []interface{}{smallestNumber,\
    \ largestNumber}\n}\n", "    smallest, _ := numbers[0], numbers[0]\n    largest,\
    \ _ := numbers[0], numbers[0]\n    for _, number := range numbers {\n        if\
    \ number < smallest {\n            smallest = number\n        }\n        if number\
    \ > largest {\n            largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n\n  \
    \  smallest := numbers[0]\n    largest := numbers[0]\n    smallestIndex := 0\n\
    \    largestIndex := 0\n\n    for i := 1; i < len(numbers); i++ {\n        if\
    \ numbers[i] < smallest {\n            smallest = numbers[i]\n            smallestIndex\
    \ = i\n        }\n\n        if numbers[i] > largest {\n            largest = numbers[i]\n\
    \            largestIndex = i\n        }\n    }\n\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers[1:]\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    return []interface{}{smallest, largest}\n}\n", "    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers[1:] {\n       \
    \ if number < smallest {\n            smallest = number\n        }\n        if\
    \ number > largest {\n            largest = number\n        }\n    }\n    return\
    \ []interface{}{smallest, largest}\n}\n", "    smallestNumber := numbers[0]\n\
    \    largestNumber := numbers[0]\n    for _, number := range numbers[1:] {\n \
    \       if number < smallestNumber {\n            smallestNumber = number\n  \
    \      }\n        if number > largestNumber {\n            largestNumber = number\n\
    \        }\n    }\n    return []interface{}{smallestNumber, largestNumber}\n}\n",
  "    smallestNumber := numbers[0]\n    largestNumber := numbers[0]\n    for _, number\
    \ := range numbers[1:] {\n        if number < smallestNumber {\n            smallestNumber\
    \ = number\n        } else if number > largestNumber {\n            largestNumber\
    \ = number\n        }\n    }\n    return []interface{}{smallestNumber, largestNumber}\n\
    }\n", "    if len(numbers) < 2 {\n        return nil\n    }\n\n    smallest :=\
    \ numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers[1:]\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \n    return []interface{}{smallest, largest}\n}\n", "    smallestNumber := numbers[0]\n\
    \    largestNumber := numbers[0]\n    for _, number := range numbers[1:] {\n \
    \       if number < smallestNumber {\n            smallestNumber = number\n  \
    \      }\n        if number > largestNumber {\n            largestNumber = number\n\
    \        }\n    }\n    return []interface{}{smallestNumber, largestNumber}\n}\n",
  "    smallest := numbers[0]\n    largest := numbers[0]\n    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    smallest := numbers[0]\n    largest := numbers[0]\n   \
    \ smallest := numbers[0]\n    largest := numbers[0]\n    for _, number := range\
    \ numbers {\n        if number < smallest {\n            smallest = number\n \
    \       }\n        if number > largest {\n            largest = number\n     \
    \   }\n    }\n    result := []interface{}{smallest, largest}\n    return result\n\
    }\n", "    if len(numbers) < 2 {\n        return nil\n    }\n\n    smallest :=\
    \ numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers[1:]\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \n    return []interface{}{smallest, largest}\n}\n", "    if len(numbers) < 2\
    \ {\n        return nil\n    }\n\n    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    index := 0\n\n    for i := 1; i < len(numbers); i++ {\n        if numbers[i]\
    \ < smallest {\n            smallest = numbers[i]\n            index = i\n   \
    \     }\n\n        if numbers[i] > largest {\n            largest = numbers[i]\n\
    \            index = i\n        }\n    }\n\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    return []interface{}{smallest, largest}\n}\n", "    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers[1:] {\n       \
    \ if number < smallest {\n            smallest = number\n        }\n        if\
    \ number > largest {\n            largest = number\n        }\n    }\n    return\
    \ []interface{}{smallest, largest}\n}\n", "    smallest := numbers[0]\n    largest\
    \ := numbers[0]\n    for _, number := range numbers[1:] {\n        if number <\
    \ smallest {\n            smallest = number\n        }\n        if number > largest\
    \ {\n            largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    return []interface{}{smallest, largest}\n}\n", "    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers[1:] {\n       \
    \ if number < smallest {\n            smallest = number\n        }\n        if\
    \ number > largest {\n            largest = number\n        }\n    }\n    return\
    \ []interface{}{smallest, largest}\n}\n", "    smallest := numbers[0]\n    largest\
    \ := numbers[0]\n    for _, number := range numbers {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    smallest := numbers[0]\n    largest := numbers[0]\n   \
    \ for _, number := range numbers[1:] {\n        if number < smallest {\n     \
    \       smallest = number\n        }\n        if number > largest {\n        \
    \    largest = number\n        }\n    }\n    return []interface{}{smallest, largest}\n\
    }\n", "    if len(numbers) < 2 {\n        return nil\n    }\n\n    smallest :=\
    \ numbers[0]\n    largest := numbers[0]\n    smallest_index := 0\n    largest_index\
    \ := 0\n\n    for index := 1; index < len(numbers); index++ {\n        if numbers[index]\
    \ < smallest {\n            smallest = numbers[index]\n            smallest_index\
    \ = index\n        }\n        if numbers[index] > largest {\n            largest\
    \ = numbers[index]\n            largest_index = index\n        }\n    }\n\n  \
    \  return []interface{}{smallest_index, largest_index}\n}\n", "    sort.Float64s(numbers)\n\
    \    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number := range\
    \ numbers[1:] {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    return []interface{}{smallest, largest}\n}\n", "    sort.Float64s(numbers)\n\
    \    smallest := numbers[0]\n    largest := numbers[0]\n    i := 0\n    for _,\
    \ number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n        if number == smallest {\n            i++\n        }\n    }\n\
    \    result := make([]interface{}, 2)\n    result[0] = smallest\n    result[1]\
    \ = largest\n    return result\n}\n", "    if len(numbers) < 2 {\n        return\
    \ nil\n    }\n\n    smallest := numbers[0]\n    largest := numbers[0]\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \n    return []interface{}{smallest, largest}\n}\n", "    sort.Sort(sort.Reverse(sort.Float64Slice(numbers)))\n\
    \    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number := range\
    \ numbers[1:] {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    return []interface{}{smallest, largest}\n}\n", "    if len(numbers)\
    \ < 2 {\n        return nil\n    }\n\n    smallest := numbers[0]\n    largest\
    \ := numbers[0]\n    smallest_index := 0\n    largest_index := 0\n\n    for i\
    \ := 1; i < len(numbers); i++ {\n        if numbers[i] < smallest {\n        \
    \    smallest = numbers[i]\n            smallest_index = i\n        }\n      \
    \  if numbers[i] > largest {\n            largest = numbers[i]\n            largest_index\
    \ = i\n        }\n    }\n\n    return []interface{}{smallest, largest}\n}\n",
  "    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number := range\
    \ numbers[1:] {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    return []interface{}{smallest, largest}\n}\n", "    if len(numbers)\
    \ < 2 {\n        return nil\n    }\n    smallest := numbers[0]\n    largest :=\
    \ numbers[0]\n    for _, number := range numbers[1:] {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n\n  \
    \  smallest := numbers[0]\n    largest := numbers[0]\n    for _, number := range\
    \ numbers[1:] {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n\n    return []interface{}{smallest, largest}\n}\n", "    if len(numbers)\
    \ < 2 {\n        return nil\n    }\n\n    smallest := numbers[0]\n    largest\
    \ := numbers[0]\n    smallestIndex := 0\n    largestIndex := 0\n\n    for i :=\
    \ 1; i < len(numbers); i++ {\n        if numbers[i] < smallest {\n           \
    \ smallest = numbers[i]\n            smallestIndex = i\n        }\n        if\
    \ numbers[i] > largest {\n            largest = numbers[i]\n            largestIndex\
    \ = i\n        }\n    }\n\n    return []interface{}{smallest, largest}\n}\n",
  "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n\n  \
    \  smallest := numbers[0]\n    largest := numbers[0]\n    smallest_index := 0\n\
    \    largest_index := 0\n\n    for i := 1; i < len(numbers); i++ {\n        if\
    \ numbers[i] < smallest {\n            smallest = numbers[i]\n            smallest_index\
    \ = i\n        }\n\n        if numbers[i] > largest {\n            largest = numbers[i]\n\
    \            largest_index = i\n        }\n    }\n\n    return []interface{}{smallest_index,\
    \ largest_index}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n\
    \n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number :=\
    \ range numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n\n    result := []interface{}{smallest, largest}\n    return result\n\
    }\n", "    if len(numbers) < 2 {\n        return nil\n    }\n\n    smallest :=\
    \ numbers[0]\n    largest := numbers[0]\n    smallest := numbers[0]\n    largest\
    \ := numbers[0]\n\n    for _, number := range numbers {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    sort.Float64s(numbers)\n    smallest := numbers[0]\n  \
    \  largest := numbers[0]\n    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < smallest {\n      \
    \      smallest = number\n        }\n        if number > largest {\n         \
    \   largest = number\n        }\n    }\n    return []interface{}{smallest, largest}\n\
    }\n", "    smallestNumber := numbers[0]\n    largestNumber := numbers[0]\n   \
    \ for _, number := range numbers[1:] {\n        if number < smallestNumber {\n\
    \            smallestNumber = number\n        } else if number > largestNumber\
    \ {\n            largestNumber = number\n        }\n    }\n    return []interface{}{smallestNumber,\
    \ largestNumber}\n}\n", "    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers[1:] {\n        if number < smallest {\n  \
    \          smallest = number\n        }\n        if number > largest {\n     \
    \       largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n\n  \
    \  smallest := numbers[0]\n    largest := numbers[0]\n    for _, number := range\
    \ numbers[1:] {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n\n    return []interface{}{smallest, largest}\n}\n", "    sort.Float64s(numbers)\n\
    \    smallestNumber := numbers[0]\n    largestNumber := numbers[0]\n    smallestIndex\
    \ := -1\n    largestIndex := -1\n    for i := 1; i < len(numbers); i++ {\n   \
    \     if numbers[i] < smallestNumber {\n            smallestNumber = numbers[i]\n\
    \            smallestIndex = i\n        }\n        if numbers[i] > largestNumber\
    \ {\n            largestNumber = numbers[i]\n            largestIndex = i\n  \
    \      }\n    }\n    return []interface{}{smallestIndex, largestIndex}\n}\n",
  "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers[1:] {\n       \
    \ if number < smallest {\n            smallest = number\n        }\n        if\
    \ number > largest {\n            largest = number\n        }\n    }\n    return\
    \ []interface{}{smallest, largest}\n}\n", "    smallest := numbers[0]\n    largest\
    \ := numbers[0]\n    smallest_index := 0\n    largest_index := 0\n\n    for i\
    \ := 1; i < len(numbers); i++ {\n        if numbers[i] < smallest {\n        \
    \    smallest = numbers[i]\n            smallest_index = i\n        }\n      \
    \  if numbers[i] > largest {\n            largest = numbers[i]\n            largest_index\
    \ = i\n        }\n    }\n\n    return []interface{}{smallest_index, largest_index}\n\
    }\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers[1:] {\n       \
    \ if number < smallest {\n            smallest = number\n        }\n        if\
    \ number > largest {\n            largest = number\n        }\n    }\n    return\
    \ []interface{}{smallest, largest}\n}\n", "    smallest := numbers[0]\n    largest\
    \ := numbers[0]\n    for _, number := range numbers[1:] {\n        if number <\
    \ smallest {\n            smallest = number\n        }\n        if number > largest\
    \ {\n            largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers[1:]\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    return []interface{}{smallest, largest}\n}\n", "    sort.Float64s(numbers)\n\
    \    smallestNumber := numbers[0]\n    largestNumber := numbers[0]\n    for _,\
    \ number := range numbers[1:] {\n        if number < smallestNumber {\n      \
    \      smallestNumber = number\n        } else if number > largestNumber {\n \
    \           largestNumber = number\n        }\n    }\n    return []interface{}{smallestNumber,\
    \ largestNumber}\n}\n", "    sort.Float64s(numbers)\n    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    smallestIndex := 0\n    largestIndex := 0\n  \
    \  for i := 1; i < len(numbers); i++ {\n        if numbers[i] < smallest {\n \
    \           smallest = numbers[i]\n            smallestIndex = i\n        }\n\
    \        if numbers[i] > largest {\n            largest = numbers[i]\n       \
    \     largestIndex = i\n        }\n    }\n    return []interface{}{smallest, largest}\n\
    }\n", "    if len(numbers) < 2 {\n        return nil\n    }\n\n    smallest :=\
    \ numbers[0]\n    largest := numbers[0]\n    smallest := numbers[0]\n    largest\
    \ := numbers[0]\n\n    for _, number := range numbers {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    smallest := numbers[0]\n    largest := numbers[0]\n   \
    \ for _, number := range numbers[1:] {\n        if number < smallest {\n     \
    \       smallest = number\n        }\n        if number > largest {\n        \
    \    largest = number\n        }\n    }\n    return []interface{}{smallest, largest}\n\
    }\n", "    if len(numbers) < 2 {\n        return nil\n    }\n\n    smallest :=\
    \ numbers[0]\n    largest := numbers[0]\n    index := 0\n\n    for i := 1; i <\
    \ len(numbers); i++ {\n        if numbers[i] < smallest {\n            smallest\
    \ = numbers[i]\n            index = i\n        }\n        if numbers[i] > largest\
    \ {\n            largest = numbers[i]\n            index = i\n        }\n    }\n\
    \n    return []interface{}{smallest, largest}\n}\n", "    if len(numbers) < 2\
    \ {\n        return nil\n    }\n    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers[1:] {\n        if number < smallest {\n  \
    \          smallest = number\n        }\n        if number > largest {\n     \
    \       largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    return []interface{}{smallest, largest}\n}\n", "    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < smallest {\n      \
    \      smallest = number\n        }\n        if number > largest {\n         \
    \   largest = number\n        }\n    }\n    return []interface{}{smallest, largest}\n\
    }\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers[1:] {\n       \
    \ if number < smallest {\n            smallest = number\n        }\n        if\
    \ number > largest {\n            largest = number\n        }\n    }\n    return\
    \ []interface{}{smallest, largest}\n}\n", "    sort.Float64s(numbers)\n    smallestNumber\
    \ := numbers[0]\n    largestNumber := numbers[0]\n    for _, number := range numbers[1:]\
    \ {\n        if number < smallestNumber {\n            smallestNumber = number\n\
    \        } else if number > largestNumber {\n            largestNumber = number\n\
    \        }\n    }\n    return []interface{}{smallestNumber, largestNumber}\n}\n",
  "    if len(numbers) < 2 {\n        return nil\n    }\n\n    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n\n    result := []interface{}{smallest,\
    \ largest}\n    return result\n}\n", "    if len(numbers) < 2 {\n        return\
    \ nil\n    }\n\n    smallest := numbers[0]\n    largest := numbers[0]\n    smallestIndex\
    \ := 0\n    largestIndex := 0\n\n    for i := 1; i < len(numbers); i++ {\n   \
    \     if numbers[i] < smallest {\n            smallest = numbers[i]\n        \
    \    smallestIndex = i\n        }\n        if numbers[i] > largest {\n       \
    \     largest = numbers[i]\n            largestIndex = i\n        }\n    }\n\n\
    \    return []interface{}{smallest, largest}\n}\n", "    if len(numbers) < 2 {\n\
    \        return nil\n    }\n\n    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    smallest := numbers[0]\n    largest := numbers[0]\n\n    for _, number :=\
    \ range numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n\n    result := []interface{}{smallest, largest}\n    return result\n\
    }\n", "    smallest, largest := numbers[0], numbers[0]\n    for _, number := range\
    \ numbers[1:] {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    return []interface{}{smallest, largest}\n}\n", "    sort.Float64s(numbers)\n\
    \    smallest := numbers[0]\n    largest := numbers[0]\n    smallest_index :=\
    \ 0\n    largest_index := 0\n    for i := 1; i < len(numbers); i++ {\n       \
    \ if numbers[i] < smallest {\n            smallest = numbers[i]\n            smallest_index\
    \ = i\n        }\n        if numbers[i] > largest {\n            largest = numbers[i]\n\
    \            largest_index = i\n        }\n    }\n    return []interface{}{smallest_index,\
    \ largest_index}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n\
    \n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number :=\
    \ range numbers[1:] {\n        if number < smallest {\n            smallest =\
    \ number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n\n    return []interface{}{smallest, largest}\n}\n", "    smallestNumber\
    \ := numbers[0]\n    largestNumber := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallestNumber {\n            smallestNumber = number\n\
    \        }\n        if number > largestNumber {\n            largestNumber = number\n\
    \        }\n    }\n    return []interface{}{smallestNumber, largestNumber}\n}\n",
  "    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number := range\
    \ numbers {\n        if number < smallest {\n            smallest = number\n \
    \       }\n        if number > largest {\n            largest = number\n     \
    \   }\n    }\n    return []interface{}{smallest, largest}\n}\n", "    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    smallest_index := 0\n    largest_index\
    \ := 0\n\n    for i := 1; i < len(numbers); i++ {\n        if numbers[i] < smallest\
    \ {\n            smallest = numbers[i]\n            smallest_index = i\n     \
    \   }\n        if numbers[i] > largest {\n            largest = numbers[i]\n \
    \           largest_index = i\n        }\n    }\n\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    smallest := numbers[0]\n    largest := numbers[0]\n   \
    \ for _, number := range numbers[1:] {\n        if number < smallest {\n     \
    \       smallest = number\n        }\n        if number > largest {\n        \
    \    largest = number\n        }\n    }\n    return []interface{}{smallest, largest}\n\
    }\n", "    sort.Float64s(numbers)\n    smallest := numbers[0]\n    largest :=\
    \ numbers[0]\n    for _, number := range numbers[1:] {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    smallest := numbers[0]\n    largest := numbers[0]\n   \
    \ for _, number := range numbers[1:] {\n        if number < smallest {\n     \
    \       smallest = number\n        }\n        if number > largest {\n        \
    \    largest = number\n        }\n    }\n    return []interface{}{smallest, largest}\n\
    }\n", "    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers[1:] {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return []interface{}{smallest, largest}\n}\n", "    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    return []interface{}{smallest, largest}\n}\n", "    if len(numbers) < 2 {\n\
    \        return nil\n    }\n    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers[1:] {\n        if number < smallest {\n  \
    \          smallest = number\n        }\n        if number > largest {\n     \
    \       largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    smallest := numbers[0]\n    largest := numbers[0]\n   \
    \ smallest_index := 0\n    largest_index := 0\n    for i := 1; i < len(numbers);\
    \ i++ {\n        if numbers[i] < smallest {\n            smallest = numbers[i]\n\
    \            smallest_index = i\n        }\n        if numbers[i] > largest {\n\
    \            largest = numbers[i]\n            largest_index = i\n        }\n\
    \    }\n    return []interface{}{smallest_index, largest_index}\n}\n", "    sort.Float64s(numbers)\n\
    \    smallest := numbers[0]\n    largest := numbers[0]\n    i := 0\n    for i\
    \ < len(numbers) {\n        if numbers[i] < smallest {\n            smallest =\
    \ numbers[i]\n        }\n        if numbers[i] > largest {\n            largest\
    \ = numbers[i]\n        }\n        i++\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    smallest := numbers[0]\n    largest := numbers[0]\n   \
    \ for _, number := range numbers[1:] {\n        if number < smallest {\n     \
    \       smallest = number\n        }\n        if number > largest {\n        \
    \    largest = number\n        }\n    }\n    return []interface{}{smallest, largest}\n\
    }\n", "    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    return []interface{}{smallest, largest}\n}\n", "    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers[1:]\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    return []interface{}{smallest, largest}\n}\n", "    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers[1:] {\n       \
    \ if number < smallest {\n            smallest = number\n        }\n        if\
    \ number > largest {\n            largest = number\n        }\n    }\n    return\
    \ []interface{}{smallest, largest}\n}\n", "    smallestNumber := numbers[0]\n\
    \    largestNumber := numbers[0]\n    for _, number := range numbers {\n     \
    \   if number < smallestNumber {\n            smallestNumber = number\n      \
    \  }\n        if number > largestNumber {\n            largestNumber = number\n\
    \        }\n    }\n    return []interface{}{smallestNumber, largestNumber}\n}\n",
  "    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number := range\
    \ numbers[1:] {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    return []interface{}{smallest, largest}\n}\n", "    smallestNumber\
    \ := numbers[0]\n    largestNumber := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallestNumber {\n            smallestNumber = number\n\
    \        }\n        if number > largestNumber {\n            largestNumber = number\n\
    \        }\n    }\n    return []interface{}{smallestNumber, largestNumber}\n}\n",
  "    sort.Float64s(numbers)\n    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    smallestIndex := 0\n    largestIndex := 0\n    for i := 1; i < len(numbers);\
    \ i++ {\n        if numbers[i] < smallest {\n            smallest = numbers[i]\n\
    \            smallestIndex = i\n        }\n        if numbers[i] > largest {\n\
    \            largest = numbers[i]\n            largestIndex = i\n        }\n \
    \   }\n    return []interface{}{smallest, largest}\n}\n", "    if len(numbers)\
    \ < 2 {\n        return nil\n    }\n\n    smallest := numbers[0]\n    largest\
    \ := numbers[0]\n    smallest := numbers[0]\n    largest := numbers[0]\n\n   \
    \ for _, number := range numbers {\n        if number < smallest {\n         \
    \   smallest = number\n        }\n        if number > largest {\n            largest\
    \ = number\n        }\n    }\n\n    return []interface{}{smallest, largest}\n\
    }\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    result := []interface{}{smallest,\
    \ largest}\n    return result\n}\n", "    smallest := numbers[0]\n    largest\
    \ := numbers[0]\n    for _, number := range numbers[1:] {\n        if number <\
    \ smallest {\n            smallest = number\n        }\n        if number > largest\
    \ {\n            largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n\n  \
    \  smallest := numbers[0]\n    largest := numbers[0]\n    smallest := numbers[0]\n\
    \    largest := numbers[0]\n\n    for _, number := range numbers {\n        if\
    \ number < smallest {\n            smallest = number\n        }\n        if number\
    \ > largest {\n            largest = number\n        }\n    }\n\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    smallest := numbers[0]\n    largest := numbers[0]\n   \
    \ for _, number := range numbers {\n        if number < smallest {\n         \
    \   smallest = number\n        }\n        if number > largest {\n            largest\
    \ = number\n        }\n    }\n    result := []interface{}{smallest, largest}\n\
    \    return result\n}\n", "    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number := range\
    \ numbers {\n        if number < smallest {\n            smallest = number\n \
    \       }\n        if number > largest {\n            largest = number\n     \
    \   }\n    }\n    return []interface{}{smallest, largest}\n}\n", "    if len(numbers)\
    \ < 2 {\n        return nil\n    }\n    smallest := numbers[0]\n    largest :=\
    \ numbers[0]\n    for _, number := range numbers[1:] {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    smallest := numbers[0]\n    largest := numbers[0]\n   \
    \ smallest := numbers[0]\n    largest := numbers[0]\n    for _, number := range\
    \ numbers {\n        if number < smallest {\n            smallest = number\n \
    \       }\n        if number > largest {\n            largest = number\n     \
    \   }\n    }\n    result := []interface{}{smallest, largest}\n    return result\n\
    }\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    result := []interface{}{smallest,\
    \ largest}\n    return result\n}\n", "    smallest := numbers[0]\n    largest\
    \ := numbers[0]\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return []interface{}{smallest, largest}\n}\n", "    if\
    \ len(numbers) < 2 {\n        return nil\n    }\n    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    result := []interface{}{smallest,\
    \ largest}\n    return result\n}\n", "    smallest := numbers[0]\n    largest\
    \ := numbers[0]\n    for _, number := range numbers {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n\n  \
    \  smallest := numbers[0]\n    largest := numbers[0]\n    for _, number := range\
    \ numbers[1:] {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n\n    return []interface{}{smallest, largest}\n}\n", "    sort.Float64s(numbers)\n\
    \    smallest := numbers[0]\n    largest := numbers[0]\n    i := 0\n    for i\
    \ < len(numbers) {\n        if numbers[i] < smallest {\n            smallest =\
    \ numbers[i]\n        }\n        if numbers[i] > largest {\n            largest\
    \ = numbers[i]\n        }\n        i++\n    }\n    result := []interface{}{}\n\
    \    if smallest != largest {\n        result = append(result, smallest)\n   \
    \     result = append(result, largest)\n    }\n    return result\n}\n", "    smallestNumber\
    \ := numbers[0]\n    largestNumber := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallestNumber {\n            smallestNumber = number\n\
    \        }\n        if number > largestNumber {\n            largestNumber = number\n\
    \        }\n    }\n    return []interface{}{smallestNumber, largestNumber}\n}\n",
  "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    smallest := numbers[0]\n    largest := numbers[0]\n   \
    \ for _, number := range numbers {\n        if number < smallest {\n         \
    \   smallest = number\n        }\n        if number > largest {\n            largest\
    \ = number\n        }\n    }\n    return []interface{}{smallest, largest}\n}\n",
  "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers[1:] {\n       \
    \ if number < smallest {\n            smallest = number\n        }\n        if\
    \ number > largest {\n            largest = number\n        }\n    }\n    return\
    \ []interface{}{smallest, largest}\n}\n", "    smallestNumber := numbers[0]\n\
    \    largestNumber := numbers[0]\n    for _, number := range numbers {\n     \
    \   if number < smallestNumber {\n            smallestNumber = number\n      \
    \  }\n        if number > largestNumber {\n            largestNumber = number\n\
    \        }\n    }\n    return []interface{}{smallestNumber, largestNumber}\n}\n",
  "    smallestNumber := numbers[0]\n    largestNumber := numbers[0]\n    for _, number\
    \ := range numbers[1:] {\n        if number < smallestNumber {\n            smallestNumber\
    \ = number\n        }\n        if number > largestNumber {\n            largestNumber\
    \ = number\n        }\n    }\n    return []interface{}{smallestNumber, largestNumber}\n\
    }\n", "    if len(numbers) < 2 {\n        return nil\n    }\n\n    smallest :=\
    \ numbers[0]\n    largest := numbers[0]\n    smallest_index := 0\n    largest_index\
    \ := 0\n\n    for index := 1; index < len(numbers); index++ {\n        if numbers[index]\
    \ < smallest {\n            smallest = numbers[index]\n            smallest_index\
    \ = index\n        }\n        if numbers[index] > largest {\n            largest\
    \ = numbers[index]\n            largest_index = index\n        }\n    }\n\n  \
    \  return []interface{}{smallest_index, largest_index}\n}\n", "    if len(numbers)\
    \ < 2 {\n        return nil\n    }\n    smallest := numbers[0]\n    largest :=\
    \ numbers[0]\n    for _, number := range numbers {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    smallest := numbers[0]\n    largest := numbers[0]\n   \
    \ for _, number := range numbers[1:] {\n        if number < smallest {\n     \
    \       smallest = number\n        }\n        if number > largest {\n        \
    \    largest = number\n        }\n    }\n    return []interface{}{smallest, largest}\n\
    }\n", "    smallestNumber := numbers[0]\n    largestNumber := numbers[0]\n   \
    \ for _, number := range numbers[1:] {\n        if number < smallestNumber {\n\
    \            smallestNumber = number\n        }\n        if number > largestNumber\
    \ {\n            largestNumber = number\n        }\n    }\n    return []interface{}{smallestNumber,\
    \ largestNumber}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n\
    \n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number :=\
    \ range numbers[1:] {\n        if number < smallest {\n            smallest =\
    \ number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n\n    return []interface{}{smallest, largest}\n}\n", "    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    smallest := numbers[0]\n    largest\
    \ := numbers[0]\n    for _, number := range numbers {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    smallestNumber := numbers[0]\n    largestNumber := numbers[0]\n\
    \    for _, number := range numbers[1:] {\n        if number < smallestNumber\
    \ {\n            smallestNumber = number\n        }\n        if number > largestNumber\
    \ {\n            largestNumber = number\n        }\n    }\n    return []interface{}{smallestNumber,\
    \ largestNumber}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n\
    \n    smallest := numbers[0]\n    largest := numbers[0]\n    index := 0\n\n  \
    \  for i := 1; i < len(numbers); i++ {\n        if numbers[i] < smallest {\n \
    \           smallest = numbers[i]\n            index = i\n        }\n        if\
    \ numbers[i] > largest {\n            largest = numbers[i]\n        }\n    }\n\
    \n    return []interface{}{smallest, largest}\n}\n", "    smallestNum := numbers[0]\n\
    \    largestNum := numbers[0]\n    for _, num := range numbers[1:] {\n       \
    \ if num < smallestNum {\n            smallestNum = num\n        }\n        if\
    \ num > largestNum {\n            largestNum = num\n        }\n    }\n    smallestNumInt,\
    \ _ := smallestNum.(int)\n    largestNumInt, _ := largestNum.(int)\n    smallestNumInt\
    \ -= 1\n    largestNumInt += 1\n    result := []interface{}{}\n    for i := 0;\
    \ i < len(numbers); i++ {\n        if numbers[i] == smallestNum {\n          \
    \  result = append(result, smallestNumInt)\n        }\n        if numbers[i] ==\
    \ largestNum {\n            result = append(result, largestNumInt)\n        }\n\
    \    }\n    return result\n}\n", "    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number := range\
    \ numbers {\n        if number < smallest {\n            smallest = number\n \
    \       }\n        if number > largest {\n            largest = number\n     \
    \   }\n    }\n    result := []interface{}{smallest, largest}\n    return result\n\
    }\n", "    smallestNumber := numbers[0]\n    largestNumber := numbers[0]\n   \
    \ for _, number := range numbers[1:] {\n        if number < smallestNumber {\n\
    \            smallestNumber = number\n        }\n        if number > largestNumber\
    \ {\n            largestNumber = number\n        }\n    }\n    return []interface{}{smallestNumber,\
    \ largestNumber}\n}\n", "    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    smallest_index := 0\n    largest_index := 0\n\n    for i := 1; i < len(numbers);\
    \ i++ {\n        if numbers[i] < smallest {\n            smallest = numbers[i]\n\
    \            smallest_index = i\n        }\n        if numbers[i] > largest {\n\
    \            largest = numbers[i]\n            largest_index = i\n        }\n\
    \    }\n\n    return []interface{}{smallest_index, largest_index}\n}\n", "   \
    \ smallest := numbers[0]\n    largest := numbers[0]\n    for _, number := range\
    \ numbers[1:] {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    return []interface{}{smallest, largest}\n}\n", "    if len(numbers)\
    \ < 2 {\n        return nil\n    }\n    smallest := numbers[0]\n    largest :=\
    \ numbers[0]\n    for _, number := range numbers[1:] {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    smallestNumber := numbers[0]\n    largestNumber := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < smallestNumber {\n\
    \            smallestNumber = number\n        } else if number > largestNumber\
    \ {\n            largestNumber = number\n        }\n    }\n    return []interface{}{smallestNumber,\
    \ largestNumber}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n\
    \n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number :=\
    \ range numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n\n    result := []interface{}{smallest, largest}\n    return result\n\
    }\n", "    smallest, _ := numbers[0], numbers[0]\n    largest, _ := numbers[0],\
    \ numbers[0]\n    for _, number := range numbers {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n\n  \
    \  smallest := numbers[0]\n    largest := numbers[0]\n    for _, number := range\
    \ numbers[1:] {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n\n    return []interface{}{smallest, largest}\n}\n", "    if len(numbers)\
    \ < 2 {\n        return nil\n    }\n\n    smallest := numbers[0]\n    largest\
    \ := numbers[0]\n    smallest_index := 0\n    largest_index := 0\n\n    for index\
    \ := 1; index < len(numbers); index++ {\n        if numbers[index] < smallest\
    \ {\n            smallest = numbers[index]\n            smallest_index = index\n\
    \        }\n        if numbers[index] > largest {\n            largest = numbers[index]\n\
    \            largest_index = index\n        }\n    }\n\n    return []interface{}{smallest_index,\
    \ largest_index}\n}\n", "    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers[1:] {\n        if number < smallest {\n  \
    \          smallest = number\n        }\n        if number > largest {\n     \
    \       largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    smallest := numbers[0]\n    largest := numbers[0]\n   \
    \ smallest_index := 0\n    largest_index := 0\n\n    for i := 1; i < len(numbers);\
    \ i++ {\n        if numbers[i] < smallest {\n            smallest = numbers[i]\n\
    \            smallest_index = i\n        }\n        if numbers[i] > largest {\n\
    \            largest = numbers[i]\n            largest_index = i\n        }\n\
    \    }\n\n    return []interface{}{smallest_index, largest_index}\n}\n", "   \
    \ if len(numbers) < 2 {\n        return nil\n    }\n\n    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    smallest := numbers[0]\n    largest := numbers[0]\n   \
    \ for _, number := range numbers[1:] {\n        if number < smallest {\n     \
    \       smallest = number\n        }\n        if number > largest {\n        \
    \    largest = number\n        }\n    }\n    return []interface{}{smallest, largest}\n\
    }\n", "    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers[1:] {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return []interface{}{smallest, largest}\n}\n", "    if\
    \ len(numbers) < 2 {\n        return nil\n    }\n    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers[1:] {\n       \
    \ if number < smallest {\n            smallest = number\n        }\n        if\
    \ number > largest {\n            largest = number\n        }\n    }\n    return\
    \ []interface{}{smallest, largest}\n}\n", "    // Sort the numbers in ascending\
    \ order\n    sort.Float64s(numbers)\n\n    // Find the two numbers that are closest\
    \ to each other\n    closest1 := numbers[0]\n    closest2 := numbers[1]\n\n  \
    \  for i := 2; i < len(numbers); i++ {\n        if numbers[i-1] > closest1 {\n\
    \            closest1 = numbers[i-1]\n        }\n        if numbers[i] > closest2\
    \ {\n            closest2 = numbers[i]\n        }\n    }\n\n    // Return the\
    \ two numbers in order\n    return []interface{}{closest1, closest2}\n}\n", " \
    \   if len(numbers) < 2 {\n        return nil\n    }\n\n    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    smallestIndex := 0\n    largestIndex := 0\n\n\
    \    for i := 1; i < len(numbers); i++ {\n        if numbers[i] < smallest {\n\
    \            smallest = numbers[i]\n            smallestIndex = i\n        }\n\
    \n        if numbers[i] > largest {\n            largest = numbers[i]\n      \
    \      largestIndex = i\n        }\n    }\n\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    smallest := numbers[0]\n    largest := numbers[0]\n   \
    \ for _, number := range numbers[1:] {\n        if number < smallest {\n     \
    \       smallest = number\n        }\n        if number > largest {\n        \
    \    largest = number\n        }\n    }\n    return []interface{}{smallest, largest}\n\
    }\n", "    smallestNumber := numbers[0]\n    largestNumber := numbers[0]\n   \
    \ for _, number := range numbers {\n        if number < smallestNumber {\n   \
    \         smallestNumber = number\n        } else if number > largestNumber {\n\
    \            largestNumber = number\n        }\n    }\n    return []interface{}{smallestNumber,\
    \ largestNumber}\n}\n", "    sort.Float64s(numbers)\n    smallestNumber := numbers[0]\n\
    \    largestNumber := numbers[0]\n    for _, number := range numbers[1:] {\n \
    \       if number < smallestNumber {\n            smallestNumber = number\n  \
    \      } else if number > largestNumber {\n            largestNumber = number\n\
    \        }\n    }\n    return []interface{}{smallestNumber, largestNumber}\n}\n",
  "    if len(numbers) < 2 {\n        return nil\n    }\n\n    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    smallest_index := 0\n    largest_index := 0\n\n\
    \    for i := 1; i < len(numbers); i++ {\n        if numbers[i] < smallest {\n\
    \            smallest = numbers[i]\n            smallest_index = i\n        }\n\
    \        if numbers[i] > largest {\n            largest = numbers[i]\n       \
    \     largest_index = i\n        }\n    }\n\n    return []interface{}{smallest_index,\
    \ largest_index}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n\
    \    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number := range\
    \ numbers {\n        if number < smallest {\n            smallest = number\n \
    \       }\n        if number > largest {\n            largest = number\n     \
    \   }\n    }\n    return []interface{}{smallest, largest}\n}\n", "    if len(numbers)\
    \ < 2 {\n        return nil\n    }\n    smallest := numbers[0]\n    largest :=\
    \ numbers[0]\n    for _, number := range numbers[1:] {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    smallest, _ := numbers[0], numbers[0]\n    largest, _ :=\
    \ numbers[0], numbers[0]\n    for _, number := range numbers[1:] {\n        if\
    \ number < smallest {\n            smallest = number\n        }\n        if number\
    \ > largest {\n            largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    smallest := numbers[0]\n    largest := numbers[0]\n   \
    \ for _, number := range numbers {\n        if number < smallest {\n         \
    \   smallest = number\n        }\n        if number > largest {\n            largest\
    \ = number\n        }\n    }\n    return []interface{}{smallest, largest}\n}\n",
  "    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number := range\
    \ numbers {\n        if number < smallest {\n            smallest = number\n \
    \       }\n        if number > largest {\n            largest = number\n     \
    \   }\n    }\n    return []interface{}{smallest, largest}\n}\n", "    if len(numbers)\
    \ < 2 {\n        return nil\n    }\n\n    smallest := numbers[0]\n    largest\
    \ := numbers[0]\n    smallestIndex := 0\n    largestIndex := 0\n\n    for i :=\
    \ 1; i < len(numbers); i++ {\n        if numbers[i] < smallest {\n           \
    \ smallest = numbers[i]\n            smallestIndex = i\n        }\n        if\
    \ numbers[i] > largest {\n            largest = numbers[i]\n            largestIndex\
    \ = i\n        }\n    }\n\n    return []interface{}{smallestIndex, largestIndex}\n\
    }\n", "    sort.Float64s(numbers)\n    smallest := numbers[0]\n    largest :=\
    \ numbers[0]\n    index := 0\n    for _, number := range numbers {\n        if\
    \ number < smallest {\n            smallest = number\n        }\n        if number\
    \ > largest {\n            largest = number\n        }\n        if number == smallest\
    \ {\n            smallest = number\n        }\n        if number == largest {\n\
    \            largest = number\n        }\n        if index == len(numbers)-1 {\n\
    \            break\n        }\n        if number == numbers[index+1] {\n     \
    \       index += 1\n            continue\n        }\n        if number == numbers[index-1]\
    \ {\n            index -= 1\n            continue\n        }\n        if number\
    \ == numbers[index-1] && number == numbers[index+1] {\n            index += 1\n\
    \            index -= 1\n            continue\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    return []interface{}{smallest, largest}\n}\n", "    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers[1:] {\n       \
    \ if number < smallest {\n            smallest = number\n        }\n        if\
    \ number > largest {\n            largest = number\n        }\n    }\n    return\
    \ []interface{}{smallest, largest}\n}\n", "    smallestNumber := numbers[0]\n\
    \    largestNumber := numbers[0]\n    for _, number := range numbers[1:] {\n \
    \       if number < smallestNumber {\n            smallestNumber = number\n  \
    \      }\n        if number > largestNumber {\n            largestNumber = number\n\
    \        }\n    }\n    return []interface{}{smallestNumber, largestNumber}\n}\n",
  "    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number := range\
    \ numbers {\n        if number < smallest {\n            smallest = number\n \
    \       }\n        if number > largest {\n            largest = number\n     \
    \   }\n    }\n    return []interface{}{smallest, largest}\n}\n", "    if len(numbers)\
    \ < 2 {\n        return nil\n    }\n\n    smallest := numbers[0]\n    largest\
    \ := numbers[0]\n    for _, number := range numbers[1:] {\n        if number <\
    \ smallest {\n            smallest = number\n        }\n        if number > largest\
    \ {\n            largest = number\n        }\n    }\n\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    smallest, _ := numbers[0], numbers[0]\n    largest, _ :=\
    \ numbers[0], numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    smallest, _ := numbers[0], numbers[0]\n    largest, _ :=\
    \ numbers[0], numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    smallest := numbers[0]\n    largest := numbers[0]\n   \
    \ for _, number := range numbers {\n        if number < smallest {\n         \
    \   smallest = number\n        }\n        if number > largest {\n            largest\
    \ = number\n        }\n    }\n    result := []interface{}{smallest, largest}\n\
    \    return result\n}\n", "    sort.Float64s(numbers)\n    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers[1:] {\n       \
    \ if number < smallest {\n            smallest = number\n        }\n        if\
    \ number > largest {\n            largest = number\n        }\n    }\n    return\
    \ []interface{}{smallest, largest}\n}\n", "    smallest := numbers[0]\n    largest\
    \ := numbers[0]\n    for _, number := range numbers[1:] {\n        if number <\
    \ smallest {\n            smallest = number\n        }\n        if number > largest\
    \ {\n            largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    // Sort the numbers in ascending order\n    sort.Float64s(numbers)\n\
    \n    // Find the two numbers that are closest to each other\n    smallestNumber\
    \ := numbers[0]\n    largestNumber := numbers[0]\n    for _, number := range numbers[1:]\
    \ {\n        if number < smallestNumber {\n            smallestNumber = number\n\
    \        } else if number > largestNumber {\n            largestNumber = number\n\
    \        }\n    }\n\n    // Return the two numbers in order\n    return []interface{}{smallestNumber,\
    \ largestNumber}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n\
    \n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number :=\
    \ range numbers[1:] {\n        if number < smallest {\n            smallest =\
    \ number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n\n    return []interface{}{smallest, largest}\n}\n", "    smallestNumber\
    \ := numbers[0]\n    largestNumber := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallestNumber {\n            smallestNumber = number\n\
    \        }\n        if number > largestNumber {\n            largestNumber = number\n\
    \        }\n    }\n    return []interface{}{smallestNumber, largestNumber}\n}\n",
  "    sort.Sort(sort.Float64Slice(numbers))\n    smallestNumber := numbers[0]\n \
    \   largestNumber := numbers[0]\n    for _, number := range numbers[1:] {\n  \
    \      if number < smallestNumber {\n            smallestNumber = number\n   \
    \     }\n        if number > largestNumber {\n            largestNumber = number\n\
    \        }\n    }\n    return []interface{}{smallestNumber, largestNumber}\n}\n",
  "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    smallest_index := 0\n    largest_index := 0\n\
    \    for i := 1; i < len(numbers); i++ {\n        if numbers[i] < smallest {\n\
    \            smallest = numbers[i]\n            smallest_index = i\n        }\n\
    \        if numbers[i] > largest {\n            largest = numbers[i]\n       \
    \     largest_index = i\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    sort.Sort(sort.Float64Slice(numbers))\n    smallest :=\
    \ numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers[1:]\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    return []interface{}{smallest, largest}\n}\n", "    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < smallest {\n      \
    \      smallest = number\n        }\n        if number > largest {\n         \
    \   largest = number\n        }\n    }\n    return []interface{}{smallest, largest}\n\
    }\n", "    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers[1:] {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return []interface{}{smallest, largest}\n}\n", "    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    smallest := numbers[0]\n    largest\
    \ := numbers[0]\n    for _, number := range numbers {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n\n  \
    \  smallest := numbers[0]\n    largest := numbers[0]\n    for _, number := range\
    \ numbers[1:] {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n\n    return []interface{}{smallest, largest}\n}\n", "    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers[1:]\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    return []interface{}{smallest, largest}\n}\n", "    smallest, _ := math.Abs(numbers[0])\n\
    \    largest, _ := math.Abs(numbers[1])\n    smallest := math.Abs(numbers[0])\n\
    \    largest := math.Abs(numbers[1])\n    smallest := math.Abs(numbers[0])\n \
    \   largest := math.Abs(numbers[1])\n    smallest := math.Abs(numbers[0])\n  \
    \  largest := math.Abs(numbers[1])\n    smallest := math.Abs(numbers[0])\n   \
    \ largest := math.Abs(numbers[1])\n    smallest := math.Abs(numbers[0])\n    largest\
    \ := math.Abs(numbers[1])\n    smallest := math.Abs(numbers[0])\n    largest :=\
    \ math.Abs(numbers[1])\n    smallest := math.Abs(numbers[0])\n    largest := math.Abs(numbers[1])\n\
    \    smallest := math.Abs(numbers[0])\n    largest := math.Abs(numbers[1])\n \
    \   smallest := math.Abs(numbers[0])\n    largest := math.Abs(numbers[1])\n  \
    \  smallest := math.Abs(numbers[0])\n    largest := math.Abs(numbers[1])\n   \
    \ smallest := math.Abs(numbers[0])\n    largest := math.Abs(numbers[1])\n    smallest\
    \ := math.Abs(numbers[0])\n    largest := math.Abs(numbers[1])\n    smallest :=\
    \ math.Abs(numbers[0])\n    largest := math.Abs(numbers[1])\n    smallest := math.Abs(numbers[0])\n\
    \    largest := math.Abs(numbers[1])\n    smallest := math.Abs(numbers[0])\n \
    \   largest := math.Abs(numbers[1])\n    smallest := math.Abs(numbers[0])\n  \
    \  largest := math.Abs(numbers[1])\n    smallest := math.Abs(numbers[0])\n   \
    \ largest := math.Abs(numbers[1])\n    smallest := math.Abs(numbers[0])\n    largest\
    \ := math.Abs(numbers[1])\n    smallest := math.Abs(numbers[0])\n    largest :=\
    \ math.Abs(numbers[1])\n    smallest := math.Abs(numbers[0])\n    largest := math.Abs(numbers[1])\n\
    \    smallest := math.Abs(numbers[0])\n    largest := math.Abs(numbers[1])\n \
    \   smallest := math.Abs(numbers[0])\n    largest := math.Abs(numbers[1])\n  \
    \  smallest := math.Abs(numbers[0])\n    largest := math.Abs(numbers[1])\n   \
    \ smallest := math.Abs(numbers[0])\n    largest := math.Abs(numbers[1])\n    smallest\
    \ := math.Abs(numbers[0])\n    largest := math.Abs(numbers[1])\n    smallest :=\
    \ math.Abs(numbers[0])\n    largest := math.Abs(numbers[1])\n    smallest := math.Abs(numbers[0])\n\
    \    largest := math.Abs(numbers[1])\n    smallest ", "    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    smallest_index := 0\n    largest_index\
    \ := 0\n    for i := 1; i < len(numbers); i++ {\n        if numbers[i] < smallest\
    \ {\n            smallest = numbers[i]\n            smallest_index = i\n     \
    \   }\n        if numbers[i] > largest {\n            largest = numbers[i]\n \
    \           largest_index = i\n        }\n    }\n    return []interface{}{smallest_index,\
    \ largest_index}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n\
    \    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number := range\
    \ numbers[1:] {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    return []interface{}{smallest, largest}\n}\n", "    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    smallest := numbers[0]\n    largest\
    \ := numbers[0]\n    for _, number := range numbers {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    sort.Float64s(numbers)\n    smallest := numbers[0]\n  \
    \  largest := numbers[0]\n    smallest_index := 0\n    largest_index := 0\n  \
    \  for i := 1; i < len(numbers); i++ {\n        if numbers[i] < smallest {\n \
    \           smallest = numbers[i]\n            smallest_index = i\n        }\n\
    \        if numbers[i] > largest {\n            largest = numbers[i]\n       \
    \     largest_index = i\n        }\n    }\n    return []interface{}{smallest_index,\
    \ largest_index}\n}\n", "    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    smallest_index := 0\n    largest_index := 0\n    for i := 1; i < len(numbers);\
    \ i++ {\n        if numbers[i] < smallest {\n            smallest = numbers[i]\n\
    \            smallest_index = i\n        }\n        if numbers[i] > largest {\n\
    \            largest = numbers[i]\n            largest_index = i\n        }\n\
    \    }\n    return []interface{}{smallest, largest}\n}\n", "    sort.Float64s(numbers)\n\
    \    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number := range\
    \ numbers[1:] {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    return []interface{}{smallest, largest}\n}\n", "    if len(numbers)\
    \ < 2 {\n        return nil\n    }\n\n    smallest := numbers[0]\n    largest\
    \ := numbers[0]\n    for _, number := range numbers[1:] {\n        if number <\
    \ smallest {\n            smallest = number\n        }\n        if number > largest\
    \ {\n            largest = number\n        }\n    }\n\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n\n  \
    \  smallest := numbers[0]\n    largest := numbers[0]\n    for _, number := range\
    \ numbers[1:] {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n\n    return []interface{}{smallest, largest}\n}\n", "    // If\
    \ the list is empty or has only one element return an empty list\n    if len(numbers)\
    \ < 2 {\n        return []\n    }\n\n    // Find the two closest numbers to the\
    \ first element\n    closest1 := numbers[0]\n    closest2 := numbers[1]\n    diff\
    \ := closest1 - closest2\n\n    // Find the two closest numbers to the second\
    \ element\n    for i := 1; i < len(numbers); i++ {\n        diff += numbers[i]\
    \ - numbers[i-1]\n        if diff < closest1 {\n            closest1 = diff\n\
    \        } else if diff > closest2 {\n            closest2 = diff\n        }\n\
    \    }\n\n    // Return the two closest numbers in order\n    return []interface{}{closest1,\
    \ closest2}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n   \
    \ smallest := numbers[0]\n    largest := numbers[0]\n    for _, number := range\
    \ numbers {\n        if number < smallest {\n            smallest = number\n \
    \       }\n        if number > largest {\n            largest = number\n     \
    \   }\n    }\n    result := []interface{}{smallest, largest}\n    return result\n\
    }\n", "    smallest := numbers[0]\n    largest := numbers[0]\n    smallest :=\
    \ numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers {\n\
    \        if number < smallest {\n            smallest = number\n        }\n  \
    \      if number > largest {\n            largest = number\n        }\n    }\n\
    \    return []interface{}{smallest, largest}\n}\n", "    if len(numbers) < 2 {\n\
    \        return nil\n    }\n\n    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    smallest := numbers[0]\n    largest := numbers[0]\n\n    for _, number :=\
    \ range numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n\n    return []interface{}{smallest, largest}\n}\n", "    sort.Float64s(numbers)\n\
    \    smallest := numbers[0]\n    largest := numbers[0]\n    smallest_index :=\
    \ 0\n    largest_index := 0\n    for i := 1; i < len(numbers); i++ {\n       \
    \ if numbers[i] < smallest {\n            smallest = numbers[i]\n            smallest_index\
    \ = i\n        }\n        if numbers[i] > largest {\n            largest = numbers[i]\n\
    \            largest_index = i\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    sort.Float64s(numbers)\n    smallest := numbers[0]\n  \
    \  largest := numbers[0]\n    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers[1:] {\n        if number < smallest {\n  \
    \          smallest = number\n        }\n        if number > largest {\n     \
    \       largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    smallest, _ := numbers[0], numbers[0]\n    largest, _ :=\
    \ numbers[0], numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    smallestNumber := numbers[0]\n    largestNumber := numbers[0]\n\
    \    for _, number := range numbers[1:] {\n        if number < smallestNumber\
    \ {\n            smallestNumber = number\n        }\n        if number > largestNumber\
    \ {\n            largestNumber = number\n        }\n    }\n    return []interface{}{smallestNumber,\
    \ largestNumber}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n\
    \n    smallest := numbers[0]\n    largest := numbers[0]\n    i := 0\n    for _,\
    \ number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n        i++\n    }\n\n    result := []interface{}{smallest, largest}\n\
    \    return result\n}\n", "    smallestNumber := numbers[0]\n    largestNumber\
    \ := numbers[0]\n    for _, number := range numbers[1:] {\n        if number <\
    \ smallestNumber {\n            smallestNumber = number\n        }\n        if\
    \ number > largestNumber {\n            largestNumber = number\n        }\n  \
    \  }\n    return []interface{}{smallestNumber, largestNumber}\n}\n", "    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    return []interface{}{smallest, largest}\n}\n", "    // Sort the numbers in\
    \ ascending order\n    sort.Float64s(numbers)\n\n    // Find the two closest numbers\
    \ to the first number\n    closest1 := numbers[0]\n    closest2 := numbers[0]\n\
    \    for i := 1; i < len(numbers); i++ {\n        if numbers[i] < closest1 {\n\
    \            closest1 = numbers[i]\n        } else if numbers[i] > closest2 {\n\
    \            closest2 = numbers[i]\n        }\n    }\n\n    // Return the two\
    \ closest numbers in order\n    return []interface{}{closest1, closest2}\n}\n",
  "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers[1:]\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    return []interface{}{smallest, largest}\n}\n", "    if len(numbers) < 2 {\n\
    \        return nil\n    }\n    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers[1:] {\n        if number < smallest {\n  \
    \          smallest = number\n        }\n        if number > largest {\n     \
    \       largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    smallest_index := 0\n    largest_index\
    \ := 0\n    for i := 1; i < len(numbers); i++ {\n        if numbers[i] < smallest\
    \ {\n            smallest = numbers[i]\n            smallest_index = i\n     \
    \   }\n        if numbers[i] > largest {\n            largest = numbers[i]\n \
    \           largest_index = i\n        }\n    }\n    return []interface{}{smallest_index,\
    \ largest_index}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n\
    \    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number := range\
    \ numbers[1:] {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    return []interface{}{smallest, largest}\n}\n", "    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    return []interface{}{smallest, largest}\n}\n", "    smallestNumber := numbers[0]\n\
    \    largestNumber := numbers[0]\n    for _, number := range numbers[1:] {\n \
    \       if number < smallestNumber {\n            smallestNumber = number\n  \
    \      }\n        if number > largestNumber {\n            largestNumber = number\n\
    \        }\n    }\n    return []interface{}{smallestNumber, largestNumber}\n}\n",
  "    sort.Float64s(numbers)\n    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers[1:] {\n        if number < smallest {\n  \
    \          smallest = number\n        }\n        if number > largest {\n     \
    \       largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    smallest := numbers[0]\n    largest := numbers[0]\n   \
    \ for _, number := range numbers[1:] {\n        if number < smallest {\n     \
    \       smallest = number\n        }\n        if number > largest {\n        \
    \    largest = number\n        }\n    }\n    return []interface{}{smallest, largest}\n\
    }\n", "    if len(numbers) < 2 {\n        return nil\n    }\n\n    smallest :=\
    \ numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers[1:]\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \n    return []interface{}{smallest, largest}\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
