language: go_test.go
name: HumanEval_64_vowels_count
results:
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowels_count\
    \ := 0\n    for _, v := range s {\n        if v == 'y' {\n            vowels_count\
    \ += 1\n        }\n        if !contains(vowels, v) {\n            vowels_count\
    \ += 1\n        }\n    }\n    return vowels_count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdlj47zgk_test.go:20:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowelsCount\
    \ := 0\n    for _, v := range s {\n        if v == 'y' {\n            vowelsCount++\n\
    \        }\n        for _, v1 := range vowels {\n            if v == v1 {\n  \
    \              vowelsCount++\n            }\n        }\n    }\n    return vowelsCount\n\
    }\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n     { actual:\
    \ candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"key\"), expected:\
    \ 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n     { actual: candidate(\"\
    keY\"), expected: 2 },\n     { actual: candidate(\"bYe\"), expected: 1 },\n  \
    \   { actual: candidate(\"ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp95_hud7v_test.go:21:21: invalid operation: v == v1 (mismatched types rune
    and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowels_count\
    \ := 0\n    for _, letter := range s {\n        if letter == 'y' {\n         \
    \   vowels_count += 1\n        }\n        if !contains(vowels, letter) {\n   \
    \         vowels_count += 1\n        }\n    }\n    return vowels_count\n}\n\n\
    func TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n     { actual:\
    \ candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"key\"), expected:\
    \ 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n     { actual: candidate(\"\
    keY\"), expected: 2 },\n     { actual: candidate(\"bYe\"), expected: 1 },\n  \
    \   { actual: candidate(\"ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphcjpc57c_test.go:20:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowels_count\
    \ := 0\n    for _, v := range s {\n        if v == \"y\" && len(s) == 0 {\n  \
    \          vowels_count += 1\n        }\n        if v == \"y\" && len(s) != 0\
    \ {\n            vowels_count -= 1\n        }\n        if !contains(vowels, v)\
    \ {\n            vowels_count += 1\n        }\n    }\n    return vowels_count\n\
    }\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n     { actual:\
    \ candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"key\"), expected:\
    \ 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n     { actual: candidate(\"\
    keY\"), expected: 2 },\n     { actual: candidate(\"bYe\"), expected: 1 },\n  \
    \   { actual: candidate(\"ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp74q_yp03_test.go:17:17: invalid operation: v == "y" (mismatched types
    rune and untyped string)

    /tmp/tmp74q_yp03_test.go:20:17: invalid operation: v == "y" (mismatched types
    rune and untyped string)

    /tmp/tmp74q_yp03_test.go:23:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowels_count\
    \ := 0\n    for _, v := range s {\n        if v == 'y' {\n            vowels_count\
    \ += 1\n        }\n        if v == 'a' || v == 'e' || v == 'i' || v == 'o' ||\
    \ v == 'u' {\n            vowels_count += 1\n        }\n    }\n    return vowels_count\n\
    }\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n     { actual:\
    \ candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"key\"), expected:\
    \ 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n     { actual: candidate(\"\
    keY\"), expected: 2 },\n     { actual: candidate(\"bYe\"), expected: 1 },\n  \
    \   { actual: candidate(\"ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfqcl2iid_test.go:14:5: vowels declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowels_count\
    \ := 0\n    for _, v := range s {\n        if v == 'y' {\n            vowels_count\
    \ += 1\n        }\n        if v == 'a' || v == 'e' || v == 'i' || v == 'o' ||\
    \ v == 'u' {\n            vowels_count += 1\n        }\n    }\n    return vowels_count\n\
    }\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n     { actual:\
    \ candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"key\"), expected:\
    \ 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n     { actual: candidate(\"\
    keY\"), expected: 2 },\n     { actual: candidate(\"bYe\"), expected: 1 },\n  \
    \   { actual: candidate(\"ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfqcl2iid_test.go:14:5: vowels declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowels_count\
    \ := 0\n    for _, v := range s {\n        if v == 'a' || v == 'e' || v == 'i'\
    \ || v == 'o' || v == 'u' {\n            vowels_count++\n        }\n    }\n  \
    \  return vowels_count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9qcrony6_test.go:14:5: vowels declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowelsCount\
    \ := 0\n    for _, v := range s {\n        if v == 'y' {\n            vowelsCount++\n\
    \        }\n        for _, vv := range vowels {\n            if v == vv {\n  \
    \              vowelsCount++\n            }\n        }\n    }\n    return vowelsCount\n\
    }\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n     { actual:\
    \ candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"key\"), expected:\
    \ 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n     { actual: candidate(\"\
    keY\"), expected: 2 },\n     { actual: candidate(\"bYe\"), expected: 1 },\n  \
    \   { actual: candidate(\"ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy_k90be7_test.go:21:21: invalid operation: v == vv (mismatched types rune
    and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowels_count\
    \ := 0\n    for _, v := range s {\n        if v == 'y' {\n            vowels_count\
    \ += 1\n        }\n        if !contains(vowels, v) {\n            vowels_count\
    \ += 1\n        }\n    }\n    return vowels_count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdlj47zgk_test.go:20:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowels_count\
    \ := 0\n    for _, v := range s {\n        if v == 'y' {\n            vowels_count\
    \ += 1\n        }\n        if !contains(vowels, v) {\n            vowels_count\
    \ += 1\n        }\n    }\n    return vowels_count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdlj47zgk_test.go:20:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowelsCount\
    \ := 0\n    for _, v := range s {\n        if v == 'y' {\n            vowelsCount++\n\
    \        }\n        for _, vv := range vowels {\n            if v == vv {\n  \
    \              vowelsCount++\n            }\n        }\n    }\n    return vowelsCount\n\
    }\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n     { actual:\
    \ candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"key\"), expected:\
    \ 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n     { actual: candidate(\"\
    keY\"), expected: 2 },\n     { actual: candidate(\"bYe\"), expected: 1 },\n  \
    \   { actual: candidate(\"ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy_k90be7_test.go:21:21: invalid operation: v == vv (mismatched types rune
    and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowels_count\
    \ := 0\n    for _, v := range s {\n        if v == 'a' || v == 'e' || v == 'i'\
    \ || v == 'o' || v == 'u' {\n            vowels_count++\n        }\n    }\n  \
    \  return vowels_count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9qcrony6_test.go:14:5: vowels declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowelsCount\
    \ := 0\n    for _, v := range s {\n        if v == 'y' {\n            vowelsCount++\n\
    \        }\n        if v == 'a' || v == 'e' || v == 'i' || v == 'o' || v == 'u'\
    \ {\n            vowelsCount++\n        }\n    }\n    return vowelsCount\n}\n\n\
    func TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n     { actual:\
    \ candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"key\"), expected:\
    \ 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n     { actual: candidate(\"\
    keY\"), expected: 2 },\n     { actual: candidate(\"bYe\"), expected: 1 },\n  \
    \   { actual: candidate(\"ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3k7xd2ab_test.go:14:5: vowels declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowelsCount\
    \ := 0\n    for _, v := range s {\n        if v == 'y' {\n            vowelsCount++\n\
    \        }\n        for _, vv := range vowels {\n            if v == vv {\n  \
    \              vowelsCount++\n            }\n        }\n    }\n    return vowelsCount\n\
    }\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n     { actual:\
    \ candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"key\"), expected:\
    \ 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n     { actual: candidate(\"\
    keY\"), expected: 2 },\n     { actual: candidate(\"bYe\"), expected: 1 },\n  \
    \   { actual: candidate(\"ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy_k90be7_test.go:21:21: invalid operation: v == vv (mismatched types rune
    and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowels_count\
    \ := 0\n    for _, v := range s {\n        if v == 'y' {\n            vowels_count\
    \ += 1\n        }\n        if !contains(vowels, v) {\n            vowels_count\
    \ += 1\n        }\n    }\n    return vowels_count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdlj47zgk_test.go:20:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowels_count\
    \ := 0\n    for _, v := range s {\n        if v == 'y' {\n            vowels_count\
    \ += 1\n        }\n        for _, vv := range vowels {\n            if v == vv\
    \ {\n                vowels_count += 1\n            }\n        }\n    }\n    return\
    \ vowels_count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n  \
    \   { actual: candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"\
    key\"), expected: 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n  \
    \   { actual: candidate(\"keY\"), expected: 2 },\n     { actual: candidate(\"\
    bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected: 3 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo75mp5a__test.go:21:21: invalid operation: v == vv (mismatched types rune
    and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowels_count\
    \ := 0\n    for _, letter := range s {\n        if letter == 'y' {\n         \
    \   vowels_count += 1\n        }\n        if !contains(vowels, letter) {\n   \
    \         vowels_count += 1\n        }\n    }\n    return vowels_count\n}\n\n\
    func TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n     { actual:\
    \ candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"key\"), expected:\
    \ 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n     { actual: candidate(\"\
    keY\"), expected: 2 },\n     { actual: candidate(\"bYe\"), expected: 1 },\n  \
    \   { actual: candidate(\"ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphcjpc57c_test.go:20:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowelsCount\
    \ := 0\n    for _, char := range s {\n        if char == 'a' || char == 'e' ||\
    \ char == 'i' || char == 'o' || char == 'u' {\n            vowelsCount++\n   \
    \     }\n    }\n    return vowelsCount\n}\n\nfunc TestVowels_Count(t *testing.T)\
    \ {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0c7vjp3u_test.go:14:5: vowels declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowelsCount\
    \ := 0\n    for _, char := range s {\n        if char == 'y' {\n            vowelsCount++\n\
    \        }\n        for _, vowel := range vowels {\n            if char == vowel\
    \ {\n                vowelsCount++\n            }\n        }\n    }\n    return\
    \ vowelsCount\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n  \
    \   { actual: candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"\
    key\"), expected: 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n  \
    \   { actual: candidate(\"keY\"), expected: 2 },\n     { actual: candidate(\"\
    bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected: 3 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7yevo71m_test.go:21:24: invalid operation: char == vowel (mismatched types
    rune and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowelCount\
    \ := 0\n    for _, v := range s {\n        if v == 'y' {\n            vowelCount++\n\
    \        }\n        if !contains(vowels, v) {\n            vowelCount++\n    \
    \    }\n    }\n    return vowelCount\n}\n\nfunc TestVowels_Count(t *testing.T)\
    \ {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6nmn5awm_test.go:20:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowelsCount\
    \ := 0\n    for _, v := range s {\n        if v == 'a' || v == 'e' || v == 'i'\
    \ || v == 'o' || v == 'u' {\n            vowelsCount++\n        }\n    }\n   \
    \ return vowelsCount\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwqu17mdq_test.go:14:5: vowels declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowels_count\
    \ := 0\n    for _, v := range s {\n        if v == 'y' {\n            vowels_count\
    \ += 1\n        }\n        if v == 'a' || v == 'e' || v == 'i' || v == 'o' ||\
    \ v == 'u' {\n            vowels_count += 1\n        }\n    }\n    return vowels_count\n\
    }\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n     { actual:\
    \ candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"key\"), expected:\
    \ 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n     { actual: candidate(\"\
    keY\"), expected: 2 },\n     { actual: candidate(\"bYe\"), expected: 1 },\n  \
    \   { actual: candidate(\"ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfqcl2iid_test.go:14:5: vowels declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowelsCount\
    \ := 0\n    for _, v := range s {\n        if v == 'y' {\n            vowelsCount++\n\
    \        }\n        if !contains(vowels, v) {\n            vowelsCount++\n   \
    \     }\n    }\n    return vowelsCount\n}\n\nfunc TestVowels_Count(t *testing.T)\
    \ {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8tbhqka1_test.go:20:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowels_count\
    \ := 0\n    for _, v := range s {\n        if v == 'a' || v == 'e' || v == 'i'\
    \ || v == 'o' || v == 'u' {\n            vowels_count++\n        }\n    }\n  \
    \  return vowels_count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9qcrony6_test.go:14:5: vowels declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowels_count\
    \ := 0\n    for _, v := range s {\n        if v == \"y\" {\n            vowels_count\
    \ += 1\n        }\n        if !contains(vowels, v) {\n            vowels_count\
    \ += 1\n        }\n    }\n    return vowels_count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2fkai4uw_test.go:17:17: invalid operation: v == "y" (mismatched types
    rune and untyped string)

    /tmp/tmp2fkai4uw_test.go:20:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowels_count\
    \ := 0\n    for _, v := range s {\n        if v == \"y\" {\n            vowels_count\
    \ += 1\n        }\n        if v == \"a\" || v == \"e\" || v == \"i\" || v == \"\
    o\" || v == \"u\" {\n            vowels_count += 1\n        }\n    }\n    return\
    \ vowels_count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n  \
    \   { actual: candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"\
    key\"), expected: 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n  \
    \   { actual: candidate(\"keY\"), expected: 2 },\n     { actual: candidate(\"\
    bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected: 3 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprhku998c_test.go:14:5: vowels declared but not used

    /tmp/tmprhku998c_test.go:17:17: invalid operation: v == "y" (mismatched types
    rune and untyped string)

    /tmp/tmprhku998c_test.go:20:17: invalid operation: v == "a" (mismatched types
    rune and untyped string)

    /tmp/tmprhku998c_test.go:20:29: invalid operation: v == "e" (mismatched types
    rune and untyped string)

    /tmp/tmprhku998c_test.go:20:41: invalid operation: v == "i" (mismatched types
    rune and untyped string)

    /tmp/tmprhku998c_test.go:20:53: invalid operation: v == "o" (mismatched types
    rune and untyped string)

    /tmp/tmprhku998c_test.go:20:65: invalid operation: v == "u" (mismatched types
    rune and untyped string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowels_count\
    \ := 0\n    for _, v := range s {\n        if v == 'y' {\n            vowels_count\
    \ += 1\n        }\n        for _, vv := range vowels {\n            if v == vv\
    \ {\n                vowels_count += 1\n            }\n        }\n    }\n    return\
    \ vowels_count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n  \
    \   { actual: candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"\
    key\"), expected: 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n  \
    \   { actual: candidate(\"keY\"), expected: 2 },\n     { actual: candidate(\"\
    bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected: 3 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo75mp5a__test.go:21:21: invalid operation: v == vv (mismatched types rune
    and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowelsCount\
    \ := 0\n    for _, v := range s {\n        if v == 'y' {\n            vowelsCount++\n\
    \        }\n        for _, vv := range vowels {\n            if v == vv {\n  \
    \              vowelsCount++\n            }\n        }\n    }\n    return vowelsCount\n\
    }\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n     { actual:\
    \ candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"key\"), expected:\
    \ 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n     { actual: candidate(\"\
    keY\"), expected: 2 },\n     { actual: candidate(\"bYe\"), expected: 1 },\n  \
    \   { actual: candidate(\"ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy_k90be7_test.go:21:21: invalid operation: v == vv (mismatched types rune
    and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowels_count\
    \ := 0\n    for _, v := range s {\n        if v == 'a' || v == 'e' || v == 'i'\
    \ || v == 'o' || v == 'u' {\n            vowels_count++\n        }\n    }\n  \
    \  return vowels_count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9qcrony6_test.go:14:5: vowels declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    // Your code here\n    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n\
    \    vowelsCount := 0\n    for _, r := range s {\n        if r == 'y' {\n    \
    \        vowelsCount++\n        }\n        if !contains(vowels, r) {\n       \
    \     vowelsCount++\n        }\n    }\n    return vowelsCount\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpplsic3ac_test.go:21:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowels_count\
    \ := 0\n    for _, v := range s {\n        if v == 'a' || v == 'e' || v == 'i'\
    \ || v == 'o' || v == 'u' {\n            vowels_count++\n        }\n    }\n  \
    \  return vowels_count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9qcrony6_test.go:14:5: vowels declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowels_count\
    \ := 0\n    for _, v := range s {\n        if v == 'y' {\n            vowels_count++\n\
    \        }\n        if !contains(vowels, v) {\n            vowels_count++\n  \
    \      }\n    }\n    return vowels_count\n}\n\nfunc TestVowels_Count(t *testing.T)\
    \ {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmph67oj_gv_test.go:20:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowelsCount\
    \ := 0\n    for _, v := range s {\n        if v == 'a' || v == 'e' || v == 'i'\
    \ || v == 'o' || v == 'u' {\n            vowelsCount++\n        }\n    }\n   \
    \ return vowelsCount\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwqu17mdq_test.go:14:5: vowels declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowelsCount\
    \ := 0\n    for _, v := range s {\n        if v == \"y\" && len(s) == 0 {\n  \
    \          vowelsCount++\n        }\n        for _, vv := range vowels {\n   \
    \         if v == vv {\n                vowelsCount++\n            }\n       \
    \ }\n    }\n    return vowelsCount\n}\n\nfunc TestVowels_Count(t *testing.T) {\n\
    \  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr5_4oml4_test.go:17:17: invalid operation: v == "y" (mismatched types
    rune and untyped string)

    /tmp/tmpr5_4oml4_test.go:21:21: invalid operation: v == vv (mismatched types rune
    and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowels_count\
    \ := 0\n    for _, v := range s {\n        if v == 'y' {\n            vowels_count\
    \ += 1\n        }\n        for _, vv := range vowels {\n            if v == vv\
    \ {\n                vowels_count += 1\n            }\n        }\n    }\n    return\
    \ vowels_count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n  \
    \   { actual: candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"\
    key\"), expected: 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n  \
    \   { actual: candidate(\"keY\"), expected: 2 },\n     { actual: candidate(\"\
    bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected: 3 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo75mp5a__test.go:21:21: invalid operation: v == vv (mismatched types rune
    and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowels_count\
    \ := 0\n    for _, v := range s {\n        if v == 'y' {\n            vowels_count\
    \ += 1\n        }\n        if v == 'a' || v == 'e' || v == 'i' || v == 'o' ||\
    \ v == 'u' {\n            vowels_count += 1\n        }\n    }\n    return vowels_count\n\
    }\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n     { actual:\
    \ candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"key\"), expected:\
    \ 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n     { actual: candidate(\"\
    keY\"), expected: 2 },\n     { actual: candidate(\"bYe\"), expected: 1 },\n  \
    \   { actual: candidate(\"ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfqcl2iid_test.go:14:5: vowels declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowels_count\
    \ := 0\n    for _, v := range s {\n        if v == 'y' {\n            vowels_count\
    \ += 1\n        }\n        if !contains(vowels, v) {\n            vowels_count\
    \ += 1\n        }\n    }\n    return vowels_count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdlj47zgk_test.go:20:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowels_count\
    \ := 0\n    for _, char := range s {\n        if char == 'a' || char == 'e' ||\
    \ char == 'i' || char == 'o' || char == 'u' {\n            vowels_count++\n  \
    \      }\n    }\n    return vowels_count\n}\n\nfunc TestVowels_Count(t *testing.T)\
    \ {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpug27l6br_test.go:14:5: vowels declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowels_count\
    \ := 0\n    for _, v := range s {\n        if v == 'y' {\n            vowels_count\
    \ += 1\n        }\n        if v == 'a' || v == 'e' || v == 'i' || v == 'o' ||\
    \ v == 'u' {\n            vowels_count += 1\n        }\n    }\n    return vowels_count\n\
    }\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n     { actual:\
    \ candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"key\"), expected:\
    \ 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n     { actual: candidate(\"\
    keY\"), expected: 2 },\n     { actual: candidate(\"bYe\"), expected: 1 },\n  \
    \   { actual: candidate(\"ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfqcl2iid_test.go:14:5: vowels declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowelsCount\
    \ := 0\n    for _, v := range s {\n        if v == 'y' {\n            vowelsCount++\n\
    \        }\n        if v == 'a' || v == 'e' || v == 'i' || v == 'o' || v == 'u'\
    \ {\n            vowelsCount++\n        }\n    }\n    return vowelsCount\n}\n\n\
    func TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n     { actual:\
    \ candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"key\"), expected:\
    \ 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n     { actual: candidate(\"\
    keY\"), expected: 2 },\n     { actual: candidate(\"bYe\"), expected: 1 },\n  \
    \   { actual: candidate(\"ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3k7xd2ab_test.go:14:5: vowels declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowels_count\
    \ := 0\n    for _, v := range s {\n        if v == 'a' || v == 'e' || v == 'i'\
    \ || v == 'o' || v == 'u' {\n            vowels_count++\n        }\n    }\n  \
    \  return vowels_count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9qcrony6_test.go:14:5: vowels declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    // Write your code here\n    vowels := []string{\"a\", \"e\", \"\
    i\", \"o\", \"u\"}\n    count := 0\n    for _, v := range s {\n        if v ==\
    \ 'y' {\n            count++\n        }\n        for _, v1 := range vowels {\n\
    \            if v == v1 {\n                count++\n            }\n        }\n\
    \    }\n    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp38sekc1g_test.go:22:21: invalid operation: v == v1 (mismatched types rune
    and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowels_count\
    \ := 0\n    for _, v := range s {\n        if v == 'y' {\n            vowels_count\
    \ += 1\n        }\n        if v == 'a' || v == 'e' || v == 'i' || v == 'o' ||\
    \ v == 'u' {\n            vowels_count += 1\n        }\n    }\n    return vowels_count\n\
    }\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n     { actual:\
    \ candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"key\"), expected:\
    \ 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n     { actual: candidate(\"\
    keY\"), expected: 2 },\n     { actual: candidate(\"bYe\"), expected: 1 },\n  \
    \   { actual: candidate(\"ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfqcl2iid_test.go:14:5: vowels declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    // code here\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptlpclw1z_test.go:15:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowels_count\
    \ := 0\n    for _, v := range s {\n        if v == \"y\" {\n            vowels_count\
    \ += 1\n        }\n        if !contains(vowels, v) {\n            vowels_count\
    \ += 1\n        }\n    }\n    return vowels_count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2fkai4uw_test.go:17:17: invalid operation: v == "y" (mismatched types
    rune and untyped string)

    /tmp/tmp2fkai4uw_test.go:20:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowelsCount\
    \ := 0\n    for _, v := range s {\n        if v == 'y' {\n            vowelsCount++\n\
    \        }\n        for _, vv := range vowels {\n            if v == vv {\n  \
    \              vowelsCount++\n            }\n        }\n    }\n    return vowelsCount\n\
    }\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n     { actual:\
    \ candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"key\"), expected:\
    \ 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n     { actual: candidate(\"\
    keY\"), expected: 2 },\n     { actual: candidate(\"bYe\"), expected: 1 },\n  \
    \   { actual: candidate(\"ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy_k90be7_test.go:21:21: invalid operation: v == vv (mismatched types rune
    and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowels_count\
    \ := 0\n    for _, v := range s {\n        if v == 'a' || v == 'e' || v == 'i'\
    \ || v == 'o' || v == 'u' {\n            vowels_count++\n        }\n    }\n  \
    \  return vowels_count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9qcrony6_test.go:14:5: vowels declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowelsCount\
    \ := 0\n    for _, v := range s {\n        if v == 'y' {\n            vowelsCount++\n\
    \        }\n        if !contains(vowels, v) {\n            vowelsCount++\n   \
    \     }\n    }\n    return vowelsCount\n}\n\nfunc TestVowels_Count(t *testing.T)\
    \ {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8tbhqka1_test.go:20:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowelsCount\
    \ := 0\n    for _, v := range s {\n        if v == 'y' {\n            vowelsCount++\n\
    \        }\n        if !contains(vowels, v) {\n            vowelsCount++\n   \
    \     }\n    }\n    return vowelsCount\n}\n\nfunc TestVowels_Count(t *testing.T)\
    \ {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8tbhqka1_test.go:20:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowelsCount\
    \ := 0\n    for _, v := range s {\n        if v == 'a' || v == 'e' || v == 'i'\
    \ || v == 'o' || v == 'u' {\n            vowelsCount++\n        }\n    }\n   \
    \ return vowelsCount\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwqu17mdq_test.go:14:5: vowels declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowels_count\
    \ := 0\n    for _, v := range s {\n        if v == 'y' {\n            vowels_count\
    \ += 1\n        }\n        if !contains(vowels, v) {\n            vowels_count\
    \ += 1\n        }\n    }\n    return vowels_count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdlj47zgk_test.go:20:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowels_count\
    \ := 0\n    for _, char := range s {\n        if char == 'a' || char == 'e' ||\
    \ char == 'i' || char == 'o' || char == 'u' {\n            vowels_count++\n  \
    \      }\n    }\n    return vowels_count\n}\n\nfunc TestVowels_Count(t *testing.T)\
    \ {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpug27l6br_test.go:14:5: vowels declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowelsCount\
    \ := 0\n    for _, v := range s {\n        if v == 'y' {\n            vowelsCount++\n\
    \        }\n        for _, vv := range vowels {\n            if v == vv {\n  \
    \              vowelsCount++\n            }\n        }\n    }\n    return vowelsCount\n\
    }\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n     { actual:\
    \ candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"key\"), expected:\
    \ 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n     { actual: candidate(\"\
    keY\"), expected: 2 },\n     { actual: candidate(\"bYe\"), expected: 1 },\n  \
    \   { actual: candidate(\"ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy_k90be7_test.go:21:21: invalid operation: v == vv (mismatched types rune
    and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    // Your code here\n    vowels := []string{\"a\", \"e\", \"i\", \"\
    o\", \"u\"}\n    vowelsCount := 0\n    for _, v := range s {\n        if v ==\
    \ \"y\" {\n            vowelsCount++\n        }\n        if v == \"a\" || v ==\
    \ \"e\" || v == \"i\" || v == \"o\" || v == \"u\" {\n            vowelsCount++\n\
    \        }\n    }\n    return vowelsCount\n}\n\nfunc TestVowels_Count(t *testing.T)\
    \ {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpakxad4u3_test.go:15:5: vowels declared but not used

    /tmp/tmpakxad4u3_test.go:18:17: invalid operation: v == "y" (mismatched types
    rune and untyped string)

    /tmp/tmpakxad4u3_test.go:21:17: invalid operation: v == "a" (mismatched types
    rune and untyped string)

    /tmp/tmpakxad4u3_test.go:21:29: invalid operation: v == "e" (mismatched types
    rune and untyped string)

    /tmp/tmpakxad4u3_test.go:21:41: invalid operation: v == "i" (mismatched types
    rune and untyped string)

    /tmp/tmpakxad4u3_test.go:21:53: invalid operation: v == "o" (mismatched types
    rune and untyped string)

    /tmp/tmpakxad4u3_test.go:21:65: invalid operation: v == "u" (mismatched types
    rune and untyped string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowelsCount\
    \ := 0\n    for _, v := range s {\n        if v == 'a' || v == 'e' || v == 'i'\
    \ || v == 'o' || v == 'u' {\n            vowelsCount++\n        }\n    }\n   \
    \ return vowelsCount\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwqu17mdq_test.go:14:5: vowels declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowels_count\
    \ := 0\n    for _, v := range s {\n        if v == \"y\" && len(s) == 0 {\n  \
    \          vowels_count += 1\n        }\n        if !contains(vowels, v) {\n \
    \           vowels_count += 1\n        }\n    }\n    return vowels_count\n}\n\n\
    func TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n     { actual:\
    \ candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"key\"), expected:\
    \ 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n     { actual: candidate(\"\
    keY\"), expected: 2 },\n     { actual: candidate(\"bYe\"), expected: 1 },\n  \
    \   { actual: candidate(\"ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpviemwdj1_test.go:17:17: invalid operation: v == "y" (mismatched types
    rune and untyped string)

    /tmp/tmpviemwdj1_test.go:20:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073447
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowels_count\
    \ := 0\n    for _, v := range s {\n        if v == \"y\" {\n            vowels_count\
    \ += 1\n        }\n        if !contains(vowels, v) {\n            vowels_count\
    \ += 1\n        }\n    }\n    return vowels_count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2fkai4uw_test.go:17:17: invalid operation: v == "y" (mismatched types
    rune and untyped string)

    /tmp/tmp2fkai4uw_test.go:20:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowelsCount\
    \ := 0\n    for _, v := range s {\n        if v == 'a' || v == 'e' || v == 'i'\
    \ || v == 'o' || v == 'u' {\n            vowelsCount++\n        }\n    }\n   \
    \ return vowelsCount\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwqu17mdq_test.go:14:5: vowels declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowels_count\
    \ := 0\n    for _, letter := range s {\n        if letter == 'y' {\n         \
    \   vowels_count += 1\n        }\n        if !contains(vowels, letter) {\n   \
    \         vowels_count += 1\n        }\n    }\n    return vowels_count\n}\n\n\
    func TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n     { actual:\
    \ candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"key\"), expected:\
    \ 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n     { actual: candidate(\"\
    keY\"), expected: 2 },\n     { actual: candidate(\"bYe\"), expected: 1 },\n  \
    \   { actual: candidate(\"ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphcjpc57c_test.go:20:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowel_count\
    \ := 0\n    for _, v := range s {\n        if v == 'a' || v == 'e' || v == 'i'\
    \ || v == 'o' || v == 'u' {\n            vowel_count++\n        }\n    }\n   \
    \ return vowel_count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6z3v6y_t_test.go:14:5: vowels declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073447
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowels_count\
    \ := 0\n    for _, v := range s {\n        if v == 'y' {\n            vowels_count\
    \ += 1\n        }\n        for _, vv := range vowels {\n            if v == vv\
    \ {\n                vowels_count += 1\n            }\n        }\n    }\n    return\
    \ vowels_count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n  \
    \   { actual: candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"\
    key\"), expected: 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n  \
    \   { actual: candidate(\"keY\"), expected: 2 },\n     { actual: candidate(\"\
    bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected: 3 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo75mp5a__test.go:21:21: invalid operation: v == vv (mismatched types rune
    and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowels_count\
    \ := 0\n    for _, v := range s {\n        if v == 'y' {\n            vowels_count\
    \ += 1\n        }\n        for _, vv := range vowels {\n            if v == vv\
    \ {\n                vowels_count += 1\n            }\n        }\n    }\n    return\
    \ vowels_count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n  \
    \   { actual: candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"\
    key\"), expected: 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n  \
    \   { actual: candidate(\"keY\"), expected: 2 },\n     { actual: candidate(\"\
    bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected: 3 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo75mp5a__test.go:21:21: invalid operation: v == vv (mismatched types rune
    and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowelsCount\
    \ := 0\n    for _, v := range s {\n        if v == 'y' {\n            vowelsCount++\n\
    \        }\n        if !contains(vowels, v) {\n            vowelsCount++\n   \
    \     }\n    }\n    return vowelsCount\n}\n\nfunc TestVowels_Count(t *testing.T)\
    \ {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8tbhqka1_test.go:20:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowels_count\
    \ := 0\n    for _, v := range s {\n        if v == 'y' {\n            vowels_count\
    \ += 1\n        }\n        if !contains(vowels, v) {\n            vowels_count\
    \ += 1\n        }\n    }\n    return vowels_count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdlj47zgk_test.go:20:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowelsCount\
    \ := 0\n    for _, v := range s {\n        if v == 'y' {\n            vowelsCount++\n\
    \        }\n        for _, vv := range vowels {\n            if v == vv {\n  \
    \              vowelsCount++\n            }\n        }\n    }\n    return vowelsCount\n\
    }\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n     { actual:\
    \ candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"key\"), expected:\
    \ 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n     { actual: candidate(\"\
    keY\"), expected: 2 },\n     { actual: candidate(\"bYe\"), expected: 1 },\n  \
    \   { actual: candidate(\"ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy_k90be7_test.go:21:21: invalid operation: v == vv (mismatched types rune
    and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowelsCount\
    \ := 0\n    for _, v := range s {\n        if v == 'y' {\n            vowelsCount++\n\
    \        }\n        if !contains(vowels, v) {\n            vowelsCount++\n   \
    \     }\n    }\n    return vowelsCount\n}\n\nfunc TestVowels_Count(t *testing.T)\
    \ {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8tbhqka1_test.go:20:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowels_count\
    \ := 0\n    for _, v := range s {\n        if v == 'y' {\n            vowels_count\
    \ += 1\n        }\n        for _, vv := range vowels {\n            if v == vv\
    \ {\n                vowels_count += 1\n            }\n        }\n    }\n    return\
    \ vowels_count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n  \
    \   { actual: candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"\
    key\"), expected: 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n  \
    \   { actual: candidate(\"keY\"), expected: 2 },\n     { actual: candidate(\"\
    bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected: 3 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo75mp5a__test.go:21:21: invalid operation: v == vv (mismatched types rune
    and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowels_count\
    \ := 0\n    for _, v := range s {\n        if v == 'a' || v == 'e' || v == 'i'\
    \ || v == 'o' || v == 'u' {\n            vowels_count++\n        }\n    }\n  \
    \  return vowels_count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9qcrony6_test.go:14:5: vowels declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowelsCount\
    \ := 0\n    for _, v := range s {\n        if v == 'y' {\n            vowelsCount++\n\
    \        }\n        for _, vv := range vowels {\n            if v == vv {\n  \
    \              vowelsCount++\n            }\n        }\n    }\n    return vowelsCount\n\
    }\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n     { actual:\
    \ candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"key\"), expected:\
    \ 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n     { actual: candidate(\"\
    keY\"), expected: 2 },\n     { actual: candidate(\"bYe\"), expected: 1 },\n  \
    \   { actual: candidate(\"ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy_k90be7_test.go:21:21: invalid operation: v == vv (mismatched types rune
    and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowelsCount\
    \ := 0\n    for _, v := range s {\n        if v == \"y\" {\n            vowelsCount++\n\
    \        }\n        for _, vv := range vowels {\n            if v == vv {\n  \
    \              vowelsCount++\n            }\n        }\n    }\n    return vowelsCount\n\
    }\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n     { actual:\
    \ candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"key\"), expected:\
    \ 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n     { actual: candidate(\"\
    keY\"), expected: 2 },\n     { actual: candidate(\"bYe\"), expected: 1 },\n  \
    \   { actual: candidate(\"ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprtupdpwa_test.go:17:17: invalid operation: v == "y" (mismatched types
    rune and untyped string)

    /tmp/tmprtupdpwa_test.go:21:21: invalid operation: v == vv (mismatched types rune
    and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073447
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowels_count\
    \ := 0\n    for _, v := range s {\n        if v == 'y' {\n            vowels_count\
    \ += 1\n        }\n        if !contains(vowels, v) {\n            vowels_count\
    \ += 1\n        }\n    }\n    return vowels_count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdlj47zgk_test.go:20:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowels_count\
    \ := 0\n    for _, v := range s {\n        if v == 'y' {\n            vowels_count\
    \ += 1\n        }\n        if !contains(vowels, v) {\n            vowels_count\
    \ += 1\n        }\n    }\n    return vowels_count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdlj47zgk_test.go:20:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowels_count\
    \ := 0\n    for _, v := range s {\n        if v == 'y' {\n            vowels_count\
    \ += 1\n        }\n        if !contains(vowels, v) {\n            vowels_count\
    \ += 1\n        }\n    }\n    return vowels_count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdlj47zgk_test.go:20:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowelCount\
    \ := 0\n    for _, char := range s {\n        if char == 'a' || char == 'e' ||\
    \ char == 'i' || char == 'o' || char == 'u' {\n            vowelCount++\n    \
    \    }\n    }\n    return vowelCount\n}\n\nfunc TestVowels_Count(t *testing.T)\
    \ {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpiyx6xuth_test.go:14:5: vowels declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073447
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowelsCount\
    \ := 0\n    for _, v := range s {\n        if v == 'y' {\n            vowelsCount++\n\
    \        }\n        for _, vv := range vowels {\n            if v == vv {\n  \
    \              vowelsCount++\n            }\n        }\n    }\n    return vowelsCount\n\
    }\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n     { actual:\
    \ candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"key\"), expected:\
    \ 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n     { actual: candidate(\"\
    keY\"), expected: 2 },\n     { actual: candidate(\"bYe\"), expected: 1 },\n  \
    \   { actual: candidate(\"ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy_k90be7_test.go:21:21: invalid operation: v == vv (mismatched types rune
    and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowels_count\
    \ := 0\n    for _, v := range s {\n        if v == 'y' {\n            vowels_count\
    \ += 1\n        }\n        if !contains(vowels, v) {\n            vowels_count\
    \ += 1\n        }\n    }\n    return vowels_count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdlj47zgk_test.go:20:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowels_count\
    \ := 0\n    for _, v := range s {\n        if v == 'y' {\n            vowels_count\
    \ += 1\n        }\n        if !contains(vowels, v) {\n            vowels_count\
    \ += 1\n        }\n    }\n    return vowels_count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdlj47zgk_test.go:20:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowels_count\
    \ := 0\n    for _, v := range s {\n        if v == 'y' {\n            vowels_count\
    \ += 1\n        }\n        if !contains(vowels, v) {\n            vowels_count\
    \ += 1\n        }\n    }\n    return vowels_count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdlj47zgk_test.go:20:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowelsCount\
    \ := 0\n    for _, v := range s {\n        if v == 'y' {\n            vowelsCount++\n\
    \        }\n        if v == 'a' || v == 'e' || v == 'i' || v == 'o' || v == 'u'\
    \ {\n            vowelsCount++\n        }\n    }\n    return vowelsCount\n}\n\n\
    func TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n     { actual:\
    \ candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"key\"), expected:\
    \ 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n     { actual: candidate(\"\
    keY\"), expected: 2 },\n     { actual: candidate(\"bYe\"), expected: 1 },\n  \
    \   { actual: candidate(\"ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3k7xd2ab_test.go:14:5: vowels declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowelsCount\
    \ := 0\n    for _, v := range s {\n        if v == \"y\" {\n            vowelsCount++\n\
    \        }\n        if !contains(vowels, v) {\n            vowelsCount++\n   \
    \     }\n    }\n    return vowelsCount\n}\n\nfunc TestVowels_Count(t *testing.T)\
    \ {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5_69826o_test.go:17:17: invalid operation: v == "y" (mismatched types
    rune and untyped string)

    /tmp/tmp5_69826o_test.go:20:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073447
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowels_count\
    \ := 0\n    for _, v := range s {\n        if v == 'y' {\n            vowels_count\
    \ += 1\n        }\n        for _, vv := range vowels {\n            if v == vv\
    \ {\n                vowels_count += 1\n            }\n        }\n    }\n    return\
    \ vowels_count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n  \
    \   { actual: candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"\
    key\"), expected: 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n  \
    \   { actual: candidate(\"keY\"), expected: 2 },\n     { actual: candidate(\"\
    bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected: 3 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo75mp5a__test.go:21:21: invalid operation: v == vv (mismatched types rune
    and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowels_count\
    \ := 0\n    for _, v := range s {\n        if v == 'y' {\n            vowels_count\
    \ += 1\n        }\n        for _, vv := range vowels {\n            if v == vv\
    \ {\n                vowels_count += 1\n            }\n        }\n    }\n    return\
    \ vowels_count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n  \
    \   { actual: candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"\
    key\"), expected: 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n  \
    \   { actual: candidate(\"keY\"), expected: 2 },\n     { actual: candidate(\"\
    bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected: 3 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo75mp5a__test.go:21:21: invalid operation: v == vv (mismatched types rune
    and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    // code here\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptlpclw1z_test.go:15:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    // code here\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptlpclw1z_test.go:15:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowels_count\
    \ := 0\n    for _, char := range s {\n        if char == 'y' {\n            vowels_count\
    \ += 1\n        }\n        if !contains(vowels, char) {\n            vowels_count\
    \ += 1\n        }\n    }\n    return vowels_count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmper5pnvto_test.go:20:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073447
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowels_count\
    \ := 0\n    for _, v := range s {\n        if v == 'y' {\n            vowels_count\
    \ += 1\n        }\n        if v == 'a' || v == 'e' || v == 'i' || v == 'o' ||\
    \ v == 'u' {\n            vowels_count += 1\n        }\n    }\n    return vowels_count\n\
    }\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n     { actual:\
    \ candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"key\"), expected:\
    \ 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n     { actual: candidate(\"\
    keY\"), expected: 2 },\n     { actual: candidate(\"bYe\"), expected: 1 },\n  \
    \   { actual: candidate(\"ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfqcl2iid_test.go:14:5: vowels declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowelsCount\
    \ := 0\n    for _, v := range s {\n        if v == 'y' {\n            vowelsCount++\n\
    \        }\n        for _, vv := range vowels {\n            if v == vv {\n  \
    \              vowelsCount++\n            }\n        }\n    }\n    return vowelsCount\n\
    }\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n     { actual:\
    \ candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"key\"), expected:\
    \ 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n     { actual: candidate(\"\
    keY\"), expected: 2 },\n     { actual: candidate(\"bYe\"), expected: 1 },\n  \
    \   { actual: candidate(\"ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy_k90be7_test.go:21:21: invalid operation: v == vv (mismatched types rune
    and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowelsCount\
    \ := 0\n    for _, v := range s {\n        if v == 'a' || v == 'e' || v == 'i'\
    \ || v == 'o' || v == 'u' {\n            vowelsCount++\n        }\n    }\n   \
    \ return vowelsCount\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwqu17mdq_test.go:14:5: vowels declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowels_count\
    \ := 0\n    for _, v := range s {\n        if v == 'y' {\n            vowels_count\
    \ += 1\n        }\n        if !contains(vowels, v) {\n            vowels_count\
    \ += 1\n        }\n    }\n    return vowels_count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdlj47zgk_test.go:20:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowels_count\
    \ := 0\n    for _, v := range s {\n        if v == \"y\" && len(s) == 0 {\n  \
    \          break\n        }\n        for _, vv := range vowels {\n           \
    \ if v == vv {\n                vowels_count++\n            }\n        }\n   \
    \ }\n    return vowels_count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz3n4vyhn_test.go:17:17: invalid operation: v == "y" (mismatched types
    rune and untyped string)

    /tmp/tmpz3n4vyhn_test.go:21:21: invalid operation: v == vv (mismatched types rune
    and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073447
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowels_count\
    \ := 0\n    for _, v := range s {\n        if v == 'a' || v == 'e' || v == 'i'\
    \ || v == 'o' || v == 'u' {\n            vowels_count++\n        }\n    }\n  \
    \  return vowels_count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9qcrony6_test.go:14:5: vowels declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowels_count\
    \ := 0\n    for _, v := range s {\n        if v == 'y' {\n            vowels_count\
    \ += 1\n        }\n        if v == 'a' || v == 'e' || v == 'i' || v == 'o' ||\
    \ v == 'u' {\n            vowels_count += 1\n        }\n    }\n    return vowels_count\n\
    }\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n     { actual:\
    \ candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"key\"), expected:\
    \ 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n     { actual: candidate(\"\
    keY\"), expected: 2 },\n     { actual: candidate(\"bYe\"), expected: 1 },\n  \
    \   { actual: candidate(\"ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfqcl2iid_test.go:14:5: vowels declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowels_count\
    \ := 0\n    for _, v := range s {\n        if v == \"y\" && len(s) == 0 {\n  \
    \          vowels_count += 1\n        }\n        for _, v1 := range vowels {\n\
    \            if v == v1 {\n                vowels_count += 1\n            }\n\
    \        }\n    }\n    return vowels_count\n}\n\nfunc TestVowels_Count(t *testing.T)\
    \ {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvborva20_test.go:17:17: invalid operation: v == "y" (mismatched types
    rune and untyped string)

    /tmp/tmpvborva20_test.go:21:21: invalid operation: v == v1 (mismatched types rune
    and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073447
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowels_count\
    \ := 0\n    for _, char := range s {\n        if char == 'a' || char == 'e' ||\
    \ char == 'i' || char == 'o' || char == 'u' {\n            vowels_count++\n  \
    \      }\n    }\n    return vowels_count\n}\n\nfunc TestVowels_Count(t *testing.T)\
    \ {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpug27l6br_test.go:14:5: vowels declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowels_count\
    \ := 0\n    for _, v := range s {\n        if v == 'y' {\n            vowels_count\
    \ += 1\n        }\n        if v == 'a' || v == 'e' || v == 'i' || v == 'o' ||\
    \ v == 'u' {\n            vowels_count += 1\n        }\n    }\n    return vowels_count\n\
    }\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n     { actual:\
    \ candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"key\"), expected:\
    \ 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n     { actual: candidate(\"\
    keY\"), expected: 2 },\n     { actual: candidate(\"bYe\"), expected: 1 },\n  \
    \   { actual: candidate(\"ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfqcl2iid_test.go:14:5: vowels declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowels_count\
    \ := 0\n    for _, char := range s {\n        if char == 'a' || char == 'e' ||\
    \ char == 'i' || char == 'o' || char == 'u' {\n            vowels_count++\n  \
    \      }\n    }\n    return vowels_count\n}\n\nfunc TestVowels_Count(t *testing.T)\
    \ {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpug27l6br_test.go:14:5: vowels declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowelsCount\
    \ := 0\n    for _, v := range s {\n        if v == 'y' {\n            vowelsCount++\n\
    \        }\n        for _, v1 := range vowels {\n            if v == v1 {\n  \
    \              vowelsCount++\n            }\n        }\n    }\n    return vowelsCount\n\
    }\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n     { actual:\
    \ candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"key\"), expected:\
    \ 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n     { actual: candidate(\"\
    keY\"), expected: 2 },\n     { actual: candidate(\"bYe\"), expected: 1 },\n  \
    \   { actual: candidate(\"ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp95_hud7v_test.go:21:21: invalid operation: v == v1 (mismatched types rune
    and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowels_count\
    \ := 0\n    for _, v := range s {\n        if v == 'y' {\n            vowels_count++\n\
    \        }\n        for _, vv := range vowels {\n            if v == vv {\n  \
    \              vowels_count++\n            }\n        }\n    }\n    return vowels_count\n\
    }\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n     { actual:\
    \ candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"key\"), expected:\
    \ 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n     { actual: candidate(\"\
    keY\"), expected: 2 },\n     { actual: candidate(\"bYe\"), expected: 1 },\n  \
    \   { actual: candidate(\"ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps51ngesr_test.go:21:21: invalid operation: v == vv (mismatched types rune
    and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073447
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowels_count\
    \ := 0\n    for _, v := range s {\n        if v == \"y\" {\n            vowels_count\
    \ += 1\n        }\n        if !contains(vowels, v) {\n            vowels_count\
    \ += 1\n        }\n    }\n    return vowels_count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2fkai4uw_test.go:17:17: invalid operation: v == "y" (mismatched types
    rune and untyped string)

    /tmp/tmp2fkai4uw_test.go:20:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowels_count\
    \ := 0\n    for _, letter := range s {\n        if letter == \"y\" {\n       \
    \     vowels_count += 1\n        }\n        if !vowels[vowels_count - 1] {\n \
    \           vowels_count += 1\n        }\n    }\n    return vowels_count\n}\n\n\
    func TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n     { actual:\
    \ candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"key\"), expected:\
    \ 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n     { actual: candidate(\"\
    keY\"), expected: 2 },\n     { actual: candidate(\"bYe\"), expected: 1 },\n  \
    \   { actual: candidate(\"ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdphd7gpi_test.go:17:22: invalid operation: letter == "y" (mismatched types
    rune and untyped string)

    /tmp/tmpdphd7gpi_test.go:20:13: invalid operation: operator ! not defined on vowels[vowels_count
    - 1] (variable of type string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073447
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowels_count\
    \ := 0\n    for _, v := range s {\n        if v == 'y' {\n            vowels_count\
    \ += 1\n        }\n        if !contains(vowels, v) {\n            vowels_count\
    \ += 1\n        }\n    }\n    return vowels_count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdlj47zgk_test.go:20:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowels_count\
    \ := 0\n    for _, v := range s {\n        if v == 'y' {\n            vowels_count\
    \ += 1\n        }\n        if !contains(vowels, v) {\n            vowels_count\
    \ += 1\n        }\n    }\n    return vowels_count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdlj47zgk_test.go:20:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowels_count\
    \ := 0\n    for _, v := range s {\n        if v == 'y' {\n            vowels_count\
    \ += 1\n        }\n        if !contains(vowels, v) {\n            vowels_count\
    \ += 1\n        }\n    }\n    return vowels_count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdlj47zgk_test.go:20:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowelsCount\
    \ := 0\n    for _, v := range s {\n        if v == \"y\" {\n            vowelsCount++\n\
    \        }\n        for _, vv := range vowels {\n            if v == vv {\n  \
    \              vowelsCount++\n            }\n        }\n    }\n    return vowelsCount\n\
    }\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n     { actual:\
    \ candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"key\"), expected:\
    \ 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n     { actual: candidate(\"\
    keY\"), expected: 2 },\n     { actual: candidate(\"bYe\"), expected: 1 },\n  \
    \   { actual: candidate(\"ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprtupdpwa_test.go:17:17: invalid operation: v == "y" (mismatched types
    rune and untyped string)

    /tmp/tmprtupdpwa_test.go:21:21: invalid operation: v == vv (mismatched types rune
    and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073447
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowelsCount\
    \ := 0\n    for _, v := range s {\n        if v == 'y' {\n            vowelsCount++\n\
    \        }\n        if v == 'a' || v == 'e' || v == 'i' || v == 'o' || v == 'u'\
    \ {\n            vowelsCount++\n        }\n    }\n    return vowelsCount\n}\n\n\
    func TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n     { actual:\
    \ candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"key\"), expected:\
    \ 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n     { actual: candidate(\"\
    keY\"), expected: 2 },\n     { actual: candidate(\"bYe\"), expected: 1 },\n  \
    \   { actual: candidate(\"ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3k7xd2ab_test.go:14:5: vowels declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowelCount\
    \ := 0\n    for _, v := range s {\n        if v == 'y' {\n            vowelCount++\n\
    \        }\n        for _, vv := range vowels {\n            if v == vv {\n  \
    \              vowelCount++\n            }\n        }\n    }\n    return vowelCount\n\
    }\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n     { actual:\
    \ candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"key\"), expected:\
    \ 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n     { actual: candidate(\"\
    keY\"), expected: 2 },\n     { actual: candidate(\"bYe\"), expected: 1 },\n  \
    \   { actual: candidate(\"ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkis23953_test.go:21:21: invalid operation: v == vv (mismatched types rune
    and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073447
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowels_count\
    \ := 0\n    for _, v := range s {\n        if v == 'y' {\n            vowels_count\
    \ += 1\n        }\n        if v == 'a' || v == 'e' || v == 'i' || v == 'o' ||\
    \ v == 'u' {\n            vowels_count += 1\n        }\n    }\n    return vowels_count\n\
    }\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n     { actual:\
    \ candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"key\"), expected:\
    \ 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n     { actual: candidate(\"\
    keY\"), expected: 2 },\n     { actual: candidate(\"bYe\"), expected: 1 },\n  \
    \   { actual: candidate(\"ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfqcl2iid_test.go:14:5: vowels declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowels_count\
    \ := 0\n    for _, v := range s {\n        if v == 'y' {\n            vowels_count\
    \ += 1\n        }\n        if v == 'a' || v == 'e' || v == 'i' || v == 'o' ||\
    \ v == 'u' {\n            vowels_count += 1\n        }\n    }\n    return vowels_count\n\
    }\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n     { actual:\
    \ candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"key\"), expected:\
    \ 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n     { actual: candidate(\"\
    keY\"), expected: 2 },\n     { actual: candidate(\"bYe\"), expected: 1 },\n  \
    \   { actual: candidate(\"ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfqcl2iid_test.go:14:5: vowels declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowelsCount\
    \ := 0\n    for _, v := range s {\n        if v == 'a' || v == 'e' || v == 'i'\
    \ || v == 'o' || v == 'u' {\n            vowelsCount++\n        }\n    }\n   \
    \ return vowelsCount\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwqu17mdq_test.go:14:5: vowels declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowelsCount\
    \ := 0\n    for _, v := range s {\n        if v == 'y' {\n            vowelsCount++\n\
    \        }\n        for _, vv := range vowels {\n            if v == vv {\n  \
    \              vowelsCount++\n            }\n        }\n    }\n    return vowelsCount\n\
    }\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n     { actual:\
    \ candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"key\"), expected:\
    \ 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n     { actual: candidate(\"\
    keY\"), expected: 2 },\n     { actual: candidate(\"bYe\"), expected: 1 },\n  \
    \   { actual: candidate(\"ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy_k90be7_test.go:21:21: invalid operation: v == vv (mismatched types rune
    and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowels_count\
    \ := 0\n    for _, v := range s {\n        if v == 'y' {\n            vowels_count++\n\
    \        }\n        for _, vv := range vowels {\n            if v == vv {\n  \
    \              vowels_count++\n            }\n        }\n    }\n    return vowels_count\n\
    }\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n     { actual:\
    \ candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"key\"), expected:\
    \ 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n     { actual: candidate(\"\
    keY\"), expected: 2 },\n     { actual: candidate(\"bYe\"), expected: 1 },\n  \
    \   { actual: candidate(\"ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps51ngesr_test.go:21:21: invalid operation: v == vv (mismatched types rune
    and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073447
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowels_count\
    \ := 0\n    for _, v := range s {\n        if v == 'y' {\n            vowels_count++\n\
    \        }\n        for _, vv := range vowels {\n            if v == vv {\n  \
    \              vowels_count++\n            }\n        }\n    }\n    return vowels_count\n\
    }\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n     { actual:\
    \ candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"key\"), expected:\
    \ 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n     { actual: candidate(\"\
    keY\"), expected: 2 },\n     { actual: candidate(\"bYe\"), expected: 1 },\n  \
    \   { actual: candidate(\"ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps51ngesr_test.go:21:21: invalid operation: v == vv (mismatched types rune
    and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073447
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowels_count\
    \ := 0\n    for _, v := range s {\n        if v == \"y\" {\n            vowels_count\
    \ += 1\n        } else {\n            for _, vv := range vowels {\n          \
    \      if v == vv {\n                    vowels_count += 1\n                 \
    \   break\n                }\n            }\n        }\n    }\n    return vowels_count\n\
    }\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n     { actual:\
    \ candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"key\"), expected:\
    \ 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n     { actual: candidate(\"\
    keY\"), expected: 2 },\n     { actual: candidate(\"bYe\"), expected: 1 },\n  \
    \   { actual: candidate(\"ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpm35zl_jq_test.go:17:17: invalid operation: v == "y" (mismatched types
    rune and untyped string)

    /tmp/tmpm35zl_jq_test.go:21:25: invalid operation: v == vv (mismatched types rune
    and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073447
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowels_count\
    \ := 0\n    for _, v := range s {\n        if v == 'y' {\n            vowels_count\
    \ += 1\n        }\n        if v == 'a' || v == 'e' || v == 'i' || v == 'o' ||\
    \ v == 'u' {\n            vowels_count += 1\n        }\n    }\n    return vowels_count\n\
    }\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n     { actual:\
    \ candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"key\"), expected:\
    \ 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n     { actual: candidate(\"\
    keY\"), expected: 2 },\n     { actual: candidate(\"bYe\"), expected: 1 },\n  \
    \   { actual: candidate(\"ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfqcl2iid_test.go:14:5: vowels declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowelsCount\
    \ := 0\n    for _, char := range s {\n        if char == 'a' || char == 'e' ||\
    \ char == 'i' || char == 'o' || char == 'u' {\n            vowelsCount++\n   \
    \     }\n    }\n    return vowelsCount\n}\n\nfunc TestVowels_Count(t *testing.T)\
    \ {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0c7vjp3u_test.go:14:5: vowels declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowels_count\
    \ := 0\n    for _, v := range s {\n        if v == 'y' {\n            vowels_count\
    \ += 1\n        }\n        if v == 'a' || v == 'e' || v == 'i' || v == 'o' ||\
    \ v == 'u' {\n            vowels_count += 1\n        }\n    }\n    return vowels_count\n\
    }\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n     { actual:\
    \ candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"key\"), expected:\
    \ 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n     { actual: candidate(\"\
    keY\"), expected: 2 },\n     { actual: candidate(\"bYe\"), expected: 1 },\n  \
    \   { actual: candidate(\"ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfqcl2iid_test.go:14:5: vowels declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowels_count\
    \ := 0\n    for _, v := range s {\n        if v == 'y' {\n            vowels_count\
    \ += 1\n        }\n        if !contains(vowels, v) {\n            vowels_count\
    \ += 1\n        }\n    }\n    return vowels_count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdlj47zgk_test.go:20:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowelsCount\
    \ := 0\n    for _, v := range s {\n        if v == 'y' {\n            vowelsCount++\n\
    \        }\n        if v == 'a' || v == 'e' || v == 'i' || v == 'o' || v == 'u'\
    \ {\n            vowelsCount++\n        }\n    }\n    return vowelsCount\n}\n\n\
    func TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n     { actual:\
    \ candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"key\"), expected:\
    \ 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n     { actual: candidate(\"\
    keY\"), expected: 2 },\n     { actual: candidate(\"bYe\"), expected: 1 },\n  \
    \   { actual: candidate(\"ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3k7xd2ab_test.go:14:5: vowels declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowels_count\
    \ := 0\n    for _, v := range s {\n        if v == 'y' {\n            vowels_count++\n\
    \        }\n        if v == 'a' || v == 'e' || v == 'i' || v == 'o' || v == 'u'\
    \ {\n            vowels_count++\n        }\n    }\n    return vowels_count\n}\n\
    \nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n     { actual:\
    \ candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"key\"), expected:\
    \ 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n     { actual: candidate(\"\
    keY\"), expected: 2 },\n     { actual: candidate(\"bYe\"), expected: 1 },\n  \
    \   { actual: candidate(\"ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2y78r9e4_test.go:14:5: vowels declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073447
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowels_count\
    \ := 0\n    for _, v := range s {\n        if v == 'y' {\n            vowels_count\
    \ += 1\n        }\n        if !contains(vowels, v) {\n            vowels_count\
    \ += 1\n        }\n    }\n    return vowels_count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdlj47zgk_test.go:20:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowelsCount\
    \ := 0\n    for _, v := range s {\n        if v == 'a' || v == 'e' || v == 'i'\
    \ || v == 'o' || v == 'u' {\n            vowelsCount++\n        }\n    }\n   \
    \ return vowelsCount\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwqu17mdq_test.go:14:5: vowels declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowels_count\
    \ := 0\n    for _, v := range s {\n        if v == \"y\" {\n            vowels_count\
    \ += 1\n        }\n        if !contains(vowels, v) {\n            vowels_count\
    \ += 1\n        }\n    }\n    return vowels_count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2fkai4uw_test.go:17:17: invalid operation: v == "y" (mismatched types
    rune and untyped string)

    /tmp/tmp2fkai4uw_test.go:20:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowels_count\
    \ := 0\n    for _, v := range s {\n        if v == 'a' || v == 'e' || v == 'i'\
    \ || v == 'o' || v == 'u' {\n            vowels_count++\n        }\n    }\n  \
    \  return vowels_count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9qcrony6_test.go:14:5: vowels declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowelsCount\
    \ := 0\n    for _, v := range s {\n        if v == 'y' {\n            vowelsCount++\n\
    \        }\n        for _, vv := range vowels {\n            if v == vv {\n  \
    \              vowelsCount++\n            }\n        }\n    }\n    return vowelsCount\n\
    }\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n     { actual:\
    \ candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"key\"), expected:\
    \ 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n     { actual: candidate(\"\
    keY\"), expected: 2 },\n     { actual: candidate(\"bYe\"), expected: 1 },\n  \
    \   { actual: candidate(\"ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy_k90be7_test.go:21:21: invalid operation: v == vv (mismatched types rune
    and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowels_count\
    \ := 0\n    for _, v := range s {\n        if v == 'y' {\n            vowels_count\
    \ += 1\n        }\n        if !contains(vowels, v) {\n            vowels_count\
    \ += 1\n        }\n    }\n    return vowels_count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdlj47zgk_test.go:20:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowelsCount\
    \ := 0\n    for _, v := range s {\n        if v == 'a' || v == 'e' || v == 'i'\
    \ || v == 'o' || v == 'u' {\n            vowelsCount++\n        }\n    }\n   \
    \ return vowelsCount\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwqu17mdq_test.go:14:5: vowels declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowelsCount\
    \ := 0\n    for _, v := range s {\n        if v == 'a' || v == 'e' || v == 'i'\
    \ || v == 'o' || v == 'u' {\n            vowelsCount++\n        }\n    }\n   \
    \ return vowelsCount\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwqu17mdq_test.go:14:5: vowels declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowels_count\
    \ := 0\n    for _, v := range s {\n        if v == 'y' {\n            vowels_count\
    \ += 1\n        }\n        if !contains(vowels, v) {\n            vowels_count\
    \ += 1\n        }\n    }\n    return vowels_count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdlj47zgk_test.go:20:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowels_count\
    \ := 0\n    for _, v := range s {\n        if v == 'y' {\n            vowels_count\
    \ += 1\n        }\n        if v == 'a' || v == 'e' || v == 'i' || v == 'o' ||\
    \ v == 'u' {\n            vowels_count += 1\n        }\n    }\n    return vowels_count\n\
    }\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n     { actual:\
    \ candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"key\"), expected:\
    \ 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n     { actual: candidate(\"\
    keY\"), expected: 2 },\n     { actual: candidate(\"bYe\"), expected: 1 },\n  \
    \   { actual: candidate(\"ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfqcl2iid_test.go:14:5: vowels declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    // Your code here\n    vowels := []string{\"a\", \"e\", \"i\", \"\
    o\", \"u\"}\n    vowelsCount := 0\n    for _, v := range s {\n        if v ==\
    \ 'y' {\n            vowelsCount++\n        }\n        if !contains(vowels, v)\
    \ {\n            vowelsCount++\n        }\n    }\n    return vowelsCount\n}\n\n\
    func TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n     { actual:\
    \ candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"key\"), expected:\
    \ 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n     { actual: candidate(\"\
    keY\"), expected: 2 },\n     { actual: candidate(\"bYe\"), expected: 1 },\n  \
    \   { actual: candidate(\"ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5rxrkpge_test.go:21:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073447
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowels_count\
    \ := 0\n    for _, v := range s {\n        if v == 'y' {\n            vowels_count\
    \ += 1\n        }\n        for _, vv := range vowels {\n            if v == vv\
    \ {\n                vowels_count += 1\n            }\n        }\n    }\n    return\
    \ vowels_count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n  \
    \   { actual: candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"\
    key\"), expected: 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n  \
    \   { actual: candidate(\"keY\"), expected: 2 },\n     { actual: candidate(\"\
    bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected: 3 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo75mp5a__test.go:21:21: invalid operation: v == vv (mismatched types rune
    and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowels_count\
    \ := 0\n    for _, v := range s {\n        if v == 'y' {\n            vowels_count\
    \ += 1\n        }\n        if !contains(vowels, v) {\n            vowels_count\
    \ += 1\n        }\n    }\n    return vowels_count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdlj47zgk_test.go:20:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowelsCount\
    \ := 0\n    for _, v := range s {\n        if v == 'y' {\n            vowelsCount++\n\
    \        }\n        for _, vv := range vowels {\n            if v == vv {\n  \
    \              vowelsCount++\n            }\n        }\n    }\n    return vowelsCount\n\
    }\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n     { actual:\
    \ candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"key\"), expected:\
    \ 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n     { actual: candidate(\"\
    keY\"), expected: 2 },\n     { actual: candidate(\"bYe\"), expected: 1 },\n  \
    \   { actual: candidate(\"ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy_k90be7_test.go:21:21: invalid operation: v == vv (mismatched types rune
    and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowelsCount\
    \ := 0\n    for _, v := range s {\n        if v == 'y' {\n            vowelsCount++\n\
    \        }\n        if !contains(vowels, v) {\n            vowelsCount++\n   \
    \     }\n    }\n    return vowelsCount\n}\n\nfunc TestVowels_Count(t *testing.T)\
    \ {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8tbhqka1_test.go:20:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowels_count\
    \ := 0\n    for _, v := range s {\n        if v == 'y' {\n            vowels_count\
    \ += 1\n        }\n        if !contains(vowels, v) {\n            vowels_count\
    \ += 1\n        }\n    }\n    return vowels_count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdlj47zgk_test.go:20:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowelCount\
    \ := 0\n    for _, v := range s {\n        if v == 'y' {\n            vowelCount++\n\
    \        }\n        for _, vv := range vowels {\n            if v == vv {\n  \
    \              vowelCount++\n            }\n        }\n    }\n    return vowelCount\n\
    }\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n     { actual:\
    \ candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"key\"), expected:\
    \ 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n     { actual: candidate(\"\
    keY\"), expected: 2 },\n     { actual: candidate(\"bYe\"), expected: 1 },\n  \
    \   { actual: candidate(\"ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkis23953_test.go:21:21: invalid operation: v == vv (mismatched types rune
    and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073447
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowel_count\
    \ := 0\n    for _, v := range s {\n        if v == 'y' {\n            vowel_count++\n\
    \        }\n        if v == 'a' || v == 'e' || v == 'i' || v == 'o' || v == 'u'\
    \ {\n            vowel_count++\n        }\n    }\n    return vowel_count\n}\n\n\
    func TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n     { actual:\
    \ candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"key\"), expected:\
    \ 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n     { actual: candidate(\"\
    keY\"), expected: 2 },\n     { actual: candidate(\"bYe\"), expected: 1 },\n  \
    \   { actual: candidate(\"ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb8u4l7ny_test.go:14:5: vowels declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073447
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowelsCount\
    \ := 0\n    for _, v := range s {\n        if v == 'y' {\n            vowelsCount++\n\
    \        }\n        for _, vv := range vowels {\n            if v == vv {\n  \
    \              vowelsCount++\n            }\n        }\n    }\n    return vowelsCount\n\
    }\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n     { actual:\
    \ candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"key\"), expected:\
    \ 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n     { actual: candidate(\"\
    keY\"), expected: 2 },\n     { actual: candidate(\"bYe\"), expected: 1 },\n  \
    \   { actual: candidate(\"ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy_k90be7_test.go:21:21: invalid operation: v == vv (mismatched types rune
    and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowels_count\
    \ := 0\n    for _, char := range s {\n        if char == 'y' {\n            vowels_count\
    \ += 1\n        }\n        if !contains(vowels, char) {\n            vowels_count\
    \ += 1\n        }\n    }\n    return vowels_count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmper5pnvto_test.go:20:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073447
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowelsCount\
    \ := 0\n    for _, v := range s {\n        if v == 'y' {\n            vowelsCount++\n\
    \        }\n        if v == 'a' || v == 'e' || v == 'i' || v == 'o' || v == 'u'\
    \ {\n            vowelsCount++\n        }\n    }\n    return vowelsCount\n}\n\n\
    func TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n     { actual:\
    \ candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"key\"), expected:\
    \ 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n     { actual: candidate(\"\
    keY\"), expected: 2 },\n     { actual: candidate(\"bYe\"), expected: 1 },\n  \
    \   { actual: candidate(\"ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3k7xd2ab_test.go:14:5: vowels declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowels_count\
    \ := 0\n    for _, v := range s {\n        if v == 'y' {\n            vowels_count\
    \ += 1\n        }\n        if !contains(vowels, v) {\n            vowels_count\
    \ += 1\n        }\n    }\n    return vowels_count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdlj47zgk_test.go:20:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowelCount\
    \ := 0\n    for _, v := range s {\n        if v == 'y' {\n            vowelCount++\n\
    \        }\n        for _, vv := range vowels {\n            if v == vv {\n  \
    \              vowelCount++\n            }\n        }\n    }\n    return vowelCount\n\
    }\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n     { actual:\
    \ candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"key\"), expected:\
    \ 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n     { actual: candidate(\"\
    keY\"), expected: 2 },\n     { actual: candidate(\"bYe\"), expected: 1 },\n  \
    \   { actual: candidate(\"ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkis23953_test.go:21:21: invalid operation: v == vv (mismatched types rune
    and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073447
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowels_count\
    \ := 0\n    for _, v := range s {\n        if v == 'a' || v == 'e' || v == 'i'\
    \ || v == 'o' || v == 'u' {\n            vowels_count++\n        }\n    }\n  \
    \  return vowels_count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9qcrony6_test.go:14:5: vowels declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowels_count\
    \ := 0\n    for _, v := range s {\n        if v == 'y' {\n            vowels_count\
    \ += 1\n        }\n        if !contains(vowels, v) {\n            vowels_count\
    \ += 1\n        }\n    }\n    return vowels_count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdlj47zgk_test.go:20:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowels_count\
    \ := 0\n    for _, v := range s {\n        if v == 'y' {\n            vowels_count\
    \ += 1\n        }\n        for _, vv := range vowels {\n            if v == vv\
    \ {\n                vowels_count += 1\n            }\n        }\n    }\n    return\
    \ vowels_count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n  \
    \   { actual: candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"\
    key\"), expected: 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n  \
    \   { actual: candidate(\"keY\"), expected: 2 },\n     { actual: candidate(\"\
    bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected: 3 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo75mp5a__test.go:21:21: invalid operation: v == vv (mismatched types rune
    and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowelsCount\
    \ := 0\n    for _, v := range s {\n        if v == 'y' {\n            vowelsCount++\n\
    \        }\n        if !contains(vowels, v) {\n            vowelsCount++\n   \
    \     }\n    }\n    return vowelsCount\n}\n\nfunc TestVowels_Count(t *testing.T)\
    \ {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8tbhqka1_test.go:20:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowels_count\
    \ := 0\n    for _, char := range s {\n        if char == 'a' || char == 'e' ||\
    \ char == 'i' || char == 'o' || char == 'u' {\n            vowels_count++\n  \
    \      }\n    }\n    return vowels_count\n}\n\nfunc TestVowels_Count(t *testing.T)\
    \ {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpug27l6br_test.go:14:5: vowels declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowelsCount\
    \ := 0\n    for _, v := range s {\n        if v == 'y' {\n            vowelsCount++\n\
    \        }\n        for _, v1 := range vowels {\n            if v == v1 {\n  \
    \              vowelsCount++\n            }\n        }\n    }\n    return vowelsCount\n\
    }\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n     { actual:\
    \ candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"key\"), expected:\
    \ 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n     { actual: candidate(\"\
    keY\"), expected: 2 },\n     { actual: candidate(\"bYe\"), expected: 1 },\n  \
    \   { actual: candidate(\"ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp95_hud7v_test.go:21:21: invalid operation: v == v1 (mismatched types rune
    and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowels_count\
    \ := 0\n    for _, v := range s {\n        if v == 'y' {\n            vowels_count\
    \ += 1\n        }\n        if !contains(vowels, v) {\n            vowels_count\
    \ += 1\n        }\n    }\n    return vowels_count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdlj47zgk_test.go:20:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowel_count\
    \ := 0\n    for _, v := range s {\n        if v == 'a' || v == 'e' || v == 'i'\
    \ || v == 'o' || v == 'u' {\n            vowel_count++\n        }\n    }\n   \
    \ return vowel_count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6z3v6y_t_test.go:14:5: vowels declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073447
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowelsCount\
    \ := 0\n    for _, v := range s {\n        if v == 'y' {\n            vowelsCount++\n\
    \        }\n        for _, vv := range vowels {\n            if v == vv {\n  \
    \              vowelsCount++\n            }\n        }\n    }\n    return vowelsCount\n\
    }\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n     { actual:\
    \ candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"key\"), expected:\
    \ 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n     { actual: candidate(\"\
    keY\"), expected: 2 },\n     { actual: candidate(\"bYe\"), expected: 1 },\n  \
    \   { actual: candidate(\"ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy_k90be7_test.go:21:21: invalid operation: v == vv (mismatched types rune
    and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowels_count\
    \ := 0\n    for _, v := range s {\n        if v == 'y' {\n            vowels_count\
    \ += 1\n        }\n        if v == 'a' || v == 'e' || v == 'i' || v == 'o' ||\
    \ v == 'u' {\n            vowels_count += 1\n        }\n    }\n    return vowels_count\n\
    }\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n     { actual:\
    \ candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"key\"), expected:\
    \ 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n     { actual: candidate(\"\
    keY\"), expected: 2 },\n     { actual: candidate(\"bYe\"), expected: 1 },\n  \
    \   { actual: candidate(\"ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfqcl2iid_test.go:14:5: vowels declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowelCount\
    \ := 0\n    for _, v := range s {\n        if v == 'y' {\n            vowelCount++\n\
    \        }\n        for _, vv := range vowels {\n            if v == vv {\n  \
    \              vowelCount++\n            }\n        }\n    }\n    return vowelCount\n\
    }\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n     { actual:\
    \ candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"key\"), expected:\
    \ 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n     { actual: candidate(\"\
    keY\"), expected: 2 },\n     { actual: candidate(\"bYe\"), expected: 1 },\n  \
    \   { actual: candidate(\"ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkis23953_test.go:21:21: invalid operation: v == vv (mismatched types rune
    and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073447
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowels_count\
    \ := 0\n    for _, v := range s {\n        if v == 'a' || v == 'e' || v == 'i'\
    \ || v == 'o' || v == 'u' {\n            vowels_count++\n        }\n    }\n  \
    \  return vowels_count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9qcrony6_test.go:14:5: vowels declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowelsCount\
    \ := 0\n    for _, v := range s {\n        if v == 'y' {\n            vowelsCount++\n\
    \        }\n        for _, vv := range vowels {\n            if v == vv {\n  \
    \              vowelsCount++\n            }\n        }\n    }\n    return vowelsCount\n\
    }\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n     { actual:\
    \ candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"key\"), expected:\
    \ 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n     { actual: candidate(\"\
    keY\"), expected: 2 },\n     { actual: candidate(\"bYe\"), expected: 1 },\n  \
    \   { actual: candidate(\"ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy_k90be7_test.go:21:21: invalid operation: v == vv (mismatched types rune
    and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowelsCount\
    \ := 0\n    for _, v := range s {\n        if v == 'y' {\n            vowelsCount++\n\
    \        }\n        for _, vv := range vowels {\n            if v == vv {\n  \
    \              vowelsCount++\n            }\n        }\n    }\n    return vowelsCount\n\
    }\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n     { actual:\
    \ candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"key\"), expected:\
    \ 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n     { actual: candidate(\"\
    keY\"), expected: 2 },\n     { actual: candidate(\"bYe\"), expected: 1 },\n  \
    \   { actual: candidate(\"ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy_k90be7_test.go:21:21: invalid operation: v == vv (mismatched types rune
    and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowelsCount\
    \ := 0\n    for _, v := range s {\n        if v == 'y' {\n            vowelsCount++\n\
    \        }\n        for _, vv := range vowels {\n            if v == vv {\n  \
    \              vowelsCount++\n            }\n        }\n    }\n    return vowelsCount\n\
    }\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n     { actual:\
    \ candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"key\"), expected:\
    \ 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n     { actual: candidate(\"\
    keY\"), expected: 2 },\n     { actual: candidate(\"bYe\"), expected: 1 },\n  \
    \   { actual: candidate(\"ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy_k90be7_test.go:21:21: invalid operation: v == vv (mismatched types rune
    and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowels_count\
    \ := 0\n    for _, v := range s {\n        if v == 'y' {\n            vowels_count\
    \ += 1\n        }\n        if !contains(vowels, v) {\n            vowels_count\
    \ += 1\n        }\n    }\n    return vowels_count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdlj47zgk_test.go:20:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowelsCount\
    \ := 0\n    for _, v := range s {\n        if v == 'y' {\n            vowelsCount++\n\
    \        }\n        if !contains(vowels, v) {\n            vowelsCount++\n   \
    \     }\n    }\n    return vowelsCount\n}\n\nfunc TestVowels_Count(t *testing.T)\
    \ {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8tbhqka1_test.go:20:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowelsCount\
    \ := 0\n    for _, v := range s {\n        if v == 'y' {\n            vowelsCount++\n\
    \        }\n        for _, vv := range vowels {\n            if v == vv {\n  \
    \              vowelsCount++\n            }\n        }\n    }\n    return vowelsCount\n\
    }\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n     { actual:\
    \ candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"key\"), expected:\
    \ 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n     { actual: candidate(\"\
    keY\"), expected: 2 },\n     { actual: candidate(\"bYe\"), expected: 1 },\n  \
    \   { actual: candidate(\"ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy_k90be7_test.go:21:21: invalid operation: v == vv (mismatched types rune
    and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowel_count\
    \ := 0\n    for _, v := range s {\n        if v == 'a' || v == 'e' || v == 'i'\
    \ || v == 'o' || v == 'u' {\n            vowel_count++\n        }\n    }\n   \
    \ return vowel_count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6z3v6y_t_test.go:14:5: vowels declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073447
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    // code here\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptlpclw1z_test.go:15:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowelsCount\
    \ := 0\n    for _, v := range s {\n        if v == 'y' {\n            vowelsCount++\n\
    \        }\n        for _, vv := range vowels {\n            if v == vv {\n  \
    \              vowelsCount++\n            }\n        }\n    }\n    return vowelsCount\n\
    }\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n     { actual:\
    \ candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"key\"), expected:\
    \ 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n     { actual: candidate(\"\
    keY\"), expected: 2 },\n     { actual: candidate(\"bYe\"), expected: 1 },\n  \
    \   { actual: candidate(\"ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy_k90be7_test.go:21:21: invalid operation: v == vv (mismatched types rune
    and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowels_count\
    \ := 0\n    for _, char := range s {\n        if char == 'a' || char == 'e' ||\
    \ char == 'i' || char == 'o' || char == 'u' {\n            vowels_count++\n  \
    \      }\n    }\n    return vowels_count\n}\n\nfunc TestVowels_Count(t *testing.T)\
    \ {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpug27l6br_test.go:14:5: vowels declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowelCount\
    \ := 0\n    for _, v := range s {\n        if v == \"y\" {\n            vowelCount++\n\
    \        }\n        for _, vv := range vowels {\n            if v == vv {\n  \
    \              vowelCount++\n            }\n        }\n    }\n    return vowelCount\n\
    }\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n     { actual:\
    \ candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"key\"), expected:\
    \ 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n     { actual: candidate(\"\
    keY\"), expected: 2 },\n     { actual: candidate(\"bYe\"), expected: 1 },\n  \
    \   { actual: candidate(\"ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx0uw5alb_test.go:17:17: invalid operation: v == "y" (mismatched types
    rune and untyped string)

    /tmp/tmpx0uw5alb_test.go:21:21: invalid operation: v == vv (mismatched types rune
    and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073447
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowelsCount\
    \ := 0\n    for _, v := range s {\n        if v == 'a' || v == 'e' || v == 'i'\
    \ || v == 'o' || v == 'u' {\n            vowelsCount++\n        }\n    }\n   \
    \ return vowelsCount\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwqu17mdq_test.go:14:5: vowels declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowelsCount\
    \ := 0\n    for _, v := range s {\n        if v == 'a' || v == 'e' || v == 'i'\
    \ || v == 'o' || v == 'u' {\n            vowelsCount++\n        }\n    }\n   \
    \ return vowelsCount\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwqu17mdq_test.go:14:5: vowels declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowels_count\
    \ := 0\n    for _, v := range s {\n        if v == 'y' {\n            vowels_count\
    \ += 1\n        }\n        if !contains(vowels, v) {\n            vowels_count\
    \ += 1\n        }\n    }\n    return vowels_count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdlj47zgk_test.go:20:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowelsCount\
    \ := 0\n    for _, v := range s {\n        if v == 'a' || v == 'e' || v == 'i'\
    \ || v == 'o' || v == 'u' {\n            vowelsCount++\n        }\n    }\n   \
    \ return vowelsCount\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwqu17mdq_test.go:14:5: vowels declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowelsCount\
    \ := 0\n    for _, v := range s {\n        if v == 'y' {\n            vowelsCount++\n\
    \        }\n        for _, vv := range vowels {\n            if v == vv {\n  \
    \              vowelsCount++\n            }\n        }\n    }\n    return vowelsCount\n\
    }\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n     { actual:\
    \ candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"key\"), expected:\
    \ 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n     { actual: candidate(\"\
    keY\"), expected: 2 },\n     { actual: candidate(\"bYe\"), expected: 1 },\n  \
    \   { actual: candidate(\"ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy_k90be7_test.go:21:21: invalid operation: v == vv (mismatched types rune
    and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowels_count\
    \ := 0\n    for _, v := range s {\n        if v == 'y' {\n            vowels_count\
    \ += 1\n        }\n        for _, vv := range vowels {\n            if v == vv\
    \ {\n                vowels_count += 1\n            }\n        }\n    }\n    return\
    \ vowels_count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n  \
    \   { actual: candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"\
    key\"), expected: 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n  \
    \   { actual: candidate(\"keY\"), expected: 2 },\n     { actual: candidate(\"\
    bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected: 3 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo75mp5a__test.go:21:21: invalid operation: v == vv (mismatched types rune
    and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowelsCount\
    \ := 0\n    for _, v := range s {\n        if v == 'a' || v == 'e' || v == 'i'\
    \ || v == 'o' || v == 'u' {\n            vowelsCount++\n        }\n    }\n   \
    \ return vowelsCount\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwqu17mdq_test.go:14:5: vowels declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowelsCount\
    \ := 0\n    for _, v := range s {\n        if v == \"y\" {\n            vowelsCount++\n\
    \        }\n        if !contains(vowels, v) {\n            vowelsCount++\n   \
    \     }\n    }\n    return vowelsCount\n}\n\nfunc TestVowels_Count(t *testing.T)\
    \ {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5_69826o_test.go:17:17: invalid operation: v == "y" (mismatched types
    rune and untyped string)

    /tmp/tmp5_69826o_test.go:20:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073447
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowels_count\
    \ := 0\n    for _, v := range s {\n        if v == 'y' {\n            vowels_count\
    \ += 1\n        }\n        if v == 'a' || v == 'e' || v == 'i' || v == 'o' ||\
    \ v == 'u' {\n            vowels_count += 1\n        }\n    }\n    return vowels_count\n\
    }\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n     { actual:\
    \ candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"key\"), expected:\
    \ 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n     { actual: candidate(\"\
    keY\"), expected: 2 },\n     { actual: candidate(\"bYe\"), expected: 1 },\n  \
    \   { actual: candidate(\"ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfqcl2iid_test.go:14:5: vowels declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowelsCount\
    \ := 0\n    for _, char := range s {\n        if char == 'y' {\n            vowelsCount++\n\
    \        }\n        if !contains(vowels, char) {\n            vowelsCount++\n\
    \        }\n    }\n    return vowelsCount\n}\n\nfunc TestVowels_Count(t *testing.T)\
    \ {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa12rlikw_test.go:20:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073447
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowels_count\
    \ := 0\n    for _, v := range s {\n        if v == 'y' {\n            vowels_count\
    \ += 1\n        }\n        if v == 'a' || v == 'e' || v == 'i' || v == 'o' ||\
    \ v == 'u' {\n            vowels_count += 1\n        }\n    }\n    return vowels_count\n\
    }\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n     { actual:\
    \ candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"key\"), expected:\
    \ 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n     { actual: candidate(\"\
    keY\"), expected: 2 },\n     { actual: candidate(\"bYe\"), expected: 1 },\n  \
    \   { actual: candidate(\"ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfqcl2iid_test.go:14:5: vowels declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowels_count\
    \ := 0\n    for _, v := range s {\n        if v == 'a' || v == 'e' || v == 'i'\
    \ || v == 'o' || v == 'u' {\n            vowels_count++\n        }\n    }\n  \
    \  return vowels_count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9qcrony6_test.go:14:5: vowels declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowels_count\
    \ := 0\n    for _, v := range s {\n        if v == 'y' {\n            vowels_count\
    \ += 1\n        }\n        if !contains(vowels, v) {\n            vowels_count\
    \ += 1\n        }\n    }\n    return vowels_count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdlj47zgk_test.go:20:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowels_count\
    \ := 0\n    for _, v := range s {\n        if v == \"y\" && len(s) == 0 {\n  \
    \          vowels_count += 1\n        } else if v == \"y\" && len(s) != 0 {\n\
    \            vowels_count -= 1\n        }\n        for _, vv := range vowels {\n\
    \            if v == vv {\n                vowels_count += 1\n            }\n\
    \        }\n    }\n    return vowels_count\n}\n\nfunc TestVowels_Count(t *testing.T)\
    \ {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdx4livap_test.go:17:17: invalid operation: v == "y" (mismatched types
    rune and untyped string)

    /tmp/tmpdx4livap_test.go:19:24: invalid operation: v == "y" (mismatched types
    rune and untyped string)

    /tmp/tmpdx4livap_test.go:23:21: invalid operation: v == vv (mismatched types rune
    and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073447
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowels_count\
    \ := 0\n    for _, v := range s {\n        if v == 'a' || v == 'e' || v == 'i'\
    \ || v == 'o' || v == 'u' {\n            vowels_count++\n        }\n    }\n  \
    \  return vowels_count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9qcrony6_test.go:14:5: vowels declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowels_count\
    \ := 0\n    for _, v := range s {\n        if v == 'y' {\n            vowels_count\
    \ += 1\n        }\n        if !contains(vowels, v) {\n            vowels_count\
    \ += 1\n        }\n    }\n    return vowels_count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdlj47zgk_test.go:20:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowelsCount\
    \ := 0\n    for _, v := range s {\n        if v == 'a' || v == 'e' || v == 'i'\
    \ || v == 'o' || v == 'u' {\n            vowelsCount++\n        }\n    }\n   \
    \ return vowelsCount\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwqu17mdq_test.go:14:5: vowels declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowelsCount\
    \ := 0\n    for _, v := range s {\n        if v == 'y' {\n            vowelsCount++\n\
    \        }\n        for _, vv := range vowels {\n            if v == vv {\n  \
    \              vowelsCount++\n            }\n        }\n    }\n    return vowelsCount\n\
    }\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n     { actual:\
    \ candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"key\"), expected:\
    \ 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n     { actual: candidate(\"\
    keY\"), expected: 2 },\n     { actual: candidate(\"bYe\"), expected: 1 },\n  \
    \   { actual: candidate(\"ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy_k90be7_test.go:21:21: invalid operation: v == vv (mismatched types rune
    and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowels_count\
    \ := 0\n    for _, v := range s {\n        if v == 'y' {\n            vowels_count\
    \ += 1\n        }\n        for _, vv := range vowels {\n            if v == vv\
    \ {\n                vowels_count += 1\n            }\n        }\n    }\n    return\
    \ vowels_count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n  \
    \   { actual: candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"\
    key\"), expected: 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n  \
    \   { actual: candidate(\"keY\"), expected: 2 },\n     { actual: candidate(\"\
    bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected: 3 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo75mp5a__test.go:21:21: invalid operation: v == vv (mismatched types rune
    and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowels_count\
    \ := 0\n    for _, v := range s {\n        if v == 'y' {\n            vowels_count\
    \ += 1\n        }\n        if !contains(vowels, v) {\n            vowels_count\
    \ += 1\n        }\n    }\n    return vowels_count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdlj47zgk_test.go:20:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowelsCount\
    \ := 0\n    for _, v := range s {\n        if v == 'y' {\n            vowelsCount++\n\
    \        }\n        if !contains(vowels, v) {\n            vowelsCount++\n   \
    \     }\n    }\n    return vowelsCount\n}\n\nfunc TestVowels_Count(t *testing.T)\
    \ {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8tbhqka1_test.go:20:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowels_count\
    \ := 0\n    for _, v := range s {\n        if v == 'y' {\n            vowels_count++\n\
    \        }\n        if !contains(vowels, v) {\n            vowels_count++\n  \
    \      }\n    }\n    return vowels_count\n}\n\nfunc TestVowels_Count(t *testing.T)\
    \ {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmph67oj_gv_test.go:20:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowels_count\
    \ := 0\n    for _, v := range s {\n        if v == 'y' {\n            vowels_count\
    \ += 1\n        }\n        for _, vv := range vowels {\n            if v == vv\
    \ {\n                vowels_count += 1\n            }\n        }\n    }\n    return\
    \ vowels_count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n  \
    \   { actual: candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"\
    key\"), expected: 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n  \
    \   { actual: candidate(\"keY\"), expected: 2 },\n     { actual: candidate(\"\
    bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected: 3 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo75mp5a__test.go:21:21: invalid operation: v == vv (mismatched types rune
    and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowelsCount\
    \ := 0\n    for _, v := range s {\n        if v == 'y' {\n            vowelsCount++\n\
    \        }\n        if !contains(vowels, v) {\n            vowelsCount++\n   \
    \     }\n    }\n    return vowelsCount\n}\n\nfunc TestVowels_Count(t *testing.T)\
    \ {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8tbhqka1_test.go:20:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowels_count\
    \ := 0\n    for _, v := range s {\n        if v == 'y' {\n            vowels_count\
    \ += 1\n        }\n        if v == 'a' || v == 'e' || v == 'i' || v == 'o' ||\
    \ v == 'u' {\n            vowels_count += 1\n        }\n    }\n    return vowels_count\n\
    }\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n     { actual:\
    \ candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"key\"), expected:\
    \ 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n     { actual: candidate(\"\
    keY\"), expected: 2 },\n     { actual: candidate(\"bYe\"), expected: 1 },\n  \
    \   { actual: candidate(\"ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfqcl2iid_test.go:14:5: vowels declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowels_count\
    \ := 0\n    for _, letter := range s {\n        if letter == 'y' {\n         \
    \   vowels_count += 1\n        }\n        for _, vowel := range vowels {\n   \
    \         if letter == vowel {\n                vowels_count += 1\n          \
    \  }\n        }\n    }\n    return vowels_count\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpt588mhy5_test.go:21:26: invalid operation: letter == vowel (mismatched
    types rune and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073447
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    // Your code here\n    vowels := []string{\"a\", \"e\", \"i\", \"\
    o\", \"u\"}\n    count := 0\n    for _, v := range s {\n        if v == 'y' {\n\
    \            count++\n        }\n        for _, vv := range vowels {\n       \
    \     if v == vv {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate :=\
    \ vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n\
    \     { actual: candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"\
    key\"), expected: 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n  \
    \   { actual: candidate(\"keY\"), expected: 2 },\n     { actual: candidate(\"\
    bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected: 3 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprbi57uy2_test.go:22:21: invalid operation: v == vv (mismatched types rune
    and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073447
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowelsCount\
    \ := 0\n    for _, v := range s {\n        if v == \"y\" && len(s) == 0 {\n  \
    \          vowelsCount++\n        }\n        if !contains(vowels, v) {\n     \
    \       vowelsCount++\n        }\n    }\n    return vowelsCount\n}\n\nfunc TestVowels_Count(t\
    \ *testing.T) {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected:\
    \ 3 },\n     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7ovcb26r_test.go:17:17: invalid operation: v == "y" (mismatched types
    rune and untyped string)

    /tmp/tmp7ovcb26r_test.go:20:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073447
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowelsCount\
    \ := 0\n    for _, v := range s {\n        if v == 'a' || v == 'e' || v == 'i'\
    \ || v == 'o' || v == 'u' {\n            vowelsCount++\n        }\n    }\n   \
    \ return vowelsCount\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwqu17mdq_test.go:14:5: vowels declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowels_count\
    \ := 0\n    for _, char := range s {\n        if char == 'a' || char == 'e' ||\
    \ char == 'i' || char == 'o' || char == 'u' {\n            vowels_count++\n  \
    \      }\n    }\n    return vowels_count\n}\n\nfunc TestVowels_Count(t *testing.T)\
    \ {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpug27l6br_test.go:14:5: vowels declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowels_count\
    \ := 0\n    for _, v := range s {\n        if v == 'a' || v == 'e' || v == 'i'\
    \ || v == 'o' || v == 'u' {\n            vowels_count++\n        }\n    }\n  \
    \  return vowels_count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9qcrony6_test.go:14:5: vowels declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowelsCount\
    \ := 0\n    for _, v := range s {\n        if v == 'y' {\n            vowelsCount++\n\
    \        }\n        for _, vv := range vowels {\n            if v == vv {\n  \
    \              vowelsCount++\n            }\n        }\n    }\n    return vowelsCount\n\
    }\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n     { actual:\
    \ candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"key\"), expected:\
    \ 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n     { actual: candidate(\"\
    keY\"), expected: 2 },\n     { actual: candidate(\"bYe\"), expected: 1 },\n  \
    \   { actual: candidate(\"ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy_k90be7_test.go:21:21: invalid operation: v == vv (mismatched types rune
    and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowelsCount\
    \ := 0\n    for _, v := range s {\n        if v == 'y' {\n            vowelsCount++\n\
    \        }\n        if v == 'a' || v == 'e' || v == 'i' || v == 'o' || v == 'u'\
    \ {\n            vowelsCount++\n        }\n    }\n    return vowelsCount\n}\n\n\
    func TestVowels_Count(t *testing.T) {\n  candidate := vowels_count\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\"), expected: 2 },\n     { actual:\
    \ candidate(\"Alone\"), expected: 3 },\n     { actual: candidate(\"key\"), expected:\
    \ 2 },\n     { actual: candidate(\"bye\"), expected: 1 },\n     { actual: candidate(\"\
    keY\"), expected: 2 },\n     { actual: candidate(\"bYe\"), expected: 1 },\n  \
    \   { actual: candidate(\"ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3k7xd2ab_test.go:14:5: vowels declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowel_count\
    \ := 0\n    for _, v := range s {\n        if v == 'a' || v == 'e' || v == 'i'\
    \ || v == 'o' || v == 'u' {\n            vowel_count++\n        }\n    }\n   \
    \ return vowel_count\n}\n\nfunc TestVowels_Count(t *testing.T) {\n  candidate\
    \ := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\"),\
    \ expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n     {\
    \ actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"bye\"\
    ), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n     { actual:\
    \ candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"ACEDY\"), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6z3v6y_t_test.go:14:5: vowels declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073447
- exit_code: 2
  program: "package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function vowels_count which takes a string representing\n// a\
    \ word as input and returns the number of vowels in the string.\n// Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only\
    \ when it is at the end of the given word.\n// Example:\nfunc vowels_count(s string)\
    \ int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowelCount\
    \ := 0\n    for _, v := range s {\n        if v == 'y' {\n            vowelCount++\n\
    \        }\n        if !contains(vowels, v) {\n            vowelCount++\n    \
    \    }\n    }\n    return vowelCount\n}\n\nfunc TestVowels_Count(t *testing.T)\
    \ {\n  candidate := vowels_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\"), expected: 2 },\n     { actual: candidate(\"Alone\"), expected: 3 },\n\
    \     { actual: candidate(\"key\"), expected: 2 },\n     { actual: candidate(\"\
    bye\"), expected: 1 },\n     { actual: candidate(\"keY\"), expected: 2 },\n  \
    \   { actual: candidate(\"bYe\"), expected: 1 },\n     { actual: candidate(\"\
    ACEDY\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6nmn5awm_test.go:20:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073445
