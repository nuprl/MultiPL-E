language: go_test.go
name: HumanEval_65_circular_shift
results:
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  s := \"\"\n    for shift > 0 {\n        if shift >= len(x) {\n            s\
    \ += string(x)\n            break\n        }\n        s += string(x%10) + string(10-x%10)\n\
    \        x /= 10\n        shift -= 1\n    }\n    return s\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp736zsfa7_test.go:14:25: invalid argument: x (variable of type int) for
    len

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  if shift > len(x) {\n        return fmt.Sprintf(\"%v\", x)\n    }\n    result\
    \ := \"\"\n    for i := 0; i < shift; i++ {\n        result += \"0\"\n    }\n\
    \    for i := len(x) - 1; i >= shift; i-- {\n        result += \"1\"\n    }\n\
    \    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps8fdi56x_test.go:12:20: invalid argument: x (variable of type int) for
    len

    /tmp/tmps8fdi56x_test.go:19:18: invalid argument: x (variable of type int) for
    len

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  x %= 10\n    shift %= 10\n    if shift > len(x) {\n        shift = len(x) -\
    \ shift\n    }\n    result := \"\"\n    for i := 0; i < shift; i++ {\n       \
    \ result += string(x%10)\n        x /= 10\n    }\n    result += string(x)\n  \
    \  return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate :=\
    \ circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv4v4d1q6_test.go:14:20: invalid argument: x (variable of type int) for
    len

    /tmp/tmpv4v4d1q6_test.go:15:21: invalid argument: x (variable of type int) for
    len

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n\
    \    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n\
    \    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n\
    \    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n\
    \    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n\
    \    x /= 10 * shift\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate :=\
    \ circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2e1vg9dy_test.go:77:6: expected ''('', found TestCircular_Shift

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074946
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  x %= 10\n    shift %= 10\n    result := \"\"\n    for i := 0; i < shift; i++\
    \ {\n        result = fmt.Sprintf(\"%c%c\", result, x%10)\n        x /= 10\n \
    \   }\n    return fmt.Sprintf(\"%c%c\", result, x%10)\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmp7nw0siaf_test.go:16:18: fmt.Sprintf format %c has arg result of wrong
    type string

    /tmp/tmp7nw0siaf_test.go:19:12: fmt.Sprintf format %c has arg result of wrong
    type string

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074948
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  digits := []int{x}\n    for shift > 0 {\n        shift -= 1\n        digits\
    \ = append(digits, digits[len(digits)-1])\n    }\n    return fmt.Sprintf(\"%v\"\
    , digits)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmp2_wxjb0t_test.go:37: expected '001', got '[100 100 100]'\n\
    \    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmp2_wxjb0t_test.go:37:\
    \ expected '12', got '[12 12 12]'\n    --- FAIL: TestCircular_Shift/test_num__2\
    \ (0.00s)\n        tmp2_wxjb0t_test.go:37: expected '79', got '[97 97 97 97 97\
    \ 97 97 97 97]'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n      \
    \  tmp2_wxjb0t_test.go:37: expected '21', got '[12 12]'\n    --- FAIL: TestCircular_Shift/test_num__4\
    \ (0.00s)\n        tmp2_wxjb0t_test.go:37: expected '11', got '[11 11 11 11 11\
    \ 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11\
    \ 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11\
    \ 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11\
    \ 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074948
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  s := \"\"\n    for i := 0; i < shift; i++ {\n        s += fmt.Sprintf(\"%d\"\
    , x%10)\n        x = x/10\n    }\n    for i := 0; i < shift; i++ {\n        s\
    \ += fmt.Sprintf(\"%d\", x%10)\n        x = x/10\n    }\n    return s\n}\n\nfunc\
    \ TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmp7pb4d9h2_test.go:41: expected '001', got '0010'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmp7pb4d9h2_test.go:41:\
    \ expected '12', got '2100'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n\
    \        tmp7pb4d9h2_test.go:41: expected '79', got '7900000000000000'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmp7pb4d9h2_test.go:41:\
    \ expected '11', got '1100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074948
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  s := \"\"\n    for i := 0; i < shift; i++ {\n        s += fmt.Sprintf(\"%d\"\
    , x%10)\n        x /= 10\n    }\n    if shift < len(s) {\n        s += fmt.Sprintf(\"\
    %d\", x%10)\n    }\n    return s\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n\
    \  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpp1s_nkgb_test.go:40: expected '001', got '00'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__1 (0.00s)\n        tmpp1s_nkgb_test.go:40: expected\
    \ '12', got '21'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n     \
    \   tmpp1s_nkgb_test.go:40: expected '79', got '79000000'\n    --- FAIL: TestCircular_Shift/test_num__3\
    \ (0.00s)\n        tmpp1s_nkgb_test.go:40: expected '21', got '2'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__4 (0.00s)\n        tmpp1s_nkgb_test.go:40: expected\
    \ '11', got '11000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074948
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  digits := []int{}\n    for i := 0; i < shift; i++ {\n        digits = append(digits,\
    \ x%10)\n        x = x/10\n    }\n    for i := 0; i < shift; i++ {\n        digits\
    \ = append(digits, x%10)\n        x = x/10\n    }\n    return fmt.Sprintf(\"%d\"\
    , digits)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpfsz2t1cj_test.go:41: expected '001', got '[0 0 1 0]'\n \
    \   --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmpfsz2t1cj_test.go:41:\
    \ expected '12', got '[2 1 0 0]'\n    --- FAIL: TestCircular_Shift/test_num__2\
    \ (0.00s)\n        tmpfsz2t1cj_test.go:41: expected '79', got '[7 9 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0]'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n\
    \        tmpfsz2t1cj_test.go:41: expected '21', got '[2 1]'\n    --- FAIL: TestCircular_Shift/test_num__4\
    \ (0.00s)\n        tmpfsz2t1cj_test.go:41: expected '11', got '[1 1 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074948
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    return fmt.Sprintf(\"\
    %d\", x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\npanic: runtime error: integer divide\
    \ by zero [recovered]\n\tpanic: runtime error: integer divide by zero\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x5027e0, 0x5f19a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5027e0, 0x5f19a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.circular_shift(...)\n\t/tmp/tmpz47jxyhk_test.go:12\n\
    command-line-arguments_test.TestCircular_Shift(0x0?)\n\t/tmp/tmpz47jxyhk_test.go:29\
    \ +0x11a\ntesting.tRunner(0xc0000cc680, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074948
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  digits := []int{x}\n    for i := 0; i < shift; i++ {\n        digits = append(digits,\
    \ digits[len(digits)-1])\n    }\n    return fmt.Sprintf(\"%v\", digits)\n}\n\n\
    func TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmp_heu84op_test.go:36: expected '001', got '[100 100 100]'\n\
    \    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmp_heu84op_test.go:36:\
    \ expected '12', got '[12 12 12]'\n    --- FAIL: TestCircular_Shift/test_num__2\
    \ (0.00s)\n        tmp_heu84op_test.go:36: expected '79', got '[97 97 97 97 97\
    \ 97 97 97 97]'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n      \
    \  tmp_heu84op_test.go:36: expected '21', got '[12 12]'\n    --- FAIL: TestCircular_Shift/test_num__4\
    \ (0.00s)\n        tmp_heu84op_test.go:36: expected '11', got '[11 11 11 11 11\
    \ 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11\
    \ 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11\
    \ 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11\
    \ 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074948
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  result := \"\"\n    shift %= len(strconv.Itoa(x))\n    if shift > 0 {\n   \
    \     for i := 0; i < shift; i++ {\n            result += strconv.Itoa(x%10)\n\
    \            x /= 10\n        }\n    }\n    for i := 0; i < shift; i++ {\n   \
    \     result += strconv.Itoa(x%10)\n        x /= 10\n    }\n    return result\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpno1qbzj6_test.go:13:18: undefined: strconv

    /tmp/tmpno1qbzj6_test.go:16:23: undefined: strconv

    /tmp/tmpno1qbzj6_test.go:21:19: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  result := \"\"\n    for shift > 0 {\n        digit, shift := x%10, shift-1\n\
    \        result += string(digit)\n        x = x/10\n    }\n    if shift > 0 {\n\
    \        digit, shift := x%10, shift-1\n        result += string(digit)\n    }\n\
    \    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpba1cmv_u_test.go:14:16: shift declared but not used

    /tmp/tmpba1cmv_u_test.go:19:16: shift declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  result := \"\"\n    for i := 0; i < shift; i++ {\n        result += fmt.Sprintf(\"\
    %d\", x%10)\n        x /= 10\n    }\n    for i := 0; i < shift; i++ {\n      \
    \  result += fmt.Sprintf(\"%d\", x%10)\n        x /= 10\n    }\n    return result\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmp64730qru_test.go:41: expected '001', got '0010'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmp64730qru_test.go:41:\
    \ expected '12', got '2100'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n\
    \        tmp64730qru_test.go:41: expected '79', got '7900000000000000'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmp64730qru_test.go:41:\
    \ expected '11', got '1100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074948
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  digits := []int{}\n    for i := 0; i < shift; i++ {\n        digits = append(digits,\
    \ x%10)\n        x = x/10\n    }\n    for i := 0; i < shift; i++ {\n        digits\
    \ = append(digits, x%10)\n        x = x/10\n    }\n    return fmt.Sprintf(\"%d\"\
    , digits)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpfsz2t1cj_test.go:41: expected '001', got '[0 0 1 0]'\n \
    \   --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmpfsz2t1cj_test.go:41:\
    \ expected '12', got '[2 1 0 0]'\n    --- FAIL: TestCircular_Shift/test_num__2\
    \ (0.00s)\n        tmpfsz2t1cj_test.go:41: expected '79', got '[7 9 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0]'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n\
    \        tmpfsz2t1cj_test.go:41: expected '21', got '[2 1]'\n    --- FAIL: TestCircular_Shift/test_num__4\
    \ (0.00s)\n        tmpfsz2t1cj_test.go:41: expected '11', got '[1 1 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074948
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  digits := []int{x}\n    for i := 0; i < shift; i++ {\n        digits = append(digits,\
    \ digits[len(digits)-1])\n    }\n    return fmt.Sprintf(\"%d\", digits[len(digits)-shift:]...)\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjggqelfk_test.go:16:36: cannot use digits[len(digits) - shift:] (value
    of type []int) as type []any in argument to fmt.Sprintf

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  digits := []int{x}\n    for i := 0; i < shift; i++ {\n        digits = append(digits,\
    \ digits[len(digits)-1])\n    }\n    return fmt.Sprintf(\"%d\", digits[len(digits)-1])\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpym7i4moi_test.go:36: expected '001', got '100'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmpym7i4moi_test.go:36:\
    \ expected '79', got '97'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n\
    \        tmpym7i4moi_test.go:36: expected '21', got '12'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074948
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  x %= (10 * shift)\n    x /= (10 * shift)\n    x %= (10 * shift)\n    x /= (10\
    \ * shift)\n    x %= (10 * shift)\n    x /= (10 * shift)\n    x %= (10 * shift)\n\
    \    x /= (10 * shift)\n    x %= (10 * shift)\n    x /= (10 * shift)\n    x %=\
    \ (10 * shift)\n    x /= (10 * shift)\n    x %= (10 * shift)\n    x /= (10 * shift)\n\
    \    x %= (10 * shift)\n    x /= (10 * shift)\n    x %= (10 * shift)\n    x /=\
    \ (10 * shift)\n    x %= (10 * shift)\n    x /= (10 * shift)\n    x %= (10 * shift)\n\
    \    x /= (10 * shift)\n    x %= (10 * shift)\n    x /= (10 * shift)\n    x %=\
    \ (10 * shift)\n    x /= (10 * shift)\n    x %= (10 * shift)\n    x /= (10 * shift)\n\
    \    x %= (10 * shift)\n    x /= (10 * shift)\n    x %= (10 * shift)\n    x /=\
    \ (10 * shift)\n    x %= (10 * shift)\n    x /= (10 * shift)\n    x %= (10 * shift)\n\
    \    x /= (10 * shift)\n    x %= (10 * shift)\n    x /= (10 * shift)\n    x %=\
    \ (10 * shift)\n    x /= (10 * shift)\n    x %= (10 * shift)\n    x /= (10 * shift)\n\
    \    x %= (10 * shift)\n    x /= (10 * shift)\n    x %= (10 * shift)\n    x /=\
    \ (10 * shift)\n    x %= (10 * shift)\n    x /= (10 * shift)\n    x %= (10 * shift)\n\
    \    x /= (10 * shift)\n    x %= (10 * shift)\n    x /= (10 * shift)\n    x %=\
    \ (10 * shift)\n    x /= (10 * shift)\n    x %= (10 * shift)\n    x /= (10 * shift)\n\
    \    x %= (10 * shift)\nfunc TestCircular_Shift(t *testing.T) {\n  candidate :=\
    \ circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3zbi9126_test.go:69:6: expected ''('', found TestCircular_Shift

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074946
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  result := \"\"\n    shift %= len(strconv.Itoa(x))\n    for i := 0; i < shift;\
    \ i++ {\n        result += strconv.Itoa(x%10)\n        x /= 10\n    }\n    for\
    \ i := shift; i < len(strconv.Itoa(x)); i++ {\n        result += strconv.Itoa(x%10)\n\
    \        x /= 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpaemscypu_test.go:13:18: undefined: strconv

    /tmp/tmpaemscypu_test.go:15:19: undefined: strconv

    /tmp/tmpaemscypu_test.go:18:29: undefined: strconv

    /tmp/tmpaemscypu_test.go:19:19: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  result := \"\"\n    shift %= len(digits)\n    for i := 0; i < shift; i++ {\n\
    \        result = digits[len(digits)-1-i] + result\n    }\n    for i := 0; i <\
    \ len(digits)-shift; i++ {\n        result = digits[i] + result\n    }\n    return\
    \ result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpautncib6_test.go:13:18: undefined: digits

    /tmp/tmpautncib6_test.go:15:18: undefined: digits

    /tmp/tmpautncib6_test.go:17:25: undefined: digits

    /tmp/tmpautncib6_test.go:18:18: undefined: digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  result := \"\"\n    for shift > 0 {\n        if shift >= len(x) {\n       \
    \     result += string(x[len(x)-shift:]) + string(x[:len(x)-shift])\n        \
    \    break\n        }\n        result += string(x[shift:])\n        shift -= len(x[shift:])\n\
    \    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4sgu7xzv_test.go:14:25: invalid argument: x (variable of type int) for
    len

    /tmp/tmp4sgu7xzv_test.go:15:30: invalid operation: cannot slice x (variable of
    type int)

    /tmp/tmp4sgu7xzv_test.go:18:26: invalid operation: cannot slice x (variable of
    type int)

    /tmp/tmp4sgu7xzv_test.go:19:22: invalid operation: cannot slice x (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  result := \"\"\n    shift %= len(strconv.Itoa(x))\n    for i := 0; i < shift;\
    \ i++ {\n        result += strconv.Itoa(x%10)\n        x /= 10\n    }\n    result\
    \ += strconv.Itoa(x)\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp91tp42fv_test.go:13:18: undefined: strconv

    /tmp/tmp91tp42fv_test.go:15:19: undefined: strconv

    /tmp/tmp91tp42fv_test.go:18:15: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  result := \"\"\n    shift %= len(digits)\n    for i := 0; i < shift; i++ {\n\
    \        result = digits[len(digits)-1-i] + result\n    }\n    for i := 0; i <\
    \ len(digits)-shift; i++ {\n        result = digits[i] + result\n    }\n    return\
    \ result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpautncib6_test.go:13:18: undefined: digits

    /tmp/tmpautncib6_test.go:15:18: undefined: digits

    /tmp/tmpautncib6_test.go:17:25: undefined: digits

    /tmp/tmpautncib6_test.go:18:18: undefined: digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  s := \"\"\n    for i := 0; i < shift; i++ {\n        s += fmt.Sprintf(\"%d\"\
    , x%10)\n        x = x/10\n    }\n    for i := 0; i < shift; i++ {\n        s\
    \ += fmt.Sprintf(\"%d\", x%10)\n        x = x/10\n    }\n    return s\n}\n\nfunc\
    \ TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmp7pb4d9h2_test.go:41: expected '001', got '0010'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmp7pb4d9h2_test.go:41:\
    \ expected '12', got '2100'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n\
    \        tmp7pb4d9h2_test.go:41: expected '79', got '7900000000000000'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmp7pb4d9h2_test.go:41:\
    \ expected '11', got '1100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074948
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  digits := []int{}\n    for i := 0; i < shift; i++ {\n        digits = append(digits,\
    \ x%10)\n        x = x/10\n    }\n    digits = append(digits, x%10)\n    return\
    \ fmt.Sprintf(\"%d\", digits)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n\
    \  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmp20tv4n5o_test.go:38: expected '001', got '[0 0 1]'\n   \
    \ --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmp20tv4n5o_test.go:38:\
    \ expected '12', got '[2 1 0]'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n\
    \        tmp20tv4n5o_test.go:38: expected '79', got '[7 9 0 0 0 0 0 0 0]'\n  \
    \  --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmp20tv4n5o_test.go:38:\
    \ expected '21', got '[2 1]'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n\
    \        tmp20tv4n5o_test.go:38: expected '11', got '[1 1 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074948
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  digits := make([]int, len(strconv.Itoa(x)))\n    shift %= len(digits)\n   \
    \ for i := 0; i < shift; i++ {\n        digits[i] = digits[i+1]\n    }\n    for\
    \ i := 0; i < len(digits)-shift; i++ {\n        digits[i] = digits[i+shift]\n\
    \    }\n    return fmt.Sprintf(\"%s\", digits)\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr4lppwpy_test.go:12:31: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  s := \"\"\n    for i := 0; i < shift; i++ {\n        s = s + string(x%10)\n\
    \        x = x/10\n    }\n    if shift < len(x) {\n        s = s + string(x%10)\n\
    \    }\n    return s\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwxi0tynq_test.go:17:20: invalid argument: x (variable of type int) for
    len

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074948
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  digits := []int{x}\n    for i := 0; i < shift; i++ {\n        digits = append(digits,\
    \ digits[len(digits)-1])\n    }\n    return fmt.Sprintf(\"%v\", digits)\n}\n\n\
    func TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmp_heu84op_test.go:36: expected '001', got '[100 100 100]'\n\
    \    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmp_heu84op_test.go:36:\
    \ expected '12', got '[12 12 12]'\n    --- FAIL: TestCircular_Shift/test_num__2\
    \ (0.00s)\n        tmp_heu84op_test.go:36: expected '79', got '[97 97 97 97 97\
    \ 97 97 97 97]'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n      \
    \  tmp_heu84op_test.go:36: expected '21', got '[12 12]'\n    --- FAIL: TestCircular_Shift/test_num__4\
    \ (0.00s)\n        tmp_heu84op_test.go:36: expected '11', got '[11 11 11 11 11\
    \ 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11\
    \ 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11\
    \ 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11\
    \ 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074948
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  result := \"\"\n    shift %= len(digits)\n    for i := 0; i < shift; i++ {\n\
    \        result = digits[len(digits)-1-i] + result\n    }\n    for i := 0; i <\
    \ len(digits)-shift; i++ {\n        result = digits[i] + result\n    }\n    return\
    \ result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpautncib6_test.go:13:18: undefined: digits

    /tmp/tmpautncib6_test.go:15:18: undefined: digits

    /tmp/tmpautncib6_test.go:17:25: undefined: digits

    /tmp/tmpautncib6_test.go:18:18: undefined: digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift\
    \ = len(strconv.Itoa(x))\n    }\n    result := \"\"\n    for i := 0; i < shift;\
    \ i++ {\n        result += strconv.Itoa(x%10)\n        x /= 10\n    }\n    result\
    \ += strconv.Itoa(x)\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_ogx48b3_test.go:14:20: undefined: strconv

    /tmp/tmp_ogx48b3_test.go:15:21: undefined: strconv

    /tmp/tmp_ogx48b3_test.go:19:19: undefined: strconv

    /tmp/tmp_ogx48b3_test.go:22:15: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074948
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  digits := make([]int, len(strconv.Itoa(x)))\n    shift %= len(digits)\n   \
    \ for i := 0; i < shift; i++ {\n        digits[i] = digits[i+1]\n    }\n    for\
    \ i := 0; i < len(digits)-1; i++ {\n        digits[i+1] = digits[i]\n    }\n \
    \   return fmt.Sprintf(\"%s\", digits)\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpczhs78xe_test.go:12:31: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074949
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  s := \"\"\n    for shift > 0 {\n        if shift > len(x) {\n            shift\
    \ = len(x) - shift\n        }\n        s += string(x%10)\n        x = x/10\n \
    \       shift -= 1\n    }\n    return s\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpt138nigy_test.go:14:24: invalid argument: x (variable of type int) for
    len

    /tmp/tmpt138nigy_test.go:15:25: invalid argument: x (variable of type int) for
    len

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  digits := []int{x}\n    for shift > 0 {\n        shift -= len(digits)\n   \
    \     digits = append(digits, 0)\n    }\n    for i := len(digits) - 1; i >= 0;\
    \ i-- {\n        digits[i] = digits[i]+digits[i+1]\n    }\n    return fmt.Sprintf(\"\
    %d\", digits[len(digits)-1])\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n \
    \ candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\npanic: runtime error: index out of\
    \ range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range\
    \ [3] with length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.circular_shift(0xc00007e728?, 0x4b3114?)\n\
    \t/tmp/tmp7a9025oe_test.go:18 +0x118\ncommand-line-arguments_test.TestCircular_Shift(0x0?)\n\
    \t/tmp/tmp7a9025oe_test.go:30 +0x4b\ntesting.tRunner(0xc0000da340, 0x527f50)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074950
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  digits := []int{}\n    for i := 0; i < shift; i++ {\n        digits = append(digits,\
    \ x%10)\n        x /= 10\n    }\n    for i := 0; i < shift; i++ {\n        digits\
    \ = append(digits, x%10)\n        x /= 10\n    }\n    return fmt.Sprintf(\"%v\"\
    , digits)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmp0wkcbhxq_test.go:41: expected '001', got '[0 0 1 0]'\n \
    \   --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmp0wkcbhxq_test.go:41:\
    \ expected '12', got '[2 1 0 0]'\n    --- FAIL: TestCircular_Shift/test_num__2\
    \ (0.00s)\n        tmp0wkcbhxq_test.go:41: expected '79', got '[7 9 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0]'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n\
    \        tmp0wkcbhxq_test.go:41: expected '21', got '[2 1]'\n    --- FAIL: TestCircular_Shift/test_num__4\
    \ (0.00s)\n        tmp0wkcbhxq_test.go:41: expected '11', got '[1 1 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074950
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  digits := []int{x}\n    for i := 0; i < shift; i++ {\n        digits = append(digits,\
    \ digits[len(digits)-1])\n    }\n    return fmt.Sprintf(\"%v\", digits)\n}\n\n\
    func TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmp_heu84op_test.go:36: expected '001', got '[100 100 100]'\n\
    \    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmp_heu84op_test.go:36:\
    \ expected '12', got '[12 12 12]'\n    --- FAIL: TestCircular_Shift/test_num__2\
    \ (0.00s)\n        tmp_heu84op_test.go:36: expected '79', got '[97 97 97 97 97\
    \ 97 97 97 97]'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n      \
    \  tmp_heu84op_test.go:36: expected '21', got '[12 12]'\n    --- FAIL: TestCircular_Shift/test_num__4\
    \ (0.00s)\n        tmp_heu84op_test.go:36: expected '11', got '[11 11 11 11 11\
    \ 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11\
    \ 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11\
    \ 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11\
    \ 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074948
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  digits := []int{x}\n    for i := 0; i < shift; i++ {\n        digits = append(digits,\
    \ digits[len(digits)-1])\n    }\n    return fmt.Sprintf(\"%d\", digits[len(digits)-1])\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpym7i4moi_test.go:36: expected '001', got '100'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmpym7i4moi_test.go:36:\
    \ expected '79', got '97'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n\
    \        tmpym7i4moi_test.go:36: expected '21', got '12'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074948
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  digits := []int{}\n    for i := 0; i < shift; i++ {\n        digits = append(digits,\
    \ x%10)\n        x = x/10\n    }\n    digits = append(digits, x%10)\n    return\
    \ fmt.Sprintf(\"%d\", digits)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n\
    \  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmp20tv4n5o_test.go:38: expected '001', got '[0 0 1]'\n   \
    \ --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmp20tv4n5o_test.go:38:\
    \ expected '12', got '[2 1 0]'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n\
    \        tmp20tv4n5o_test.go:38: expected '79', got '[7 9 0 0 0 0 0 0 0]'\n  \
    \  --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmp20tv4n5o_test.go:38:\
    \ expected '21', got '[2 1]'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n\
    \        tmp20tv4n5o_test.go:38: expected '11', got '[1 1 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074948
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  digits := make([]int, shift)\n    for i := 0; i < shift; i++ {\n        digits[i]\
    \ = x%10\n        x /= 10\n    }\n    for i := 0; i < shift; i++ {\n        digits[i]\
    \ = x%10\n        x /= 10\n    }\n    for i := 0; i < shift; i++ {\n        digits[i]\
    \ = x%10\n        x /= 10\n    }\n    return fmt.Sprintf(\"%d\", digits)\n}\n\n\
    func TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmp9iexvbrl_test.go:45: expected '001', got '[0 0]'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmp9iexvbrl_test.go:45:\
    \ expected '12', got '[0 0]'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n\
    \        tmp9iexvbrl_test.go:45: expected '79', got '[0 0 0 0 0 0 0 0]'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmp9iexvbrl_test.go:45:\
    \ expected '21', got '[0]'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n\
    \        tmp9iexvbrl_test.go:45: expected '11', got '[0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074950
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  if shift > len(x) {\n        return fmt.Sprintf(\"%v\", x)\n    }\n    result\
    \ := \"\"\n    for i := 0; i < shift; i++ {\n        result += string(x%10)\n\
    \        x /= 10\n    }\n    for i := 0; i < shift; i++ {\n        result += \"\
    0\" + string(x%10)\n        x /= 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7x7q1hxw_test.go:12:20: invalid argument: x (variable of type int) for
    len

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074949
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  if shift > len(x) {\n        shift = len(x) - shift\n    }\n    result := \"\
    \"\n    for i := 0; i < shift; i++ {\n        result += string(x%10)\n       \
    \ x /= 10\n    }\n    for i := shift; i < len(x); i++ {\n        result += string(x%10)\n\
    \        x /= 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkyzb5xee_test.go:12:20: invalid argument: x (variable of type int) for
    len

    /tmp/tmpkyzb5xee_test.go:13:21: invalid argument: x (variable of type int) for
    len

    /tmp/tmpkyzb5xee_test.go:20:29: invalid argument: x (variable of type int) for
    len

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074949
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  s := \"\"\n    for i := 0; i < shift; i++ {\n        s = s + x%10\n       \
    \ x = x/10\n    }\n    for i := 0; i < shift; i++ {\n        x = x*10 + x%10\n\
    \    }\n    return s\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphgjgzd1w_test.go:14:13: invalid operation: s + x % 10 (mismatched types
    string and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074949
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  s := \"\"\n    for i := 0; i < shift; i++ {\n        if i == shift {\n    \
    \        s = fmt.Sprintf(\"%d\", x%10)\n        } else {\n            s = fmt.Sprintf(\"\
    %d%d\", x%10, s)\n        }\n        x = x/10\n    }\n    return s\n}\n\nfunc\
    \ TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmp1a84rv5q_test.go:17:17: fmt.Sprintf format %d has arg s of wrong type
    string

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074950
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  digits := []int{x}\n    for i := 0; i < shift; i++ {\n        digits = append(digits,\
    \ digits[len(digits)-1])\n    }\n    return fmt.Sprintf(\"%v\", digits)\n}\n\n\
    func TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmp_heu84op_test.go:36: expected '001', got '[100 100 100]'\n\
    \    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmp_heu84op_test.go:36:\
    \ expected '12', got '[12 12 12]'\n    --- FAIL: TestCircular_Shift/test_num__2\
    \ (0.00s)\n        tmp_heu84op_test.go:36: expected '79', got '[97 97 97 97 97\
    \ 97 97 97 97]'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n      \
    \  tmp_heu84op_test.go:36: expected '21', got '[12 12]'\n    --- FAIL: TestCircular_Shift/test_num__4\
    \ (0.00s)\n        tmp_heu84op_test.go:36: expected '11', got '[11 11 11 11 11\
    \ 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11\
    \ 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11\
    \ 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11\
    \ 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074948
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  if shift > len(x) {\n        return fmt.Sprintf(\"%v\", x)\n    }\n    result\
    \ := \"\"\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%v%v\"\
    , result, x%10)\n        x = x/10\n    }\n    return fmt.Sprintf(\"%v%v\", result,\
    \ x%10)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7thntbnp_test.go:12:20: invalid argument: x (variable of type int) for
    len

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  s := \"\"\n    for i := 0; i < shift; i++ {\n        s += fmt.Sprintf(\"%d\"\
    , x%10)\n        x /= 10\n    }\n    for i := 0; i < shift; i++ {\n        s +=\
    \ fmt.Sprintf(\"%d\", x%10)\n        x /= 10\n    }\n    return s\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmppj194qsk_test.go:41: expected '001', got '0010'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmppj194qsk_test.go:41:\
    \ expected '12', got '2100'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n\
    \        tmppj194qsk_test.go:41: expected '79', got '7900000000000000'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmppj194qsk_test.go:41:\
    \ expected '11', got '1100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074950
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  digits := make([]int, shift)\n    for i := 0; i < shift; i++ {\n        digits[i]\
    \ = x%10\n        x /= 10\n    }\n    for i := 0; i < shift; i++ {\n        digits[i]\
    \ = x%10\n        x /= 10\n    }\n    for i := 0; i < shift; i++ {\n        fmt.Printf(\"\
    digits[%d] = %d\\n\", i, digits[i])\n    }\n    return fmt.Sprintf(\"%d\", digits[shift-1])\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "digits[0] = 1\ndigits[1] = 0\ndigits[0] = 0\ndigits[1] = 0\ndigits[0] =\
    \ 0\ndigits[1] = 0\ndigits[2] = 0\ndigits[3] = 0\ndigits[4] = 0\ndigits[5] = 0\n\
    digits[6] = 0\ndigits[7] = 0\ndigits[0] = 1\ndigits[0] = 0\ndigits[1] = 0\ndigits[2]\
    \ = 0\ndigits[3] = 0\ndigits[4] = 0\ndigits[5] = 0\ndigits[6] = 0\ndigits[7] =\
    \ 0\ndigits[8] = 0\ndigits[9] = 0\ndigits[10] = 0\ndigits[11] = 0\ndigits[12]\
    \ = 0\ndigits[13] = 0\ndigits[14] = 0\ndigits[15] = 0\ndigits[16] = 0\ndigits[17]\
    \ = 0\ndigits[18] = 0\ndigits[19] = 0\ndigits[20] = 0\ndigits[21] = 0\ndigits[22]\
    \ = 0\ndigits[23] = 0\ndigits[24] = 0\ndigits[25] = 0\ndigits[26] = 0\ndigits[27]\
    \ = 0\ndigits[28] = 0\ndigits[29] = 0\ndigits[30] = 0\ndigits[31] = 0\ndigits[32]\
    \ = 0\ndigits[33] = 0\ndigits[34] = 0\ndigits[35] = 0\ndigits[36] = 0\ndigits[37]\
    \ = 0\ndigits[38] = 0\ndigits[39] = 0\ndigits[40] = 0\ndigits[41] = 0\ndigits[42]\
    \ = 0\ndigits[43] = 0\ndigits[44] = 0\ndigits[45] = 0\ndigits[46] = 0\ndigits[47]\
    \ = 0\ndigits[48] = 0\ndigits[49] = 0\ndigits[50] = 0\ndigits[51] = 0\ndigits[52]\
    \ = 0\ndigits[53] = 0\ndigits[54] = 0\ndigits[55] = 0\ndigits[56] = 0\ndigits[57]\
    \ = 0\ndigits[58] = 0\ndigits[59] = 0\ndigits[60] = 0\ndigits[61] = 0\ndigits[62]\
    \ = 0\ndigits[63] = 0\ndigits[64] = 0\ndigits[65] = 0\ndigits[66] = 0\ndigits[67]\
    \ = 0\ndigits[68] = 0\ndigits[69] = 0\ndigits[70] = 0\ndigits[71] = 0\ndigits[72]\
    \ = 0\ndigits[73] = 0\ndigits[74] = 0\ndigits[75] = 0\ndigits[76] = 0\ndigits[77]\
    \ = 0\ndigits[78] = 0\ndigits[79] = 0\ndigits[80] = 0\ndigits[81] = 0\ndigits[82]\
    \ = 0\ndigits[83] = 0\ndigits[84] = 0\ndigits[85] = 0\ndigits[86] = 0\ndigits[87]\
    \ = 0\ndigits[88] = 0\ndigits[89] = 0\ndigits[90] = 0\ndigits[91] = 0\ndigits[92]\
    \ = 0\ndigits[93] = 0\ndigits[94] = 0\ndigits[95] = 0\ndigits[96] = 0\ndigits[97]\
    \ = 0\ndigits[98] = 0\ndigits[99] = 0\ndigits[100] = 0\n--- FAIL: TestCircular_Shift\
    \ (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmpla36z6a5_test.go:44:\
    \ expected '001', got '0'\n    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n\
    \        tmpla36z6a5_test.go:44: expected '12', got '0'\n    --- FAIL: TestCircular_Shift/test_num__2\
    \ (0.00s)\n        tmpla36z6a5_test.go:44: expected '79', got '0"
  timestamp: 1660074950
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  digits := []int{x}\n    for i := 0; i < shift; i++ {\n        digits = append(digits,\
    \ digits[len(digits)-1])\n    }\n    return fmt.Sprintf(\"%v\", digits)\n}\n\n\
    func TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmp_heu84op_test.go:36: expected '001', got '[100 100 100]'\n\
    \    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmp_heu84op_test.go:36:\
    \ expected '12', got '[12 12 12]'\n    --- FAIL: TestCircular_Shift/test_num__2\
    \ (0.00s)\n        tmp_heu84op_test.go:36: expected '79', got '[97 97 97 97 97\
    \ 97 97 97 97]'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n      \
    \  tmp_heu84op_test.go:36: expected '21', got '[12 12]'\n    --- FAIL: TestCircular_Shift/test_num__4\
    \ (0.00s)\n        tmp_heu84op_test.go:36: expected '11', got '[11 11 11 11 11\
    \ 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11\
    \ 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11\
    \ 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11\
    \ 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074948
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  s := \"\"\n    for shift > 0 {\n        if shift > len(x) {\n            shift\
    \ -= len(x)\n            s += x\n        } else {\n            s += x[:shift]\n\
    \            x >>= shift\n        }\n    }\n    return s\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphi3o5wmt_test.go:14:24: invalid argument: x (variable of type int) for
    len

    /tmp/tmphi3o5wmt_test.go:15:26: invalid argument: x (variable of type int) for
    len

    /tmp/tmphi3o5wmt_test.go:16:13: invalid operation: s += x (mismatched types string
    and int)

    /tmp/tmphi3o5wmt_test.go:18:18: invalid operation: cannot slice x (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074950
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  digits := []int{}\n    shift %= len(digits)\n    for i := 0; i < shift; i++\
    \ {\n        digits = append(digits, 0)\n    }\n    for i := 0; i < len(digits);\
    \ i++ {\n        digits[i] = x%10\n        x = x/10\n    }\n    for i := 0; i\
    \ < shift; i++ {\n        digits = append(digits, 0)\n    }\n    return fmt.Sprintf(\"\
    %d\", digits[len(digits)-shift:]) + string(digits[:len(digits)-shift])\n}\n\n\
    func TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5rd4io8e_test.go:24:73: cannot convert digits[:len(digits) - shift] (value
    of type []int) to type string

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074950
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  x %= 10\n    shift %= 10\n    if shift > len(x) {\n        shift = len(x)\n\
    \    }\n    result := \"\"\n    for i := 0; i < shift; i++ {\n        result +=\
    \ string(x%10)\n        x /= 10\n    }\n    for i := 0; i < shift; i++ {\n   \
    \     result += string(x%10)\n        x /= 10\n    }\n    return result\n}\n\n\
    func TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgwwwx4g9_test.go:14:20: invalid argument: x (variable of type int) for
    len

    /tmp/tmpgwwwx4g9_test.go:15:21: invalid argument: x (variable of type int) for
    len

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074950
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  digits := []int{x}\n    for i := 0; i < shift; i++ {\n        digits = append(digits,\
    \ digits[len(digits)-1])\n    }\n    return fmt.Sprintf(\"%d\", digits[len(digits)-1])\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpym7i4moi_test.go:36: expected '001', got '100'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmpym7i4moi_test.go:36:\
    \ expected '79', got '97'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n\
    \        tmpym7i4moi_test.go:36: expected '21', got '12'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074948
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  s := \"\"\n    for i := 0; i < shift; i++ {\n        s = s + string(x)\n  \
    \      x = x >> 1\n    }\n    return s\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmpkeyhwz72_test.go:14:17: conversion from int to string yields a string
    of one rune, not a string of digits (did you mean fmt.Sprint(x)?)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074950
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n \
    \   x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n\
    \    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n\
    \    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n\
    \    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n\
    \    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n\
    \    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n\
    \    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n\
    \    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n\
    \    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n\
    \    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n\
    \    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n\
    \    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n\
    \    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n\
    \    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n\
    \    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n\
    \    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n\
    \    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n\
    \    x \nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpxsugwabd_test.go:103:6: expected ''('', found TestCircular_Shift

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074949
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  s := \"\"\n    for shift > 0 {\n        if shift > len(x) {\n            shift\
    \ = len(x)\n        }\n        s += string(x%10)\n        x /= 10\n        shift--\n\
    \    }\n    return s\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl65r1q7d_test.go:14:24: invalid argument: x (variable of type int) for
    len

    /tmp/tmpl65r1q7d_test.go:15:25: invalid argument: x (variable of type int) for
    len

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074950
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  s := \"\"\n    for shift > 0 {\n        s += fmt.Sprintf(\"%d\", x%10)\n  \
    \      x /= 10\n        shift--\n    }\n    for shift > 0 {\n        x /= 10\n\
    \        shift--\n    }\n    return s\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpq6l_38_x_test.go:42: expected '001', got '00'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__1 (0.00s)\n        tmpq6l_38_x_test.go:42: expected\
    \ '12', got '21'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n     \
    \   tmpq6l_38_x_test.go:42: expected '79', got '79000000'\n    --- FAIL: TestCircular_Shift/test_num__3\
    \ (0.00s)\n        tmpq6l_38_x_test.go:42: expected '21', got '2'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__4 (0.00s)\n        tmpq6l_38_x_test.go:42: expected\
    \ '11', got '11000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074950
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    return fmt.Sprintf(\"\
    %d\", x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\npanic: runtime error: integer divide\
    \ by zero [recovered]\n\tpanic: runtime error: integer divide by zero\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x5027e0, 0x5f19a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5027e0, 0x5f19a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.circular_shift(...)\n\t/tmp/tmpz47jxyhk_test.go:12\n\
    command-line-arguments_test.TestCircular_Shift(0x0?)\n\t/tmp/tmpz47jxyhk_test.go:29\
    \ +0x11a\ntesting.tRunner(0xc0000cc680, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074948
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  digits := []int{}\n    for i := 0; i < shift; i++ {\n        digits = append(digits,\
    \ x%10)\n        x = x/10\n    }\n    digits = append(digits, x%10)\n    return\
    \ fmt.Sprintf(\"%d\", digits)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n\
    \  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmp20tv4n5o_test.go:38: expected '001', got '[0 0 1]'\n   \
    \ --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmp20tv4n5o_test.go:38:\
    \ expected '12', got '[2 1 0]'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n\
    \        tmp20tv4n5o_test.go:38: expected '79', got '[7 9 0 0 0 0 0 0 0]'\n  \
    \  --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmp20tv4n5o_test.go:38:\
    \ expected '21', got '[2 1]'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n\
    \        tmp20tv4n5o_test.go:38: expected '11', got '[1 1 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074948
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift\
    \ = len(strconv.Itoa(x))\n    }\n    x <<= shift\n    x >>= shift\n    x %= 10\n\
    \    x += 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n\
    \    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n\
    \    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n\
    \    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n\
    \    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n\
    \    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n\
    \    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n\
    \    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n\
    \    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n\
    \    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n\
    \    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n\
    \    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n\
    \    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n\
    \    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n\
    \    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n\
    \    x /= 10\n    x %= 10\n    \nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp52ezs89g_test.go:113:6: expected ''('', found TestCircular_Shift

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  s := \"\"\n    for i := 0; i < shift; i++ {\n        s = s + fmt.Sprintf(\"\
    %d\", x%10)\n        x = x/10\n    }\n    if shift < len(s) {\n        s = s +\
    \ fmt.Sprintf(\"%d\", x%10)\n    }\n    return s\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmp3vwprj7j_test.go:40: expected '001', got '00'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__1 (0.00s)\n        tmp3vwprj7j_test.go:40: expected\
    \ '12', got '21'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n     \
    \   tmp3vwprj7j_test.go:40: expected '79', got '79000000'\n    --- FAIL: TestCircular_Shift/test_num__3\
    \ (0.00s)\n        tmp3vwprj7j_test.go:40: expected '21', got '2'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__4 (0.00s)\n        tmp3vwprj7j_test.go:40: expected\
    \ '11', got '11000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074950
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  digits := make([]int, len(strconv.Itoa(x)))\n    for i := 0; i < len(digits);\
    \ i++ {\n        digits[i] = x%10\n        x /= 10\n    }\n    for i := 0; i <\
    \ shift; i++ {\n        digits[i], digits[len(digits)-i-1] = digits[len(digits)-i-1],\
    \ digits[i]\n    }\n    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp68po8k_t_test.go:12:31: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074950
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  result := \"\"\n    shift %= len(strconv.Itoa(x))\n    if shift > 0 {\n   \
    \     for i := len(strconv.Itoa(x)); i > shift; i-- {\n            result = strconv.Itoa(x%10)\
    \ + result\n            x /= 10\n        }\n    }\n    for i := len(strconv.Itoa(x));\
    \ i < shift; i++ {\n        result = strconv.Itoa(x%10) + result\n        x /=\
    \ 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n\
    \  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgzrr0gps_test.go:13:18: undefined: strconv

    /tmp/tmpgzrr0gps_test.go:15:22: undefined: strconv

    /tmp/tmpgzrr0gps_test.go:16:22: undefined: strconv

    /tmp/tmpgzrr0gps_test.go:20:18: undefined: strconv

    /tmp/tmpgzrr0gps_test.go:21:18: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074950
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  digits := []int{}\n    for i := 0; i < shift; i++ {\n        digits = append(digits,\
    \ x%10)\n        x = x/10\n    }\n    for i := 0; i < shift; i++ {\n        digits\
    \ = append(digits, x%10)\n        x = x/10\n    }\n    return fmt.Sprintf(\"%d\"\
    , digits)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpfsz2t1cj_test.go:41: expected '001', got '[0 0 1 0]'\n \
    \   --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmpfsz2t1cj_test.go:41:\
    \ expected '12', got '[2 1 0 0]'\n    --- FAIL: TestCircular_Shift/test_num__2\
    \ (0.00s)\n        tmpfsz2t1cj_test.go:41: expected '79', got '[7 9 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0]'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n\
    \        tmpfsz2t1cj_test.go:41: expected '21', got '[2 1]'\n    --- FAIL: TestCircular_Shift/test_num__4\
    \ (0.00s)\n        tmpfsz2t1cj_test.go:41: expected '11', got '[1 1 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074948
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  digits := make([]int, len(strconv.Itoa(x)))\n    shift %= len(digits)\n   \
    \ for i := 0; i < shift; i++ {\n        digits[i+shift] = digits[i]\n    }\n \
    \   for i := 0; i < len(digits)-shift; i++ {\n        digits[i+shift] = digits[i+shift+len(digits)-shift]\n\
    \    }\n    return fmt.Sprintf(\"%s\", digits)\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpeqs4mh7h_test.go:12:31: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074951
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n\
    \    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n\
    \    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n\
    \    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n\
    \    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n\
    \    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n\
    \    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n\
    \    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n\
    \    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n\
    \    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n\
    \    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n\
    \    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n\
    \    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n\
    \    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n\
    \    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n\
    \    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n\
    \    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n\
    \    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n\
    \    x %= (1 << shift)\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3xifkts8_test.go:86:6: expected ''('', found TestCircular_Shift

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074950
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  x %= 10\n    shift %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n \
    \   x += 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n\
    \    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n\
    \    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n\
    \    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n\
    \    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n\
    \    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n\
    \    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n\
    \    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n\
    \    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n\
    \    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n\
    \    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n\
    \    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n\
    \    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n\
    \    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n\
    \    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n\
    \    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n\
    \    x %= 10\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmplm6z9wg3_test.go:115:6: expected ''('', found TestCircular_Shift

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074950
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  result := \"\"\n    shift %= len(strconv.Itoa(x))\n    for i := 0; i < shift;\
    \ i++ {\n        result = strconv.Itoa(x%10) + result\n        x /= 10\n    }\n\
    \    for i := shift; i < len(strconv.Itoa(x)); i++ {\n        result = strconv.Itoa(x%10)\
    \ + result\n        x /= 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpygb76kqj_test.go:13:18: undefined: strconv

    /tmp/tmpygb76kqj_test.go:15:18: undefined: strconv

    /tmp/tmpygb76kqj_test.go:18:29: undefined: strconv

    /tmp/tmpygb76kqj_test.go:19:18: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074951
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  digits := []int{}\n    for i := 0; i < shift; i++ {\n        digits = append(digits,\
    \ x%10)\n        x = x/10\n    }\n    for i := 0; i < shift; i++ {\n        digits\
    \ = append(digits, x%10)\n        x = x/10\n    }\n    return fmt.Sprintf(\"%v\"\
    , digits)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpftztvmrh_test.go:41: expected '001', got '[0 0 1 0]'\n \
    \   --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmpftztvmrh_test.go:41:\
    \ expected '12', got '[2 1 0 0]'\n    --- FAIL: TestCircular_Shift/test_num__2\
    \ (0.00s)\n        tmpftztvmrh_test.go:41: expected '79', got '[7 9 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0]'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n\
    \        tmpftztvmrh_test.go:41: expected '21', got '[2 1]'\n    --- FAIL: TestCircular_Shift/test_num__4\
    \ (0.00s)\n        tmpftztvmrh_test.go:41: expected '11', got '[1 1 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074951
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  digits := []int{}\n    for i := 0; i < shift; i++ {\n        digits = append(digits,\
    \ x%10)\n        x = x/10\n    }\n    for i := 0; i < shift; i++ {\n        digits\
    \ = append(digits, x%10)\n        x = x/10\n    }\n    return fmt.Sprintf(\"%v\"\
    , digits)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpftztvmrh_test.go:41: expected '001', got '[0 0 1 0]'\n \
    \   --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmpftztvmrh_test.go:41:\
    \ expected '12', got '[2 1 0 0]'\n    --- FAIL: TestCircular_Shift/test_num__2\
    \ (0.00s)\n        tmpftztvmrh_test.go:41: expected '79', got '[7 9 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0]'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n\
    \        tmpftztvmrh_test.go:41: expected '21', got '[2 1]'\n    --- FAIL: TestCircular_Shift/test_num__4\
    \ (0.00s)\n        tmpftztvmrh_test.go:41: expected '11', got '[1 1 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074951
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  x %= (10 * shift)\n    x /= (10 * shift)\n    x %= (10 * shift)\n    x /= (10\
    \ * shift)\n    x %= (10 * shift)\n    x /= (10 * shift)\n    x %= (10 * shift)\n\
    \    x /= (10 * shift)\n    x %= (10 * shift)\n    x /= (10 * shift)\n    x %=\
    \ (10 * shift)\n    x /= (10 * shift)\n    x %= (10 * shift)\n    x /= (10 * shift)\n\
    \    x %= (10 * shift)\n    x /= (10 * shift)\n    x %= (10 * shift)\n    x /=\
    \ (10 * shift)\n    x %= (10 * shift)\n    x /= (10 * shift)\n    x %= (10 * shift)\n\
    \    x /= (10 * shift)\n    x %= (10 * shift)\n    x /= (10 * shift)\n    x %=\
    \ (10 * shift)\n    x /= (10 * shift)\n    x %= (10 * shift)\n    x /= (10 * shift)\n\
    \    x %= (10 * shift)\n    x /= (10 * shift)\n    x %= (10 * shift)\n    x /=\
    \ (10 * shift)\n    x %= (10 * shift)\n    x /= (10 * shift)\n    x %= (10 * shift)\n\
    \    x /= (10 * shift)\n    x %= (10 * shift)\n    x /= (10 * shift)\n    x %=\
    \ (10 * shift)\n    x /= (10 * shift)\n    x %= (10 * shift)\n    x /= (10 * shift)\n\
    \    x %= (10 * shift)\n    x /= (10 * shift)\n    x %= (10 * shift)\n    x /=\
    \ (10 * shift)\n    x %= (10 * shift)\n    x /= (10 * shift)\n    x %= (10 * shift)\n\
    \    x /= (10 * shift)\n    x %= (10 * shift)\n    x /= (10 * shift)\n    x %=\
    \ (10 * shift)\n    x /= (10 * shift)\n    x %= (10 * shift)\n    x /= (10 * shift)\n\
    \    x %= (10 * shift)\nfunc TestCircular_Shift(t *testing.T) {\n  candidate :=\
    \ circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3zbi9126_test.go:69:6: expected ''('', found TestCircular_Shift

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074946
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  s := \"\"\n    for i := 0; i < shift; i++ {\n        s = s + string(x)\n  \
    \      x = x >> 1\n    }\n    return s\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmpkeyhwz72_test.go:14:17: conversion from int to string yields a string
    of one rune, not a string of digits (did you mean fmt.Sprint(x)?)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074950
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  digits := make([]int, shift)\n    for i := 0; i < shift; i++ {\n        digits[i]\
    \ = x%10\n        x /= 10\n    }\n    for i := 0; i < shift; i++ {\n        digits[i]\
    \ = x%10\n        x /= 10\n    }\n    return fmt.Sprintf(\"%d\", digits)\n}\n\n\
    func TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmp990klgbl_test.go:41: expected '001', got '[1 0]'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmp990klgbl_test.go:41:\
    \ expected '12', got '[0 0]'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n\
    \        tmp990klgbl_test.go:41: expected '79', got '[0 0 0 0 0 0 0 0]'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmp990klgbl_test.go:41:\
    \ expected '21', got '[1]'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n\
    \        tmp990klgbl_test.go:41: expected '11', got '[0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074951
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  digits := []int{}\n    for i := 0; i < shift; i++ {\n        digits = append(digits,\
    \ x%10)\n        x /= 10\n    }\n    for i := 0; i < shift; i++ {\n        digits\
    \ = append(digits, x%10)\n        x /= 10\n    }\n    return fmt.Sprintf(\"%d\"\
    , digits)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpc93myeg1_test.go:41: expected '001', got '[0 0 1 0]'\n \
    \   --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmpc93myeg1_test.go:41:\
    \ expected '12', got '[2 1 0 0]'\n    --- FAIL: TestCircular_Shift/test_num__2\
    \ (0.00s)\n        tmpc93myeg1_test.go:41: expected '79', got '[7 9 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0]'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n\
    \        tmpc93myeg1_test.go:41: expected '21', got '[2 1]'\n    --- FAIL: TestCircular_Shift/test_num__4\
    \ (0.00s)\n        tmpc93myeg1_test.go:41: expected '11', got '[1 1 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074952
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  digits := []int{}\n    for i := 0; i < shift; i++ {\n        digits = append(digits,\
    \ x%10)\n        x = x/10\n    }\n    for i := 0; i < shift; i++ {\n        digits\
    \ = append(digits, x%10)\n        x = x/10\n    }\n    for i := 0; i < shift;\
    \ i++ {\n        digits = append(digits, x%10)\n        x = x/10\n    }\n    return\
    \ fmt.Sprintf(\"%d\", digits[shift:])\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpbbzqprgd_test.go:45: expected '001', got '[1 0 0 0]'\n \
    \   --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmpbbzqprgd_test.go:45:\
    \ expected '12', got '[0 0 0 0]'\n    --- FAIL: TestCircular_Shift/test_num__2\
    \ (0.00s)\n        tmpbbzqprgd_test.go:45: expected '79', got '[0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0]'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n\
    \        tmpbbzqprgd_test.go:45: expected '21', got '[1 0]'\n    --- FAIL: TestCircular_Shift/test_num__4\
    \ (0.00s)\n        tmpbbzqprgd_test.go:45: expected '11', got '[0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074951
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  s := \"\"\n    for i := 0; i < shift; i++ {\n        s = s + strconv.Itoa(x%10)\n\
    \        x = x/10\n    }\n    if x > 0 {\n        s = s + strconv.Itoa(x%10)\n\
    \    }\n    return s\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5jt1ssge_test.go:14:17: undefined: strconv

    /tmp/tmp5jt1ssge_test.go:18:17: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074952
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  digits := []int{}\n    i := 0\n    for ; i < shift; i++ {\n        digits =\
    \ append(digits, x%10)\n        x = x/10\n    }\n    for ; i < len(digits); i++\
    \ {\n        digits[i] = digits[len(digits)-i-1]\n    }\n    return fmt.Sprintf(\"\
    %d\", digits)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmp737q8fw3_test.go:41: expected '001', got '[0 0]'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmp737q8fw3_test.go:41:\
    \ expected '12', got '[2 1]'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n\
    \        tmp737q8fw3_test.go:41: expected '79', got '[7 9 0 0 0 0 0 0]'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmp737q8fw3_test.go:41:\
    \ expected '21', got '[2]'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n\
    \        tmp737q8fw3_test.go:41: expected '11', got '[1 1 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074952
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  result := \"\"\n    shift %= len(digits)\n    for i := 0; i < shift; i++ {\n\
    \        result = digits[i] + result\n    }\n    for i := 0; i < shift; i++ {\n\
    \        result = digits[len(digits)-i-1] + result\n    }\n    return fmt.Sprintf(\"\
    %d\", x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb9flo5ew_test.go:13:18: undefined: digits

    /tmp/tmpb9flo5ew_test.go:15:18: undefined: digits

    /tmp/tmpb9flo5ew_test.go:18:18: undefined: digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074952
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  digits := []int{x}\n    for i := 0; i < shift; i++ {\n        digits = append(digits,\
    \ digits[len(digits)-1])\n    }\n    return fmt.Sprintf(\"%d\", digits[len(digits)-1])\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpym7i4moi_test.go:36: expected '001', got '100'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmpym7i4moi_test.go:36:\
    \ expected '79', got '97'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n\
    \        tmpym7i4moi_test.go:36: expected '21', got '12'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074948
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  digits := []int{x}\n    for i := 0; i < shift; i++ {\n        digits = append(digits,\
    \ 0)\n    }\n    for i := 0; i < len(digits); i++ {\n        digits[i] = digits[i]+1\n\
    \    }\n    return fmt.Sprintf(\"%d\", digits[len(digits)-1])\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpy1jj1sjz_test.go:39: expected '001', got '1'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__1 (0.00s)\n        tmpy1jj1sjz_test.go:39: expected\
    \ '12', got '1'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n      \
    \  tmpy1jj1sjz_test.go:39: expected '79', got '1'\n    --- FAIL: TestCircular_Shift/test_num__3\
    \ (0.00s)\n        tmpy1jj1sjz_test.go:39: expected '21', got '1'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__4 (0.00s)\n        tmpy1jj1sjz_test.go:39: expected\
    \ '11', got '1'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074952
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n \
    \   x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n\
    \    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n\
    \    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n\
    \    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n\
    \    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n\
    \    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n\
    \    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n\
    \    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n\
    \    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n\
    \    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n\
    \    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n\
    \    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n\
    \    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n\
    \    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n\
    \    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n\
    \    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n\
    \    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n\
    \    x \nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpxsugwabd_test.go:103:6: expected ''('', found TestCircular_Shift

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074949
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  result := \"\"\n    for shift > 0 {\n        digit, shift := x%10, shift-1\n\
    \        result += string(digit)\n        x /= 10\n    }\n    if shift > 0 {\n\
    \        digit, shift := x%10, shift-1\n        result += string(digit)\n    }\n\
    \    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4hxof5s3_test.go:14:16: shift declared but not used

    /tmp/tmp4hxof5s3_test.go:19:16: shift declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074952
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  digits := make([]int, shift)\n    for i := 0; i < shift; i++ {\n        digits[i]\
    \ = x%10\n        x /= 10\n    }\n    for i := 0; i < shift; i++ {\n        digits[i]\
    \ = digits[i]+digits[i+1]\n    }\n    return fmt.Sprintf(\"%d\", digits[shift-1])\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\npanic: runtime error: index out of\
    \ range [2] with length 2 [recovered]\n\tpanic: runtime error: index out of range\
    \ [2] with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.circular_shift(0x64, 0x2)\n\t/tmp/tmpx5rmi759_test.go:18\
    \ +0x114\ncommand-line-arguments_test.TestCircular_Shift(0x0?)\n\t/tmp/tmpx5rmi759_test.go:30\
    \ +0x4b\ntesting.tRunner(0xc0000da1a0, 0x527f50)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074952
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift\
    \ = len(strconv.Itoa(x))\n    }\n    x <<= shift\n    x >>= shift\n    x %= 10\n\
    \    return strconv.Itoa(x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu7vi2x5h_test.go:14:20: undefined: strconv

    /tmp/tmpu7vi2x5h_test.go:15:21: undefined: strconv

    /tmp/tmpu7vi2x5h_test.go:20:12: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074952
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  x %= 10\n    shift %= 10\n    result := \"\"\n    for i := 0; i < shift; i++\
    \ {\n        result = fmt.Sprintf(\"%d%s\", x%10, result)\n        x = x/10\n\
    \    }\n    return fmt.Sprintf(\"%d%s\", x, result)\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpiux_nior_test.go:39: expected '001', got '000'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmpiux_nior_test.go:39:\
    \ expected '12', got '002'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n\
    \        tmpiux_nior_test.go:39: expected '79', got '000000007'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__3 (0.00s)\n        tmpiux_nior_test.go:39: expected\
    \ '21', got '02'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n     \
    \   tmpiux_nior_test.go:39: expected '11', got '01'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074952
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  result := \"\"\n    for shift > 0 {\n        digit, shift := x%10, shift-1\n\
    \        result += string(digit)\n        x = x/10\n    }\n    if shift > 0 {\n\
    \        digit, shift := x%10, shift-1\n        result += string(digit)\n    }\n\
    \    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpba1cmv_u_test.go:14:16: shift declared but not used

    /tmp/tmpba1cmv_u_test.go:19:16: shift declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074947
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  if shift > len(x) {\n        shift = len(x) - shift\n    }\n    x <<= shift\n\
    \    x >>= shift\n    x -= (x >> 1) & 0x55555555\n    x &= 0x33333333\n    x -=\
    \ (x >> 2) & 0x33333333\n    x &= 0x11111111\n    x -= (x >> 4) & 0x00FF00FF\n\
    \    x &= 0xFF00FF00\n    x -= (x >> 8) & 0x0000FFFF\n    x &= 0xFFFF0000\n  \
    \  x -= (x >> 16) & 0x00000000FFFFFFFF\n    x &= 0xFFFFFFFF\n    return fmt.Sprintf(\"\
    %x\", x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_mznku05_test.go:12:20: invalid argument: x (variable of type int) for
    len

    /tmp/tmp_mznku05_test.go:13:21: invalid argument: x (variable of type int) for
    len

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074952
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  digits := make([]int, len(strconv.Itoa(x)))\n    for i := 0; i < len(digits);\
    \ i++ {\n        digits[i] = x%10\n        x /= 10\n    }\n    for i := 0; i <\
    \ shift; i++ {\n        digits[len(digits)-i-1]++\n    }\n    return strconv.Itoa(digits)\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmperwserzt_test.go:12:31: undefined: strconv

    /tmp/tmperwserzt_test.go:20:12: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074952
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  digits := []int{x}\n    for i := 0; i < shift; i++ {\n        digits = append(digits,\
    \ digits[len(digits)-1])\n    }\n    return fmt.Sprintf(\"%d\", digits[len(digits)-1])\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpym7i4moi_test.go:36: expected '001', got '100'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmpym7i4moi_test.go:36:\
    \ expected '79', got '97'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n\
    \        tmpym7i4moi_test.go:36: expected '21', got '12'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074948
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  digits := []int{x}\n    for i := 0; i < shift; i++ {\n        digits = append(digits,\
    \ 0)\n    }\n    for i := 0; i < len(digits); i++ {\n        digits[i] = digits[i]+1\n\
    \    }\n    return fmt.Sprintf(\"%v\", digits)\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmp743t7jld_test.go:39: expected '001', got '[101 1 1]'\n \
    \   --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmp743t7jld_test.go:39:\
    \ expected '12', got '[13 1 1]'\n    --- FAIL: TestCircular_Shift/test_num__2\
    \ (0.00s)\n        tmp743t7jld_test.go:39: expected '79', got '[98 1 1 1 1 1 1\
    \ 1 1]'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmp743t7jld_test.go:39:\
    \ expected '21', got '[13 1]'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n\
    \        tmp743t7jld_test.go:39: expected '11', got '[12 1 1 1 1 1 1 1 1 1 1 1\
    \ 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\
    \ 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\
    \ 1 1 1 1 1 1 1 1 1 1 1 1 1 1]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074953
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  result := \"\"\n    shift %= len(strconv.Itoa(x))\n    for i := 0; i < shift;\
    \ i++ {\n        result += strconv.Itoa(x%10)\n        x /= 10\n    }\n    for\
    \ i := 0; i < shift; i++ {\n        result += strconv.Itoa(x%10)\n        x /=\
    \ 10\n    }\n    return result + strconv.Itoa(x)\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw008g41t_test.go:13:18: undefined: strconv

    /tmp/tmpw008g41t_test.go:15:19: undefined: strconv

    /tmp/tmpw008g41t_test.go:19:19: undefined: strconv

    /tmp/tmpw008g41t_test.go:22:21: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074952
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  result := \"\"\n    for shift > 0 {\n        if shift > len(x) {\n        \
    \    shift -= len(x)\n            result = x[len(x) - shift:] + result\n     \
    \   } else {\n            result = x[shift:] + result\n        }\n        shift\
    \ -= len(x)\n        x = x >> 1\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphyvrdyh1_test.go:14:24: invalid argument: x (variable of type int) for
    len

    /tmp/tmphyvrdyh1_test.go:15:26: invalid argument: x (variable of type int) for
    len

    /tmp/tmphyvrdyh1_test.go:16:22: invalid operation: cannot slice x (variable of
    type int)

    /tmp/tmphyvrdyh1_test.go:18:22: invalid operation: cannot slice x (variable of
    type int)

    /tmp/tmphyvrdyh1_test.go:20:22: invalid argument: x (variable of type int) for
    len

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074952
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  digits := []int{x}\n    for i := 0; i < shift; i++ {\n        digits = append(digits,\
    \ digits[len(digits)-1])\n    }\n    return fmt.Sprintf(\"%v\", digits)\n}\n\n\
    func TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmp_heu84op_test.go:36: expected '001', got '[100 100 100]'\n\
    \    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmp_heu84op_test.go:36:\
    \ expected '12', got '[12 12 12]'\n    --- FAIL: TestCircular_Shift/test_num__2\
    \ (0.00s)\n        tmp_heu84op_test.go:36: expected '79', got '[97 97 97 97 97\
    \ 97 97 97 97]'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n      \
    \  tmp_heu84op_test.go:36: expected '21', got '[12 12]'\n    --- FAIL: TestCircular_Shift/test_num__4\
    \ (0.00s)\n        tmp_heu84op_test.go:36: expected '11', got '[11 11 11 11 11\
    \ 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11\
    \ 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11\
    \ 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11\
    \ 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074948
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift\
    \ = len(strconv.Itoa(x))\n    }\n    digits := make([]int, len(strconv.Itoa(x)))\n\
    \    for i := 0; i < shift; i++ {\n        digits[i] = x%10\n        x /= 10\n\
    \    }\n    for i := 0; i < shift; i++ {\n        digits[i] = x%10\n        x\
    \ /= 10\n    }\n    return strconv.Itoa(digits)\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuwnxmfus_test.go:14:20: undefined: strconv

    /tmp/tmpuwnxmfus_test.go:15:21: undefined: strconv

    /tmp/tmpuwnxmfus_test.go:17:31: undefined: strconv

    /tmp/tmpuwnxmfus_test.go:26:12: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074952
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  digits := make([]int, len(strconv.Itoa(x)))\n    copy(digits, strconv.Itoa(x))\n\
    \    for i := len(digits) - 1; i >= shift; i-- {\n        digits[i] = digits[i-shift]\n\
    \    }\n    return fmt.Sprintf(\"%s\", digits)\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpda457m69_test.go:12:31: undefined: strconv

    /tmp/tmpda457m69_test.go:13:18: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074952
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  digits := []int{x}\n    for i := 0; i < shift; i++ {\n        digits = append(digits,\
    \ digits[len(digits)-1])\n    }\n    return fmt.Sprintf(\"%v\", digits)\n}\n\n\
    func TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmp_heu84op_test.go:36: expected '001', got '[100 100 100]'\n\
    \    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmp_heu84op_test.go:36:\
    \ expected '12', got '[12 12 12]'\n    --- FAIL: TestCircular_Shift/test_num__2\
    \ (0.00s)\n        tmp_heu84op_test.go:36: expected '79', got '[97 97 97 97 97\
    \ 97 97 97 97]'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n      \
    \  tmp_heu84op_test.go:36: expected '21', got '[12 12]'\n    --- FAIL: TestCircular_Shift/test_num__4\
    \ (0.00s)\n        tmp_heu84op_test.go:36: expected '11', got '[11 11 11 11 11\
    \ 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11\
    \ 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11\
    \ 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11\
    \ 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074948
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  s := \"\"\n    for shift > 0 {\n        if shift >= len(x) {\n            s\
    \ += x[len(x)-1]\n            break\n        }\n        s += x[(len(x)-shift)%len(x)]\n\
    \        shift -= len(x)\n    }\n    return s\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppytglunz_test.go:14:25: invalid argument: x (variable of type int) for
    len

    /tmp/tmppytglunz_test.go:15:19: invalid operation: cannot index x (variable of
    type int)

    /tmp/tmppytglunz_test.go:18:15: invalid operation: cannot index x (variable of
    type int)

    /tmp/tmppytglunz_test.go:19:22: invalid argument: x (variable of type int) for
    len

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074952
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  digits := []int{}\n    for i := 0; i < shift; i++ {\n        digits = append(digits,\
    \ x%10)\n        x = x/10\n    }\n    for i := 0; i < shift; i++ {\n        digits\
    \ = append(digits, x%10)\n        x = x/10\n    }\n    return fmt.Sprintf(\"%d\"\
    , digits)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpfsz2t1cj_test.go:41: expected '001', got '[0 0 1 0]'\n \
    \   --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmpfsz2t1cj_test.go:41:\
    \ expected '12', got '[2 1 0 0]'\n    --- FAIL: TestCircular_Shift/test_num__2\
    \ (0.00s)\n        tmpfsz2t1cj_test.go:41: expected '79', got '[7 9 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0]'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n\
    \        tmpfsz2t1cj_test.go:41: expected '21', got '[2 1]'\n    --- FAIL: TestCircular_Shift/test_num__4\
    \ (0.00s)\n        tmpfsz2t1cj_test.go:41: expected '11', got '[1 1 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074948
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  digits := []int{x}\n    for i := 0; i < shift; i++ {\n        digits = append(digits,\
    \ digits[len(digits)-1])\n    }\n    return fmt.Sprintf(\"%v\", digits)\n}\n\n\
    func TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmp_heu84op_test.go:36: expected '001', got '[100 100 100]'\n\
    \    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmp_heu84op_test.go:36:\
    \ expected '12', got '[12 12 12]'\n    --- FAIL: TestCircular_Shift/test_num__2\
    \ (0.00s)\n        tmp_heu84op_test.go:36: expected '79', got '[97 97 97 97 97\
    \ 97 97 97 97]'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n      \
    \  tmp_heu84op_test.go:36: expected '21', got '[12 12]'\n    --- FAIL: TestCircular_Shift/test_num__4\
    \ (0.00s)\n        tmp_heu84op_test.go:36: expected '11', got '[11 11 11 11 11\
    \ 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11\
    \ 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11\
    \ 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11\
    \ 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074948
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  digits := []int{}\n    for i := 0; i < shift; i++ {\n        digits = append(digits,\
    \ x%10)\n        x /= 10\n    }\n    for i := 0; i < shift; i++ {\n        digits\
    \ = append(digits, x%10)\n        x /= 10\n    }\n    return fmt.Sprintf(\"%d\"\
    , x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpr7jten63_test.go:41: expected '001', got '0'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__1 (0.00s)\n        tmpr7jten63_test.go:41: expected\
    \ '12', got '0'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n      \
    \  tmpr7jten63_test.go:41: expected '79', got '0'\n    --- FAIL: TestCircular_Shift/test_num__3\
    \ (0.00s)\n        tmpr7jten63_test.go:41: expected '21', got '0'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__4 (0.00s)\n        tmpr7jten63_test.go:41: expected\
    \ '11', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  s := \"\"\n    shift %= len(strconv.Itoa(x))\n    for i := len(strconv.Itoa(x));\
    \ i > shift; i-- {\n        s += strconv.Itoa(x%10)\n        x /= 10\n    }\n\
    \    for i := len(strconv.Itoa(x)); i < shift; i++ {\n        s += strconv.Itoa(x%10)\n\
    \        x /= 10\n    }\n    return s\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjse89jyb_test.go:13:18: undefined: strconv

    /tmp/tmpjse89jyb_test.go:14:18: undefined: strconv

    /tmp/tmpjse89jyb_test.go:15:14: undefined: strconv

    /tmp/tmpjse89jyb_test.go:18:18: undefined: strconv

    /tmp/tmpjse89jyb_test.go:19:14: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  x %= 10\n    shift %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n \
    \   x += 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n\
    \    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n\
    \    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n\
    \    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n\
    \    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n\
    \    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n\
    \    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n\
    \    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n\
    \    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n\
    \    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n\
    \    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n\
    \    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n\
    \    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n\
    \    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n\
    \    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n\
    \    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n\
    \    x %= 10\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmplm6z9wg3_test.go:115:6: expected ''('', found TestCircular_Shift

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074950
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  digits := []int{x}\n    for i := 0; i < shift; i++ {\n        digits = append(digits,\
    \ digits[len(digits)-1])\n    }\n    return fmt.Sprintf(\"%d\", digits[len(digits)-1])\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpym7i4moi_test.go:36: expected '001', got '100'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmpym7i4moi_test.go:36:\
    \ expected '79', got '97'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n\
    \        tmpym7i4moi_test.go:36: expected '21', got '12'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074948
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  s := \"\"\n    for i := 0; i < shift; i++ {\n        s = s + fmt.Sprintf(\"\
    %d\", x%10)\n        x = x/10\n    }\n    if shift < len(s) {\n        s = s +\
    \ fmt.Sprintf(\"%d\", x%10)\n    }\n    return s\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmp3vwprj7j_test.go:40: expected '001', got '00'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__1 (0.00s)\n        tmp3vwprj7j_test.go:40: expected\
    \ '12', got '21'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n     \
    \   tmp3vwprj7j_test.go:40: expected '79', got '79000000'\n    --- FAIL: TestCircular_Shift/test_num__3\
    \ (0.00s)\n        tmp3vwprj7j_test.go:40: expected '21', got '2'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__4 (0.00s)\n        tmp3vwprj7j_test.go:40: expected\
    \ '11', got '11000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074950
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  digits := make([]int, len(strconv.Itoa(x)))\n    for i := 0; i < len(digits);\
    \ i++ {\n        digits[i] = x%10\n        x /= 10\n    }\n    for i := 0; i <\
    \ shift; i++ {\n        digits[i], digits[len(digits)-i-1] = digits[len(digits)-i-1],\
    \ digits[i]\n    }\n    return fmt.Sprintf(\"%d\", digits)\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9l76p4ff_test.go:12:31: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074953
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  s := \"\"\n    for shift > 0 {\n        if shift > len(x) {\n            shift\
    \ = len(x) - shift\n        }\n        s += string(x%10) + string(x/10 >> shift)\n\
    \        x /= 10\n        shift -= len(x%10)\n    }\n    return s\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8_zz612s_test.go:14:24: invalid argument: x (variable of type int) for
    len

    /tmp/tmp8_zz612s_test.go:15:25: invalid argument: x (variable of type int) for
    len

    /tmp/tmp8_zz612s_test.go:19:22: invalid argument: x % 10 (value of type int) for
    len

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074954
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  digits := []int{x}\n    for i := 0; i < shift; i++ {\n        digits = append(digits,\
    \ digits[len(digits)-1])\n    }\n    return fmt.Sprintf(\"%d\", digits[len(digits)-1])\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpym7i4moi_test.go:36: expected '001', got '100'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmpym7i4moi_test.go:36:\
    \ expected '79', got '97'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n\
    \        tmpym7i4moi_test.go:36: expected '21', got '12'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074948
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n\
    \    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n\
    \    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n\
    \    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n\
    \    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n\
    \    x /= 10 * shift\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate :=\
    \ circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2e1vg9dy_test.go:77:6: expected ''('', found TestCircular_Shift

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074946
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  s := \"\"\n    for i := 0; i < shift; i++ {\n        s += fmt.Sprintf(\"%d\"\
    , x%10)\n        x /= 10\n    }\n    if x > 0 {\n        s += fmt.Sprintf(\"%d\"\
    , x)\n    }\n    return s\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__1\
    \ (0.00s)\n        tmpka_h5yi__test.go:40: expected '12', got '21'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__2 (0.00s)\n        tmpka_h5yi__test.go:40: expected\
    \ '79', got '79000000'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n\
    \        tmpka_h5yi__test.go:40: expected '11', got '11000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074954
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  digits := make([]int, len(strconv.Itoa(x)))\n    for i := 0; i < len(digits);\
    \ i++ {\n        digits[i] = x%10\n        x /= 10\n    }\n    for i := 0; i <\
    \ shift; i++ {\n        digits[i], digits[len(digits)-i-1] = digits[len(digits)-i-1],\
    \ digits[i]\n    }\n    return fmt.Sprintf(\"%d\", digits)\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9l76p4ff_test.go:12:31: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074953
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  if shift > len(x) {\n        return fmt.Sprintf(\"%v\", x)\n    }\n    result\
    \ := \"\"\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%v%v\"\
    , result, x%10)\n        x = x/10\n    }\n    return fmt.Sprintf(\"%v%v\", result,\
    \ x%10)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7thntbnp_test.go:12:20: invalid argument: x (variable of type int) for
    len

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074949
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  if shift > len(x) {\n        return fmt.Sprintf(\"%v\", x)\n    }\n    digits\
    \ := make([]int, len(x))\n    for i := range digits {\n        digits[i] = x%10\n\
    \        x = x/10\n    }\n    for i := 0; i < shift; i++ {\n        digits[i]\
    \ = digits[i-1]\n    }\n    for i := 0; i < len(digits)-1; i++ {\n        digits[i+1]\
    \ = digits[i]\n    }\n    return fmt.Sprintf(\"%v\", digits)\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbc4udwti_test.go:12:20: invalid argument: x (variable of type int) for
    len

    /tmp/tmpbc4udwti_test.go:15:31: invalid argument: x (variable of type int) for
    len

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074954
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  digits := []int{}\n    for i := 0; i < shift; i++ {\n        digits = append(digits,\
    \ x%10)\n        x = x/10\n    }\n    for i := 0; i < shift; i++ {\n        digits\
    \ = append(digits, x%10)\n        x = x/10\n    }\n    return fmt.Sprintf(\"%d\"\
    , digits[shift:])\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate :=\
    \ circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmp7k4c2idl_test.go:41: expected '001', got '[1 0]'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmp7k4c2idl_test.go:41:\
    \ expected '12', got '[0 0]'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n\
    \        tmp7k4c2idl_test.go:41: expected '79', got '[0 0 0 0 0 0 0 0]'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmp7k4c2idl_test.go:41:\
    \ expected '21', got '[1]'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n\
    \        tmp7k4c2idl_test.go:41: expected '11', got '[0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074954
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  digits := []int{}\n    for i := 0; i < shift; i++ {\n        digits = append(digits,\
    \ x%10)\n        x = x/10\n    }\n    for i := 0; i < shift; i++ {\n        digits\
    \ = append(digits, x%10)\n        x = x/10\n    }\n    return fmt.Sprintf(\"%d\"\
    , digits[shift:])\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate :=\
    \ circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmp7k4c2idl_test.go:41: expected '001', got '[1 0]'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmp7k4c2idl_test.go:41:\
    \ expected '12', got '[0 0]'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n\
    \        tmp7k4c2idl_test.go:41: expected '79', got '[0 0 0 0 0 0 0 0]'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmp7k4c2idl_test.go:41:\
    \ expected '21', got '[1]'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n\
    \        tmp7k4c2idl_test.go:41: expected '11', got '[0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074954
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift\
    \ -= len(strconv.Itoa(x))\n    }\n    x <<= shift\n    x %= 10\n    return strconv.Itoa(x)\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpda4bvcmy_test.go:14:20: undefined: strconv

    /tmp/tmpda4bvcmy_test.go:15:22: undefined: strconv

    /tmp/tmpda4bvcmy_test.go:19:12: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074954
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  s := \"\"\n    for i := 0; i < shift; i++ {\n        if x < 0 {\n         \
    \   s = string([]byte{x})\n            x >>= 8\n        } else {\n           \
    \ x >>= 8\n        }\n    }\n    for i := 0; i < shift; i++ {\n        if x <\
    \ 0 {\n            s = string([]byte{x})\n            x <<= 8\n        } else\
    \ {\n            x <<= 8\n        }\n    }\n    return s\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpypjapmr3_test.go:15:31: cannot use x (variable of type int) as type byte
    in array or slice literal

    /tmp/tmpypjapmr3_test.go:23:31: cannot use x (variable of type int) as type byte
    in array or slice literal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074954
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  digits := make([]int, len(strconv.Itoa(x)))\n    for i := 0; i < len(digits);\
    \ i++ {\n        digits[i] = x%10\n        x /= 10\n    }\n    for i := 0; i <\
    \ shift; i++ {\n        digits[i], digits[len(digits)-i-1] = digits[len(digits)-i-1],\
    \ digits[i]\n    }\n    return fmt.Sprintf(\"%d\", digits[len(digits)-shift:])\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpycl9jqff_test.go:12:31: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074954
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  digits := make([]int, shift)\n    for i := 0; i < shift; i++ {\n        digits[i]\
    \ = x % 10\n        x /= 10\n    }\n    for i := 0; i < shift; i++ {\n       \
    \ digits[i] = x % 10\n        x /= 10\n    }\n    return fmt.Sprintf(\"%v\", digits)\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmp8bkpm4f2_test.go:41: expected '001', got '[1 0]'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmp8bkpm4f2_test.go:41:\
    \ expected '12', got '[0 0]'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n\
    \        tmp8bkpm4f2_test.go:41: expected '79', got '[0 0 0 0 0 0 0 0]'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmp8bkpm4f2_test.go:41:\
    \ expected '21', got '[1]'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n\
    \        tmp8bkpm4f2_test.go:41: expected '11', got '[0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074954
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  digits := make([]int, len(strconv.Itoa(x)))\n    for i := 0; i < len(digits);\
    \ i++ {\n        digits[i] = x%10\n        x /= 10\n    }\n    for i := 0; i <\
    \ shift; i++ {\n        digits[i], digits[len(digits)-i-1] = digits[len(digits)-i-1],\
    \ digits[i]\n    }\n    return fmt.Sprintf(\"%d\", digits[len(digits)-shift:])\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpycl9jqff_test.go:12:31: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074954
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  x %= 10\n    shift %= 10\n    result := \"\"\n    for i := 0; i < shift; i++\
    \ {\n        result = fmt.Sprintf(\"%c%c\", x%10, result)\n        x /= 10\n \
    \   }\n    return fmt.Sprintf(\"%c%c\", x%10, result)\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmpjs9cjmz1_test.go:16:18: fmt.Sprintf format %c has arg result of wrong
    type string

    /tmp/tmpjs9cjmz1_test.go:19:12: fmt.Sprintf format %c has arg result of wrong
    type string

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074954
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  digits := []int{x}\n    for i := 0; i < shift; i++ {\n        digits = append(digits,\
    \ digits[len(digits)-1])\n    }\n    return fmt.Sprintf(\"%v\", digits)\n}\n\n\
    func TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmp_heu84op_test.go:36: expected '001', got '[100 100 100]'\n\
    \    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmp_heu84op_test.go:36:\
    \ expected '12', got '[12 12 12]'\n    --- FAIL: TestCircular_Shift/test_num__2\
    \ (0.00s)\n        tmp_heu84op_test.go:36: expected '79', got '[97 97 97 97 97\
    \ 97 97 97 97]'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n      \
    \  tmp_heu84op_test.go:36: expected '21', got '[12 12]'\n    --- FAIL: TestCircular_Shift/test_num__4\
    \ (0.00s)\n        tmp_heu84op_test.go:36: expected '11', got '[11 11 11 11 11\
    \ 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11\
    \ 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11\
    \ 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11\
    \ 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074948
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  s := \"\"\n    for i := 0; i < shift; i++ {\n        s = s + x%10\n       \
    \ x = x/10\n    }\n    return s + x%10\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxnh73b01_test.go:14:13: invalid operation: s + x % 10 (mismatched types
    string and int)

    /tmp/tmpxnh73b01_test.go:17:12: invalid operation: s + x % 10 (mismatched types
    string and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074954
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  digits := make([]int, shift)\n    for i := 0; i < shift; i++ {\n        digits[i]\
    \ = x%10\n        x /= 10\n    }\n    for i := 0; i < shift; i++ {\n        digits[i]\
    \ = x%10\n        x /= 10\n    }\n    for i := 0; i < shift; i++ {\n        digits[i]\
    \ = x%10\n        x /= 10\n    }\n    return fmt.Sprintf(\"%d\", digits[shift-1])\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmp68jam3jw_test.go:45: expected '001', got '0'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__1 (0.00s)\n        tmp68jam3jw_test.go:45: expected\
    \ '12', got '0'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n      \
    \  tmp68jam3jw_test.go:45: expected '79', got '0'\n    --- FAIL: TestCircular_Shift/test_num__3\
    \ (0.00s)\n        tmp68jam3jw_test.go:45: expected '21', got '0'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__4 (0.00s)\n        tmp68jam3jw_test.go:45: expected\
    \ '11', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074955
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  digits := make([]int, len(strconv.Itoa(x)))\n    for i := range digits {\n\
    \        digits[i] = x%10\n        x /= 10\n    }\n    for i := 0; i < shift;\
    \ i++ {\n        digits[i], digits[len(digits)-i-1] = digits[len(digits)-i-1],\
    \ digits[i]\n    }\n    return fmt.Sprintf(\"%d\", digits)\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppbuwwvzm_test.go:12:31: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074954
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n \
    \   x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n\
    \    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n\
    \    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n\
    \    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n\
    \    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n\
    \    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n\
    \    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n\
    \    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n\
    \    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n\
    \    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n\
    \    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n\
    \    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n\
    \    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n\
    \    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n\
    \    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n\
    \    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n\
    \    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n\
    \    x \nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpxsugwabd_test.go:103:6: expected ''('', found TestCircular_Shift

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  digits := []int{x}\n    for i := 0; i < shift; i++ {\n        digits = append(digits,\
    \ digits[len(digits)-1])\n    }\n    return fmt.Sprintf(\"%v\", digits)\n}\n\n\
    func TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmp_heu84op_test.go:36: expected '001', got '[100 100 100]'\n\
    \    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmp_heu84op_test.go:36:\
    \ expected '12', got '[12 12 12]'\n    --- FAIL: TestCircular_Shift/test_num__2\
    \ (0.00s)\n        tmp_heu84op_test.go:36: expected '79', got '[97 97 97 97 97\
    \ 97 97 97 97]'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n      \
    \  tmp_heu84op_test.go:36: expected '21', got '[12 12]'\n    --- FAIL: TestCircular_Shift/test_num__4\
    \ (0.00s)\n        tmp_heu84op_test.go:36: expected '11', got '[11 11 11 11 11\
    \ 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11\
    \ 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11\
    \ 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11\
    \ 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074948
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  result := \"\"\n    for shift > 0 {\n        if shift >= len(x) {\n       \
    \     result += string(x)\n            break\n        }\n        result += string(x%10)\n\
    \        x /= 10\n        shift -= 1\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw9ilzedz_test.go:14:25: invalid argument: x (variable of type int) for
    len

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074954
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  digits := make([]int, shift)\n    for i := 0; i < shift; i++ {\n        digits[i]\
    \ = x%10\n        x /= 10\n    }\n    for i := 0; i < shift; i++ {\n        digits[i]\
    \ = x%10\n        x /= 10\n    }\n    for i := 0; i < shift; i++ {\n        fmt.Println(digits[i])\n\
    \    }\n    return fmt.Sprintf(\"%d\", digits[shift-1])\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\
    0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\
    0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\
    0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\
    0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n--- FAIL: TestCircular_Shift (0.00s)\n   \
    \ --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmpr8xq8nuq_test.go:44:\
    \ expected '001', got '0'\n    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n\
    \        tmpr8xq8nuq_test.go:44: expected '12', got '0'\n    --- FAIL: TestCircular_Shift/test_num__2\
    \ (0.00s)\n        tmpr8xq8nuq_test.go:44: expected '79', got '0'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__3 (0.00s)\n        tmpr8xq8nuq_test.go:44: expected\
    \ '21', got '1'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n      \
    \  tmpr8xq8nuq_test.go:44: expected '11', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074955
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  digits := make([]int, shift)\n    for i := 0; i < shift; i++ {\n        digits[i]\
    \ = x%10\n        x /= 10\n    }\n    for i := 0; i < shift; i++ {\n        digits[i]\
    \ = x%10\n        x /= 10\n    }\n    return fmt.Sprintf(\"%d\", digits)\n}\n\n\
    func TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmp990klgbl_test.go:41: expected '001', got '[1 0]'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmp990klgbl_test.go:41:\
    \ expected '12', got '[0 0]'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n\
    \        tmp990klgbl_test.go:41: expected '79', got '[0 0 0 0 0 0 0 0]'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmp990klgbl_test.go:41:\
    \ expected '21', got '[1]'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n\
    \        tmp990klgbl_test.go:41: expected '11', got '[0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074951
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  result := \"\"\n    for shift > 0 {\n        digit, shift := x%10, shift-1\n\
    \        result += string(digit)\n        x = x/10\n    }\n    return result\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6kq7icsy_test.go:14:16: shift declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074954
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  digits := make([]int, shift)\n    for i := 0; i < shift; i++ {\n        digits[i]\
    \ = x % 10\n        x = x / 10\n    }\n    for i := 0; i < shift; i++ {\n    \
    \    x = x * 10 + digits[i]\n    }\n    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc\
    \ TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpbot_dcoz_test.go:40: expected '001', got '100'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmpbot_dcoz_test.go:40:\
    \ expected '12', got '21'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n\
    \        tmpbot_dcoz_test.go:40: expected '79', got '79000000'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__3 (0.00s)\n        tmpbot_dcoz_test.go:40: expected\
    \ '21', got '12'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n     \
    \   tmpbot_dcoz_test.go:40: expected '11', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074955
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  digits := []int{x}\n    for i := 0; i < shift; i++ {\n        digits = append(digits,\
    \ digits[len(digits)-1])\n    }\n    return fmt.Sprintf(\"%d\", digits[len(digits)-1])\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpym7i4moi_test.go:36: expected '001', got '100'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmpym7i4moi_test.go:36:\
    \ expected '79', got '97'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n\
    \        tmpym7i4moi_test.go:36: expected '21', got '12'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074948
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  digits := make([]int, len(strconv.Itoa(x)))\n    for i := len(digits) - 1;\
    \ i >= shift; i-- {\n        digits[i] = digits[i-shift]\n    }\n    for i :=\
    \ shift; i < len(digits); i++ {\n        digits[i] = digits[i-shift]\n    }\n\
    \    return fmt.Sprintf(\"%s\", digits)\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpun6m2cra_test.go:12:31: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074954
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  digits := []int{}\n    for i := 0; i < shift; i++ {\n        digits = append(digits,\
    \ x%10)\n        x /= 10\n    }\n    for i := 0; i < shift; i++ {\n        digits\
    \ = append(digits, x%10)\n        x /= 10\n    }\n    return fmt.Sprintf(\"%d\"\
    , digits)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpc93myeg1_test.go:41: expected '001', got '[0 0 1 0]'\n \
    \   --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmpc93myeg1_test.go:41:\
    \ expected '12', got '[2 1 0 0]'\n    --- FAIL: TestCircular_Shift/test_num__2\
    \ (0.00s)\n        tmpc93myeg1_test.go:41: expected '79', got '[7 9 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0]'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n\
    \        tmpc93myeg1_test.go:41: expected '21', got '[2 1]'\n    --- FAIL: TestCircular_Shift/test_num__4\
    \ (0.00s)\n        tmpc93myeg1_test.go:41: expected '11', got '[1 1 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074952
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  digits := []int{}\n    for i := 0; i < shift; i++ {\n        digits = append(digits,\
    \ x%10)\n        x = x/10\n    }\n    for i := 0; i < shift; i++ {\n        digits\
    \ = append(digits, x%10)\n        x = x/10\n    }\n    return fmt.Sprintf(\"%d\"\
    , digits)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpfsz2t1cj_test.go:41: expected '001', got '[0 0 1 0]'\n \
    \   --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmpfsz2t1cj_test.go:41:\
    \ expected '12', got '[2 1 0 0]'\n    --- FAIL: TestCircular_Shift/test_num__2\
    \ (0.00s)\n        tmpfsz2t1cj_test.go:41: expected '79', got '[7 9 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0]'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n\
    \        tmpfsz2t1cj_test.go:41: expected '21', got '[2 1]'\n    --- FAIL: TestCircular_Shift/test_num__4\
    \ (0.00s)\n        tmpfsz2t1cj_test.go:41: expected '11', got '[1 1 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074948
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  digits := make([]int, shift)\n    for i := 0; i < shift; i++ {\n        digits[i]\
    \ = x % 10\n        x = x / 10\n    }\n    for i := 0; i < shift; i++ {\n    \
    \    x = x * 10 + digits[i]\n    }\n    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc\
    \ TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpbot_dcoz_test.go:40: expected '001', got '100'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmpbot_dcoz_test.go:40:\
    \ expected '12', got '21'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n\
    \        tmpbot_dcoz_test.go:40: expected '79', got '79000000'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__3 (0.00s)\n        tmpbot_dcoz_test.go:40: expected\
    \ '21', got '12'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n     \
    \   tmpbot_dcoz_test.go:40: expected '11', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074955
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  digits := []int{}\n    for i := 0; i < shift; i++ {\n        digits = append(digits,\
    \ x%10)\n        x /= 10\n    }\n    for i := 0; i < shift; i++ {\n        digits\
    \ = append(digits, x%10)\n        x /= 10\n    }\n    return fmt.Sprintf(\"%d\"\
    , digits)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpc93myeg1_test.go:41: expected '001', got '[0 0 1 0]'\n \
    \   --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmpc93myeg1_test.go:41:\
    \ expected '12', got '[2 1 0 0]'\n    --- FAIL: TestCircular_Shift/test_num__2\
    \ (0.00s)\n        tmpc93myeg1_test.go:41: expected '79', got '[7 9 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0]'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n\
    \        tmpc93myeg1_test.go:41: expected '21', got '[2 1]'\n    --- FAIL: TestCircular_Shift/test_num__4\
    \ (0.00s)\n        tmpc93myeg1_test.go:41: expected '11', got '[1 1 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074952
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  x %= 10\n    shift %= 10\n    if shift > len(x) {\n        shift = len(x)\n\
    \    }\n    result := \"\"\n    for i := 0; i < shift; i++ {\n        result +=\
    \ \"0\"\n    }\n    for i := 0; i < shift; i++ {\n        result += strconv.Itoa(x%10)\n\
    \        x /= 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjl54_qpy_test.go:14:20: invalid argument: x (variable of type int) for
    len

    /tmp/tmpjl54_qpy_test.go:15:21: invalid argument: x (variable of type int) for
    len

    /tmp/tmpjl54_qpy_test.go:22:19: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074955
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  digits := []int{x}\n    for i := 0; i < shift; i++ {\n        digits = append(digits,\
    \ digits[len(digits)-1])\n    }\n    return fmt.Sprintf(\"%d\", digits[len(digits)-1])\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpym7i4moi_test.go:36: expected '001', got '100'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmpym7i4moi_test.go:36:\
    \ expected '79', got '97'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n\
    \        tmpym7i4moi_test.go:36: expected '21', got '12'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074948
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  x %= (1 << shift)\n    x <<= shift\n    x >>= shift\n    x %= (1 << shift)\n\
    \    x <<= shift\n    x >>= shift\n    x %= (1 << shift)\n    x <<= shift\n  \
    \  x >>= shift\n    x %= (1 << shift)\n    x <<= shift\n    x >>= shift\n    x\
    \ %= (1 << shift)\n    x <<= shift\n    x >>= shift\n    x %= (1 << shift)\n \
    \   x <<= shift\n    x >>= shift\n    x %= (1 << shift)\n    x <<= shift\n   \
    \ x >>= shift\n    x %= (1 << shift)\n    x <<= shift\n    x >>= shift\n    x\
    \ %= (1 << shift)\n    x <<= shift\n    x >>= shift\n    x %= (1 << shift)\n \
    \   x <<= shift\n    x >>= shift\n    x %= (1 << shift)\n    x <<= shift\n   \
    \ x >>= shift\n    x %= (1 << shift)\n    x <<= shift\n    x >>= shift\n    x\
    \ %= (1 << shift)\n    x <<= shift\n    x >>= shift\n    x %= (1 << shift)\n \
    \   x <<= shift\n    x >>= shift\n    x %= (1 << shift)\n    x <<= shift\n   \
    \ x >>= shift\n    x %= (1 << shift)\n    x <<= shift\n    x >>= shift\n    x\
    \ %= (1 << shift)\n    x <<= shift\n    x >>= shift\n    x %= (1 << shift)\n \
    \   x <<= shift\n    x >>= shift\n    x %= (1 << shift)\n    x <<= shift\n   \
    \ x >>= shift\n    x %= (1 << shift)\n    x <<= shift\n    x >>= shift\n    x\
    \ %= (1 << shift)\n    x <<= shift\n    x >>= shift\n    x %= (1 << shift)\n \
    \   x <<= shift\n    x >>= shift\n    x %= (1 << shift)\n    x <<= shift\n   \
    \ x >>= shift\n    x %= (1 << shift)\n    x <<= shift\n    x >>= shift\n    x\
    \ %= (1 << shift)\n    x <<= shift\n    x >>= shift\n    x %= (1 << shift)\n \
    \   x <<= \nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpemvwepjr_test.go:89:6: expected ''('', found TestCircular_Shift

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074954
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  digits := []int{}\n    for i := 0; i < shift; i++ {\n        digits = append(digits,\
    \ x%10)\n        x /= 10\n    }\n    for i := 0; i < shift; i++ {\n        digits\
    \ = append(digits, x%10)\n        x /= 10\n    }\n    return fmt.Sprintf(\"%d\"\
    , x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpr7jten63_test.go:41: expected '001', got '0'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__1 (0.00s)\n        tmpr7jten63_test.go:41: expected\
    \ '12', got '0'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n      \
    \  tmpr7jten63_test.go:41: expected '79', got '0'\n    --- FAIL: TestCircular_Shift/test_num__3\
    \ (0.00s)\n        tmpr7jten63_test.go:41: expected '21', got '0'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__4 (0.00s)\n        tmpr7jten63_test.go:41: expected\
    \ '11', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  x %= 10\n    shift %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n \
    \   x += 10\n    x %= 10\n    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpvbltm0f4_test.go:39: expected '001', got '0'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__1 (0.00s)\n        tmpvbltm0f4_test.go:39: expected\
    \ '12', got '2'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n      \
    \  tmpvbltm0f4_test.go:39: expected '79', got '7'\n    --- FAIL: TestCircular_Shift/test_num__3\
    \ (0.00s)\n        tmpvbltm0f4_test.go:39: expected '21', got '2'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__4 (0.00s)\n        tmpvbltm0f4_test.go:39: expected\
    \ '11', got '1'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074955
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  result := \"\"\n    for shift > 0 {\n        digit, shift := x%10, shift-1\n\
    \        result = string(digit) + result\n        x = x/10\n    }\n    return\
    \ result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvr906c2d_test.go:14:16: shift declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074955
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  digits := make([]int, len(strconv.Itoa(x)))\n    for i := 0; i < len(digits);\
    \ i++ {\n        digits[i] = x%10\n        x /= 10\n    }\n    for i := 0; i <\
    \ shift; i++ {\n        digits[i], digits[len(digits)-i-1] = digits[len(digits)-i-1],\
    \ digits[i]\n    }\n    return fmt.Sprintf(\"%d\", digits)\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9l76p4ff_test.go:12:31: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  digits := make([]int, shift)\n    for i := 0; i < shift; i++ {\n        digits[i]\
    \ = x%10\n        x /= 10\n    }\n    for i := 0; i < shift; i++ {\n        digits[i]\
    \ = x%10\n        x /= 10\n    }\n    return fmt.Sprintf(\"%d\", digits)\n}\n\n\
    func TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmp990klgbl_test.go:41: expected '001', got '[1 0]'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmp990klgbl_test.go:41:\
    \ expected '12', got '[0 0]'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n\
    \        tmp990klgbl_test.go:41: expected '79', got '[0 0 0 0 0 0 0 0]'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmp990klgbl_test.go:41:\
    \ expected '21', got '[1]'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n\
    \        tmp990klgbl_test.go:41: expected '11', got '[0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074951
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  digits := []int{}\n    for i := 0; i < shift; i++ {\n        digits = append(digits,\
    \ x%10)\n        x = x/10\n    }\n    digits = append(digits, x%10)\n    return\
    \ fmt.Sprintf(\"%d\", digits)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n\
    \  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmp20tv4n5o_test.go:38: expected '001', got '[0 0 1]'\n   \
    \ --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmp20tv4n5o_test.go:38:\
    \ expected '12', got '[2 1 0]'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n\
    \        tmp20tv4n5o_test.go:38: expected '79', got '[7 9 0 0 0 0 0 0 0]'\n  \
    \  --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmp20tv4n5o_test.go:38:\
    \ expected '21', got '[2 1]'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n\
    \        tmp20tv4n5o_test.go:38: expected '11', got '[1 1 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074948
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n\
    \    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n\
    \    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n\
    \    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n\
    \    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n\
    \    x /= 10 * shift\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate :=\
    \ circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2e1vg9dy_test.go:77:6: expected ''('', found TestCircular_Shift

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074946
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  s := \"\"\n    x %= 10\n    for i := 0; i < shift; i++ {\n        s += fmt.Sprintf(\"\
    %d\", x)\n        x /= 10\n    }\n    if x > 0 {\n        s += fmt.Sprintf(\"\
    %d\", x)\n    }\n    return s\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n\
    \  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpqnvoi70b_test.go:41: expected '001', got '00'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__1 (0.00s)\n        tmpqnvoi70b_test.go:41: expected\
    \ '12', got '20'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n     \
    \   tmpqnvoi70b_test.go:41: expected '79', got '70000000'\n    --- FAIL: TestCircular_Shift/test_num__3\
    \ (0.00s)\n        tmpqnvoi70b_test.go:41: expected '21', got '2'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__4 (0.00s)\n        tmpqnvoi70b_test.go:41: expected\
    \ '11', got '10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  digits := []int{x}\n    for i := 0; i < shift; i++ {\n        digits = append(digits,\
    \ digits[len(digits)-1])\n    }\n    return fmt.Sprintf(\"%v\", digits)\n}\n\n\
    func TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmp_heu84op_test.go:36: expected '001', got '[100 100 100]'\n\
    \    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmp_heu84op_test.go:36:\
    \ expected '12', got '[12 12 12]'\n    --- FAIL: TestCircular_Shift/test_num__2\
    \ (0.00s)\n        tmp_heu84op_test.go:36: expected '79', got '[97 97 97 97 97\
    \ 97 97 97 97]'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n      \
    \  tmp_heu84op_test.go:36: expected '21', got '[12 12]'\n    --- FAIL: TestCircular_Shift/test_num__4\
    \ (0.00s)\n        tmp_heu84op_test.go:36: expected '11', got '[11 11 11 11 11\
    \ 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11\
    \ 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11\
    \ 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11\
    \ 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074948
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  digits := []int{x}\n    for shift > 0 {\n        shift -= len(digits)\n   \
    \     digits = append(digits, digits[len(digits)-1])\n    }\n    return fmt.Sprintf(\"\
    %v\", digits)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpfsgum24r_test.go:37: expected '001', got '[100 100 100]'\n\
    \    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmpfsgum24r_test.go:37:\
    \ expected '12', got '[12 12 12]'\n    --- FAIL: TestCircular_Shift/test_num__2\
    \ (0.00s)\n        tmpfsgum24r_test.go:37: expected '79', got '[97 97 97 97 97]'\n\
    \    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmpfsgum24r_test.go:37:\
    \ expected '21', got '[12 12]'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n\
    \        tmpfsgum24r_test.go:37: expected '11', got '[11 11 11 11 11 11 11 11\
    \ 11 11 11 11 11 11 11]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  s := \"\"\n    for shift > 0 {\n        s += fmt.Sprintf(\"%d\", x%10)\n  \
    \      x /= 10\n        shift--\n    }\n    for shift > 0 {\n        s += fmt.Sprintf(\"\
    %d\", x%10)\n        x /= 10\n        shift--\n    }\n    return s\n}\n\nfunc\
    \ TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpkhtdjf31_test.go:43: expected '001', got '00'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__1 (0.00s)\n        tmpkhtdjf31_test.go:43: expected\
    \ '12', got '21'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n     \
    \   tmpkhtdjf31_test.go:43: expected '79', got '79000000'\n    --- FAIL: TestCircular_Shift/test_num__3\
    \ (0.00s)\n        tmpkhtdjf31_test.go:43: expected '21', got '2'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__4 (0.00s)\n        tmpkhtdjf31_test.go:43: expected\
    \ '11', got '11000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  digits := make([]int, len(strconv.Itoa(x)))\n    for i := 0; i < len(digits);\
    \ i++ {\n        digits[i] = x%10\n        x = x/10\n    }\n    for i := 0; i\
    \ < shift; i++ {\n        digits[i] = digits[i+1]\n    }\n    for i := 0; i <\
    \ len(digits); i++ {\n        digits[i] = digits[i+shift]\n    }\n    return strconv.Itoa(digits)\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnkdi_n43_test.go:12:31: undefined: strconv

    /tmp/tmpnkdi_n43_test.go:23:12: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074956
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  s := \"\"\n    for shift > 0 {\n        s = string([]byte{x%10 + int(s[x%10])\
    \ + int(s[(x%10)%10])})\n        x /= 10\n        shift -= 1\n    }\n    return\
    \ s\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5jwoewxz_test.go:14:27: cannot use x % 10 + int(s[x % 10]) + int(s[(x
    % 10) % 10]) (value of type int) as type byte in array or slice literal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  x %= 10\n    shift %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n \
    \   x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n\
    \    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n\
    \    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n\
    \    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n\
    \    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n\
    \    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n\
    \    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n\
    \    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n\
    \    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n\
    \    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n\
    \    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n\
    \    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n\
    \    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n\
    \    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n\
    \    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n\
    \    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n\
    \    x /= 10\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbh_10v_4_test.go:115:6: expected ''('', found TestCircular_Shift

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074955
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  digits := []int{x}\n    for shift > 0 {\n        shift -= len(digits)\n   \
    \     digits = append(digits, digits[len(digits)-1])\n    }\n    return fmt.Sprintf(\"\
    %v\", digits)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpfsgum24r_test.go:37: expected '001', got '[100 100 100]'\n\
    \    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmpfsgum24r_test.go:37:\
    \ expected '12', got '[12 12 12]'\n    --- FAIL: TestCircular_Shift/test_num__2\
    \ (0.00s)\n        tmpfsgum24r_test.go:37: expected '79', got '[97 97 97 97 97]'\n\
    \    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmpfsgum24r_test.go:37:\
    \ expected '21', got '[12 12]'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n\
    \        tmpfsgum24r_test.go:37: expected '11', got '[11 11 11 11 11 11 11 11\
    \ 11 11 11 11 11 11 11]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  s := \"\"\n    for i := 0; i < shift; i++ {\n        s = s + x%10\n       \
    \ x = x/10\n    }\n    if shift < len(x) {\n        s = s + x%10\n    }\n    return\
    \ s\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7skd4_rg_test.go:14:13: invalid operation: s + x % 10 (mismatched types
    string and int)

    /tmp/tmp7skd4_rg_test.go:17:20: invalid argument: x (variable of type int) for
    len

    /tmp/tmp7skd4_rg_test.go:18:13: invalid operation: s + x % 10 (mismatched types
    string and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  digits := make([]int, shift)\n    for i := 0; i < shift; i++ {\n        digits[i]\
    \ = x%10\n        x = x/10\n    }\n    for i := 0; i < shift; i++ {\n        x\
    \ = x*10 + digits[i]\n    }\n    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpkqr6slwe_test.go:40: expected '001', got '100'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmpkqr6slwe_test.go:40:\
    \ expected '12', got '21'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n\
    \        tmpkqr6slwe_test.go:40: expected '79', got '79000000'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__3 (0.00s)\n        tmpkqr6slwe_test.go:40: expected\
    \ '21', got '12'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n     \
    \   tmpkqr6slwe_test.go:40: expected '11', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  digits := []int{x}\n    for i := 0; i < shift; i++ {\n        digits = append(digits,\
    \ digits[len(digits)-1])\n    }\n    return fmt.Sprintf(\"%d\", digits[len(digits)-1])\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpym7i4moi_test.go:36: expected '001', got '100'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmpym7i4moi_test.go:36:\
    \ expected '79', got '97'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n\
    \        tmpym7i4moi_test.go:36: expected '21', got '12'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074948
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift\
    \ = len(strconv.Itoa(x))\n    }\n    result := \"\"\n    for i := 0; i < shift;\
    \ i++ {\n        result += \"0\"\n    }\n    for i := 0; i < len(strconv.Itoa(x));\
    \ i++ {\n        result += strconv.Itoa(x%10)\n        x /= 10\n    }\n    return\
    \ result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpra63xzqc_test.go:14:20: undefined: strconv

    /tmp/tmpra63xzqc_test.go:15:21: undefined: strconv

    /tmp/tmpra63xzqc_test.go:21:25: undefined: strconv

    /tmp/tmpra63xzqc_test.go:22:19: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074956
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  digits := make([]int, len(strconv.Itoa(x)))\n    for i := 0; i < len(digits);\
    \ i++ {\n        digits[i] = x%10\n        x /= 10\n    }\n    for i := 0; i <\
    \ shift; i++ {\n        digits[i], digits[len(digits)-i-1] = digits[len(digits)-i-1],\
    \ digits[i]\n    }\n    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp68po8k_t_test.go:12:31: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074950
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  s := \"\"\n    for i := 0; i < shift; i++ {\n        s = fmt.Sprintf(\"%c%c\"\
    , x%10, s)\n        x = x/10\n    }\n    return s\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmpfhj90m2o_test.go:14:13: fmt.Sprintf format %c has arg s of wrong type
    string

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074956
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  if shift > len(x) {\n        shift = len(x) - shift\n    }\n    result := \"\
    \"\n    for i := 0; i < shift; i++ {\n        result += string(x%10)\n       \
    \ x = x/10\n    }\n    for i := shift; i < len(x); i++ {\n        result += string(x%10)\n\
    \        x = x/10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwy66mo7__test.go:12:20: invalid argument: x (variable of type int) for
    len

    /tmp/tmpwy66mo7__test.go:13:21: invalid argument: x (variable of type int) for
    len

    /tmp/tmpwy66mo7__test.go:20:29: invalid argument: x (variable of type int) for
    len

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074956
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  s := \"\"\n    for i := 0; i < shift; i++ {\n        s += fmt.Sprintf(\"%0*d\"\
    , len(x), x)\n        x = x >> 1\n    }\n    return s\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3ivuipjw_test.go:14:38: invalid argument: x (variable of type int) for
    len

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  digits := []int{}\n    for i := 0; i < shift; i++ {\n        digits = append(digits,\
    \ x%10)\n        x /= 10\n    }\n    for i := 0; i < shift; i++ {\n        digits\
    \ = append(digits, x%10)\n        x /= 10\n    }\n    return fmt.Sprintf(\"%d\"\
    , digits)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpc93myeg1_test.go:41: expected '001', got '[0 0 1 0]'\n \
    \   --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmpc93myeg1_test.go:41:\
    \ expected '12', got '[2 1 0 0]'\n    --- FAIL: TestCircular_Shift/test_num__2\
    \ (0.00s)\n        tmpc93myeg1_test.go:41: expected '79', got '[7 9 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0]'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n\
    \        tmpc93myeg1_test.go:41: expected '21', got '[2 1]'\n    --- FAIL: TestCircular_Shift/test_num__4\
    \ (0.00s)\n        tmpc93myeg1_test.go:41: expected '11', got '[1 1 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074952
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  digits := []int{x}\n    for i := 0; i < shift; i++ {\n        digits = append(digits,\
    \ digits[len(digits)-1])\n    }\n    return fmt.Sprintf(\"%d\", digits[len(digits)-1])\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpym7i4moi_test.go:36: expected '001', got '100'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmpym7i4moi_test.go:36:\
    \ expected '79', got '97'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n\
    \        tmpym7i4moi_test.go:36: expected '21', got '12'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074948
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  digits := []int{}\n    for i := 0; i < shift; i++ {\n        digits = append(digits,\
    \ x%10)\n        x = x/10\n    }\n    for i := 0; i < shift; i++ {\n        digits\
    \ = append(digits, x%10)\n        x = x/10\n    }\n    return fmt.Sprintf(\"%d\"\
    , digits)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpfsz2t1cj_test.go:41: expected '001', got '[0 0 1 0]'\n \
    \   --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmpfsz2t1cj_test.go:41:\
    \ expected '12', got '[2 1 0 0]'\n    --- FAIL: TestCircular_Shift/test_num__2\
    \ (0.00s)\n        tmpfsz2t1cj_test.go:41: expected '79', got '[7 9 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0]'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n\
    \        tmpfsz2t1cj_test.go:41: expected '21', got '[2 1]'\n    --- FAIL: TestCircular_Shift/test_num__4\
    \ (0.00s)\n        tmpfsz2t1cj_test.go:41: expected '11', got '[1 1 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074948
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  result := \"\"\n    shift %= len(strconv.Itoa(x))\n    for i := 0; i < shift;\
    \ i++ {\n        result += strconv.Itoa(x%10)\n        x /= 10\n    }\n    for\
    \ i := 0; i < len(strconv.Itoa(x)); i++ {\n        result += strconv.Itoa(x%10)\n\
    \        x /= 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppfuseu21_test.go:13:18: undefined: strconv

    /tmp/tmppfuseu21_test.go:15:19: undefined: strconv

    /tmp/tmppfuseu21_test.go:18:25: undefined: strconv

    /tmp/tmppfuseu21_test.go:19:19: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074956
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  digits := make([]int, len(strconv.Itoa(x)))\n    copy(digits, strconv.Itoa(x))\n\
    \    for i := len(digits) - 1; i >= shift; i-- {\n        digits[i] = digits[i+shift]\n\
    \    }\n    return fmt.Sprintf(\"%v\", digits)\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpep8_n6he_test.go:12:31: undefined: strconv

    /tmp/tmpep8_n6he_test.go:13:18: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074956
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  if shift > len(strconv.Itoa(x)) {\n        return strconv.Itoa(x)\n    }\n\
    \    result := \"\"\n    i := 0\n    for ; i < shift; i++ {\n        result +=\
    \ strconv.Itoa(x&1)\n        x >>= 1\n    }\n    for ; i < len(strconv.Itoa(x));\
    \ i++ {\n        result += strconv.Itoa(x&1)\n        x >>= 1\n    }\n    return\
    \ result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpozwo0vdo_test.go:12:20: undefined: strconv

    /tmp/tmpozwo0vdo_test.go:13:16: undefined: strconv

    /tmp/tmpozwo0vdo_test.go:18:19: undefined: strconv

    /tmp/tmpozwo0vdo_test.go:21:19: undefined: strconv

    /tmp/tmpozwo0vdo_test.go:22:19: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074957
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  digits := []int{x}\n    for i := 0; i < shift; i++ {\n        digits = append(digits,\
    \ digits[len(digits)-1])\n    }\n    return fmt.Sprintf(\"%v\", digits)\n}\n\n\
    func TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmp_heu84op_test.go:36: expected '001', got '[100 100 100]'\n\
    \    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmp_heu84op_test.go:36:\
    \ expected '12', got '[12 12 12]'\n    --- FAIL: TestCircular_Shift/test_num__2\
    \ (0.00s)\n        tmp_heu84op_test.go:36: expected '79', got '[97 97 97 97 97\
    \ 97 97 97 97]'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n      \
    \  tmp_heu84op_test.go:36: expected '21', got '[12 12]'\n    --- FAIL: TestCircular_Shift/test_num__4\
    \ (0.00s)\n        tmp_heu84op_test.go:36: expected '11', got '[11 11 11 11 11\
    \ 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11\
    \ 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11\
    \ 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11\
    \ 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074948
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  digits := []int{x}\n    for i := 0; i < shift; i++ {\n        digits = append(digits,\
    \ digits[len(digits)-1])\n    }\n    return fmt.Sprintf(\"%v\", digits)\n}\n\n\
    func TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmp_heu84op_test.go:36: expected '001', got '[100 100 100]'\n\
    \    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmp_heu84op_test.go:36:\
    \ expected '12', got '[12 12 12]'\n    --- FAIL: TestCircular_Shift/test_num__2\
    \ (0.00s)\n        tmp_heu84op_test.go:36: expected '79', got '[97 97 97 97 97\
    \ 97 97 97 97]'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n      \
    \  tmp_heu84op_test.go:36: expected '21', got '[12 12]'\n    --- FAIL: TestCircular_Shift/test_num__4\
    \ (0.00s)\n        tmp_heu84op_test.go:36: expected '11', got '[11 11 11 11 11\
    \ 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11\
    \ 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11\
    \ 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11\
    \ 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074948
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  s := \"\"\n    for i := 0; i < shift; i++ {\n        s = s + x%10\n       \
    \ x = x/10\n    }\n    if x < 0 {\n        s = s + x%10\n        x = -x/10\n \
    \   }\n    return s\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvsatjx54_test.go:14:13: invalid operation: s + x % 10 (mismatched types
    string and int)

    /tmp/tmpvsatjx54_test.go:18:13: invalid operation: s + x % 10 (mismatched types
    string and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074957
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  if shift > len(x) {\n        return fmt.Sprintf(\"%v\", x)\n    }\n    result\
    \ := \"\"\n    for i := 0; i < shift; i++ {\n        result += string(x%10)\n\
    \        x /= 10\n    }\n    for i := shift; i < len(x); i++ {\n        result\
    \ += string(x%10)\n        x /= 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzv2d8419_test.go:12:20: invalid argument: x (variable of type int) for
    len

    /tmp/tmpzv2d8419_test.go:20:29: invalid argument: x (variable of type int) for
    len

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074957
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  s := \"\"\n    for shift > 0 {\n        s += string(x)\n        x >>= 1\n \
    \       shift -= 1\n    }\n    return s\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmp7ffgywla_test.go:14:14: conversion from int to string yields a string
    of one rune, not a string of digits (did you mean fmt.Sprint(x)?)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074957
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  result := \"\"\n    for shift > 0 {\n        if shift > len(x) {\n        \
    \    shift -= len(x)\n            result += string(x)\n            break\n   \
    \     }\n        result += string(x%10)\n        x /= 10\n        shift -= 1\n\
    \    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd5v17733_test.go:14:24: invalid argument: x (variable of type int) for
    len

    /tmp/tmpd5v17733_test.go:15:26: invalid argument: x (variable of type int) for
    len

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074957
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  digits := []int{x}\n    for i := 0; i < shift; i++ {\n        digits = append(digits,\
    \ digits[len(digits)-1])\n    }\n    return fmt.Sprintf(\"%d\", digits[len(digits)-1])\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpym7i4moi_test.go:36: expected '001', got '100'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmpym7i4moi_test.go:36:\
    \ expected '79', got '97'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n\
    \        tmpym7i4moi_test.go:36: expected '21', got '12'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074948
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  result := \"\"\n    shift %= len(strconv.Itoa(x))\n    for i := 0; i < shift;\
    \ i++ {\n        result = strconv.Itoa(x) + result\n        x = x >> 1\n    }\n\
    \    return result + strconv.Itoa(x)\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwrsnr7by_test.go:13:18: undefined: strconv

    /tmp/tmpwrsnr7by_test.go:15:18: undefined: strconv

    /tmp/tmpwrsnr7by_test.go:18:21: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074957
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  digits := []int{}\n    for i := 0; i < shift; i++ {\n        digits = append(digits,\
    \ x%10)\n        x = x/10\n    }\n    digits = append(digits, x%10)\n    return\
    \ fmt.Sprintf(\"%d\", digits)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n\
    \  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmp20tv4n5o_test.go:38: expected '001', got '[0 0 1]'\n   \
    \ --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmp20tv4n5o_test.go:38:\
    \ expected '12', got '[2 1 0]'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n\
    \        tmp20tv4n5o_test.go:38: expected '79', got '[7 9 0 0 0 0 0 0 0]'\n  \
    \  --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmp20tv4n5o_test.go:38:\
    \ expected '21', got '[2 1]'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n\
    \        tmp20tv4n5o_test.go:38: expected '11', got '[1 1 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074948
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  result := \"\"\n    shift %= len(strconv.Itoa(x))\n    for i := 0; i < shift;\
    \ i++ {\n        result = strconv.Itoa(x%10) + result\n        x = x/10\n    }\n\
    \    for i := 0; i < shift; i++ {\n        result = strconv.Itoa(x%10) + result\n\
    \        x = x/10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6u0ot132_test.go:13:18: undefined: strconv

    /tmp/tmp6u0ot132_test.go:15:18: undefined: strconv

    /tmp/tmp6u0ot132_test.go:19:18: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074957
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  x %= 10\n    shift %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n \
    \   x /= 10\n    x += \"0\"\n    return fmt.Sprintf(\"%v\", x)\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_pbovhwp_test.go:18:5: invalid operation: x += "0" (mismatched types int
    and untyped string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074957
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  result := \"\"\n    shift %= len(strconv.Itoa(x))\n    for i := 0; i < shift;\
    \ i++ {\n        result += strconv.Itoa(x%10)\n        x /= 10\n    }\n    for\
    \ i := 0; i < len(strconv.Itoa(x)); i++ {\n        result += strconv.Itoa(x%10)\n\
    \        x /= 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppfuseu21_test.go:13:18: undefined: strconv

    /tmp/tmppfuseu21_test.go:15:19: undefined: strconv

    /tmp/tmppfuseu21_test.go:18:25: undefined: strconv

    /tmp/tmppfuseu21_test.go:19:19: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074956
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  result := \"\"\n    shift %= len(strconv.Itoa(x))\n    for i := 0; i < shift;\
    \ i++ {\n        result = strconv.Itoa(x) + result\n        x = x >> 1\n    }\n\
    \    return result + strconv.Itoa(x)\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwrsnr7by_test.go:13:18: undefined: strconv

    /tmp/tmpwrsnr7by_test.go:15:18: undefined: strconv

    /tmp/tmpwrsnr7by_test.go:18:21: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074957
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  digits := []int{x}\n    for i := 0; i < shift; i++ {\n        digits = append(digits,\
    \ digits[len(digits)-1])\n    }\n    return fmt.Sprintf(\"%v\", digits)\n}\n\n\
    func TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmp_heu84op_test.go:36: expected '001', got '[100 100 100]'\n\
    \    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmp_heu84op_test.go:36:\
    \ expected '12', got '[12 12 12]'\n    --- FAIL: TestCircular_Shift/test_num__2\
    \ (0.00s)\n        tmp_heu84op_test.go:36: expected '79', got '[97 97 97 97 97\
    \ 97 97 97 97]'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n      \
    \  tmp_heu84op_test.go:36: expected '21', got '[12 12]'\n    --- FAIL: TestCircular_Shift/test_num__4\
    \ (0.00s)\n        tmp_heu84op_test.go:36: expected '11', got '[11 11 11 11 11\
    \ 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11\
    \ 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11\
    \ 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11\
    \ 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074948
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  digits := []int{}\n    for i := 0; i < shift; i++ {\n        digits = append(digits,\
    \ x%10)\n        x /= 10\n    }\n    digits = append(digits, x)\n    return fmt.Sprintf(\"\
    %d\", digits)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpo3_t1bpc_test.go:38: expected '001', got '[0 0 1]'\n   \
    \ --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmpo3_t1bpc_test.go:38:\
    \ expected '12', got '[2 1 0]'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n\
    \        tmpo3_t1bpc_test.go:38: expected '79', got '[7 9 0 0 0 0 0 0 0]'\n  \
    \  --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmpo3_t1bpc_test.go:38:\
    \ expected '21', got '[2 1]'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n\
    \        tmpo3_t1bpc_test.go:38: expected '11', got '[1 1 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074957
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  digits := []int{}\n    i := 0\n    for ; i < shift; i++ {\n        digits =\
    \ append(digits, x%10)\n        x /= 10\n    }\n    for ; i < len(x); i++ {\n\
    \        digits = append(digits, x%10)\n        x /= 10\n    }\n    for ; i <\
    \ shift; i++ {\n        digits = append(digits, 0)\n    }\n    return fmt.Sprintf(\"\
    %d\", digits)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfek1j4cm_test.go:18:19: invalid argument: x (variable of type int) for
    len

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074957
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  digits := []int{}\n    for i := 0; i < shift; i++ {\n        digits = append(digits,\
    \ x%10)\n        x /= 10\n    }\n    for i := 0; i < shift; i++ {\n        digits\
    \ = append(digits, x%10)\n        x /= 10\n    }\n    for i := 0; i < shift; i++\
    \ {\n        digits = append(digits, x%10)\n        x /= 10\n    }\n    return\
    \ fmt.Sprintf(\"%d\", digits)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n\
    \  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpd8daow13_test.go:45: expected '001', got '[0 0 1 0 0 0]'\n\
    \    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmpd8daow13_test.go:45:\
    \ expected '12', got '[2 1 0 0 0 0]'\n    --- FAIL: TestCircular_Shift/test_num__2\
    \ (0.00s)\n        tmpd8daow13_test.go:45: expected '79', got '[7 9 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]'\n    --- FAIL: TestCircular_Shift/test_num__3\
    \ (0.00s)\n        tmpd8daow13_test.go:45: expected '21', got '[2 1 0]'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmpd8daow13_test.go:45:\
    \ expected '11', got '[1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074957
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  s := \"\"\n    for i := 0; i < shift; i++ {\n        s += fmt.Sprintf(\"%d\"\
    , x%10)\n        x /= 10\n    }\n    if x > 0 {\n        s += fmt.Sprintf(\"%d\"\
    , x)\n    }\n    return s\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__1\
    \ (0.00s)\n        tmpka_h5yi__test.go:40: expected '12', got '21'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__2 (0.00s)\n        tmpka_h5yi__test.go:40: expected\
    \ '79', got '79000000'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n\
    \        tmpka_h5yi__test.go:40: expected '11', got '11000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074954
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  digits := []int{x}\n    for i := 0; i < shift; i++ {\n        digits = append(digits,\
    \ digits[len(digits)-1])\n    }\n    return fmt.Sprintf(\"%d\", digits)\n}\n\n\
    func TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpew9_j_k0_test.go:36: expected '001', got '[100 100 100]'\n\
    \    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmpew9_j_k0_test.go:36:\
    \ expected '12', got '[12 12 12]'\n    --- FAIL: TestCircular_Shift/test_num__2\
    \ (0.00s)\n        tmpew9_j_k0_test.go:36: expected '79', got '[97 97 97 97 97\
    \ 97 97 97 97]'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n      \
    \  tmpew9_j_k0_test.go:36: expected '21', got '[12 12]'\n    --- FAIL: TestCircular_Shift/test_num__4\
    \ (0.00s)\n        tmpew9_j_k0_test.go:36: expected '11', got '[11 11 11 11 11\
    \ 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11\
    \ 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11\
    \ 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11\
    \ 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074957
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  digits := []int{}\n    for i := 0; i < shift; i++ {\n        digits = append(digits,\
    \ x%10)\n        x /= 10\n    }\n    for i := 0; i < shift; i++ {\n        digits\
    \ = append(digits, x%10)\n        x /= 10\n    }\n    return fmt.Sprintf(\"%d\"\
    , x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpr7jten63_test.go:41: expected '001', got '0'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__1 (0.00s)\n        tmpr7jten63_test.go:41: expected\
    \ '12', got '0'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n      \
    \  tmpr7jten63_test.go:41: expected '79', got '0'\n    --- FAIL: TestCircular_Shift/test_num__3\
    \ (0.00s)\n        tmpr7jten63_test.go:41: expected '21', got '0'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__4 (0.00s)\n        tmpr7jten63_test.go:41: expected\
    \ '11', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  digits := []int{x}\n    for i := 0; i < shift; i++ {\n        digits = append(digits,\
    \ digits[len(digits)-1])\n    }\n    return fmt.Sprintf(\"%v\", digits)\n}\n\n\
    func TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmp_heu84op_test.go:36: expected '001', got '[100 100 100]'\n\
    \    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmp_heu84op_test.go:36:\
    \ expected '12', got '[12 12 12]'\n    --- FAIL: TestCircular_Shift/test_num__2\
    \ (0.00s)\n        tmp_heu84op_test.go:36: expected '79', got '[97 97 97 97 97\
    \ 97 97 97 97]'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n      \
    \  tmp_heu84op_test.go:36: expected '21', got '[12 12]'\n    --- FAIL: TestCircular_Shift/test_num__4\
    \ (0.00s)\n        tmp_heu84op_test.go:36: expected '11', got '[11 11 11 11 11\
    \ 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11\
    \ 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11\
    \ 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11\
    \ 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074948
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  digits := make([]int, len(strconv.Itoa(x)))\n    for i := 0; i < len(digits);\
    \ i++ {\n        digits[i] = x%10\n        x /= 10\n    }\n    for i := 0; i <\
    \ shift; i++ {\n        digits[i], digits[len(digits)-i-1] = digits[len(digits)-i-1],\
    \ digits[i]\n    }\n    return fmt.Sprintf(\"%s\", digits)\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg_mu_bi3_test.go:12:31: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074957
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  digits := []int{x}\n    for shift > 0 {\n        shift -= len(digits)\n   \
    \     digits = append(digits, digits[len(digits)-1])\n    }\n    return fmt.Sprintf(\"\
    %v\", digits)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpfsgum24r_test.go:37: expected '001', got '[100 100 100]'\n\
    \    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmpfsgum24r_test.go:37:\
    \ expected '12', got '[12 12 12]'\n    --- FAIL: TestCircular_Shift/test_num__2\
    \ (0.00s)\n        tmpfsgum24r_test.go:37: expected '79', got '[97 97 97 97 97]'\n\
    \    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmpfsgum24r_test.go:37:\
    \ expected '21', got '[12 12]'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n\
    \        tmpfsgum24r_test.go:37: expected '11', got '[11 11 11 11 11 11 11 11\
    \ 11 11 11 11 11 11 11]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  result := \"\"\n    for shift > 0 {\n        digit, shift := x%10, shift-1\n\
    \        result += string(digit) + string(digit)\n        x /= 10\n    }\n   \
    \ return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate :=\
    \ circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj8uqhsho_test.go:14:16: shift declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074957
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  result := \"\"\n    for shift > 0 {\n        if shift >= len(x) {\n       \
    \     result = append(result, x%10)\n            break\n        }\n        result\
    \ = append(result, x%10, x%10>>shift)\n        shift -= len(x%10)\n        x =\
    \ x>>1\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n\
    \  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdetjrpv3_test.go:14:25: invalid argument: x (variable of type int) for
    len

    /tmp/tmpdetjrpv3_test.go:15:29: first argument to append must be a slice; have
    result (variable of type string)

    /tmp/tmpdetjrpv3_test.go:18:25: first argument to append must be a slice; have
    result (variable of type string)

    /tmp/tmpdetjrpv3_test.go:19:22: invalid argument: x % 10 (value of type int) for
    len

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074957
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  digits := []int{}\n    for i := 0; i < shift; i++ {\n        digits = append(digits,\
    \ x%10)\n        x = x/10\n    }\n    for i := 0; i < shift; i++ {\n        digits\
    \ = append(digits, x%10)\n        x = x/10\n    }\n    return fmt.Sprintf(\"%d\"\
    , digits[shift:])\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate :=\
    \ circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmp7k4c2idl_test.go:41: expected '001', got '[1 0]'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmp7k4c2idl_test.go:41:\
    \ expected '12', got '[0 0]'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n\
    \        tmp7k4c2idl_test.go:41: expected '79', got '[0 0 0 0 0 0 0 0]'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmp7k4c2idl_test.go:41:\
    \ expected '21', got '[1]'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n\
    \        tmp7k4c2idl_test.go:41: expected '11', got '[0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074954
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  digits := []int{x}\n    for shift > 0 {\n        shift -= 1\n        digits\
    \ = append(digits, digits[len(digits)-1])\n    }\n    return fmt.Sprintf(\"%v\"\
    , digits)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmp2_wxjb0t_test.go:37: expected '001', got '[100 100 100]'\n\
    \    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmp2_wxjb0t_test.go:37:\
    \ expected '12', got '[12 12 12]'\n    --- FAIL: TestCircular_Shift/test_num__2\
    \ (0.00s)\n        tmp2_wxjb0t_test.go:37: expected '79', got '[97 97 97 97 97\
    \ 97 97 97 97]'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n      \
    \  tmp2_wxjb0t_test.go:37: expected '21', got '[12 12]'\n    --- FAIL: TestCircular_Shift/test_num__4\
    \ (0.00s)\n        tmp2_wxjb0t_test.go:37: expected '11', got '[11 11 11 11 11\
    \ 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11\
    \ 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11\
    \ 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11\
    \ 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074948
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  digits := []int{}\n    for i := 0; i < shift; i++ {\n        digits = append(digits,\
    \ x%10)\n        x /= 10\n    }\n    for i := 0; i < shift; i++ {\n        digits\
    \ = append(digits, x%10)\n        x /= 10\n    }\n    return fmt.Sprintf(\"%d\"\
    , x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpr7jten63_test.go:41: expected '001', got '0'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__1 (0.00s)\n        tmpr7jten63_test.go:41: expected\
    \ '12', got '0'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n      \
    \  tmpr7jten63_test.go:41: expected '79', got '0'\n    --- FAIL: TestCircular_Shift/test_num__3\
    \ (0.00s)\n        tmpr7jten63_test.go:41: expected '21', got '0'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__4 (0.00s)\n        tmpr7jten63_test.go:41: expected\
    \ '11', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  x %= 10\n    shift %= 10\n    if shift > len(string(x)) {\n        shift =\
    \ len(string(x))\n    }\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x\
    \ %= 10\n    return string(x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n\
    \  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmpxwj_b710_test.go:14:20: conversion from int to string yields a string
    of one rune, not a string of digits (did you mean fmt.Sprint(x)?)

    /tmp/tmpxwj_b710_test.go:15:21: conversion from int to string yields a string
    of one rune, not a string of digits (did you mean fmt.Sprint(x)?)

    /tmp/tmpxwj_b710_test.go:21:12: conversion from int to string yields a string
    of one rune, not a string of digits (did you mean fmt.Sprint(x)?)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074957
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  result := \"\"\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"\
    %c%c\", x%10, result)\n        x = x/10\n    }\n    for i := shift; i < x; i++\
    \ {\n        result = fmt.Sprintf(\"%c%c\", result, x%10)\n        x = x/10\n\
    \    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmp89trsi7u_test.go:14:18: fmt.Sprintf format %c has arg result of wrong
    type string

    /tmp/tmp89trsi7u_test.go:18:18: fmt.Sprintf format %c has arg result of wrong
    type string

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074957
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  digits := []int{}\n    for i := 0; i < shift; i++ {\n        digits = append(digits,\
    \ x%10)\n        x = x/10\n    }\n    for i := 0; i < shift; i++ {\n        digits\
    \ = append(digits, x%10)\n        x = x/10\n    }\n    return fmt.Sprintf(\"%d\"\
    , digits)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpfsz2t1cj_test.go:41: expected '001', got '[0 0 1 0]'\n \
    \   --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmpfsz2t1cj_test.go:41:\
    \ expected '12', got '[2 1 0 0]'\n    --- FAIL: TestCircular_Shift/test_num__2\
    \ (0.00s)\n        tmpfsz2t1cj_test.go:41: expected '79', got '[7 9 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0]'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n\
    \        tmpfsz2t1cj_test.go:41: expected '21', got '[2 1]'\n    --- FAIL: TestCircular_Shift/test_num__4\
    \ (0.00s)\n        tmpfsz2t1cj_test.go:41: expected '11', got '[1 1 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074948
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  x %= 10\n    shift %= 10\n    result := \"\"\n    for i := 0; i < shift; i++\
    \ {\n        result = fmt.Sprintf(\"%c%c\", x%10, result)\n        x /= 10\n \
    \   }\n    return fmt.Sprintf(\"%c%c\", x%10, result)\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmpjs9cjmz1_test.go:16:18: fmt.Sprintf format %c has arg result of wrong
    type string

    /tmp/tmpjs9cjmz1_test.go:19:12: fmt.Sprintf format %c has arg result of wrong
    type string

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074954
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\nfunc circular_shift(x int, shift int) string {\n  \
    \  if shift > len(strconv.Itoa(x)) {\n        return strconv.Itoa(x)\n    }\n\
    \    digits := make([]int, len(strconv.Itoa(x)))\n    for i := 0; i < len(digits);\
    \ i++ {\n        digits[i] = x%10\n        x /= 10\n    }\n    for i := len(digits)\
    \ - shift; i < len(digits); i++ {\n        digits[i] = digits[i-shift]\n    }\n\
    \    return strconv.Itoa(digits)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n\
    \  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw_2io5ac_test.go:12:20: undefined: strconv

    /tmp/tmpw_2io5ac_test.go:13:16: undefined: strconv

    /tmp/tmpw_2io5ac_test.go:15:31: undefined: strconv

    /tmp/tmpw_2io5ac_test.go:23:12: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074957
