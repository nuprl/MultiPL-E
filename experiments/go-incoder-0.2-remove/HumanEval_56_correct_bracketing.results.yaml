language: go_test.go
name: HumanEval_56_correct_bracketing
results:
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = strings.TrimSpace(brackets)\n    if len(brackets)\
    \ == 0 {\n        return false\n    }\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    \nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpjyio4hh0_test.go:51:6: expected ''('', found TestCorrect_Bracketing

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075146
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    openingBrackets\
    \ := []string{\"<\", \"{\", \"(\"}\n    closingBrackets := []string{\">\", \"\
    }\", \"}\"}\n    for _, openingBracket := range openingBrackets {\n        for\
    \ _, closingBracket := range closingBrackets {\n            if openingBracket\
    \ == closingBracket {\n                continue\n            }\n            if\
    \ brackets[len(brackets)-1-len(closingBracket):len(brackets)-1] != closingBracket\
    \ {\n                return false\n            }\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [:-1] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [:-1]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.correct_bracketing(...)\n\t/tmp/tmpovizhqeh_test.go:19\n\
    command-line-arguments_test.TestCorrect_Bracketing(0x0?)\n\t/tmp/tmpovizhqeh_test.go:34\
    \ +0xe8d\ntesting.tRunner(0xc0000da340, 0x528d80)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660075148
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := []string{\"<\", \"{\", \"(\"}\n    closingBrackets\
    \ := []string{\">\", \"}\", \"}\"}\n    for _, openingBracket := range openingBrackets\
    \ {\n        for _, closingBracket := range closingBrackets {\n            if\
    \ openingBracket == closingBracket {\n                continue\n            }\n\
    \            if brackets[len(brackets)-len(closingBracket):len(brackets)] == openingBracket\
    \ {\n                return false\n            }\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__4\
    \ (0.00s)\n        tmpyts7hn1k_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__5 (0.00s)\n        tmpyts7hn1k_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCorrect_Bracketing/test_num__8\
    \ (0.00s)\n        tmpyts7hn1k_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__9 (0.00s)\n        tmpyts7hn1k_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCorrect_Bracketing/test_num__10\
    \ (0.00s)\n        tmpyts7hn1k_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__11 (0.00s)\n        tmpyts7hn1k_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075148
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else {\n           \
    \ closingBrackets[c] = true\n        }\n    }\n    for _, c := range brackets\
    \ {\n        if !openingBrackets[c] {\n            return false\n        }\n \
    \   }\n    for _, c := range brackets {\n        if !closingBrackets[c] {\n  \
    \          return false\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpei_r1l99_test.go:15:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpei_r1l99_test.go:17:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpei_r1l99_test.go:21:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpei_r1l99_test.go:26:29: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075147
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, char := range brackets {\n        if char\
    \ == '<' {\n            openingBrackets[char] = true\n        } else {\n     \
    \       closingBrackets[char] = true\n        }\n    }\n    for _, char := range\
    \ brackets {\n        if !openingBrackets[char] {\n            return false\n\
    \        }\n        if !closingBrackets[char] {\n            return false\n  \
    \      }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_irn9csg_test.go:15:29: cannot use char (variable of type rune) as type
    string in map index

    /tmp/tmp_irn9csg_test.go:17:29: cannot use char (variable of type rune) as type
    string in map index

    /tmp/tmp_irn9csg_test.go:21:29: cannot use char (variable of type rune) as type
    string in map index

    /tmp/tmp_irn9csg_test.go:24:29: cannot use char (variable of type rune) as type
    string in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075147
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var openingBrackets []string\n    var closingBrackets []string\n\
    \    for _, char := range brackets {\n        if char == '<' {\n            openingBrackets\
    \ = append(openingBrackets, char)\n        } else {\n            closingBrackets\
    \ = append(closingBrackets, char)\n        }\n    }\n    return len(openingBrackets)\
    \ == len(closingBrackets)\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n\
    \  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkd93yxkn_test.go:15:55: cannot use char (variable of type rune) as type
    string in argument to append

    /tmp/tmpkd93yxkn_test.go:17:55: cannot use char (variable of type rune) as type
    string in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075147
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    for _, c :=\
    \ range brackets {\n        if c != \">\" && c != \"<\" {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwgszujbp_test.go:13:17: invalid operation: c != ">" (mismatched types
    rune and untyped string)

    /tmp/tmpwgszujbp_test.go:13:29: invalid operation: c != "<" (mismatched types
    rune and untyped string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075147
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    brackets =\
    \ strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\"\nfunc\
    \ TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpk8fm6x1n_test.go:47:49: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075146
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := []string{\"<\", \"{\", \"(\"}\n    closingBrackets\
    \ := []string{\">\", \"}\", \"}\"}\n    for _, openingBracket := range openingBrackets\
    \ {\n        if strings.Contains(brackets, openingBracket) {\n            for\
    \ _, closingBracket := range closingBrackets {\n                if strings.Contains(brackets,\
    \ closingBracket) {\n                    return true\n                }\n    \
    \        }\n        }\n    }\n    return false\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi4jnrbue_test.go:14:12: undefined: strings

    /tmp/tmpi4jnrbue_test.go:16:20: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075147
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    for _, c :=\
    \ range brackets {\n        if c != \">\" && c != \"<\" {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwgszujbp_test.go:13:17: invalid operation: c != ">" (mismatched types
    rune and untyped string)

    /tmp/tmpwgszujbp_test.go:13:29: invalid operation: c != "<" (mismatched types
    rune and untyped string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075147
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    opening, closing := brackets[len(brackets)-1], brackets[len(brackets)-2]\n\
    \    opening == closing || opening == \"<\" && closing == \">\"\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfglm4lwm_test.go:12:38: invalid operation: opening == "<" (mismatched
    types byte and untyped string)

    /tmp/tmpfglm4lwm_test.go:12:56: invalid operation: closing == ">" (mismatched
    types byte and untyped string)

    /tmp/tmpfglm4lwm_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075147
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    brackets =\
    \ strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\"\nfunc\
    \ TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpk8fm6x1n_test.go:47:49: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075146
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := []string{\"<\", \"{\", \"(\"}\n    closingBrackets\
    \ := []string{\">\", \"}\", \"}\"}\n    for _, openingBracket := range openingBrackets\
    \ {\n        for _, closingBracket := range closingBrackets {\n            if\
    \ openingBracket != closingBracket {\n                if brackets[len(brackets)-len(closingBracket):len(brackets)]\
    \ == closingBracket {\n                    return true\n                }\n  \
    \          }\n        }\n    }\n    return false\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__4\
    \ (0.00s)\n        tmpm9_x13r9_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__5 (0.00s)\n        tmpm9_x13r9_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCorrect_Bracketing/test_num__8\
    \ (0.00s)\n        tmpm9_x13r9_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__9 (0.00s)\n        tmpm9_x13r9_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCorrect_Bracketing/test_num__10\
    \ (0.00s)\n        tmpm9_x13r9_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__11 (0.00s)\n        tmpm9_x13r9_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075148
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := []string{\"<\", \"{\", \"(\"}\n    closingBrackets\
    \ := []string{\">\", \"}\", \"}\"}\n    for _, openingBracket := range openingBrackets\
    \ {\n        for _, closingBracket := range closingBrackets {\n            if\
    \ openingBracket == closingBracket {\n                continue\n            }\n\
    \            if brackets == openingBracket + closingBracket {\n              \
    \  return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__1\
    \ (0.00s)\n        tmpqg2fcoir_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__2 (0.00s)\n        tmpqg2fcoir_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCorrect_Bracketing/test_num__3\
    \ (0.00s)\n        tmpqg2fcoir_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075148
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(bracket\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpu6wzf174_test.go:47:39: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075146
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else {\n           \
    \ closingBrackets[c] = true\n        }\n    }\n    for _, c := range brackets\
    \ {\n        if !openingBrackets[c] {\n            return false\n        }\n \
    \   }\n    for _, c := range brackets {\n        if !closingBrackets[c] {\n  \
    \          return false\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpei_r1l99_test.go:15:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpei_r1l99_test.go:17:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpei_r1l99_test.go:21:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpei_r1l99_test.go:26:29: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075147
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(bracket\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpu6wzf174_test.go:47:39: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075146
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, char := range brackets {\n        if char\
    \ == '<' {\n            openingBrackets[char] = true\n        } else {\n     \
    \       closingBrackets[char] = true\n        }\n    }\n    for _, char := range\
    \ brackets {\n        if !openingBrackets[char] {\n            return false\n\
    \        }\n        if !closingBrackets[char] {\n            return false\n  \
    \      }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_irn9csg_test.go:15:29: cannot use char (variable of type rune) as type
    string in map index

    /tmp/tmp_irn9csg_test.go:17:29: cannot use char (variable of type rune) as type
    string in map index

    /tmp/tmp_irn9csg_test.go:21:29: cannot use char (variable of type rune) as type
    string in map index

    /tmp/tmp_irn9csg_test.go:24:29: cannot use char (variable of type rune) as type
    string in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075147
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else {\n           \
    \ closingBrackets[c] = true\n        }\n    }\n    for _, c := range brackets\
    \ {\n        if !openingBrackets[c] {\n            return false\n        }\n \
    \   }\n    for _, c := range brackets {\n        if !closingBrackets[c] {\n  \
    \          return false\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpei_r1l99_test.go:15:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpei_r1l99_test.go:17:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpei_r1l99_test.go:21:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpei_r1l99_test.go:26:29: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075147
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(bracket\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpu6wzf174_test.go:47:39: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075146
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = strings.TrimSpace(brackets)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\"\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp57njxzad_test.go:47:49: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075146
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else {\n           \
    \ closingBrackets[c] = true\n        }\n    }\n    for c := range openingBrackets\
    \ {\n        if !closingBrackets[c] {\n            return false\n        }\n \
    \   }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsyoyysms_test.go:15:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpsyoyysms_test.go:17:29: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075147
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = strings.TrimSpace(brackets)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\"\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp57njxzad_test.go:47:49: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075146
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, char := range brackets {\n        if char\
    \ == \"<\" {\n            openingBrackets[char] = true\n        } else {\n   \
    \         closingBrackets[char] = true\n        }\n    }\n    for _, char := range\
    \ brackets {\n        if !openingBrackets[char] {\n            return false\n\
    \        }\n    }\n    for _, char := range brackets {\n        if !closingBrackets[char]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5ow30o8n_test.go:14:20: invalid operation: char == "<" (mismatched types
    rune and untyped string)

    /tmp/tmp5ow30o8n_test.go:15:29: cannot use char (variable of type rune) as type
    string in map index

    /tmp/tmp5ow30o8n_test.go:17:29: cannot use char (variable of type rune) as type
    string in map index

    /tmp/tmp5ow30o8n_test.go:21:29: cannot use char (variable of type rune) as type
    string in map index

    /tmp/tmp5ow30o8n_test.go:26:29: cannot use char (variable of type rune) as type
    string in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075147
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else {\n           \
    \ closingBrackets[c] = true\n        }\n    }\n    for _, c := range brackets\
    \ {\n        if openingBrackets[c] == false {\n            return false\n    \
    \    }\n        if closingBrackets[c] == false {\n            return false\n \
    \       }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3q37snmm_test.go:15:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmp3q37snmm_test.go:17:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmp3q37snmm_test.go:21:28: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmp3q37snmm_test.go:24:28: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075147
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var openingBrackets []string\n    var closingBrackets []string\n\
    \    for _, char := range brackets {\n        if char == '<' {\n            openingBrackets\
    \ = append(openingBrackets, char)\n        } else {\n            closingBrackets\
    \ = append(closingBrackets, char)\n        }\n    }\n    if len(openingBrackets)\
    \ != len(closingBrackets) {\n        return false\n    }\n    for i := 0; i <\
    \ len(openingBrackets); i++ {\n        if openingBrackets[i] != closingBrackets[i]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyo9t31ab_test.go:15:55: cannot use char (variable of type rune) as type
    string in argument to append

    /tmp/tmpyo9t31ab_test.go:17:55: cannot use char (variable of type rune) as type
    string in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075147
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(bracket\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpu6wzf174_test.go:47:39: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075146
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    for _, c :=\
    \ range brackets {\n        if c != \">\" && c != \"<\" {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwgszujbp_test.go:13:17: invalid operation: c != ">" (mismatched types
    rune and untyped string)

    /tmp/tmpwgszujbp_test.go:13:29: invalid operation: c != "<" (mismatched types
    rune and untyped string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075147
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var openingBrackets []string\n    var closingBrackets []string\n\
    \    for _, char := range brackets {\n        if char == '<' {\n            openingBrackets\
    \ = append(openingBrackets, char)\n        } else {\n            closingBrackets\
    \ = append(closingBrackets, char)\n        }\n    }\n    if len(openingBrackets)\
    \ != len(closingBrackets) {\n        return false\n    }\n    for i := 0; i <\
    \ len(openingBrackets); i++ {\n        if openingBrackets[i] != closingBrackets[i]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyo9t31ab_test.go:15:55: cannot use char (variable of type rune) as type
    string in argument to append

    /tmp/tmpyo9t31ab_test.go:17:55: cannot use char (variable of type rune) as type
    string in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075147
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    brackets =\
    \ strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\"\nfunc\
    \ TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpk8fm6x1n_test.go:47:49: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075146
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else {\n           \
    \ closingBrackets[c] = true\n        }\n    }\n    for c := range openingBrackets\
    \ {\n        if !closingBrackets[c] {\n            return false\n        }\n \
    \   }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsyoyysms_test.go:15:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpsyoyysms_test.go:17:29: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075147
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := []string{\"<\", \"{\", \"(\"}\n    closingBrackets\
    \ := []string{\">\", \"}\", \"}\"}\n    for _, openingBracket := range openingBrackets\
    \ {\n        for _, closingBracket := range closingBrackets {\n            if\
    \ openingBracket == closingBracket {\n                continue\n            }\n\
    \            if brackets == openingBracket + closingBracket {\n              \
    \  return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__1\
    \ (0.00s)\n        tmpqg2fcoir_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__2 (0.00s)\n        tmpqg2fcoir_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCorrect_Bracketing/test_num__3\
    \ (0.00s)\n        tmpqg2fcoir_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075148
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    brackets =\
    \ strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\"\nfunc\
    \ TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpk8fm6x1n_test.go:47:49: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075146
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := []string{\"<\", \"{\", \"(\"}\n    closingBrackets\
    \ := []string{\">\", \"}\", \"}\"}\n    for _, openingBracket := range openingBrackets\
    \ {\n        for _, closingBracket := range closingBrackets {\n            if\
    \ openingBracket != closingBracket {\n                if brackets[len(brackets)-len(closingBracket):len(brackets)]\
    \ == closingBracket {\n                    return true\n                }\n  \
    \          }\n        }\n    }\n    return false\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__4\
    \ (0.00s)\n        tmpm9_x13r9_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__5 (0.00s)\n        tmpm9_x13r9_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCorrect_Bracketing/test_num__8\
    \ (0.00s)\n        tmpm9_x13r9_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__9 (0.00s)\n        tmpm9_x13r9_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCorrect_Bracketing/test_num__10\
    \ (0.00s)\n        tmpm9_x13r9_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__11 (0.00s)\n        tmpm9_x13r9_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075148
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := []string{\"<\", \"{\", \"(\"}\n    closingBrackets\
    \ := []string{\">\", \"}\", \"}\"}\n    for _, openingBracket := range openingBrackets\
    \ {\n        for _, closingBracket := range closingBrackets {\n            if\
    \ openingBracket == closingBracket {\n                continue\n            }\n\
    \            if brackets[len(brackets)-len(closingBracket):len(brackets)] == openingBracket\
    \ {\n                return false\n            }\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__4\
    \ (0.00s)\n        tmpyts7hn1k_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__5 (0.00s)\n        tmpyts7hn1k_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCorrect_Bracketing/test_num__8\
    \ (0.00s)\n        tmpyts7hn1k_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__9 (0.00s)\n        tmpyts7hn1k_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCorrect_Bracketing/test_num__10\
    \ (0.00s)\n        tmpyts7hn1k_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__11 (0.00s)\n        tmpyts7hn1k_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075148
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else {\n           \
    \ closingBrackets[c] = true\n        }\n    }\n    for c := range openingBrackets\
    \ {\n        if !closingBrackets[c] {\n            return false\n        }\n \
    \   }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsyoyysms_test.go:15:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpsyoyysms_test.go:17:29: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075147
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = strings.TrimSpace(brackets)\n    if len(brackets)\
    \ == 0 {\n        return false\n    }\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    \nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpjyio4hh0_test.go:51:6: expected ''('', found TestCorrect_Bracketing

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075146
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    brackets =\
    \ strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\"\nfunc\
    \ TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpk8fm6x1n_test.go:47:49: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075146
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    brackets =\
    \ strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\"\nfunc\
    \ TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpk8fm6x1n_test.go:47:49: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075146
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = strings.TrimSpace(brackets)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"[\", -1)\n    brackets = strings.Replace(brackets, \">\", \"]\", -1)\n\
    \    brackets = strings.Replace(brackets, \"[\", \"<\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"]\", \">\", -1)\n    brackets = strings.Replace(brackets, \"<=\", \"<\", -1)\n\
    \    brackets = strings.Replace(brackets, \">=\", \">\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"==\", \"=\", -1)\n    brackets = strings.Replace(brackets, \"!=\", \"!\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<=\", \"<\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">=\", \">\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"!=\", \"!\", -1)\n    brackets = strings.Replace(brackets, \"<=\", \"<\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">=\", \">\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"!=\", \"!\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<=\", \"<\", -1)\n    brackets = strings.Replace(brackets, \">=\", \">\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"!=\", \"!\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<=\", \"<\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">=\", \">\", -1)\n    brackets = strings.Replace(brackets, \"!=\", \"!\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<=\", \"<\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">=\", \">\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"!=\", \"!\", -1)\n    brackets = strings.Replace(brackets, \"<=\", \"<\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">=\", \">\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"!=\", \"!\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<=\", \"<\", -1)\n    brackets = strings.Replace(brackets, \">=\", \">\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"!=\", \"!\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<=\", \"<\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">=\", \">\", -1)\n    brackets = strings.Replace(brackets, \"!\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmprk7q9599_test.go:43:42: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075146
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else {\n           \
    \ closingBrackets[c] = true\n        }\n    }\n    for c := range openingBrackets\
    \ {\n        if !closingBrackets[c] {\n            return false\n        }\n \
    \   }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsyoyysms_test.go:15:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpsyoyysms_test.go:17:29: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075147
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := []string{\"<\", \"{\", \"(\"}\n    closingBrackets\
    \ := []string{\">\", \"}\", \"}\"}\n    for _, openingBracket := range openingBrackets\
    \ {\n        for _, closingBracket := range closingBrackets {\n            if\
    \ openingBracket == closingBracket {\n                continue\n            }\n\
    \            if brackets == openingBracket + closingBracket {\n              \
    \  return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__1\
    \ (0.00s)\n        tmpqg2fcoir_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__2 (0.00s)\n        tmpqg2fcoir_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCorrect_Bracketing/test_num__3\
    \ (0.00s)\n        tmpqg2fcoir_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075148
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make([]string, 0)\n    closingBrackets\
    \ := make([]string, 0)\n    openingBrackets = append(openingBrackets, \"<\")\n\
    \    closingBrackets = append(closingBrackets, \">\")\n    for _, openingBracket\
    \ := range openingBrackets {\n        for _, closingBracket := range closingBrackets\
    \ {\n            if openingBracket == closingBracket {\n                continue\n\
    \            }\n            if openingBracket == brackets[len(brackets)-len(closingBrackets)]\
    \ {\n                brackets = brackets[:len(brackets)-len(closingBrackets)]\n\
    \                brackets = brackets + openingBracket\n                brackets\
    \ = brackets + closingBracket\n                return correct_bracketing(brackets)\n\
    \            }\n        }\n    }\n    return false\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6joa6_x__test.go:20:34: invalid operation: openingBracket == brackets[len(brackets)
    - len(closingBrackets)] (mismatched types string and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075147
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := []string{\"<\", \"{\", \"(\"}\n    closingBrackets\
    \ := []string{\">\", \"}\", \"}\"}\n    for _, openingBracket := range openingBrackets\
    \ {\n        for _, closingBracket := range closingBrackets {\n            if\
    \ openingBracket == closingBracket {\n                continue\n            }\n\
    \            if brackets[len(brackets)-len(closingBracket):len(brackets)] == openingBracket\
    \ {\n                return false\n            }\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__4\
    \ (0.00s)\n        tmpyts7hn1k_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__5 (0.00s)\n        tmpyts7hn1k_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCorrect_Bracketing/test_num__8\
    \ (0.00s)\n        tmpyts7hn1k_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__9 (0.00s)\n        tmpyts7hn1k_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCorrect_Bracketing/test_num__10\
    \ (0.00s)\n        tmpyts7hn1k_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__11 (0.00s)\n        tmpyts7hn1k_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075148
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    for _, char\
    \ := range brackets {\n        if char != \">\" && char != \"<\" {\n         \
    \   return false\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjwny22mj_test.go:13:20: invalid operation: char != ">" (mismatched types
    rune and untyped string)

    /tmp/tmpjwny22mj_test.go:13:35: invalid operation: char != "<" (mismatched types
    rune and untyped string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075147
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else if c == '>' {\n\
    \            closingBrackets[c] = true\n        }\n    }\n    for c := range openingBrackets\
    \ {\n        if !closingBrackets[c] {\n            return false\n        }\n \
    \   }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6mbj2ddv_test.go:15:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmp6mbj2ddv_test.go:17:29: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075147
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := []string{\"<\", \"{\", \"(\"}\n    closingBrackets\
    \ := []string{\">\", \"}\", \"}\"}\n    for _, openingBracket := range openingBrackets\
    \ {\n        for _, closingBracket := range closingBrackets {\n            if\
    \ openingBracket == closingBracket {\n                continue\n            }\n\
    \            if brackets == openingBracket + closingBracket {\n              \
    \  return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__1\
    \ (0.00s)\n        tmpqg2fcoir_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__2 (0.00s)\n        tmpqg2fcoir_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCorrect_Bracketing/test_num__3\
    \ (0.00s)\n        tmpqg2fcoir_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075148
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := []string{\"<\", \"{\", \"(\"}\n    closingBrackets\
    \ := []string{\">\", \"}\", \"}\"}\n    openingBracketsCount := 0\n    closingBracketsCount\
    \ := 0\n    for _, char := range brackets {\n        if char == openingBrackets[openingBracketsCount]\
    \ {\n            openingBracketsCount++\n        } else if char == closingBrackets[closingBracketsCount]\
    \ {\n            closingBracketsCount++\n        } else {\n            return\
    \ false\n        }\n    }\n    return openingBracketsCount == closingBracketsCount\n\
    }\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz9hpcih8_test.go:16:20: invalid operation: char == openingBrackets[openingBracketsCount]
    (mismatched types rune and string)

    /tmp/tmpz9hpcih8_test.go:18:27: invalid operation: char == closingBrackets[closingBracketsCount]
    (mismatched types rune and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075147
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = strings.TrimSpace(brackets)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\"\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp57njxzad_test.go:47:49: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075146
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = strings.TrimSpace(brackets)\n    if len(brackets)\
    \ == 0 {\n        return false\n    }\n    openingBrackets := strings.Split(brackets,\
    \ \"<\")\n    closingBrackets := strings.Split(brackets, \">\")\n    if len(openingBrackets)\
    \ != len(closingBrackets) {\n        return false\n    }\n    for i := 0; i <\
    \ len(openingBrackets); i++ {\n        if openingBrackets[i] != closingBrackets[i]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbeok1jxk_test.go:11:16: undefined: strings

    /tmp/tmpbeok1jxk_test.go:15:24: undefined: strings

    /tmp/tmpbeok1jxk_test.go:16:24: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075148
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(bracket\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpu6wzf174_test.go:47:39: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075146
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else {\n           \
    \ closingBrackets[c] = true\n        }\n    }\n    for _, c := range brackets\
    \ {\n        if !openingBrackets[c] {\n            return false\n        }\n \
    \   }\n    for _, c := range brackets {\n        if !closingBrackets[c] {\n  \
    \          return false\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpei_r1l99_test.go:15:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpei_r1l99_test.go:17:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpei_r1l99_test.go:21:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpei_r1l99_test.go:26:29: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075147
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = strings.TrimSpace(brackets)\n    openingBrackets\
    \ := strings.Split(brackets, \"<\")\n    closingBrackets := strings.Split(brackets,\
    \ \">\")\n    if len(openingBrackets) != len(closingBrackets) {\n        return\
    \ false\n    }\n    for i := range openingBrackets {\n        if openingBrackets[i]\
    \ != closingBrackets[i] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplja2kg8k_test.go:11:16: undefined: strings

    /tmp/tmplja2kg8k_test.go:12:24: undefined: strings

    /tmp/tmplja2kg8k_test.go:13:24: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075148
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = strings.TrimSpace(brackets)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\"\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp57njxzad_test.go:47:49: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075146
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make([]string, 0)\n    closingBrackets\
    \ := make([]string, 0)\n    for _, char := range brackets {\n        if char ==\
    \ '<' {\n            openingBrackets = append(openingBrackets, char)\n       \
    \ } else {\n            closingBrackets = append(closingBrackets, char)\n    \
    \    }\n    }\n    return len(openingBrackets) == len(closingBrackets)\n}\n\n\
    func TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5rufzxas_test.go:15:55: cannot use char (variable of type rune) as type
    string in argument to append

    /tmp/tmp5rufzxas_test.go:17:55: cannot use char (variable of type rune) as type
    string in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075148
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := []string{\"<\", \"{\", \"(\"}\n    closingBrackets\
    \ := []string{\">\", \"}\", \"}\"}\n    for _, openingBracket := range openingBrackets\
    \ {\n        for _, closingBracket := range closingBrackets {\n            if\
    \ openingBracket == closingBracket {\n                continue\n            }\n\
    \            if brackets[len(brackets)-len(closingBracket):len(brackets)] == openingBracket\
    \ {\n                return false\n            }\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__4\
    \ (0.00s)\n        tmpyts7hn1k_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__5 (0.00s)\n        tmpyts7hn1k_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCorrect_Bracketing/test_num__8\
    \ (0.00s)\n        tmpyts7hn1k_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__9 (0.00s)\n        tmpyts7hn1k_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCorrect_Bracketing/test_num__10\
    \ (0.00s)\n        tmpyts7hn1k_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__11 (0.00s)\n        tmpyts7hn1k_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075148
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    for _, c :=\
    \ range brackets {\n        if c != \">\" && c != \"<\" {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwgszujbp_test.go:13:17: invalid operation: c != ">" (mismatched types
    rune and untyped string)

    /tmp/tmpwgszujbp_test.go:13:29: invalid operation: c != "<" (mismatched types
    rune and untyped string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075147
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else {\n           \
    \ closingBrackets[c] = true\n        }\n    }\n    for c := range openingBrackets\
    \ {\n        if !closingBrackets[c] {\n            return false\n        }\n \
    \   }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsyoyysms_test.go:15:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpsyoyysms_test.go:17:29: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075147
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := []string{\"<\", \"{\", \"(\"}\n    closingBrackets\
    \ := []string{\">\", \"}\", \"}\"}\n    for _, openingBracket := range openingBrackets\
    \ {\n        for _, closingBracket := range closingBrackets {\n            if\
    \ openingBracket != closingBracket {\n                fmt.Printf(\"%c %c %c\\\
    n\", openingBracket, closingBracket, openingBracket == closingBracket)\n     \
    \       }\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmpvpncz99g_test.go:16:17: fmt.Printf format %c has arg openingBracket of
    wrong type string

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075149
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := []string{\"<\", \"{\", \"(\"}\n    closingBrackets\
    \ := []string{\">\", \"}\", \"}\"}\n    for _, openingBracket := range openingBrackets\
    \ {\n        for _, closingBracket := range closingBrackets {\n            if\
    \ openingBracket != closingBracket {\n                if brackets[len(brackets)-len(closingBracket):len(brackets)]\
    \ == closingBracket {\n                    return true\n                }\n  \
    \          }\n        }\n    }\n    return false\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__4\
    \ (0.00s)\n        tmpm9_x13r9_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__5 (0.00s)\n        tmpm9_x13r9_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCorrect_Bracketing/test_num__8\
    \ (0.00s)\n        tmpm9_x13r9_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__9 (0.00s)\n        tmpm9_x13r9_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCorrect_Bracketing/test_num__10\
    \ (0.00s)\n        tmpm9_x13r9_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__11 (0.00s)\n        tmpm9_x13r9_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075148
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = strings.TrimSpace(brackets)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\"\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp57njxzad_test.go:47:49: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075146
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = strings.TrimSpace(brackets)\n    openingBrackets\
    \ := strings.Split(brackets, \">\")\n    closingBrackets := strings.Split(brackets,\
    \ \"<\")\n    for _, openingBracket := range openingBrackets {\n        if closingBrackets[len(closingBrackets)-1]\
    \ != openingBracket {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp73x8wajw_test.go:11:16: undefined: strings

    /tmp/tmp73x8wajw_test.go:12:24: undefined: strings

    /tmp/tmp73x8wajw_test.go:13:24: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075148
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := []string{\"<\", \"{\", \"(\"}\n    closingBrackets\
    \ := []string{\">\", \"}\", \"}\"}\n    openingBracketsCount := 0\n    closingBracketsCount\
    \ := 0\n    for _, c := range brackets {\n        if openingBrackets[openingBracketsCount]\
    \ == c {\n            openingBracketsCount++\n        } else {\n            openingBracketsCount\
    \ = 0\n        }\n        if closingBrackets[closingBracketsCount] == c {\n  \
    \          closingBracketsCount++\n        } else {\n            closingBracketsCount\
    \ = 0\n        }\n        if openingBracketsCount != closingBracketsCount {\n\
    \            return false\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpook4fr17_test.go:16:53: invalid operation: openingBrackets[openingBracketsCount]
    == c (mismatched types string and rune)

    /tmp/tmpook4fr17_test.go:21:53: invalid operation: closingBrackets[closingBracketsCount]
    == c (mismatched types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075149
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, char := range brackets {\n        if char\
    \ == \"<\" {\n            openingBrackets[char] = true\n        } else {\n   \
    \         closingBrackets[char] = true\n        }\n    }\n    for _, char := range\
    \ brackets {\n        if !openingBrackets[char] {\n            return false\n\
    \        }\n    }\n    for _, char := range brackets {\n        if !closingBrackets[char]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5ow30o8n_test.go:14:20: invalid operation: char == "<" (mismatched types
    rune and untyped string)

    /tmp/tmp5ow30o8n_test.go:15:29: cannot use char (variable of type rune) as type
    string in map index

    /tmp/tmp5ow30o8n_test.go:17:29: cannot use char (variable of type rune) as type
    string in map index

    /tmp/tmp5ow30o8n_test.go:21:29: cannot use char (variable of type rune) as type
    string in map index

    /tmp/tmp5ow30o8n_test.go:26:29: cannot use char (variable of type rune) as type
    string in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075147
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    openingBrackets\
    \ := make(map[string]bool)\n    closingBrackets := make(map[string]bool)\n   \
    \ for _, c := range brackets {\n        if c == '<' {\n            openingBrackets[c]\
    \ = true\n        } else {\n            closingBrackets[c] = true\n        }\n\
    \    }\n    for c := range openingBrackets {\n        if !closingBrackets[c] {\n\
    \            return false\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnxwi0e7h_test.go:16:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpnxwi0e7h_test.go:18:29: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075150
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = strings.TrimSpace(brackets)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\"\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp57njxzad_test.go:47:49: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075146
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := []string{\"<\", \"{\", \"(\"}\n    closingBrackets\
    \ := []string{\">\", \"}\", \"}\"}\n    for _, openingBracket := range openingBrackets\
    \ {\n        for _, closingBracket := range closingBrackets {\n            if\
    \ openingBracket == closingBracket {\n                continue\n            }\n\
    \            if brackets == openingBracket+closingBracket {\n                return\
    \ true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__1\
    \ (0.00s)\n        tmp62oizyyn_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__2 (0.00s)\n        tmp62oizyyn_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCorrect_Bracketing/test_num__3\
    \ (0.00s)\n        tmp62oizyyn_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075150
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := []string{\"<\", \"{\", \"(\"}\n    closingBrackets\
    \ := []string{\">\", \"}\", \"}\"}\n    for _, openingBracket := range openingBrackets\
    \ {\n        for _, closingBracket := range closingBrackets {\n            if\
    \ openingBracket != closingBracket {\n                if brackets[len(brackets)-len(closingBracket):len(brackets)]\
    \ == closingBracket {\n                    return true\n                }\n  \
    \          }\n        }\n    }\n    return false\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__4\
    \ (0.00s)\n        tmpm9_x13r9_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__5 (0.00s)\n        tmpm9_x13r9_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCorrect_Bracketing/test_num__8\
    \ (0.00s)\n        tmpm9_x13r9_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__9 (0.00s)\n        tmpm9_x13r9_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCorrect_Bracketing/test_num__10\
    \ (0.00s)\n        tmpm9_x13r9_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__11 (0.00s)\n        tmpm9_x13r9_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075148
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var opening = false\n    var closing = false\n    for _,\
    \ c := range brackets {\n        if c == '<' {\n            opening = true\n \
    \       }\n        if c == '>' {\n            closing = true\n        }\n    }\n\
    \    return opening && closing\n}\n\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__4\
    \ (0.00s)\n        tmp92hbiy4k_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__5 (0.00s)\n        tmp92hbiy4k_test.go:48:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCorrect_Bracketing/test_num__9\
    \ (0.00s)\n        tmp92hbiy4k_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__10 (0.00s)\n        tmp92hbiy4k_test.go:48:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCorrect_Bracketing/test_num__11\
    \ (0.00s)\n        tmp92hbiy4k_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075150
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := []string{\"<\", \"{\", \"(\"}\n    closingBrackets\
    \ := []string{\">\", \"}\", \"}\"}\n    for _, openingBracket := range openingBrackets\
    \ {\n        for _, closingBracket := range closingBrackets {\n            if\
    \ openingBracket == closingBracket {\n                continue\n            }\n\
    \            if brackets[len(brackets)-len(closingBracket):len(brackets)] == openingBracket\
    \ {\n                return false\n            }\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__4\
    \ (0.00s)\n        tmpyts7hn1k_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__5 (0.00s)\n        tmpyts7hn1k_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCorrect_Bracketing/test_num__8\
    \ (0.00s)\n        tmpyts7hn1k_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__9 (0.00s)\n        tmpyts7hn1k_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCorrect_Bracketing/test_num__10\
    \ (0.00s)\n        tmpyts7hn1k_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__11 (0.00s)\n        tmpyts7hn1k_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075148
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    brackets =\
    \ strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\"\nfunc\
    \ TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpk8fm6x1n_test.go:47:49: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075146
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else {\n           \
    \ closingBrackets[c] = true\n        }\n    }\n    for _, c := range brackets\
    \ {\n        if !openingBrackets[c] {\n            return false\n        }\n \
    \       if !closingBrackets[c] {\n            return false\n        }\n    }\n\
    \    return true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphgla5bg1_test.go:15:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmphgla5bg1_test.go:17:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmphgla5bg1_test.go:21:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmphgla5bg1_test.go:24:29: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075150
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else if c == '>' {\n\
    \            closingBrackets[c] = true\n        }\n    }\n    for c := range openingBrackets\
    \ {\n        if !closingBrackets[c] {\n            return false\n        }\n \
    \   }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6mbj2ddv_test.go:15:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmp6mbj2ddv_test.go:17:29: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075147
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = strings.TrimSpace(brackets)\n    openingBrackets\
    \ := strings.Split(brackets, \">\")\n    closingBrackets := strings.Split(brackets,\
    \ \"<\")\n    if len(openingBrackets) != len(closingBrackets) {\n        return\
    \ false\n    }\n    for i := 0; i < len(openingBrackets); i++ {\n        if openingBrackets[i]\
    \ != closingBrackets[i] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppn28ulu7_test.go:11:16: undefined: strings

    /tmp/tmppn28ulu7_test.go:12:24: undefined: strings

    /tmp/tmppn28ulu7_test.go:13:24: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075150
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = strings.TrimSpace(brackets)\n    if len(brackets)\
    \ == 0 {\n        return false\n    }\n    brackets = brackets[1 : len(brackets)-1]\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.TrimSpace(brackets)\n\
    \    brackets = strings.Trim(brackets)\n    brackets = strings.Trim(brackets)\n\
    \    brackets = strings.Trim(brackets)\n    brackets = strings.Trim(brackets)\n\
    \    brackets = strings.Trim(brackets)\n    brackets = strings.Trim(brackets)\n\
    \    brackets = strings.Trim(brackets)\n    brackets = strings.Trim(brackets)\n\
    \    brackets = strings.Trim(brackets)\n    brackets = strings.Trim(brackets)\n\
    \    brackets = strings.Trim(brackets)\n    brackets = strings.Trim(brackets)\n\
    \    brackets = strings.Trim(brackets)\n    brackets = strings.Trim(brackets)\n\
    \    brackets = strings.Trim(brackets)\n    brackets = strings.Trim(brackets)\n\
    \    brackets = strings.Trim(brackets)\n    brackets = strings.Trim(brackets)\n\
    \    brackets = strings.Trim(brackets)\n    brackets = strings.Trim(brackets)\n\
    \    brackets = strings.Trim(brackets)\n    brackets = strings.Trim(brackets)\n\
    \    brackets = strings.Trim(brackets)\n    brackets = strings.Trim(brackets)\n\
    \    brackets = strings.Trim(brackets)\n    brackets = strings.Trim(brackets)\n\
    \    brackets = strings.Trim(brackets)\n    brackets = strings.Trim(brackets)\n\
    \    brackets = strings.Trim(brackets)\n    brackets = strings.Trim(brackets)\n\
    \    brackets = strings.Trim(brackets)\n    brackets = strings.Trim(brackets)\n\
    \    brackets = strings.Trim(brackets)\n    brackets = strings.Trim(brackets)\n\
    \    brackets = strings.Trim(brackets)\n    brackets = strings.Trim(brackets)\n\
    \    brackets = strings.Trim(brackets)\n    brackets = strings.Trim\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpdzj7pe2u_test.go:59:6: expected ''('', found TestCorrect_Bracketing

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075149
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := []string{\"<\", \"{\", \"(\"}\n    closingBrackets\
    \ := []string{\">\", \"}\", \"}\"}\n    openingBracketsCount := 0\n    closingBracketsCount\
    \ := 0\n    for _, c := range brackets {\n        if openingBrackets[openingBracketsCount]\
    \ == c {\n            openingBracketsCount++\n        } else {\n            if\
    \ openingBracketsCount > 0 {\n                return false\n            }\n  \
    \          openingBracketsCount = 1\n        }\n        if closingBrackets[closingBracketsCount]\
    \ == c {\n            closingBracketsCount++\n        } else {\n            if\
    \ closingBracketsCount > 0 {\n                return false\n            }\n  \
    \          closingBracketsCount = 1\n        }\n    }\n    if openingBracketsCount\
    \ != closingBracketsCount {\n        return false\n    }\n    return true\n}\n\
    \nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuidwcczn_test.go:16:53: invalid operation: openingBrackets[openingBracketsCount]
    == c (mismatched types string and rune)

    /tmp/tmpuidwcczn_test.go:24:53: invalid operation: closingBrackets[closingBracketsCount]
    == c (mismatched types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075150
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := []string{\"<\", \"{\", \"(\"}\n    closingBrackets\
    \ := []string{\">\", \"}\", \"}\"}\n    for _, openingBracket := range openingBrackets\
    \ {\n        for _, closingBracket := range closingBrackets {\n            if\
    \ openingBracket == closingBracket {\n                continue\n            }\n\
    \            if brackets[len(brackets)-len(closingBracket):len(brackets)] == openingBracket\
    \ {\n                return false\n            }\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__4\
    \ (0.00s)\n        tmpyts7hn1k_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__5 (0.00s)\n        tmpyts7hn1k_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCorrect_Bracketing/test_num__8\
    \ (0.00s)\n        tmpyts7hn1k_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__9 (0.00s)\n        tmpyts7hn1k_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCorrect_Bracketing/test_num__10\
    \ (0.00s)\n        tmpyts7hn1k_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__11 (0.00s)\n        tmpyts7hn1k_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075148
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := []string{\"<\", \"{\", \"(\"}\n    closingBrackets\
    \ := []string{\">\", \"}\", \"}\"}\n    for _, openingBracket := range openingBrackets\
    \ {\n        for _, closingBracket := range closingBrackets {\n            if\
    \ openingBracket == closingBracket {\n                continue\n            }\n\
    \            if brackets[len(brackets)-len(closingBracket):len(brackets)] == openingBracket\
    \ {\n                return false\n            }\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__4\
    \ (0.00s)\n        tmpyts7hn1k_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__5 (0.00s)\n        tmpyts7hn1k_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCorrect_Bracketing/test_num__8\
    \ (0.00s)\n        tmpyts7hn1k_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__9 (0.00s)\n        tmpyts7hn1k_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCorrect_Bracketing/test_num__10\
    \ (0.00s)\n        tmpyts7hn1k_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__11 (0.00s)\n        tmpyts7hn1k_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075148
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else {\n           \
    \ closingBrackets[c] = true\n        }\n    }\n    for c := range openingBrackets\
    \ {\n        if !closingBrackets[c] {\n            return false\n        }\n \
    \   }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsyoyysms_test.go:15:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpsyoyysms_test.go:17:29: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075147
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else {\n           \
    \ closingBrackets[c] = true\n        }\n    }\n    for c := range openingBrackets\
    \ {\n        if !closingBrackets[c] {\n            return false\n        }\n \
    \   }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsyoyysms_test.go:15:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpsyoyysms_test.go:17:29: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075147
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := []string{\"<\", \"{\", \"(\"}\n    closingBrackets\
    \ := []string{\">\", \"}\", \"}\"}\n    for _, openingBracket := range openingBrackets\
    \ {\n        for _, closingBracket := range closingBrackets {\n            if\
    \ openingBracket == closingBracket {\n                continue\n            }\n\
    \            if brackets == openingBracket+closingBracket {\n                return\
    \ true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__1\
    \ (0.00s)\n        tmp62oizyyn_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__2 (0.00s)\n        tmp62oizyyn_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCorrect_Bracketing/test_num__3\
    \ (0.00s)\n        tmp62oizyyn_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075150
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[rune]bool)\n    closingBrackets\
    \ := make(map[rune]bool)\n    for _, r := range brackets {\n        if r == '<'\
    \ {\n            openingBrackets[r] = true\n        } else {\n            closingBrackets[r]\
    \ = true\n        }\n    }\n    for _, r := range brackets {\n        if !openingBrackets[r]\
    \ {\n            return false\n        }\n    }\n    for _, r := range brackets\
    \ {\n        if !closingBrackets[r] {\n            return false\n        }\n \
    \   }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__0\
    \ (0.00s)\n        tmpwob2q6up_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__1 (0.00s)\n        tmpwob2q6up_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCorrect_Bracketing/test_num__2\
    \ (0.00s)\n        tmpwob2q6up_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__3 (0.00s)\n        tmpwob2q6up_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075150
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := []string{\"<\", \"{\", \"(\"}\n    closingBrackets\
    \ := []string{\">\", \"}\", \"}\"}\n    for _, openingBracket := range openingBrackets\
    \ {\n        for _, closingBracket := range closingBrackets {\n            if\
    \ openingBracket == closingBracket {\n                continue\n            }\n\
    \            if openingBracket == brackets[len(brackets)-len(closingBracket):]\
    \ {\n                return true\n            }\n        }\n    }\n    return\
    \ false\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__0\
    \ (0.00s)\n        tmpb7a_c7g1_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__1 (0.00s)\n        tmpb7a_c7g1_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCorrect_Bracketing/test_num__2\
    \ (0.00s)\n        tmpb7a_c7g1_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__3 (0.00s)\n        tmpb7a_c7g1_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCorrect_Bracketing/test_num__6\
    \ (0.00s)\n        tmpb7a_c7g1_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__7 (0.00s)\n        tmpb7a_c7g1_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075150
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = strings.TrimSpace(brackets)\n    openingBrackets\
    \ := strings.Split(brackets, \">\")\n    closingBrackets := strings.Split(brackets,\
    \ \"<\")\n    if len(openingBrackets) != len(closingBrackets) {\n        return\
    \ false\n    }\n    for i := 0; i < len(openingBrackets); i++ {\n        if openingBrackets[i]\
    \ != closingBrackets[i] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppn28ulu7_test.go:11:16: undefined: strings

    /tmp/tmppn28ulu7_test.go:12:24: undefined: strings

    /tmp/tmppn28ulu7_test.go:13:24: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075150
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    openingBrackets\
    \ := []string{\"<\", \"{\", \"(\"}\n    closingBrackets := []string{\">\", \"\
    }\", \"}\"}\n    for _, openingBracket := range openingBrackets {\n        for\
    \ _, closingBracket := range closingBrackets {\n            if openingBracket\
    \ == closingBracket {\n                continue\n            }\n            if\
    \ brackets[len(brackets)-1-len(closingBracket):len(brackets)-1] == openingBracket\
    \ {\n                brackets = brackets[:len(brackets)-1] + closingBracket +\
    \ brackets[len(brackets)-1-len(closingBracket):]\n                return correct_bracketing(brackets)\n\
    \            }\n        }\n    }\n    return false\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [:-1] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [:-1]\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513640, 0xc0001ce000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513640,\
    \ 0xc0001ce000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.correct_bracketing({0x51e1ec?, 0x2})\n\t\
    /tmp/tmph2hoqnx0_test.go:19 +0x390\ncommand-line-arguments_test.TestCorrect_Bracketing(0x0?)\n\
    \t/tmp/tmph2hoqnx0_test.go:35 +0x4a\ntesting.tRunner(0xc00019b040, 0x528fc8)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075150
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    for _, c :=\
    \ range brackets {\n        if c != \">\" && c != \"<\" {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwgszujbp_test.go:13:17: invalid operation: c != ">" (mismatched types
    rune and untyped string)

    /tmp/tmpwgszujbp_test.go:13:29: invalid operation: c != "<" (mismatched types
    rune and untyped string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075147
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := []string{\"<\", \"{\", \"(\"}\n    closingBrackets\
    \ := []string{\">\", \"}\", \"}\"}\n    for _, openingBracket := range openingBrackets\
    \ {\n        for _, closingBracket := range closingBrackets {\n            if\
    \ openingBracket == closingBracket {\n                continue\n            }\n\
    \            if brackets == openingBracket + closingBracket {\n              \
    \  return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__1\
    \ (0.00s)\n        tmpqg2fcoir_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__2 (0.00s)\n        tmpqg2fcoir_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCorrect_Bracketing/test_num__3\
    \ (0.00s)\n        tmpqg2fcoir_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075148
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make([]string, 0)\n    closingBrackets\
    \ := make([]string, 0)\n    for _, char := range brackets {\n        if char ==\
    \ '<' {\n            openingBrackets = append(openingBrackets, char)\n       \
    \ } else {\n            closingBrackets = append(closingBrackets, char)\n    \
    \    }\n    }\n    if len(openingBrackets) != len(closingBrackets) {\n       \
    \ return false\n    }\n    for _, openingBracket := range openingBrackets {\n\
    \        closingBracket := closingBrackets[len(openingBrackets)]\n        if openingBracket\
    \ != closingBracket {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp23hen35j_test.go:15:55: cannot use char (variable of type rune) as type
    string in argument to append

    /tmp/tmp23hen35j_test.go:17:55: cannot use char (variable of type rune) as type
    string in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075150
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := []string{\"<\", \"{\", \"(\"}\n    closingBrackets\
    \ := []string{\">\", \"}\", \"}\"}\n    for _, openingBracket := range openingBrackets\
    \ {\n        for _, closingBracket := range closingBrackets {\n            if\
    \ openingBracket != closingBracket {\n                if brackets[len(brackets)-len(closingBracket):len(brackets)]\
    \ == openingBracket {\n                    return true\n                }\n  \
    \          }\n        }\n    }\n    return false\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__0\
    \ (0.00s)\n        tmpg1k3rput_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__1 (0.00s)\n        tmpg1k3rput_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCorrect_Bracketing/test_num__2\
    \ (0.00s)\n        tmpg1k3rput_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__3 (0.00s)\n        tmpg1k3rput_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCorrect_Bracketing/test_num__6\
    \ (0.00s)\n        tmpg1k3rput_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__7 (0.00s)\n        tmpg1k3rput_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075150
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(bracket\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpu6wzf174_test.go:47:39: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075146
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make([]string, 0)\n    closingBrackets\
    \ := make([]string, 0)\n    for _, c := range brackets {\n        if c == '<'\
    \ {\n            openingBrackets = append(openingBrackets, c)\n        } else\
    \ {\n            closingBrackets = append(closingBrackets, c)\n        }\n   \
    \ }\n    if len(openingBrackets) != len(closingBrackets) {\n        return false\n\
    \    }\n    for i := 0; i < len(openingBrackets); i++ {\n        if openingBrackets[i]\
    \ != closingBrackets[i] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv0bhd2fm_test.go:15:55: cannot use c (variable of type rune) as type string
    in argument to append

    /tmp/tmpv0bhd2fm_test.go:17:55: cannot use c (variable of type rune) as type string
    in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075150
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := []string{\"<\", \"{\", \"(\"}\n    closingBrackets\
    \ := []string{\">\", \"}\", \"}\"}\n    for _, openingBracket := range openingBrackets\
    \ {\n        for _, closingBracket := range closingBrackets {\n            if\
    \ openingBracket == closingBracket {\n                continue\n            }\n\
    \            if brackets == openingBracket + closingBracket {\n              \
    \  return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__1\
    \ (0.00s)\n        tmpqg2fcoir_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__2 (0.00s)\n        tmpqg2fcoir_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCorrect_Bracketing/test_num__3\
    \ (0.00s)\n        tmpqg2fcoir_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075148
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else {\n           \
    \ closingBrackets[c] = true\n        }\n    }\n    for _, c := range brackets\
    \ {\n        if openingBrackets[c] == false {\n            return false\n    \
    \    }\n        if closingBrackets[c] == false {\n            return false\n \
    \       }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3q37snmm_test.go:15:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmp3q37snmm_test.go:17:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmp3q37snmm_test.go:21:28: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmp3q37snmm_test.go:24:28: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075147
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    opening, closing := brackets[:len(brackets)-1], brackets[len(brackets)-1:]\n\
    \    for _, c := range opening {\n        if c != closing[0] {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_z4o6rl8_test.go:13:17: invalid operation: c != closing[0] (mismatched
    types rune and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075150
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = strings.TrimSpace(brackets)\n    if len(brackets)\
    \ == 0 {\n        return false\n    }\n    brackets = brackets[1 : len(brackets)-1]\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.\n\
    func TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcpnlteao_test.go:51:1: expected selector or type assertion, found ''func''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075149
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var openingBrackets []string\n    var closingBrackets []string\n\
    \    for _, c := range brackets {\n        if c == '<' {\n            openingBrackets\
    \ = append(openingBrackets, c)\n        } else {\n            closingBrackets\
    \ = append(closingBrackets, c)\n        }\n    }\n    if len(openingBrackets)\
    \ != len(closingBrackets) {\n        return false\n    }\n    for i := 0; i <\
    \ len(openingBrackets); i++ {\n        if openingBrackets[i] != closingBrackets[i]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp7kln8nl_test.go:15:55: cannot use c (variable of type rune) as type string
    in argument to append

    /tmp/tmpp7kln8nl_test.go:17:55: cannot use c (variable of type rune) as type string
    in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075150
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := []string{\"<\", \"{\", \"(\"}\n    closingBrackets\
    \ := []string{\">\", \"}\", \"}\"}\n    for _, openingBracket := range openingBrackets\
    \ {\n        for _, closingBracket := range closingBrackets {\n            if\
    \ openingBracket == closingBracket {\n                continue\n            }\n\
    \            if openingBracket == brackets[len(brackets)-len(closingBracket)]\
    \ {\n                return true\n            }\n        }\n    }\n    return\
    \ false\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_8ms29rn_test.go:18:34: invalid operation: openingBracket == brackets[len(brackets)
    - len(closingBracket)] (mismatched types string and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075150
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = strings.TrimSpace(brackets)\n    openingBrackets\
    \ := strings.Split(brackets, \">\")\n    closingBrackets := strings.Split(brackets,\
    \ \"<\")\n    if len(openingBrackets) != len(closingBrackets) {\n        return\
    \ false\n    }\n    for i := range openingBrackets {\n        if openingBrackets[i]\
    \ != closingBrackets[i] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphid5vm5j_test.go:11:16: undefined: strings

    /tmp/tmphid5vm5j_test.go:12:24: undefined: strings

    /tmp/tmphid5vm5j_test.go:13:24: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075151
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, char := range brackets {\n        if char\
    \ == '<' {\n            openingBrackets[char] = true\n        } else {\n     \
    \       closingBrackets[char] = true\n        }\n    }\n    for _, char := range\
    \ brackets {\n        if !openingBrackets[char] {\n            return false\n\
    \        }\n    }\n    for _, char := range brackets {\n        if !closingBrackets[char]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa1i2zdyj_test.go:15:29: cannot use char (variable of type rune) as type
    string in map index

    /tmp/tmpa1i2zdyj_test.go:17:29: cannot use char (variable of type rune) as type
    string in map index

    /tmp/tmpa1i2zdyj_test.go:21:29: cannot use char (variable of type rune) as type
    string in map index

    /tmp/tmpa1i2zdyj_test.go:26:29: cannot use char (variable of type rune) as type
    string in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075151
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := []string{\"<\", \"{\", \"(\"}\n    closingBrackets\
    \ := []string{\">\", \"}\", \"}\"}\n    for _, openingBracket := range openingBrackets\
    \ {\n        for _, closingBracket := range closingBrackets {\n            if\
    \ openingBracket == closingBracket {\n                continue\n            }\n\
    \            if brackets[len(brackets)-len(closingBracket):len(brackets)] == openingBracket\
    \ {\n                return false\n            }\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__4\
    \ (0.00s)\n        tmpyts7hn1k_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__5 (0.00s)\n        tmpyts7hn1k_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCorrect_Bracketing/test_num__8\
    \ (0.00s)\n        tmpyts7hn1k_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__9 (0.00s)\n        tmpyts7hn1k_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCorrect_Bracketing/test_num__10\
    \ (0.00s)\n        tmpyts7hn1k_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__11 (0.00s)\n        tmpyts7hn1k_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075148
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    openingBrackets\
    \ := make([]string, 0)\n    closingBrackets := make([]string, 0)\n    for _, char\
    \ := range brackets {\n        if char == '<' {\n            openingBrackets =\
    \ append(openingBrackets, char)\n        } else {\n            closingBrackets\
    \ = append(closingBrackets, char)\n        }\n    }\n    if len(openingBrackets)\
    \ != len(closingBrackets) {\n        return false\n    }\n    for _, openingBracket\
    \ := range openingBrackets {\n        found := false\n        for _, closingBracket\
    \ := range closingBrackets {\n            if openingBracket == closingBracket\
    \ {\n                found = true\n                break\n            }\n    \
    \    }\n        if !found {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbdzhzzdf_test.go:16:55: cannot use char (variable of type rune) as type
    string in argument to append

    /tmp/tmpbdzhzzdf_test.go:18:55: cannot use char (variable of type rune) as type
    string in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075151
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := []string{\"<\", \"{\", \"(\"}\n    closingBrackets\
    \ := []string{\">\", \"}\", \"}\"}\n    for _, openingBracket := range openingBrackets\
    \ {\n        for _, closingBracket := range closingBrackets {\n            if\
    \ openingBracket != closingBracket {\n                if brackets[len(brackets)-len(closingBracket):len(brackets)]\
    \ == closingBracket {\n                    return true\n                }\n  \
    \          }\n        }\n    }\n    return false\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__4\
    \ (0.00s)\n        tmpm9_x13r9_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__5 (0.00s)\n        tmpm9_x13r9_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCorrect_Bracketing/test_num__8\
    \ (0.00s)\n        tmpm9_x13r9_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__9 (0.00s)\n        tmpm9_x13r9_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCorrect_Bracketing/test_num__10\
    \ (0.00s)\n        tmpm9_x13r9_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__11 (0.00s)\n        tmpm9_x13r9_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075148
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(bracket\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpu6wzf174_test.go:47:39: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075146
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = strings.TrimSpace(brackets)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\"\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp57njxzad_test.go:47:49: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075146
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make([]string, 0)\n    closingBrackets\
    \ := make([]string, 0)\n    for _, char := range brackets {\n        if char ==\
    \ \"<\" {\n            openingBrackets = append(openingBrackets, char)\n     \
    \   } else {\n            closingBrackets = append(closingBrackets, char)\n  \
    \      }\n    }\n    if len(openingBrackets) != len(closingBrackets) {\n     \
    \   return false\n    }\n    for i := 0; i < len(openingBrackets); i++ {\n   \
    \     if openingBrackets[i] != closingBrackets[i] {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp93x3tfb0_test.go:14:20: invalid operation: char == "<" (mismatched types
    rune and untyped string)

    /tmp/tmp93x3tfb0_test.go:15:55: cannot use char (variable of type rune) as type
    string in argument to append

    /tmp/tmp93x3tfb0_test.go:17:55: cannot use char (variable of type rune) as type
    string in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075151
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = strings.Replace(brackets, \" \", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"(\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \")\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"[\", \"\", -1)\n    brackets = strings.Replace(brackets, \"]\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"{\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"}\", \"\", -1)\n    brackets = strings.Replace(brackets, \"\\\\\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"/\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"|\", \"\", -1)\n    brackets = strings.Replace(brackets, \"-\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"=\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"?\", \"\", -1)\n    brackets = strings.Replace(brackets, \"*\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"+\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \" \", \"\", -1)\n    brackets = strings.Replace(brackets, \"!\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"$\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"#\", \"\", -1)\n    brackets = strings.Replace(brackets, \"%\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"^\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"&\", \"\", -1)\n    brackets = strings.Replace(brackets, \"*\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"(\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \")\", \"\", -1)\n    brackets = strings.Replace(brackets, \"[\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"]\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"{\", \"\", -1)\n    brackets = strings.Replace(brackets, \"}\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"\\\\\", \"\", -1)\n    brackets =\
    \ strings.Replace(brackets, \"/\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"|\", \"\", -1)\n    brackets = strings.Replace(brackets, \"-\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"=\", \"\", -1)\n    brackets = strings.Replace(bracket\n\
    func TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpsifqnmcb_test.go:47:39: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075150
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := []string{\"<\", \"{\", \"(\"}\n    closingBrackets\
    \ := []string{\">\", \"}\", \"}\"}\n    openingBracketsCount := 0\n    closingBracketsCount\
    \ := 0\n    for _, char := range brackets {\n        if char == openingBrackets[openingBracketsCount]\
    \ {\n            openingBracketsCount++\n        } else if char == closingBrackets[closingBracketsCount]\
    \ {\n            closingBracketsCount++\n        } else {\n            return\
    \ false\n        }\n    }\n    return openingBracketsCount == closingBracketsCount\n\
    }\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz9hpcih8_test.go:16:20: invalid operation: char == openingBrackets[openingBracketsCount]
    (mismatched types rune and string)

    /tmp/tmpz9hpcih8_test.go:18:27: invalid operation: char == closingBrackets[closingBracketsCount]
    (mismatched types rune and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075147
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    brackets =\
    \ strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\"\nfunc\
    \ TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpk8fm6x1n_test.go:47:49: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075146
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := []string{\"<\", \"{\", \"(\"}\n    closingBrackets\
    \ := []string{\">\", \"}\", \"}\"}\n    for _, openingBracket := range openingBrackets\
    \ {\n        for _, closingBracket := range closingBrackets {\n            if\
    \ openingBracket == closingBracket {\n                continue\n            }\n\
    \            if brackets[len(brackets)-len(closingBracket):len(brackets)] == openingBracket\
    \ {\n                return false\n            }\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__4\
    \ (0.00s)\n        tmpyts7hn1k_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__5 (0.00s)\n        tmpyts7hn1k_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCorrect_Bracketing/test_num__8\
    \ (0.00s)\n        tmpyts7hn1k_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__9 (0.00s)\n        tmpyts7hn1k_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCorrect_Bracketing/test_num__10\
    \ (0.00s)\n        tmpyts7hn1k_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__11 (0.00s)\n        tmpyts7hn1k_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075148
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = strings.TrimSpace(brackets)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"{\", -1)\n    brackets = strings.Replace(brackets, \">\", \"}\", -1)\n\
    \    brackets = strings.Replace(brackets, \"{\", \"<\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"}\", \">\", -1)\n    brackets = strings.Replace(brackets, \"<{\", \"{<\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">}\", \"}>\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<}\", \"}<\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">{\", \"{>\", -1)\n    brackets = strings.Replace(brackets, \"<{\", \"{<\"\
    , -1)\n    brackets = strings.Replace(brackets, \">}\", \"}>\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"{<\", \"<{\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"}>\", \">}\", -1)\n    brackets = strings.Replace(brackets, \"<{\", \"<{\"\
    , -1)\n    brackets = strings.Replace(brackets, \">}\", \">}\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"{>\", \">{\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"}<\", \"}<\", -1)\n    brackets = strings.Replace(brackets, \"{<\", \"<{\"\
    , -1)\n    brackets = strings.Replace(brackets, \">}\", \">}\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<{\", \"<{\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">}\", \">}\", -1)\n    brackets = strings.Replace(brackets, \"<{\", \"<{\"\
    , -1)\n    brackets = strings.Replace(brackets, \">}\", \">}\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"{<\", \"<{\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"}>\", \">}\", -1)\n    brackets = strings.Replace(brackets, \"<{\", \"<{\"\
    , -1)\n    brackets = strings.Replace(brackets, \">}\", \">}\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<{\", \"<{\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">}\", \">}\", -1)\n    brackets = strings.Replace(brackets, \"{>\", \">{\"\
    , -1)\n    brackets = strings.Replace(brackets, \"}<\", \"}<\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"{\nfunc TestCorrect_Bracketing(t *testing.T) {\n\
    \  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_sod0oo5_test.go:42:42: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075150
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := []string{\"<\", \"<=\", \"=\", \"==\"\
    , \"!=\", \"<-\", \"<->\", \"->\", \"->>\", \"->-\", \"->->\", \"->->=\", \"->-=\"\
    , \"->->=\", \"->-<\", \"->-<=\", \"->->=\", \"->-><\", \"->-><=\", \"->->-<\"\
    , \"->-><=\", \"->->-<=\", \"->->=\", \"->->=\", \"->-><=\", \"->->-<=\", \"->->=\"\
    , \"->->=\", \"->-><=\", \"->->-<=\", \"->->=\", \"->->=\", \"->-><=\", \"->->-<=\"\
    , \"->->=\", \"->->=\", \"->-><=\", \"->->-<=\", \"->->=\", \"->->=\", \"->-><=\"\
    , \"->->-<=\", \"->->=\", \"->->=\", \"->-><=\", \"->->-<=\", \"->->=\", \"->->=\"\
    , \"->-><=\", \"->-<=\", \"->=\", \"->->=\", \"->-><=\", \"->-<=\", \"->=\", \"\
    ->->=\", \"->-><=\", \"->-<=\", \"->=\", \"->=\", \"->-><=\", \"->-<=\", \"->=\"\
    , \"->=\", \"->-><=\", \"->-<=\", \"->=\", \"->=\", \"-><=\", \"->-<=\", \"->=\"\
    , \"->=\", \"-><=\", \"->-<=\", \"->=\", \"->=\", \"-><=\", \"->-<=\", \"->=\"\
    , \"->=\", \"-><=\", \"->-<=\", \"->=\", \"->=\", \"-><=\", \"->-<=\", \"->=\"\
    , \"->=\", \"-><=\", \"->-<=\", \"->=\", \"->=\", \"-><=\", \"->-<=\", \"->=\"\
    , \"->=\", \"-><=\", \"->-<=\", \"->=\", \"->=\", \"-><=\", \"->-<=\", \"->=\"\
    , \"->=\", \"-><=\", \"->-<=\", \"->=\", \"->=\", \"-><=\", \"->-<=\", \"->=\"\
    , \"->=\", \"-><=\", \"->-<=\", \"->=\", \"->=\", \"-><=\", \"->-<=\", \"->=\"\
    , \"->=\", \"-><=\", \"->-<=\", \"->=\", \"->=\", \"-><=\", \"->-<=\", \"\nfunc\
    \ TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpv5cey21e_test.go:11:1076: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075150
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = strings.TrimSpace(brackets)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\"\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp57njxzad_test.go:47:49: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075146
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var opening = false\n    var closing = false\n    for _,\
    \ c := range brackets {\n        if c == '<' {\n            opening = true\n \
    \       }\n        if c == '>' {\n            closing = true\n        }\n    }\n\
    \    return opening && closing\n}\n\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__4\
    \ (0.00s)\n        tmp92hbiy4k_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__5 (0.00s)\n        tmp92hbiy4k_test.go:48:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCorrect_Bracketing/test_num__9\
    \ (0.00s)\n        tmp92hbiy4k_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__10 (0.00s)\n        tmp92hbiy4k_test.go:48:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCorrect_Bracketing/test_num__11\
    \ (0.00s)\n        tmp92hbiy4k_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075150
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    brackets =\
    \ strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\"\nfunc\
    \ TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpk8fm6x1n_test.go:47:49: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075146
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = strings.TrimSpace(brackets)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\"\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp57njxzad_test.go:47:49: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075146
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = strings.TrimSpace(brackets)\n    if len(brackets)\
    \ < 2 {\n        return false\n    }\n    brackets = brackets[1 : len(brackets)-1]\n\
    \    for _, c := range brackets {\n        if c != \">\" && c != \"<\" {\n   \
    \         return false\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp07tc7scs_test.go:11:16: undefined: strings

    /tmp/tmp07tc7scs_test.go:17:17: invalid operation: c != ">" (mismatched types
    rune and untyped string)

    /tmp/tmp07tc7scs_test.go:17:29: invalid operation: c != "<" (mismatched types
    rune and untyped string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075152
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := []string{\"<\", \"{\", \"(\"}\n    closingBrackets\
    \ := []string{\">\", \"}\", \"}\"}\n    for _, openingBracket := range openingBrackets\
    \ {\n        for _, closingBracket := range closingBrackets {\n            if\
    \ openingBracket == closingBracket {\n                continue\n            }\n\
    \            if brackets == openingBracket + closingBracket {\n              \
    \  return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__1\
    \ (0.00s)\n        tmpqg2fcoir_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__2 (0.00s)\n        tmpqg2fcoir_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCorrect_Bracketing/test_num__3\
    \ (0.00s)\n        tmpqg2fcoir_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075148
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = strings.TrimSpace(brackets)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\"\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp57njxzad_test.go:47:49: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075146
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = strings.TrimSpace(brackets)\n    if len(brackets)\
    \ == 0 {\n        return false\n    }\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"[\", -1)\n    brackets = strings.Replace(brackets, \">\", \"]\", -1)\n\
    \    brackets = strings.Replace(brackets, \"[\", \"<\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"]\", \">\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"[\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"]\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"[\", \"<\", -1)\n    brackets = strings.Replace(brackets, \"]\", \">\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"[\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"]\", -1)\n    brackets = strings.Replace(brackets, \"[\", \"<\", -1)\n\
    \    brackets = strings.Replace(brackets, \"]\", \">\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"[\", -1)\n    brackets = strings.Replace(brackets, \">\", \"]\", -1)\n\
    \    brackets = strings.Replace(brackets, \"[\", \"<\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"]\", \">\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"[\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"]\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"[\", \"<\", -1)\n    brackets = strings.Replace(brackets, \"]\", \">\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"[\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"]\", -1)\n    brackets = strings.Replace(brackets, \"[\", \"<\", -1)\n\
    \    brackets = strings.Replace(brackets, \"]\", \">\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"[\", -1)\n    brackets = strings.Replace(brackets, \">\", \"]\", -1)\n\
    \    brackets = strings.Replace(brackets, \"[\", \"<\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"]\", \">\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"[\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"]\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"[\", \"<\", -1)\n    brackets = strings.Replace(brackets, \"]\", \">\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmptbpjco70_test.go:47:47: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075151
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else {\n           \
    \ closingBrackets[c] = true\n        }\n    }\n    for c := range openingBrackets\
    \ {\n        if !closingBrackets[c] {\n            return false\n        }\n \
    \   }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsyoyysms_test.go:15:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpsyoyysms_test.go:17:29: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075147
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make([]string, 0)\n    closingBrackets\
    \ := make([]string, 0)\n    for _, char := range brackets {\n        if char ==\
    \ '<' {\n            openingBrackets = append(openingBrackets, char)\n       \
    \ } else {\n            closingBrackets = append(closingBrackets, char)\n    \
    \    }\n    }\n    if len(openingBrackets) != len(closingBrackets) {\n       \
    \ return false\n    }\n    for _, openingBracket := range openingBrackets {\n\
    \        found := false\n        for _, closingBracket := range closingBrackets\
    \ {\n            if openingBracket == closingBracket {\n                found\
    \ = true\n                break\n            }\n        }\n        if !found {\n\
    \            return false\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0zavk2sm_test.go:15:55: cannot use char (variable of type rune) as type
    string in argument to append

    /tmp/tmp0zavk2sm_test.go:17:55: cannot use char (variable of type rune) as type
    string in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075152
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := []string{\"<\", \"{\", \"(\"}\n    closingBrackets\
    \ := []string{\">\", \"}\", \"}\"}\n    openingBracketsCount := 0\n    closingBracketsCount\
    \ := 0\n    for _, c := range brackets {\n        if openingBrackets[openingBracketsCount]\
    \ == c {\n            openingBracketsCount++\n        } else {\n            if\
    \ openingBracketsCount > 0 {\n                return false\n            }\n  \
    \          openingBracketsCount = 1\n        }\n        if closingBrackets[closingBracketsCount]\
    \ == c {\n            closingBracketsCount++\n        } else {\n            if\
    \ closingBracketsCount > 0 {\n                return false\n            }\n  \
    \          closingBracketsCount = 1\n        }\n    }\n    if openingBracketsCount\
    \ != closingBracketsCount {\n        return false\n    }\n    return true\n}\n\
    \nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuidwcczn_test.go:16:53: invalid operation: openingBrackets[openingBracketsCount]
    == c (mismatched types string and rune)

    /tmp/tmpuidwcczn_test.go:24:53: invalid operation: closingBrackets[closingBracketsCount]
    == c (mismatched types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075150
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    openingBrackets\
    \ := make([]string, 0)\n    closingBrackets := make([]string, 0)\n    for _, char\
    \ := range brackets {\n        if char == \"<\" {\n            openingBrackets\
    \ = append(openingBrackets, char)\n        } else {\n            closingBrackets\
    \ = append(closingBrackets, char)\n        }\n    }\n    if len(openingBrackets)\
    \ != len(closingBrackets) {\n        return false\n    }\n    for i := 0; i <\
    \ len(openingBrackets); i++ {\n        if openingBrackets[i] != closingBrackets[i]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxli4s2vc_test.go:15:20: invalid operation: char == "<" (mismatched types
    rune and untyped string)

    /tmp/tmpxli4s2vc_test.go:16:55: cannot use char (variable of type rune) as type
    string in argument to append

    /tmp/tmpxli4s2vc_test.go:18:55: cannot use char (variable of type rune) as type
    string in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075152
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(bracket\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpu6wzf174_test.go:47:39: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075146
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := []string{\"<\", \"{\", \"(\"}\n    closingBrackets\
    \ := []string{\">\", \"}\", \"}\"}\n    openingBracketsCount := 0\n    closingBracketsCount\
    \ := 0\n    for _, c := range brackets {\n        if openingBrackets[openingBracketsCount]\
    \ == c {\n            openingBracketsCount++\n        } else {\n            if\
    \ openingBracketsCount == len(openingBrackets)-1 {\n                return false\n\
    \            }\n            openingBracketsCount = 0\n        }\n        if closingBrackets[closingBracketsCount]\
    \ == c {\n            closingBracketsCount++\n        } else {\n            if\
    \ closingBracketsCount == len(closingBrackets)-1 {\n                return false\n\
    \            }\n            closingBracketsCount = 0\n        }\n    }\n    return\
    \ openingBracketsCount == closingBracketsCount\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7_mcdkm3_test.go:16:53: invalid operation: openingBrackets[openingBracketsCount]
    == c (mismatched types string and rune)

    /tmp/tmp7_mcdkm3_test.go:24:53: invalid operation: closingBrackets[closingBracketsCount]
    == c (mismatched types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075152
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    for _, c :=\
    \ range brackets {\n        if c != \">\" && c != \"<\" {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwgszujbp_test.go:13:17: invalid operation: c != ">" (mismatched types
    rune and untyped string)

    /tmp/tmpwgszujbp_test.go:13:29: invalid operation: c != "<" (mismatched types
    rune and untyped string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075147
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    brackets =\
    \ strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\"\nfunc\
    \ TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpk8fm6x1n_test.go:47:49: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075146
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var openingBrackets []string\n    var closingBrackets []string\n\
    \    for _, c := range brackets {\n        if c == '<' {\n            openingBrackets\
    \ = append(openingBrackets, c)\n        } else {\n            closingBrackets\
    \ = append(closingBrackets, c)\n        }\n    }\n    if len(openingBrackets)\
    \ != len(closingBrackets) {\n        return false\n    }\n    for i := 0; i <\
    \ len(openingBrackets); i++ {\n        if openingBrackets[i] != closingBrackets[i]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp7kln8nl_test.go:15:55: cannot use c (variable of type rune) as type string
    in argument to append

    /tmp/tmpp7kln8nl_test.go:17:55: cannot use c (variable of type rune) as type string
    in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075150
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var openingBrackets []string\n    var closingBrackets []string\n\
    \    for _, c := range brackets {\n        if c == '<' {\n            openingBrackets\
    \ = append(openingBrackets, c)\n        } else {\n            closingBrackets\
    \ = append(closingBrackets, c)\n        }\n    }\n    if len(openingBrackets)\
    \ != len(closingBrackets) {\n        return false\n    }\n    for i := 0; i <\
    \ len(openingBrackets); i++ {\n        if openingBrackets[i] != closingBrackets[i]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp7kln8nl_test.go:15:55: cannot use c (variable of type rune) as type string
    in argument to append

    /tmp/tmpp7kln8nl_test.go:17:55: cannot use c (variable of type rune) as type string
    in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075150
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := []string{\"<\", \"{\", \"(\"}\n    closingBrackets\
    \ := []string{\">\", \"}\", \"}\"}\n    for _, openingBracket := range openingBrackets\
    \ {\n        for _, closingBracket := range closingBrackets {\n            if\
    \ openingBracket == closingBracket {\n                continue\n            }\n\
    \            if brackets[len(brackets)-len(closingBracket):len(brackets)] == openingBracket\
    \ {\n                return false\n            }\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__4\
    \ (0.00s)\n        tmpyts7hn1k_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__5 (0.00s)\n        tmpyts7hn1k_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCorrect_Bracketing/test_num__8\
    \ (0.00s)\n        tmpyts7hn1k_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__9 (0.00s)\n        tmpyts7hn1k_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCorrect_Bracketing/test_num__10\
    \ (0.00s)\n        tmpyts7hn1k_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__11 (0.00s)\n        tmpyts7hn1k_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075148
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    for _, c :=\
    \ range brackets {\n        if c != \">\" && c != \"<\" {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwgszujbp_test.go:13:17: invalid operation: c != ">" (mismatched types
    rune and untyped string)

    /tmp/tmpwgszujbp_test.go:13:29: invalid operation: c != "<" (mismatched types
    rune and untyped string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075147
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var openingBrackets []string\n    var closingBrackets []string\n\
    \    for _, c := range brackets {\n        if c == '<' {\n            openingBrackets\
    \ = append(openingBrackets, c)\n        } else {\n            closingBrackets\
    \ = append(closingBrackets, c)\n        }\n    }\n    if len(openingBrackets)\
    \ != len(closingBrackets) {\n        return false\n    }\n    for i := 0; i <\
    \ len(openingBrackets); i++ {\n        if openingBrackets[i] != closingBrackets[i]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp7kln8nl_test.go:15:55: cannot use c (variable of type rune) as type string
    in argument to append

    /tmp/tmpp7kln8nl_test.go:17:55: cannot use c (variable of type rune) as type string
    in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075150
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    brackets =\
    \ strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\"\nfunc\
    \ TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpk8fm6x1n_test.go:47:49: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075146
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    brackets =\
    \ strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\"\nfunc\
    \ TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpk8fm6x1n_test.go:47:49: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075146
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := []string{\"<\", \"{\", \"(\"}\n    closingBrackets\
    \ := []string{\">\", \"}\", \"}\"}\n    for _, openingBracket := range openingBrackets\
    \ {\n        for _, closingBracket := range closingBrackets {\n            if\
    \ openingBracket == closingBracket {\n                continue\n            }\n\
    \            if brackets[len(brackets)-len(closingBracket):len(brackets)] == openingBracket\
    \ {\n                return false\n            }\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__4\
    \ (0.00s)\n        tmpyts7hn1k_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__5 (0.00s)\n        tmpyts7hn1k_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCorrect_Bracketing/test_num__8\
    \ (0.00s)\n        tmpyts7hn1k_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__9 (0.00s)\n        tmpyts7hn1k_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCorrect_Bracketing/test_num__10\
    \ (0.00s)\n        tmpyts7hn1k_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__11 (0.00s)\n        tmpyts7hn1k_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075148
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    brackets =\
    \ strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\"\nfunc\
    \ TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpk8fm6x1n_test.go:47:49: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075146
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    brackets =\
    \ strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\"\nfunc\
    \ TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpk8fm6x1n_test.go:47:49: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075146
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = strings.TrimSpace(brackets)\n    brackets = strings.Replace(brackets,\
    \ \" \", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\"\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpt0j0fhl6_test.go:47:49: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075151
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    brackets =\
    \ strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\"\nfunc\
    \ TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpk8fm6x1n_test.go:47:49: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075146
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = strings.TrimSpace(brackets)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\"\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp57njxzad_test.go:47:49: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075146
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else {\n           \
    \ closingBrackets[c] = true\n        }\n    }\n    for c := range openingBrackets\
    \ {\n        if !closingBrackets[c] {\n            return false\n        }\n \
    \   }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsyoyysms_test.go:15:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpsyoyysms_test.go:17:29: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075147
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := []string{\"<\", \"{\", \"(\"}\n    closingBrackets\
    \ := []string{\">\", \"}\", \"}\"}\n    for _, openingBracket := range openingBrackets\
    \ {\n        for _, closingBracket := range closingBrackets {\n            if\
    \ openingBracket == closingBracket {\n                continue\n            }\n\
    \            if openingBracket == brackets[len(brackets)-len(closingBracket):]\
    \ {\n                return true\n            }\n        }\n    }\n    return\
    \ false\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__0\
    \ (0.00s)\n        tmpb7a_c7g1_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__1 (0.00s)\n        tmpb7a_c7g1_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCorrect_Bracketing/test_num__2\
    \ (0.00s)\n        tmpb7a_c7g1_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__3 (0.00s)\n        tmpb7a_c7g1_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCorrect_Bracketing/test_num__6\
    \ (0.00s)\n        tmpb7a_c7g1_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__7 (0.00s)\n        tmpb7a_c7g1_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075150
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, char := range brackets {\n        if char\
    \ == '<' {\n            openingBrackets[char] = true\n        } else {\n     \
    \       closingBrackets[char] = true\n        }\n    }\n    for _, char := range\
    \ brackets {\n        if !openingBrackets[char] {\n            return false\n\
    \        }\n    }\n    for _, char := range brackets {\n        if !closingBrackets[char]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa1i2zdyj_test.go:15:29: cannot use char (variable of type rune) as type
    string in map index

    /tmp/tmpa1i2zdyj_test.go:17:29: cannot use char (variable of type rune) as type
    string in map index

    /tmp/tmpa1i2zdyj_test.go:21:29: cannot use char (variable of type rune) as type
    string in map index

    /tmp/tmpa1i2zdyj_test.go:26:29: cannot use char (variable of type rune) as type
    string in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075151
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[rune]bool)\n    closingBrackets\
    \ := make(map[rune]bool)\n    for _, r := range brackets {\n        if r == '<'\
    \ {\n            openingBrackets[r] = true\n        } else {\n            closingBrackets[r]\
    \ = true\n        }\n    }\n    for _, r := range brackets {\n        if !openingBrackets[r]\
    \ {\n            return false\n        }\n        if !closingBrackets[r] {\n \
    \           return false\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__0\
    \ (0.00s)\n        tmpj3o_9hv3_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__1 (0.00s)\n        tmpj3o_9hv3_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCorrect_Bracketing/test_num__2\
    \ (0.00s)\n        tmpj3o_9hv3_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__3 (0.00s)\n        tmpj3o_9hv3_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075152
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[rune]bool)\n    closingBrackets\
    \ := make(map[rune]bool)\n    for _, c := range brackets {\n        if c == '<'\
    \ {\n            openingBrackets[c] = true\n        } else {\n            closingBrackets[c]\
    \ = true\n        }\n    }\n    for _, c := range brackets {\n        if !openingBrackets[c]\
    \ {\n            return false\n        }\n    }\n    for _, c := range brackets\
    \ {\n        if !closingBrackets[c] {\n            return false\n        }\n \
    \   }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__0\
    \ (0.00s)\n        tmp0k16q90i_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__1 (0.00s)\n        tmp0k16q90i_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCorrect_Bracketing/test_num__2\
    \ (0.00s)\n        tmp0k16q90i_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__3 (0.00s)\n        tmp0k16q90i_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075152
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = strings.TrimSpace(brackets)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\"\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp57njxzad_test.go:47:49: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075146
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := []string{\"<\", \"{\", \"(\"}\n    closingBrackets\
    \ := []string{\">\", \"}\", \"}\"}\n    for _, openingBracket := range openingBrackets\
    \ {\n        for _, closingBracket := range closingBrackets {\n            if\
    \ openingBracket != closingBracket {\n                fmt.Printf(\"%c %c %c\\\
    n\", openingBracket, closingBracket, openingBracket)\n            }\n        }\n\
    \    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmp0hu5hacc_test.go:16:17: fmt.Printf format %c has arg openingBracket of
    wrong type string

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075152
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := []string{\"<\", \"{\", \"(\"}\n    closingBrackets\
    \ := []string{\">\", \"}\", \"}\"}\n    for _, openingBracket := range openingBrackets\
    \ {\n        for _, closingBracket := range closingBrackets {\n            if\
    \ openingBracket != closingBracket {\n                if brackets[len(brackets)-len(closingBracket):len(brackets)]\
    \ == openingBracket {\n                    return false\n                }\n \
    \           }\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__4\
    \ (0.00s)\n        tmpdo32gs4o_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__5 (0.00s)\n        tmpdo32gs4o_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCorrect_Bracketing/test_num__8\
    \ (0.00s)\n        tmpdo32gs4o_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__9 (0.00s)\n        tmpdo32gs4o_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCorrect_Bracketing/test_num__10\
    \ (0.00s)\n        tmpdo32gs4o_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__11 (0.00s)\n        tmpdo32gs4o_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075152
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = strings.TrimSpace(brackets)\n    openingBrackets\
    \ := strings.Split(brackets, \">\")\n    closingBrackets := strings.Split(brackets,\
    \ \"<\")\n    if len(openingBrackets) != len(closingBrackets) {\n        return\
    \ false\n    }\n    for i := 0; i < len(openingBrackets); i++ {\n        if openingBrackets[i]\
    \ != closingBrackets[i] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppn28ulu7_test.go:11:16: undefined: strings

    /tmp/tmppn28ulu7_test.go:12:24: undefined: strings

    /tmp/tmppn28ulu7_test.go:13:24: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075150
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    openBrackets\
    \ := make([]string, 0)\n    closeBrackets := make([]string, 0)\n    for _, c :=\
    \ range brackets {\n        if c == '<' {\n            openBrackets = append(openBrackets,\
    \ c)\n        } else {\n            closeBrackets = append(closeBrackets, c)\n\
    \        }\n    }\n    if len(openBrackets) != len(closeBrackets) {\n        return\
    \ false\n    }\n    for i := 0; i < len(openBrackets); i++ {\n        if openBrackets[i]\
    \ != closeBrackets[i] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptoaz6ybq_test.go:16:49: cannot use c (variable of type rune) as type string
    in argument to append

    /tmp/tmptoaz6ybq_test.go:18:51: cannot use c (variable of type rune) as type string
    in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075152
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := []string{\"<\", \"{\", \"(\"}\n    closingBrackets\
    \ := []string{\">\", \"}\", \"}\"}\n    for _, openingBracket := range openingBrackets\
    \ {\n        for _, closingBracket := range closingBrackets {\n            if\
    \ openingBracket == closingBracket {\n                continue\n            }\n\
    \            if brackets == openingBracket + closingBracket {\n              \
    \  return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__1\
    \ (0.00s)\n        tmpqg2fcoir_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__2 (0.00s)\n        tmpqg2fcoir_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCorrect_Bracketing/test_num__3\
    \ (0.00s)\n        tmpqg2fcoir_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075148
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = strings.TrimSpace(brackets)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\"\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp57njxzad_test.go:47:49: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075146
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    brackets =\
    \ strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\"\nfunc\
    \ TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpk8fm6x1n_test.go:47:49: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075146
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = strings.TrimSpace(brackets)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\"\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp57njxzad_test.go:47:49: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075146
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else {\n           \
    \ closingBrackets[c] = true\n        }\n    }\n    for _, c := range brackets\
    \ {\n        if !openingBrackets[c] {\n            return false\n        }\n \
    \       if !closingBrackets[c] {\n            return false\n        }\n    }\n\
    \    return true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphgla5bg1_test.go:15:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmphgla5bg1_test.go:17:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmphgla5bg1_test.go:21:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmphgla5bg1_test.go:24:29: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075150
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else {\n           \
    \ closingBrackets[c] = true\n        }\n    }\n    for c := range openingBrackets\
    \ {\n        if !closingBrackets[c] {\n            return false\n        }\n \
    \   }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsyoyysms_test.go:15:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpsyoyysms_test.go:17:29: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075147
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make([]string, 0)\n    closingBrackets\
    \ := make([]string, 0)\n    for _, char := range brackets {\n        if char ==\
    \ '<' {\n            openingBrackets = append(openingBrackets, char)\n       \
    \ } else {\n            closingBrackets = append(closingBrackets, char)\n    \
    \    }\n    }\n    if len(openingBrackets) != len(closingBrackets) {\n       \
    \ return false\n    }\n    for i := 0; i < len(openingBrackets); i++ {\n     \
    \   if openingBrackets[i] != closingBrackets[i] {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1cmwd5a5_test.go:15:55: cannot use char (variable of type rune) as type
    string in argument to append

    /tmp/tmp1cmwd5a5_test.go:17:55: cannot use char (variable of type rune) as type
    string in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075152
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := []string{\"<\", \"<=\", \"==\", \"!=\"\
    , \"<-\", \"->\", \"<->\"}\n    closingBrackets := []string{\">\", \">=\", \"\
    ==\", \"!=\", \">-\", \"->\", \"<-\", \"<->\"}\n    openingBracketsCount := 0\n\
    \    closingBracketsCount := 0\n    for _, c := range brackets {\n        if openingBrackets[openingBracketsCount]\
    \ == c {\n            openingBracketsCount++\n        } else {\n            openingBracketsCount\
    \ = 0\n        }\n        if closingBrackets[closingBracketsCount] == c {\n  \
    \          closingBracketsCount++\n        } else {\n            closingBracketsCount\
    \ = 0\n        }\n    }\n    return openingBracketsCount == closingBracketsCount\n\
    }\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfg2am_d2_test.go:16:53: invalid operation: openingBrackets[openingBracketsCount]
    == c (mismatched types string and rune)

    /tmp/tmpfg2am_d2_test.go:21:53: invalid operation: closingBrackets[closingBracketsCount]
    == c (mismatched types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075152
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = strings.TrimSpace(brackets)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"{\", -1)\n    brackets = strings.Replace(brackets, \">\", \"}\", -1)\n\
    \    brackets = strings.Replace(brackets, \"{\", \"<\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"}\", \">\", -1)\n    brackets = strings.Replace(brackets, \"<{\", \"{<\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">}\", \"}>\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<}\", \"}<\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">{\", \"{>\", -1)\n    brackets = strings.Replace(brackets, \"<{\", \"{<\"\
    , -1)\n    brackets = strings.Replace(brackets, \">}\", \"}>\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<{\", \"{<\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">}\", \"}>\", -1)\n    brackets = strings.Replace(brackets, \"<{\", \"{<\"\
    , -1)\n    brackets = strings.Replace(brackets, \">}\", \"}>\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<{\", \"{<\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">}\", \"}>\", -1)\n    brackets = strings.Replace(brackets, \"<{\", \"{<\"\
    , -1)\n    brackets = strings.Replace(brackets, \">}\", \"}>\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<{\", \"{<\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">}\", \"}>\", -1)\n    brackets = strings.Replace(brackets, \"<{\", \"{<\"\
    , -1)\n    brackets = strings.Replace(brackets, \">}\", \"}>\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<{\", \"{<\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">}\", \"}>\", -1)\n    brackets = strings.Replace(brackets, \"<{\", \"{<\"\
    , -1)\n    brackets = strings.Replace(brackets, \">}\", \"}>\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<{\", \"{<\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">}\", \"}>\", -1)\n    brackets = strings.Replace(brackets, \"<{\", \"{<\"\
    , -1)\n    brackets = strings.Replace(brackets, \">}\", \"}>\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<{\", \"\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpefdhppxp_test.go:42:48: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075152
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else {\n           \
    \ closingBrackets[c] = true\n        }\n    }\n    for _, c := range brackets\
    \ {\n        if !openingBrackets[c] {\n            return false\n        }\n \
    \   }\n    for _, c := range brackets {\n        if !closingBrackets[c] {\n  \
    \          return false\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpei_r1l99_test.go:15:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpei_r1l99_test.go:17:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpei_r1l99_test.go:21:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpei_r1l99_test.go:26:29: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075147
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    openingBrackets\
    \ := make([]int, len(brackets))\n    closingBrackets := make([]int, len(brackets))\n\
    \    i := 0\n    for _, c := range brackets {\n        if c == '<' {\n       \
    \     openingBrackets[i] = 1\n            i++\n        } else {\n            closingBrackets[i]\
    \ = 1\n            i++\n        }\n    }\n    for _, c := range brackets {\n \
    \       if openingBrackets[len(openingBrackets)-len(closingBrackets)+i] == 1 {\n\
    \            return false\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpglpx9b7q_test.go:24:12: c declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075152
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = strings.TrimSpace(brackets)\n    if len(brackets)\
    \ == 0 {\n        return false\n    }\n    openingBrackets := []string{\"<\",\
    \ \"{\", \"(\"}\n    closingBrackets := []string{\">\", \"}\", \"}\"}\n    for\
    \ _, openingBracket := range openingBrackets {\n        if strings.Contains(brackets,\
    \ openingBracket) {\n            for _, closingBracket := range closingBrackets\
    \ {\n                if strings.Contains(brackets, closingBracket) {\n       \
    \             return true\n                }\n            }\n        }\n    }\n\
    \    return false\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsts4y3qg_test.go:11:16: undefined: strings

    /tmp/tmpsts4y3qg_test.go:18:12: undefined: strings

    /tmp/tmpsts4y3qg_test.go:20:20: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075152
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else {\n           \
    \ closingBrackets[c] = true\n        }\n    }\n    for c := range openingBrackets\
    \ {\n        if !closingBrackets[c] {\n            return false\n        }\n \
    \   }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsyoyysms_test.go:15:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpsyoyysms_test.go:17:29: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075147
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[rune]bool)\n    closingBrackets\
    \ := make(map[rune]bool)\n    for _, c := range brackets {\n        if c == '<'\
    \ {\n            openingBrackets[c] = true\n        } else {\n            closingBrackets[c]\
    \ = true\n        }\n    }\n    for _, c := range brackets {\n        if !openingBrackets[c]\
    \ {\n            return false\n        }\n    }\n    for _, c := range brackets\
    \ {\n        if !closingBrackets[c] {\n            return false\n        }\n \
    \   }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__0\
    \ (0.00s)\n        tmp0k16q90i_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__1 (0.00s)\n        tmp0k16q90i_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCorrect_Bracketing/test_num__2\
    \ (0.00s)\n        tmp0k16q90i_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__3 (0.00s)\n        tmp0k16q90i_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075152
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = strings.TrimSpace(brackets)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\"\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp57njxzad_test.go:47:49: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075146
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[rune]bool)\n    closingBrackets\
    \ := make(map[rune]bool)\n    for _, r := range brackets {\n        if r == '<'\
    \ {\n            openingBrackets[r] = true\n        } else {\n            closingBrackets[r]\
    \ = true\n        }\n    }\n    for _, r := range brackets {\n        if !openingBrackets[r]\
    \ {\n            return false\n        }\n    }\n    for _, r := range brackets\
    \ {\n        if !closingBrackets[r] {\n            return false\n        }\n \
    \   }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__0\
    \ (0.00s)\n        tmpwob2q6up_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__1 (0.00s)\n        tmpwob2q6up_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCorrect_Bracketing/test_num__2\
    \ (0.00s)\n        tmpwob2q6up_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__3 (0.00s)\n        tmpwob2q6up_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075150
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else {\n           \
    \ closingBrackets[c] = true\n        }\n    }\n    for _, c := range brackets\
    \ {\n        if !openingBrackets[c] {\n            return false\n        }\n \
    \       if !closingBrackets[c] {\n            return false\n        }\n    }\n\
    \    return true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphgla5bg1_test.go:15:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmphgla5bg1_test.go:17:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmphgla5bg1_test.go:21:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmphgla5bg1_test.go:24:29: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075150
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := []string{\"<\", \"{\", \"(\"}\n    closingBrackets\
    \ := []string{\">\", \"}\", \"}\"}\n    for _, openingBracket := range openingBrackets\
    \ {\n        for _, closingBracket := range closingBrackets {\n            if\
    \ openingBracket == closingBracket {\n                continue\n            }\n\
    \            if brackets[len(brackets)-len(closingBracket):len(brackets)] == openingBracket\
    \ {\n                return false\n            }\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__4\
    \ (0.00s)\n        tmpyts7hn1k_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__5 (0.00s)\n        tmpyts7hn1k_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCorrect_Bracketing/test_num__8\
    \ (0.00s)\n        tmpyts7hn1k_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__9 (0.00s)\n        tmpyts7hn1k_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCorrect_Bracketing/test_num__10\
    \ (0.00s)\n        tmpyts7hn1k_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__11 (0.00s)\n        tmpyts7hn1k_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075148
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := []string{\"<\", \"{\", \"(\"}\n    closingBrackets\
    \ := []string{\">\", \"}\", \"}\"}\n    for _, openingBracket := range openingBrackets\
    \ {\n        for _, closingBracket := range closingBrackets {\n            if\
    \ openingBracket == closingBracket {\n                continue\n            }\n\
    \            if brackets[len(brackets)-len(closingBracket):len(brackets)] == openingBracket\
    \ {\n                return false\n            }\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__4\
    \ (0.00s)\n        tmpyts7hn1k_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__5 (0.00s)\n        tmpyts7hn1k_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCorrect_Bracketing/test_num__8\
    \ (0.00s)\n        tmpyts7hn1k_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__9 (0.00s)\n        tmpyts7hn1k_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCorrect_Bracketing/test_num__10\
    \ (0.00s)\n        tmpyts7hn1k_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__11 (0.00s)\n        tmpyts7hn1k_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075148
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = strings.TrimSpace(brackets)\n    openingBrackets\
    \ := strings.Split(brackets, \">\")\n    closingBrackets := strings.Split(brackets,\
    \ \"<\")\n    if len(openingBrackets) != len(closingBrackets) {\n        return\
    \ false\n    }\n    for i := 0; i < len(openingBrackets); i++ {\n        if openingBrackets[i]\
    \ != closingBrackets[i] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppn28ulu7_test.go:11:16: undefined: strings

    /tmp/tmppn28ulu7_test.go:12:24: undefined: strings

    /tmp/tmppn28ulu7_test.go:13:24: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075150
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = strings.TrimSpace(brackets)\n    if len(brackets)\
    \ < 2 {\n        return false\n    }\n    brackets = brackets[1 : len(brackets)-1]\n\
    \    for _, openBracket := range brackets {\n        if openBracket != \">\" {\n\
    \            return false\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3b4zmess_test.go:11:16: undefined: strings

    /tmp/tmp3b4zmess_test.go:17:27: invalid operation: openBracket != ">" (mismatched
    types rune and untyped string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075152
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = strings.TrimSpace(brackets)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\"\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp57njxzad_test.go:47:49: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075146
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else {\n           \
    \ closingBrackets[c] = true\n        }\n    }\n    for c := range openingBrackets\
    \ {\n        if !closingBrackets[c] {\n            return false\n        }\n \
    \   }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsyoyysms_test.go:15:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpsyoyysms_test.go:17:29: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075147
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else {\n           \
    \ closingBrackets[c] = true\n        }\n    }\n    for _, c := range brackets\
    \ {\n        if openingBrackets[c] == false {\n            return false\n    \
    \    }\n        if closingBrackets[c] == false {\n            return false\n \
    \       }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3q37snmm_test.go:15:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmp3q37snmm_test.go:17:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmp3q37snmm_test.go:21:28: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmp3q37snmm_test.go:24:28: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075147
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := []string{\"<\", \"{\", \"(\"}\n    closingBrackets\
    \ := []string{\">\", \"}\", \"}\"}\n    for _, openingBracket := range openingBrackets\
    \ {\n        if !contains(brackets, openingBracket) {\n            return false\n\
    \        }\n    }\n    for _, closingBracket := range closingBrackets {\n    \
    \    if !contains(brackets, closingBracket) {\n            return false\n    \
    \    }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T)\
    \ {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfi4jvx8f_test.go:14:13: undefined: contains

    /tmp/tmpfi4jvx8f_test.go:19:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075152
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    openingBrackets\
    \ := make([]string, 0)\n    closingBrackets := make([]string, 0)\n    for _, char\
    \ := range brackets {\n        if char == '<' {\n            openingBrackets =\
    \ append(openingBrackets, char)\n        } else {\n            closingBrackets\
    \ = append(closingBrackets, char)\n        }\n    }\n    if len(openingBrackets)\
    \ != len(closingBrackets) {\n        return false\n    }\n    for i := 0; i <\
    \ len(openingBrackets); i++ {\n        if openingBrackets[i] != closingBrackets[i]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpekkgi1_z_test.go:16:55: cannot use char (variable of type rune) as type
    string in argument to append

    /tmp/tmpekkgi1_z_test.go:18:55: cannot use char (variable of type rune) as type
    string in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075152
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    openingBrackets\
    \ := make([]string, 0)\n    closingBrackets := make([]string, 0)\n    for _, char\
    \ := range brackets {\n        if char == '<' {\n            openingBrackets =\
    \ append(openingBrackets, char)\n        } else {\n            closingBrackets\
    \ = append(closingBrackets, char)\n        }\n    }\n    return len(openingBrackets)\
    \ == len(closingBrackets)\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n\
    \  candidate := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    <>\"), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true\
    \ },\n     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0830wshf_test.go:16:55: cannot use char (variable of type rune) as type
    string in argument to append

    /tmp/tmp0830wshf_test.go:18:55: cannot use char (variable of type rune) as type
    string in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075152
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = strings.TrimSpace(brackets)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\"\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp57njxzad_test.go:47:49: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075146
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(bracket\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpu6wzf174_test.go:47:39: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075146
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := []string{\"<\", \"{\", \"(\"}\n    closingBrackets\
    \ := []string{\">\", \"}\", \"}\"}\n    for _, openingBracket := range openingBrackets\
    \ {\n        for _, closingBracket := range closingBrackets {\n            if\
    \ openingBracket != closingBracket {\n                if brackets[len(brackets)-len(closingBracket):len(brackets)]\
    \ == openingBracket {\n                    return true\n                }\n  \
    \          }\n        }\n    }\n    return false\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__0\
    \ (0.00s)\n        tmpg1k3rput_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__1 (0.00s)\n        tmpg1k3rput_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCorrect_Bracketing/test_num__2\
    \ (0.00s)\n        tmpg1k3rput_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__3 (0.00s)\n        tmpg1k3rput_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCorrect_Bracketing/test_num__6\
    \ (0.00s)\n        tmpg1k3rput_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__7 (0.00s)\n        tmpg1k3rput_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075150
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := []string{\"<\", \"{\", \"(\"}\n    closingBrackets\
    \ := []string{\">\", \"}\", \"}\"}\n    for _, openingBracket := range openingBrackets\
    \ {\n        for _, closingBracket := range closingBrackets {\n            if\
    \ openingBracket != closingBracket {\n                if brackets[len(brackets)-1-len(closingBracket):len(brackets)]\
    \ == closingBracket {\n                    return true\n                }\n  \
    \          }\n        }\n    }\n    return false\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [-1:] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [-1:]\n\ngoroutine 4 [running]:\ntesting.tRunner.func1.2({0x515640, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x515640,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.correct_bracketing(...)\n\t/tmp/tmpfh5fhmlb_test.go:16\n\
    command-line-arguments_test.TestCorrect_Bracketing(0xc0000e0340?)\n\t/tmp/tmpfh5fhmlb_test.go:38\
    \ +0x2a4c\ntesting.tRunner(0xc0000e0340, 0x52afc8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075152
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    brackets =\
    \ strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\"\nfunc\
    \ TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpk8fm6x1n_test.go:47:49: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075146
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := []string{\"<\", \"{\", \"(\"}\n    closingBrackets\
    \ := []string{\">\", \"}\", \"}\"}\n    for _, openingBracket := range openingBrackets\
    \ {\n        for _, closingBracket := range closingBrackets {\n            if\
    \ openingBracket == closingBracket {\n                continue\n            }\n\
    \            if brackets[len(brackets)-len(closingBracket):len(brackets)] == openingBracket\
    \ {\n                return false\n            }\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__4\
    \ (0.00s)\n        tmpyts7hn1k_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__5 (0.00s)\n        tmpyts7hn1k_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCorrect_Bracketing/test_num__8\
    \ (0.00s)\n        tmpyts7hn1k_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__9 (0.00s)\n        tmpyts7hn1k_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCorrect_Bracketing/test_num__10\
    \ (0.00s)\n        tmpyts7hn1k_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__11 (0.00s)\n        tmpyts7hn1k_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075148
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := []string{\"<\", \"{\", \"(\"}\n    closingBrackets\
    \ := []string{\">\", \"}\", \"}\"}\n    for _, openingBracket := range openingBrackets\
    \ {\n        for _, closingBracket := range closingBrackets {\n            if\
    \ openingBracket == closingBracket {\n                continue\n            }\n\
    \            if brackets == openingBracket + closingBracket {\n              \
    \  return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__1\
    \ (0.00s)\n        tmpqg2fcoir_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__2 (0.00s)\n        tmpqg2fcoir_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCorrect_Bracketing/test_num__3\
    \ (0.00s)\n        tmpqg2fcoir_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075148
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := []string{\"<\", \"{\", \"(\"}\n    closingBrackets\
    \ := []string{\">\", \"}\", \"}\"}\n    for _, openingBracket := range openingBrackets\
    \ {\n        for _, closingBracket := range closingBrackets {\n            if\
    \ openingBracket != closingBracket {\n                if brackets[len(brackets)-len(closingBracket):len(brackets)]\
    \ == closingBracket {\n                    return true\n                }\n  \
    \          }\n        }\n    }\n    return false\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__4\
    \ (0.00s)\n        tmpm9_x13r9_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__5 (0.00s)\n        tmpm9_x13r9_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCorrect_Bracketing/test_num__8\
    \ (0.00s)\n        tmpm9_x13r9_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__9 (0.00s)\n        tmpm9_x13r9_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCorrect_Bracketing/test_num__10\
    \ (0.00s)\n        tmpm9_x13r9_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__11 (0.00s)\n        tmpm9_x13r9_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075148
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else {\n           \
    \ closingBrackets[c] = true\n        }\n    }\n    for c := range openingBrackets\
    \ {\n        if !closingBrackets[c] {\n            return false\n        }\n \
    \   }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsyoyysms_test.go:15:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpsyoyysms_test.go:17:29: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075147
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else {\n           \
    \ closingBrackets[c] = true\n        }\n    }\n    for c := range openingBrackets\
    \ {\n        if !closingBrackets[c] {\n            return false\n        }\n \
    \   }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsyoyysms_test.go:15:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpsyoyysms_test.go:17:29: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075147
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = strings.TrimSpace(brackets)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\"\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp57njxzad_test.go:47:49: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075146
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(bracket\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpu6wzf174_test.go:47:39: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075146
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(bracket\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpu6wzf174_test.go:47:39: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075146
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    opening, closing := brackets[len(brackets)-1], brackets[0]\n\
    \    for _, c := range brackets {\n        if c != opening && c != closing {\n\
    \            return false\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwzomn58s_test.go:13:17: invalid operation: c != opening (mismatched types
    rune and byte)

    /tmp/tmpwzomn58s_test.go:13:33: invalid operation: c != closing (mismatched types
    rune and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075152
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := []string{\"<\", \"<=\", \"=\", \"==\"\
    , \"!=\", \"<=\", \"<\", \">=\", \">\", \">=\"}\n    closingBrackets := []string{\"\
    >\", \">=\"}\n    for _, openingBracket := range openingBrackets {\n        for\
    \ _, closingBracket := range closingBrackets {\n            if openingBracket\
    \ == closingBracket {\n                continue\n            }\n            if\
    \ brackets[len(brackets)-len(closingBracket):len(brackets)] == openingBracket\
    \ {\n                return false\n            }\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [-1:] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [-1:]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x515640, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x515640,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.correct_bracketing(...)\n\t/tmp/tmpe6ssl43d_test.go:18\n\
    command-line-arguments_test.TestCorrect_Bracketing(0xc0000da340?)\n\t/tmp/tmpe6ssl43d_test.go:41\
    \ +0x301f\ntesting.tRunner(0xc0000da340, 0x52afc8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075152
- exit_code: 1
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := []string{\"<\", \"{\", \"(\"}\n    closingBrackets\
    \ := []string{\">\", \"}\", \"}\"}\n    for _, openingBracket := range openingBrackets\
    \ {\n        for _, closingBracket := range closingBrackets {\n            if\
    \ openingBracket == closingBracket {\n                continue\n            }\n\
    \            if brackets[len(brackets)-len(closingBracket):len(brackets)] == openingBracket\
    \ {\n                return false\n            }\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCorrect_Bracketing (0.00s)\n    --- FAIL: TestCorrect_Bracketing/test_num__4\
    \ (0.00s)\n        tmpyts7hn1k_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__5 (0.00s)\n        tmpyts7hn1k_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCorrect_Bracketing/test_num__8\
    \ (0.00s)\n        tmpyts7hn1k_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__9 (0.00s)\n        tmpyts7hn1k_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCorrect_Bracketing/test_num__10\
    \ (0.00s)\n        tmpyts7hn1k_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestCorrect_Bracketing/test_num__11 (0.00s)\n        tmpyts7hn1k_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075148
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var openingBrackets []string\n    var closingBrackets []string\n\
    \    for _, char := range brackets {\n        if char == '<' {\n            openingBrackets\
    \ = append(openingBrackets, char)\n        } else {\n            closingBrackets\
    \ = append(closingBrackets, char)\n        }\n    }\n    if len(openingBrackets)\
    \ != len(closingBrackets) {\n        return false\n    }\n    for i := 0; i <\
    \ len(openingBrackets); i++ {\n        if openingBrackets[i] != closingBrackets[i]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyo9t31ab_test.go:15:55: cannot use char (variable of type rune) as type
    string in argument to append

    /tmp/tmpyo9t31ab_test.go:17:55: cannot use char (variable of type rune) as type
    string in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075147
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    var openingBrackets []string\n    var closingBrackets []string\n\
    \    for _, char := range brackets {\n        if char == '<' {\n            openingBrackets\
    \ = append(openingBrackets, char)\n        } else {\n            closingBrackets\
    \ = append(closingBrackets, char)\n        }\n    }\n    if len(openingBrackets)\
    \ != len(closingBrackets) {\n        return false\n    }\n    for i := 0; i <\
    \ len(openingBrackets); i++ {\n        if openingBrackets[i] != closingBrackets[i]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyo9t31ab_test.go:15:55: cannot use char (variable of type rune) as type
    string in argument to append

    /tmp/tmpyo9t31ab_test.go:17:55: cannot use char (variable of type rune) as type
    string in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075147
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    for _, c :=\
    \ range brackets {\n        if c != \">\" && c != \"<\" {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwgszujbp_test.go:13:17: invalid operation: c != ">" (mismatched types
    rune and untyped string)

    /tmp/tmpwgszujbp_test.go:13:29: invalid operation: c != "<" (mismatched types
    rune and untyped string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075147
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    openingBrackets\
    \ := []string{\"<\", \"{\", \"(\"}\n    closingBrackets := []string{\">\", \"\
    }\", \"}\"}\n    for _, openingBracket := range openingBrackets {\n        for\
    \ _, closingBracket := range closingBrackets {\n            if openingBracket\
    \ != closingBracket {\n                if brackets[len(brackets)-1] == openingBracket\
    \ {\n                    brackets = brackets[:len(brackets)-1] + closingBracket\n\
    \                    return correct_bracketing(brackets)\n                }\n\
    \            }\n        }\n    }\n    return false\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjd1hgngz_test.go:17:49: invalid operation: brackets[len(brackets) - 1]
    == openingBracket (mismatched types byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075152
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    brackets = brackets[1 : len(brackets)-1]\n    openingBrackets\
    \ := make([]string, 0)\n    closingBrackets := make([]string, 0)\n    for _, char\
    \ := range brackets {\n        if char == \"<\" {\n            openingBrackets\
    \ = append(openingBrackets, char)\n        } else {\n            closingBrackets\
    \ = append(closingBrackets, char)\n        }\n    }\n    for _, openingBracket\
    \ := range openingBrackets {\n        for _, closingBracket := range closingBrackets\
    \ {\n            if openingBracket == closingBracket {\n                return\
    \ false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t\
    \ *testing.T) {\n  candidate := correct_bracketing\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"<>\"), expected: true },\n     { actual: candidate(\"\
    <<><>>\"), expected: true },\n     { actual: candidate(\"<><><<><>><>\"), expected:\
    \ true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"), expected:\
    \ true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n     {\
    \ actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp__foms5y_test.go:15:20: invalid operation: char == "<" (mismatched types
    rune and untyped string)

    /tmp/tmp__foms5y_test.go:16:55: cannot use char (variable of type rune) as type
    string in argument to append

    /tmp/tmp__foms5y_test.go:18:55: cannot use char (variable of type rune) as type
    string in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075152
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else {\n           \
    \ closingBrackets[c] = true\n        }\n    }\n    for c := range openingBrackets\
    \ {\n        if !closingBrackets[c] {\n            return false\n        }\n \
    \   }\n    return true\n}\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate\
    \ := correct_bracketing\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"<>\"\
    ), expected: true },\n     { actual: candidate(\"<<><>>\"), expected: true },\n\
    \     { actual: candidate(\"<><><<><>><>\"), expected: true },\n     { actual:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\"), expected: true },\n     { actual:\
    \ candidate(\"<<<><>>>>\"), expected: false },\n     { actual: candidate(\"><<>\"\
    ), expected: false },\n     { actual: candidate(\"<\"), expected: false },\n \
    \    { actual: candidate(\"<<<<\"), expected: false },\n     { actual: candidate(\"\
    >\"), expected: false },\n     { actual: candidate(\"<<>\"), expected: false },\n\
    \     { actual: candidate(\"<><><<><>><>><<>\"), expected: false },\n     { actual:\
    \ candidate(\"<><><<><>><>>><>\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsyoyysms_test.go:15:29: cannot use c (variable of type rune) as type string
    in map index

    /tmp/tmpsyoyysms_test.go:17:29: cannot use c (variable of type rune) as type string
    in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075147
- exit_code: 2
  program: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets\
    \ string) bool {\n    openingBrackets := []string{\"<\", \"{\", \"(\"}\n    closingBrackets\
    \ := []string{\">\", \"}\", \"}\"}\n    openingBracketsCount := 0\n    closingBracketsCount\
    \ := 0\n    for _, c := range brackets {\n        if openingBrackets[openingBracketsCount]\
    \ == c {\n            openingBracketsCount++\n        } else {\n            openingBracketsCount\
    \ = 0\n        }\n        if closingBrackets[closingBracketsCount] == c {\n  \
    \          closingBracketsCount++\n        } else {\n            closingBracketsCount\
    \ = 0\n        }\n    }\n    return openingBracketsCount == closingBracketsCount\n\
    }\n\nfunc TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n  \
    \   { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
    <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false\
    \ },\n     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
    <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false\
    \ },\n     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
    <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
    \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpt6qn5821_test.go:16:53: invalid operation: openingBrackets[openingBracketsCount]
    == c (mismatched types string and rune)

    /tmp/tmpt6qn5821_test.go:21:53: invalid operation: closingBrackets[closingBracketsCount]
    == c (mismatched types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075152
