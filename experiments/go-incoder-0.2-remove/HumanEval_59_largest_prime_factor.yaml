name: HumanEval_59_largest_prime_factor
language: go_test.go
prompt: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
  \n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
  func largest_prime_factor(n int) int {\n"
tests: "func TestLargest_Prime_Factor(t *testing.T) {\n  candidate := largest_prime_factor\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate(15), expected: 5 },\n     { actual:\
  \ candidate(27), expected: 3 },\n     { actual: candidate(63), expected: 7 },\n\
  \     { actual: candidate(330), expected: 11 },\n     { actual: candidate(13195),\
  \ expected: 29 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
  test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
  \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
  , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    prime := 2\n    factor := 1\n    for n > 1 {\n        if n % prime\
    \ == 0 {\n            n = n / prime\n            factor = prime + 1\n        }\
    \ else {\n            prime++\n        }\n    }\n    return factor\n}\n", "  \
    \  largest := n\n    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n      \
    \      largest = i\n            break\n        }\n    }\n    return largest\n\
    }\n", "    prime := 2\n    factor := 1\n    for factor < n && n % factor == 0\
    \ {\n        factor++\n    }\n    for factor < n && n % factor == 0 {\n      \
    \  factor++\n    }\n    if factor > n {\n        return n\n    }\n    for factor\
    \ < n && n % factor == 0 {\n        factor++\n    }\n    return factor\n}\n",
  "    prime := 2\n    factor := 1\n    for factor < n {\n        if n % prime ==\
    \ 0 {\n            factor = factor + 1\n        }\n        prime++\n    }\n  \
    \  return factor\n}\n", "    largestPrimeFactor := 1\n    for i := 2; i <= n;\
    \ i++ {\n        if n%i == 0 {\n            largestPrimeFactor = i\n         \
    \   break\n        }\n    }\n    return largestPrimeFactor\n}\n", "    primes\
    \ := make([]int, n)\n    primes[0] = 1\n    for i := 1; i < n; i++ {\n       \
    \ for j := 2; j < i; j++ {\n            if i*j > n {\n                break\n\
    \            }\n            if primes[j] == 0 {\n                primes[j] = i\n\
    \            }\n        }\n    }\n    return primes[n-1]\n}\n", "    n -= 1\n\
    \    i := 2\n    for i < n && n % i == 0 {\n        i = i + 1\n    }\n    return\
    \ i\n}\n", "    n -= 1\n    i := 2\n    for i <= n {\n        if n%i == 0 {\n\
    \            n /= i\n        } else {\n            i++\n        }\n    }\n   \
    \ return n\n}\n", "    if n < 2 {\n        return n\n    }\n\n    largest := 2\n\
    \    for i := 3; i <= n; i++ {\n        if n % i == 0 {\n            if i > largest\
    \ {\n                largest = i\n            }\n        }\n    }\n    return\
    \ largest\n}\n", "    largestPrimeFactor := 1\n    for i := 2; i <= n/2; i++ {\n\
    \        if n%i == 0 {\n            largestPrimeFactor = i\n            break\n\
    \        }\n    }\n    return largestPrimeFactor\n}\n", "    primes := make([]int,\
    \ n)\n    primes[0] = 2\n    for i := 1; i < n; i++ {\n        for j := 2; j <\
    \ i; j++ {\n            if i%j == 0 {\n                break\n            }\n\
    \        }\n        if j == i {\n            primes[i] = i\n        }\n    }\n\
    \    return primes[len(primes)-1]\n}\n", "    prime := 2\n    factor := 2\n  \
    \  for factor < n {\n        if n%prime == 0 {\n            n = n / prime\n  \
    \      } else {\n            prime++\n        }\n        factor++\n    }\n   \
    \ return factor\n}\n", "    prime := 2\n    factor := 1\n    for factor < n &&\
    \ prime*factor <= n {\n        prime++\n        factor++\n    }\n    return factor\n\
    }\n", "    prime := 2\n    factor := 1\n    for factor < n {\n        if n%prime\
    \ == 0 {\n            factor++\n        }\n        prime++\n    }\n    return\
    \ factor\n}\n", "    if n < 2 {\n        return n\n    }\n    p := 2\n    q :=\
    \ n\n    for {\n        if q%p == 0 {\n            return p\n        }\n     \
    \   p += 2\n        q /= p\n    }\n}\n", "    n -= 1\n    i := 2\n    for i <=\
    \ n {\n        if n % i == 0 {\n            n = n / i\n        } else {\n    \
    \        i = i + 1\n        }\n    }\n    return n\n}\n", "    if n < 2 {\n  \
    \      return n\n    }\n    max := 2\n    for i := 2; i <= n; i++ {\n        if\
    \ n % i == 0 {\n            max = i\n            break\n        }\n    }\n   \
    \ return max\n}\n", "    prime := 2\n    factor := 1\n    for factor < n {\n \
    \       if n%prime == 0 {\n            n = n/prime\n        } else {\n       \
    \     prime++\n        }\n        factor++\n    }\n    return prime\n}\n", " \
    \   p := 2\n    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n           \
    \ p = i\n            break\n        }\n    }\n    return p\n}\n", "    prime :=\
    \ 2\n    factor := 1\n    for factor < n && prime < n {\n        if n%prime ==\
    \ 0 {\n            factor++\n        }\n        prime++\n    }\n    return factor\n\
    }\n", "    prime := 2\n    factor := 1\n    for n > 1 {\n        if n % prime\
    \ == 0 {\n            n = n / prime\n            factor = prime\n        } else\
    \ {\n            prime++\n        }\n    }\n    return factor\n}\n", "    primes\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        primes[i] = 1\n   \
    \ }\n    for i := 2; i < n; i++ {\n        for j := 2; j < i; j++ {\n        \
    \    if primes[j] == 0 {\n                primes[j] = 1\n                primes[i]++\n\
    \                break\n            }\n        }\n    }\n    return primes[n-1]\n\
    }\n", "    prime := 2\n    factor := 1\n    for n > 1 {\n        if n % prime\
    \ == 0 {\n            factor++\n        }\n        prime++\n        n/=prime\n\
    \    }\n    return factor\n}\n", "    p := 2\n    i := 2\n    for i < n {\n  \
    \      if n%i == 0 {\n            p += 1\n            n /= i\n        }\n    \
    \    i++\n    }\n    return p\n}\n", "    prime := 2\n    factor := 2\n    for\
    \ factor < n {\n        if n%prime == 0 {\n            factor++\n        }\n \
    \       prime++\n    }\n    return factor\n}\n", "    prime := 2\n    factor :=\
    \ 1\n    for factor < n && n % factor == 0 {\n        factor++\n    }\n    for\
    \ factor < n && n % factor != 0 {\n        prime++\n        n /= factor\n    }\n\
    \    return prime\n}\n", "    prime := 2\n    for i := 3; i <= n; i++ {\n    \
    \    if n%i == 0 {\n            prime = i\n            break\n        }\n    }\n\
    \    return prime\n}\n", "    p := 2\n    for {\n        if n%p == 0 {\n     \
    \       return p\n        }\n        p += 1\n    }\n}\n", "    n -= 1\n    i :=\
    \ 2\n    for i < n {\n        if n%i == 0 {\n            n = n/i\n        } else\
    \ {\n            i = i + 1\n        }\n    }\n    return i\n}\n", "    p := 2\n\
    \    i := 2\n    for i <= n {\n        if n % i == 0 {\n            p = i\n  \
    \      }\n        i++\n    }\n    return p\n}\n", "    prime := 2\n    factor\
    \ := 1\n    for n > 1 {\n        if n % prime == 0 {\n            n = n / prime\n\
    \            factor = prime + 1\n        } else {\n            prime++\n     \
    \   }\n    }\n    return factor\n}\n", "    primes := make([]int, n)\n    for\
    \ i := 0; i < n; i++ {\n        primes[i] = 1\n    }\n    for i := 2; i < n; i++\
    \ {\n        for j := 0; j < i; j++ {\n            if primes[j] == 0 {\n     \
    \           break\n            }\n            if n % primes[j] == 0 {\n      \
    \          primes[j] = -1\n                break\n            }\n        }\n \
    \       if primes[i] == -1 {\n            return i\n        }\n    }\n    return\
    \ -1\n}\n", "    prime := 2\n    factor := 1\n    for factor < n && prime*factor\
    \ <= n {\n        prime *= factor\n        factor++\n    }\n    return prime\n\
    }\n", "    p := 2\n    for {\n        if n%p == 0 {\n            return p\n  \
    \      }\n        p += 1\n    }\n}\n", "    prime := 2\n    factor := 1\n    for\
    \ n > 1 {\n        if n % prime == 0 {\n            n = n / prime\n          \
    \  factor = prime\n        } else {\n            prime++\n        }\n    }\n \
    \   return factor\n}\n", "    n -= 1\n    i := 2\n    for i <= n {\n        if\
    \ n%i == 0 {\n            return i\n        }\n        i += 2\n    }\n    return\
    \ n\n}\n", "    p := 2\n    i := 2\n    for i <= n {\n        if n % i == 0 {\n\
    \            p = i\n        }\n        i += 2\n    }\n    return p\n}\n", "  \
    \  prime := 2\n    factor := 1\n    for factor < n {\n        if n%prime == 0\
    \ {\n            n = n/prime\n        } else {\n            prime++\n        }\n\
    \        factor++\n    }\n    return factor\n}\n", "    prime := 2\n    factor\
    \ := 1\n    for n > 1 {\n        if n % prime == 0 {\n            factor = prime\n\
    \        }\n        prime++\n        n/=prime\n    }\n    return factor\n}\n",
  "    n -= 1\n    i := 2\n    max := 1\n    for i <= n {\n        if n % i == 0 {\n\
    \            max = i\n        }\n        i += 2\n    }\n    return max\n}\n",
  "    n -= 2\n    i := 2\n    factor := 1\n    for i <= n {\n        if n % i ==\
    \ 0 {\n            factor *= i\n            n /= i\n        }\n        i++\n \
    \   }\n    if n > 1 {\n        factor *= n\n    }\n    return factor\n}\n", " \
    \   if n < 2 {\n        return n\n    }\n    p := 2\n    for i := 3; i <= n; i\
    \ += p {\n        if n%i == 0 {\n            p = i\n        }\n    }\n    return\
    \ p\n}\n", "    n -= 1\n    i := 2\n    for i <= n {\n        if n%i == 0 {\n\
    \            return i\n        }\n        i += 2\n    }\n    return n\n}\n", " \
    \   prime := 2\n    factor := 1\n    for n > 1 {\n        if n % prime == 0 {\n\
    \            n = n / prime\n            factor = prime + 1\n        } else {\n\
    \            prime++\n        }\n    }\n    return factor\n}\n", "    if n < 2\
    \ {\n        return n\n    }\n    p := 2\n    for i := 3; i <= n; i += p {\n \
    \       if n % i == 0 {\n            p = i\n        }\n    }\n    return p\n}\n",
  "    n -= 1\n    prime := 2\n    for i := 3; i <= n; i++ {\n        if n%i == 0\
    \ {\n            prime = i\n            break\n        }\n    }\n    return prime\n\
    }\n", "    n -= 1\n    x := n\n    y := 2\n    for true {\n        if x % y ==\
    \ 0 {\n            return y\n        }\n        x /= y\n        y++\n    }\n}\n",
  "    p := 2\n    i := 2\n    for i <= n {\n        if n % i == 0 {\n           \
    \ p = i\n        }\n        i += 2\n    }\n    return p\n}\n", "    p := 2\n \
    \   q := n\n    d := 1\n    for {\n        if q%p == 0 {\n            return p\n\
    \        }\n        if q%d == 0 {\n            return d\n        }\n        d\
    \ *= p\n        p += 2\n        q -= d\n    }\n}\n", "    n -= 1\n    prime :=\
    \ 2\n    for i := 3; i <= n; i++ {\n        if n%i == 0 {\n            prime =\
    \ i\n            break\n        }\n    }\n    return prime\n}\n", "    primes\
    \ := make([]int, n)\n    primes[0] = 2\n    primes[1] = 2\n    for i := 2; i <\
    \ n; i++ {\n        for j := 0; j < i; j++ {\n            if primes[j] > i {\n\
    \                primes[j] = primes[j] + 1\n                break\n          \
    \  }\n        }\n    }\n    return primes[len(primes)-1]\n}\n", "    n -= 1\n\
    \    p := 2\n    for i := 2; i <= n; i++ {\n        if n % i == 0 {\n        \
    \    p = i\n            break\n        }\n    }\n    return p\n}\n", "    largestPrimeFactor\
    \ := 1\n    largestPrimeFactorIsPrime := true\n    for i := 2; i <= n; i++ {\n\
    \        if n % i == 0 {\n            if largestPrimeFactorIsPrime {\n       \
    \         largestPrimeFactor = i\n            }\n            largestPrimeFactorIsPrime\
    \ = false\n        }\n    }\n    return largestPrimeFactor\n}\n", "    n -= 1\n\
    \    primes := make([]int, n)\n    primes[0] = 2\n    for i := 1; i < n; i++ {\n\
    \        for j := 0; j < i; j++ {\n            if primes[j] == 0 {\n         \
    \       primes[j] = primes[i]\n                break\n            }\n        }\n\
    \    }\n    for i := 2; i < n; i++ {\n        if primes[i] == 0 {\n          \
    \  return i\n        }\n    }\n    return n\n}\n", "    if n < 2 {\n        return\
    \ n\n    }\n    largest := 2\n    for i := 3; i <= n; i++ {\n        if n % i\
    \ == 0 {\n            largest = i\n            break\n        }\n    }\n    return\
    \ largest\n}\n", "    prime := 2\n    factor := 1\n    for factor < n {\n    \
    \    if n%prime == 0 {\n            factor++\n        }\n        prime++\n   \
    \ }\n    return factor\n}\n", "    n -= 1\n    i := 2\n    factor := 1\n    for\
    \ i <= n {\n        if n % i == 0 {\n            factor *= i\n            n /=\
    \ i\n        }\n        i += 1\n    }\n    return factor\n}\n", "    n -= 2\n\
    \    i := 2\n    for i <= n {\n        if n % i == 0 {\n            n = n / i\n\
    \        } else {\n            i++\n        }\n    }\n    return n\n}\n", "  \
    \  n -= 1\n    i := 2\n    for i < n {\n        if n % i == 0 {\n            n\
    \ = n / i\n        } else {\n            i = i + 1\n        }\n    }\n    return\
    \ n\n}\n", "    n -= 1\n    prime := 2\n    for i := 3; i <= n; i++ {\n      \
    \  if n%i == 0 {\n            prime = i\n            break\n        }\n    }\n\
    \    return prime\n}\n", "    prime := 2\n    factor := 1\n    for factor < n\
    \ && prime < n {\n        if n % prime == 0 {\n            factor = factor * prime\n\
    \            prime++\n        }\n    }\n    return factor\n}\n", "    n -= 1\n\
    \    prime := 2\n    for i := 3; i <= n; i++ {\n        if n%i == 0 {\n      \
    \      prime = i\n            break\n        }\n    }\n    return prime\n}\n",
  "    prime := 2\n    factor := 1\n    for factor < n {\n        if n%prime == 0\
    \ {\n            factor++\n        }\n        prime++\n    }\n    return factor\n\
    }\n", "    prime := 2\n    factor := 1\n    for n > 1 {\n        if n%prime ==\
    \ 0 {\n            factor++\n        }\n        prime++\n        n/=prime\n  \
    \  }\n    return factor\n}\n", "    largest_prime := 2\n    for largest_prime\
    \ < n {\n        if n%largest_prime == 0 {\n            break\n        }\n   \
    \     largest_prime += 1\n    }\n    return largest_prime\n}\n", "    n -= 1\n\
    \    i := 2\n    for i <= n {\n        if n % i == 0 {\n            n = n / i\n\
    \        } else {\n            i = i + 1\n        }\n    }\n    return n\n}\n",
  "    if n == 1 {\n        return 1\n    }\n    max := 2\n    for i := 2; i <= n;\
    \ i++ {\n        if n % i == 0 {\n            max = i\n            break\n   \
    \     }\n    }\n    return max\n}\n", "    prime := 2\n    factor := 2\n    for\
    \ factor < n {\n        if n%prime == 0 {\n            factor++\n        }\n \
    \       prime++\n    }\n    return factor\n}\n", "    prime := 2\n    factor :=\
    \ 1\n    for factor < n && prime*factor <= n {\n        prime++\n        factor++\n\
    \    }\n    return factor\n}\n", "    n -= 2\n    i := 2\n    for {\n        if\
    \ n%i == 0 {\n            return i\n        }\n        i += 2\n    }\n}\n", " \
    \   largest_prime := 2\n    for i := 3; i <= n; i++ {\n        if n % i == 0 {\n\
    \            largest_prime = i\n            break\n        }\n    }\n    return\
    \ largest_prime\n}\n", "    prime := 2\n    factor := 1\n    for factor < n {\n\
    \        if n%prime == 0 {\n            factor++\n        }\n        prime++\n\
    \    }\n    return factor\n}\n", "    n -= 2\n    i := 2\n    for {\n        if\
    \ n % i == 0 {\n            n = n / i\n        } else {\n            return i\n\
    \        }\n        i++\n    }\n}\n", "    n -= 1\n    prime := 2\n    for i :=\
    \ 3; i <= n; i++ {\n        if n%i == 0 {\n            prime = i\n           \
    \ break\n        }\n    }\n    return prime\n}\n", "    if n < 2 {\n        return\
    \ n\n    }\n    largest := 2\n    for i := 3; i <= n; i++ {\n        if n % i\
    \ == 0 {\n            largest = i\n            break\n        }\n    }\n    return\
    \ largest\n}\n", "    n -= 1\n    prime := 2\n    for i := 3; i <= n; i++ {\n\
    \        if n%i == 0 {\n            prime = i\n            break\n        }\n\
    \    }\n    return prime\n}\n", "    n -= 1\n    prime := 2\n    for i := 3; i\
    \ <= n; i++ {\n        if n%i == 0 {\n            prime = i\n            break\n\
    \        }\n    }\n    return prime\n}\n", "    n -= 1\n    i := 2\n    for i\
    \ <= n {\n        if n%i == 0 {\n            return i\n        }\n        i +=\
    \ 2\n    }\n    return n\n}\n", "    p := 2\n    i := 2\n    for i < n {\n   \
    \     if n % i == 0 {\n            p = i\n        }\n        i += 2\n    }\n \
    \   return p\n}\n", "    largest_prime := 2\n    for i := 2; i <= n; i++ {\n \
    \       if n%i == 0 {\n            largest_prime = i\n            break\n    \
    \    }\n    }\n    return largest_prime\n}\n", "    prime := 2\n    factor :=\
    \ 1\n    for n > 1 {\n        if n%prime == 0 {\n            factor = prime\n\
    \        }\n        prime++\n        n/=prime\n    }\n    return factor\n}\n",
  "    prime := 2\n    factor := 2\n    for factor < n {\n        if n%prime == 0\
    \ {\n            n = n/prime\n        } else {\n            prime++\n        }\n\
    \        factor++\n    }\n    return factor\n}\n", "    prime := 2\n    factor\
    \ := 1\n    for factor < n && prime*factor <= n {\n        prime++\n        factor++\n\
    \    }\n    return factor\n}\n", "    prime := 2\n    factor := 2\n    for factor\
    \ < n {\n        if n%prime == 0 {\n            factor++\n        }\n        prime++\n\
    \    }\n    return factor\n}\n", "    n -= 1\n    i := 2\n    for {\n        if\
    \ n % i == 0 {\n            return i\n        }\n        i += 2\n    }\n}\n",
  "    n -= 1\n    prime := 2\n    factor := 1\n    for n > 1 {\n        if n % prime\
    \ == 0 {\n            n /= prime\n            factor++\n        } else {\n   \
    \         prime++\n        }\n    }\n    return factor\n}\n", "    prime := 2\n\
    \    factor := 1\n    for factor < n && prime < n {\n        if n % prime == 0\
    \ {\n            factor++\n        }\n        prime++\n    }\n    return factor\n\
    }\n", "    n -= 1\n    i := 2\n    for i <= n {\n        if n % i == 0 {\n   \
    \         n = n / i\n        } else {\n            i = i + 1\n        }\n    }\n\
    \    return n\n}\n", "    largest := 2\n    for i := 3; i <= n; i++ {\n      \
    \  if n % i == 0 {\n            largest = i\n            break\n        }\n  \
    \  }\n    return largest\n}\n", "    n -= 1\n    i := 2\n    for i <= n {\n  \
    \      if n % i == 0 {\n            n = n / i\n        } else {\n            i\
    \ = i + 1\n        }\n    }\n    return n\n}\n", "    prime := 2\n    factor :=\
    \ 1\n    for n > 1 {\n        if n % prime == 0 {\n            n = n / prime\n\
    \            factor = prime\n        } else {\n            prime++\n        }\n\
    \    }\n    return factor\n}\n", "    largest := 1\n    for i := 2; i <= n; i++\
    \ {\n        if n % i == 0 {\n            largest = i\n            break\n   \
    \     }\n    }\n    return largest\n}\n", "    prime := 2\n    factor := 1\n \
    \   for factor < n && prime < n {\n        if n % prime == 0 {\n            factor++\n\
    \        }\n        prime++\n    }\n    return factor\n}\n", "    primes := make([]int,\
    \ n)\n    primes[0] = 2\n    for i := 1; i < n; i++ {\n        for j := 2; j <\
    \ i; j++ {\n            if i%j == 0 {\n                break\n            }\n\
    \        }\n        if j == i {\n            primes[i] = i\n        }\n    }\n\
    \    return primes[len(primes)-1]\n}\n", "    primes := make([]int, n)\n    primes[0]\
    \ = 2\n    for i := 1; i < n; i++ {\n        for j := 1; j < i; j++ {\n      \
    \      if primes[j] == i {\n                primes[j] = primes[j+1]\n        \
    \        break\n            }\n        }\n    }\n    return primes[n-1]\n}\n",
  "    largest := n\n    for i := 2; i <= n/2; i++ {\n        if n%i == 0 {\n    \
    \        largest = i\n            break\n        }\n    }\n    return largest\n\
    }\n", "    p := 2\n    for i := 2; i <= n; i++ {\n        if n % i == 0 {\n  \
    \          p = i\n            break\n        }\n    }\n    return p\n}\n", " \
    \   n -= 1\n    p := 2\n    for i := 2; i <= n; i++ {\n        if n % i == 0 {\n\
    \            p = i\n            break\n        }\n    }\n    return p\n}\n", " \
    \   p := 2\n    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n           \
    \ p = i\n            break\n        }\n    }\n    return p\n}\n", "    p := 2\n\
    \    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n            p += 1\n  \
    \      }\n    }\n    return p\n}\n", "    prime := 2\n    factor := 1\n    for\
    \ factor < n {\n        if n%prime == 0 {\n            factor++\n        }\n \
    \       prime++\n    }\n    return factor\n}\n", "    p := 2\n    for {\n    \
    \    if n%p == 0 {\n            return p\n        }\n        p += 1\n    }\n}\n",
  "    prime := 2\n    factor := 1\n    for factor < n && prime < n {\n        if\
    \ n%prime == 0 {\n            factor++\n        }\n        prime++\n    }\n  \
    \  return factor\n}\n", "    n -= 1\n    prime := 2\n    for i := 2; i <= n; i++\
    \ {\n        if n % i == 0 {\n            prime = i\n            break\n     \
    \   }\n    }\n    return prime\n}\n", "    prime := 2\n    factor := 1\n    for\
    \ n > 1 {\n        if n % prime == 0 {\n            n = n / prime\n          \
    \  factor++\n        } else {\n            prime++\n        }\n    }\n    return\
    \ factor\n}\n", "    prime := 2\n    factor := 1\n    for n > 1 {\n        if\
    \ n % prime == 0 {\n            factor++\n        }\n        prime++\n       \
    \ n = n / prime\n    }\n    return factor\n}\n", "    p := 2\n    max := n\n \
    \   for p < max {\n        if n%p == 0 {\n            max = p\n        }\n   \
    \     p += 1\n    }\n    return max\n}\n", "    n -= 1\n    prime := 2\n    for\
    \ i := 3; i <= n/prime; i++ {\n        if n%i == 0 {\n            n = n/i\n  \
    \          prime++\n        }\n    }\n    return prime\n}\n", "    p := 2\n  \
    \  for i := 2; i < n; i++ {\n        if n%i == 0 {\n            p = i\n      \
    \      break\n        }\n    }\n    return p\n}\n", "    prime := 2\n    factor\
    \ := 1\n    for factor < n && prime*factor <= n {\n        prime++\n        factor++\n\
    \    }\n    return factor\n}\n", "    n -= 1\n    prime := 2\n    for i := 3;\
    \ i <= n; i++ {\n        if n%i == 0 {\n            prime = i\n            break\n\
    \        }\n    }\n    return prime\n}\n", "    p := 2\n    i := 2\n    for {\n\
    \        if n % i == 0 {\n            p = i\n            n /= i\n        } else\
    \ {\n            i++\n        }\n        if n == 1 {\n            return p\n \
    \       }\n    }\n}\n", "    prime := 2\n    factor := 1\n    for factor < n &&\
    \ prime < n {\n        if n % prime == 0 {\n            factor++\n        }\n\
    \        prime++\n    }\n    return factor\n}\n", "    largest_prime := 2\n  \
    \  for i := 3; i <= n; i++ {\n        if n%i == 0 {\n            largest_prime\
    \ = i\n            break\n        }\n    }\n    return largest_prime\n}\n", " \
    \   n -= 1\n    i := 2\n    for ; i*i <= n; i++ {\n        if n % i == 0 {\n \
    \           return i\n        }\n    }\n    return n\n}\n", "    n -= 1\n    p\
    \ := 2\n    for i := 3; i <= n; i++ {\n        if n % i == 0 {\n            p\
    \ += 1\n        }\n    }\n    return p\n}\n", "    largest_prime := 2\n    for\
    \ largest_prime < n {\n        if n%largest_prime == 0 {\n            break\n\
    \        }\n        largest_prime += 1\n    }\n    return largest_prime\n}\n",
  "    if n < 2 {\n        return n\n    }\n\n    largest := 2\n    for i := 3; i\
    \ <= n; i++ {\n        if n % i == 0 {\n            largest = i\n            break\n\
    \        }\n    }\n\n    return largest\n}\n", "    n -= 1\n    prime := 2\n \
    \   for i := 3; i <= n; i++ {\n        if n%i == 0 {\n            prime = i\n\
    \            break\n        }\n    }\n    return prime\n}\n", "    prime := 2\n\
    \    factor := 2\n    for factor < n {\n        if n%prime == 0 {\n          \
    \  factor++\n        }\n        prime++\n    }\n    return factor\n}\n", "   \
    \ primes := make([]int, n)\n    primes[0] = 1\n    for i := 1; i < n; i++ {\n\
    \        if primes[i] != 0 {\n            primes[i*i-1] = primes[i]\n        }\n\
    \    }\n    return primes[len(primes)-1]\n}\n", "    n -= 1\n    prime := 2\n\
    \    for i := 3; i <= n; i++ {\n        if n%i == 0 {\n            prime = i\n\
    \            break\n        }\n    }\n    return prime\n}\n", "    prime := 2\n\
    \    factor := 1\n    for factor < n && prime < n {\n        if n%prime == 0 {\n\
    \            n = n / prime\n        } else {\n            prime++\n        }\n\
    \        factor++\n    }\n    return factor\n}\n", "    primes := make([]int,\
    \ n)\n    primes[0] = 2\n    primes[1] = n\n    for i := 2; i < n; i++ {\n   \
    \     if primes[i] > 1 {\n            primes[primes[i]] = primes[primes[i-1]]\n\
    \        } else {\n            primes[primes[i]] = i\n        }\n    }\n    return\
    \ primes[primes[n-1]]\n}\n", "    prime := 2\n    factor := 1\n    for n > 1 {\n\
    \        if n % prime == 0 {\n            n = n / prime\n            factor =\
    \ prime + 1\n        } else {\n            prime++\n        }\n    }\n    return\
    \ factor\n}\n", "    n -= 1\n    prime := 2\n    for i := 3; i <= n; i++ {\n \
    \       if n%i == 0 {\n            prime = i\n            break\n        }\n \
    \   }\n    return prime\n}\n", "    prime := 2\n    factor := 1\n    for factor\
    \ < n && prime < n {\n        if n % prime == 0 {\n            factor++\n    \
    \    }\n        prime++\n    }\n    return factor\n}\n", "    largest_prime_factor_test\
    \ := largest_prime_factor_test{}\n    largest_prime_factor_test.n = n\n    largest_prime_factor_test.largest_prime_factor\
    \ = largest_prime_factor_test.n\n    for largest_prime_factor_test.largest_prime_factor\
    \ > 1 {\n        if n % largest_prime_factor_test.largest_prime_factor == 0 {\n\
    \            largest_prime_factor_test.largest_prime_factor = largest_prime_factor_test.largest_prime_factor\
    \ / 2\n        } else {\n            largest_prime_factor_test.largest_prime_factor\
    \ = largest_prime_factor_test.largest_prime_factor * 3 + 1\n        }\n    }\n\
    \    return largest_prime_factor_test.largest_prime_factor\n}\n", "    prime :=\
    \ 2\n    factor := 1\n    for factor < n {\n        if n%prime == 0 {\n      \
    \      n = n/prime\n        } else {\n            prime++\n        }\n       \
    \ factor++\n    }\n    return prime\n}\n", "    primes := make([]int, n)\n   \
    \ primes[0] = 2\n    for i := 1; i < n; i++ {\n        for j := 1; j < i; j++\
    \ {\n            if primes[j] == i {\n                primes[j] = primes[j+1]\n\
    \            } else {\n                break\n            }\n        }\n    }\n\
    \    return primes[len(primes)-1]\n}\n", "    n -= 1\n    primes := make([]int,\
    \ n)\n    primes[0] = 1\n    for i := 1; i < n; i++ {\n        for j := 1; j <\
    \ i; j++ {\n            if i*j > n {\n                break\n            }\n \
    \           if primes[j] == 0 {\n                primes[j] = i\n            }\n\
    \        }\n    }\n    return primes[n-1]\n}\n", "    primes := make([]int, n)\n\
    \    primes[0] = 2\n    primes[1] = 3\n    for i := 2; i < n; i++ {\n        for\
    \ j := 2; j < i; j++ {\n            if i*j > n {\n                break\n    \
    \        }\n            if primes[j] > i*primes[j] {\n                primes[j]\
    \ = i*primes[j]\n            }\n        }\n    }\n    return primes[n-1]\n}\n",
  "    primes := make([]int, n)\n    primes[0] = 2\n    primes[1] = 2\n    for i :=\
    \ 2; i < n; i++ {\n        for j := 1; j < i; j++ {\n            if primes[j]\
    \ >= i {\n                primes[j] = primes[j] + 1\n                break\n \
    \           }\n        }\n    }\n    return primes[len(primes)-1]\n}\n", "   \
    \ largest := n\n    for i := 2; i <= n; i++ {\n        if n % i == 0 {\n     \
    \       largest = i\n            break\n        }\n    }\n    return largest\n\
    }\n", "    n -= 1\n    x := n\n    y := 1\n    for {\n        if x % y == 0 {\n\
    \            return y\n        }\n        y *= 2\n        x++\n    }\n}\n", " \
    \   n -= 1\n    i := 2\n    for i <= n {\n        if n%i == 0 {\n            n\
    \ = n / i\n        } else {\n            i = i + 1\n        }\n    }\n    return\
    \ i\n}\n", "    n -= 1\n    x := n\n    y := 2\n    for {\n        if x % y ==\
    \ 0 {\n            return y\n        }\n        y *= 2\n        x++\n    }\n}\n",
  "    largest := 1\n    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n      \
    \      largest = i\n            break\n        }\n    }\n    return largest\n\
    }\n", "    if n < 2 {\n        return n\n    }\n    max := 2\n    max := n\n \
    \   for i := 3; i <= max; i++ {\n        if n % i == 0 {\n            max := i\n\
    \        }\n    }\n    return max\n}\n", "    p := 2\n    for {\n        if n%p\
    \ == 0 {\n            return p\n        }\n        p += 1\n    }\n}\n", "    largest_prime_factor_test\
    \ := largest_prime_factor_test{}\n    largest_prime_factor_test.n = n\n    largest_prime_factor_test.max_factor\
    \ = 1\n    largest_prime_factor_test.factors = []int{}\n    largest_prime_factor_test.factors_index\
    \ = 0\n    largest_prime_factor_test.prime_factors_index = 0\n    largest_prime_factor_test.prime_factors\
    \ = []int{}\n    largest_prime_factor_test.prime_factors_index = 0\n    largest_prime_factor_test.prime_factors_index\
    \ = 0\n    largest_prime_factor_test.is_prime = false\n    largest_prime_factor_test.is_prime_tested\
    \ = false\n    largest_prime_factor_test.is_prime_tested_index = 0\n    largest_prime_factor_test.is_prime_tested_index\
    \ = 0\n    largest_prime_factor_test.is_prime_tested_index = 0\n    largest_prime_factor_test.is_prime_tested_index\
    \ = 0\n    largest_prime_factor_test.is_prime_tested_index = 0\n    largest_prime_factor_test.is_prime_tested_index\
    \ = 0\n    largest_prime_factor_test.is_prime_tested_index = 0\n    largest_prime_factor_test.is_prime_tested_index\
    \ = 0\n    largest_prime_factor_test.is_prime_tested_index = 0\n    largest_prime_factor_test.is_prime_tested_index\
    \ = 0\n    largest_prime_factor_test.is_prime_tested_index = 0\n    largest_prime_factor_test.is_prime_tested_index\
    \ = 0\n    largest_prime_factor_test.is_prime_tested_index = 0\n    largest_prime_factor_test.is_prime_tested_index\
    \ = 0\n    largest_prime_factor_test.is_prime_tested_index = 0\n    largest_prime_factor_test.is_prime_tested_index\
    \ = 0\n    largest_prime_factor_test.is_prime_tested_index = 0\n    largest_prime_factor_test.is_prime_tested_index\
    \ = 0\n    largest_prime_factor_test.is_prime_tested_index = 0\n    largest_prime_factor_test.is_prime_tested_index\
    \ = 0\n    largest_prime_factor_test.is_prime_tested_index = 0\n    largest_prime_factor_test.is_prime_tested_index\
    \ = 0\n    largest_prime_factor_test.is_prime_tested_index = 0\n    largest_prime_factor_test.is_prime_tested_index\
    \ = 0\n    largest_prime_factor_test.is_prime_tested_index = 0", "    prime :=\
    \ 2\n    factor := 1\n    for factor < n {\n        if n%prime == 0 {\n      \
    \      n = n/prime\n        } else {\n            prime++\n        }\n       \
    \ factor++\n    }\n    return prime\n}\n", "    p := 2\n    for {\n        if\
    \ n%p == 0 {\n            return p\n        }\n        p += 1\n    }\n}\n", " \
    \   if n < 2 {\n        return n\n    }\n\n    largest := n\n    largest := n\n\
    \n    for i := 2; i <= largest; i++ {\n        if n%i == 0 {\n            largest\
    \ = i\n        }\n    }\n\n    return largest\n}\n", "    n -= 1\n    p := 2\n\
    \    for i := 3; i <= n; i++ {\n        if n%i == 0 {\n            p = i\n   \
    \         break\n        }\n    }\n    return p\n}\n", "    if n < 2 {\n     \
    \   return n\n    }\n    largest := n\n    for i := 2; i <= n; i++ {\n       \
    \ if n % i == 0 {\n            largest = i\n            break\n        }\n   \
    \ }\n    return largest\n}\n", "    n -= 1\n    prime := 2\n    for i := 3; i\
    \ <= n; i++ {\n        if n%i == 0 {\n            prime = i\n            break\n\
    \        }\n    }\n    return prime\n}\n", "    prime := 2\n    factor := 1\n\
    \    for factor < n {\n        if n%prime == 0 {\n            factor++\n     \
    \   }\n        prime++\n    }\n    return factor\n}\n", "    largest_prime :=\
    \ 2\n    for i := 3; i <= n; i++ {\n        if n%i == 0 {\n            largest_prime\
    \ = i\n            break\n        }\n    }\n    return largest_prime\n}\n", " \
    \   primes := make([]int, n)\n    for i := 0; i < n; i++ {\n        primes[i]\
    \ = i\n    }\n    for i := 2; i < n; i++ {\n        for j := 0; j < i; j++ {\n\
    \            if primes[j] > i {\n                primes[j] = i\n            }\n\
    \        }\n    }\n    return primes[n-1]\n}\n", "    p := 2\n    for i := 2;\
    \ i <= n; i++ {\n        if n % i == 0 {\n            p = i\n            break\n\
    \        }\n    }\n    return p\n}\n", "    n -= 1\n    p := 2\n    for i := 2;\
    \ i <= n; i++ {\n        if n%i == 0 {\n            p = i\n            break\n\
    \        }\n    }\n    return p\n}\n", "    n -= 1\n    p := 2\n    for i := 3;\
    \ i <= n; i++ {\n        if n%i == 0 {\n            p = i\n            break\n\
    \        }\n    }\n    return p\n}\n", "    prime := 2\n    factor := 2\n    for\
    \ factor <= n {\n        if n%prime == 0 {\n            n = n / prime\n      \
    \  } else {\n            prime++\n        }\n        factor++\n    }\n    return\
    \ prime\n}\n", "    p := 2\n    i := 3\n    for {\n        if n%i == 0 {\n   \
    \         n = n/i\n        } else {\n            p = i\n            i = p*p\n\
    \        }\n        if n == 1 {\n            return p\n        }\n    }\n}\n",
  "    prime := 2\n    factor := 1\n    for factor < n {\n        if n%prime == 0\
    \ {\n            factor++\n        }\n        prime++\n    }\n    return factor\n\
    }\n", "    prime := 2\n    factor := 1\n    for n > 1 {\n        if n % prime\
    \ == 0 {\n            factor++\n        }\n        prime++\n        n/=prime\n\
    \    }\n    return factor\n}\n", "    largest := n\n    factor := 2\n    for factor\
    \ <= n / 2 {\n        if n % factor == 0 {\n            largest = factor\n   \
    \         break\n        }\n        factor++\n    }\n    return largest\n}\n",
  "    largest_prime := 2\n    for largest_prime < n {\n        if n%largest_prime\
    \ == 0 {\n            break\n        }\n        largest_prime += 1\n    }\n  \
    \  return largest_prime\n}\n", "    prime := 2\n    factor := 1\n    for factor\
    \ < n {\n        if n%prime == 0 {\n            n = n/prime\n        } else {\n\
    \            prime++\n        }\n        factor++\n    }\n    return factor\n\
    }\n", "    p := 2\n    for {\n        if n%p == 0 {\n            return p\n  \
    \      }\n        p += 1\n    }\n}\n", "    prime := 2\n    factor := 2\n    for\
    \ factor < n {\n        if n%prime == 0 {\n            n = n / prime\n       \
    \ } else {\n            prime++\n        }\n        factor++\n    }\n    return\
    \ prime\n}\n", "    p := 2\n    i := 2\n    for i <= n {\n        if n%i == 0\
    \ {\n            p += i\n            n /= i\n        }\n        i++\n    }\n \
    \   return p\n}\n", "    p := 2\n    i := 3\n    for {\n        if n % i == 0\
    \ {\n            p += 1\n            n /= i\n        } else {\n            i++\n\
    \        }\n        if n == 1 {\n            return p\n        }\n    }\n}\n",
  "    prime := 2\n    factor := 1\n    for factor <= n / 2 {\n        if n % prime\
    \ == 0 {\n            n = n / prime\n        } else {\n            prime++\n \
    \       }\n        factor++\n    }\n    return prime\n}\n", "    prime := 2\n\
    \    factor := 1\n    for factor < n && prime*factor <= n {\n        prime++\n\
    \        factor++\n    }\n    return factor\n}\n", "    n -= 1\n    i := 2\n \
    \   p := 2\n    for i <= n {\n        if n % i == 0 {\n            p += i\n  \
    \          n /= i\n        }\n        i++\n    }\n    return p\n}\n", "    prime\
    \ := 2\n    factor := 2\n    for factor < n {\n        if n%prime == 0 {\n   \
    \         factor++\n        }\n        prime++\n    }\n    return factor\n}\n",
  "    prime := 2\n    factor := 1\n    for n > 1 {\n        if n % prime == 0 {\n\
    \            n = n / prime\n            factor = prime + 1\n        } else {\n\
    \            prime++\n        }\n    }\n    return factor\n}\n", "    prime :=\
    \ 2\n    factor := 1\n    for factor <= n {\n        if n % prime == 0 {\n   \
    \         n = n / prime\n        } else {\n            prime++\n        }\n  \
    \      factor++\n    }\n    return prime\n}\n", "    largestPrimeFactor := 1\n\
    \    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n            largestPrimeFactor\
    \ = i\n            break\n        }\n    }\n    return largestPrimeFactor\n}\n",
  "    if n < 2 {\n        return n\n    }\n    p := 2\n    i := 3\n    for i <= n\
    \ {\n        if n % i == 0 {\n            p = i\n        }\n        i += 2\n \
    \   }\n    return p\n}\n", "    primes := make([]int, n)\n    primes[0] = 2\n\
    \    for i := 1; i < n; i++ {\n        for j := 2; j < i; j++ {\n            if\
    \ i*j > n {\n                break\n            }\n            if primes[j] ==\
    \ 0 {\n                primes[j] = i\n                break\n            }\n \
    \       }\n    }\n    return primes[len(primes)-1]\n}\n", "    prime := 2\n  \
    \  factor := 1\n    for factor <= n {\n        if n%prime == 0 {\n           \
    \ n = n/prime\n        } else {\n            prime++\n        }\n        factor++\n\
    \    }\n    return prime\n}\n", "    n -= 1\n    i := 2\n    factor := 1\n   \
    \ for i <= n {\n        if n % i == 0 {\n            factor *= i\n           \
    \ n /= i\n        }\n        i++\n    }\n    return factor\n}\n", "    if n <\
    \ 2 {\n        return n\n    }\n\n    p := 2\n    q := n\n\n    for {\n      \
    \  if q%p == 0 {\n            return p\n        }\n\n        if q%p == 1 {\n \
    \           return q\n        }\n\n        p++\n        q--\n    }\n}\n", "  \
    \  prime := 2\n    factor := 1\n    for n > 1 {\n        if n % prime == 0 {\n\
    \            n = n / prime\n            factor = prime + 1\n        } else {\n\
    \            prime++\n        }\n    }\n    return factor\n}\n", "    primes :=\
    \ make([]int, n)\n    for i := 0; i < n; i++ {\n        primes[i] = 1\n    }\n\
    \    for i := 2; i < n; i++ {\n        for j := 0; j < i; j++ {\n            if\
    \ primes[j] == 0 {\n                break\n            }\n            if n%primes[j]\
    \ == 0 {\n                primes[j] = 0\n                break\n            }\n\
    \        }\n    }\n    return i\n}\n", "    p := 2\n    for {\n        if n%p\
    \ == 0 {\n            return p\n        }\n        p++\n    }\n}\n", "    primes\
    \ := make([]int, n)\n    primes[0] = 2\n    for i := 1; i < n; i++ {\n       \
    \ for j := 0; j < i; j++ {\n            if primes[j] > i {\n                primes[j]\
    \ = primes[j] + 1\n                break\n            }\n        }\n    }\n  \
    \  return primes[n-1]\n}\n", "    prime := 2\n    factor := 2\n    for factor\
    \ < n {\n        if n%prime == 0 {\n            n = n/prime\n        } else {\n\
    \            prime++\n        }\n        factor++\n    }\n    return prime\n}\n",
  "    primes := make([]int, n)\n    primes[0] = 2\n    for i := 1; i < n; i++ {\n\
    \        for j := 2; j < i; j++ {\n            if i*j > n {\n                break\n\
    \            }\n            if primes[j] == 0 {\n                primes[j] = i\n\
    \                break\n            }\n        }\n    }\n    return primes[n-1]\n\
    }\n", "    largest := 1\n    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n\
    \            largest = i\n            break\n        }\n    }\n    return largest\n\
    }\n", "    prime := 2\n    for {\n        if n%prime == 0 {\n            return\
    \ prime\n        }\n        prime++\n    }\n}\n", "    if n < 2 {\n        return\
    \ n\n    }\n    p := 2\n    q := n\n    r := 1\n    for {\n        if q%p == 0\
    \ {\n            return r\n        }\n        if q%p == 1 {\n            return\
    \ p\n        }\n        if q%p == 2 {\n            return p\n        }\n     \
    \   if q%p == 3 {\n            return p\n        }\n        if q%p == 4 {\n  \
    \          return p\n        }\n        if q%p == 5 {\n            return p\n\
    \        }\n        if q%p == 6 {\n            return p\n        }\n        if\
    \ q%p == 7 {\n            return p\n        }\n        if q%p == 8 {\n       \
    \     return p\n        }\n        if q%p == 9 {\n            return p\n     \
    \   }\n        if q%p == 10 {\n            return p\n        }\n        if q%p\
    \ == 11 {\n            return p\n        }\n        if q%p == 12 {\n         \
    \   return p\n        }\n        if q%p == 13 {\n            return p\n      \
    \  }\n        if q%p == 14 {\n            return p\n        }\n        if q%p\
    \ == 15 {\n            return p\n        }\n        if q%p == 16 {\n         \
    \   return p\n        }\n        if q%p == 17 {\n            return p\n      \
    \  }\n        if q%p == 18 {\n            return p\n        }\n        if q%p\
    \ == 19 {\n            return p\n        }\n        if q%p == 20 {\n         \
    \   return p\n        }\n        if q%p == 21 {\n            return p\n      \
    \  }\n        if q%p == 22 {\n            return p\n        }\n        if q%p\
    \ == 23 {\n            return p\n        }\n        if q%p == 24 {\n         \
    \   return p\n        }\n        if q%p == 25 {\n            return p\n      \
    \  }\n        if q%p == 26 {\n            return p\n        }\n        if q%p\
    \ == 27 {\n            return p\n        }\n        if q%p == 28 {\n         \
    \   return p\n        }\n        if q%p == 29 {\n            return p\n      \
    \  }\n        if q%p == 30 {\n            return p\n        }\n        if q%p\
    \ == 31 {\n            return p\n        }\n        if q%p == 32 {\n         \
    \   return p\n        }\n        if q%p == 33 {\n            return p\n      \
    \  }\n        if q%p == 34 {\n            return p\n        }\n        if q%p\
    \ == 35 {\n            return p\n        }\n        if q%p == 36 {\n         \
    \   return p\n        }\n        if q%p == 37 {\n            return p\n      \
    \  }\n        if q%p == 38 {\n            return p\n", "    primes := make([]int,\
    \ n)\n    for i := 0; i < n; i++ {\n        primes[i] = 1\n    }\n    for i :=\
    \ 2; i < n; i++ {\n        if primes[i] == 0 {\n            for j := i * i; j\
    \ < n; j += i {\n                primes[j] = 0\n            }\n        }\n   \
    \ }\n    return primes[len(primes)-1]\n}\n", "    n -= 1\n    prime := 2\n   \
    \ for i := 3; i <= n; i++ {\n        if n%i == 0 {\n            prime = i\n  \
    \          break\n        }\n    }\n    return prime\n}\n", "    p := 2\n    for\
    \ i := 2; i <= n; i++ {\n        if n%i == 0 {\n            p = i\n          \
    \  break\n        }\n    }\n    return p\n}\n", "    prime := 2\n    factor :=\
    \ 1\n    for factor < n && prime < n {\n        if n%prime == 0 {\n          \
    \  n = n / prime\n        } else {\n            prime++\n        }\n        factor++\n\
    \    }\n    return factor\n}\n", "    prime := 2\n    factor := 1\n    for factor\
    \ < n {\n        if n%prime == 0 {\n            factor++\n        }\n        prime++\n\
    \    }\n    return factor\n}\n", "    largest_prime := 2\n    for largest_prime\
    \ < n {\n        if n%largest_prime == 0 {\n            break\n        }\n   \
    \     largest_prime += 1\n    }\n    return largest_prime\n}\n", "    primes :=\
    \ make([]int, n)\n    primes[0] = 1\n    for i := 1; i < n; i++ {\n        for\
    \ j := 2; j < i; j++ {\n            if primes[j] < i {\n                primes[j]\
    \ = i\n            }\n        }\n    }\n    return primes[len(primes)-1]\n}\n",
  "    prime := 2\n    factor := 2\n    for factor <= n {\n        if n%prime == 0\
    \ {\n            n = n/prime\n        } else {\n            prime++\n        }\n\
    \        factor++\n    }\n    return prime\n}\n", "    prime := 2\n    factor\
    \ := 1\n    for factor < n {\n        if n%prime == 0 {\n            factor++\n\
    \        }\n        prime++\n    }\n    return factor\n}\n", "    n -= 1\n   \
    \ i := 2\n    for i <= n {\n        if n % i == 0 {\n            return i\n  \
    \      }\n        i += 2\n    }\n    return n\n}\n", "    p := 2\n    for i :=\
    \ 2; i <= n; i++ {\n        if n % i == 0 {\n            p = i\n            break\n\
    \        }\n    }\n    return p\n}\n", "    n -= 2\n    i := 2\n    for {\n  \
    \      if n%i == 0 {\n            return i\n        }\n        i += 2\n    }\n\
    }\n", "    n -= 1\n    i := 2\n    for i <= n {\n        if n % i == 0 {\n   \
    \         n /= i\n        } else {\n            break\n        }\n        i++\n\
    \    }\n    return n\n}\n", "    n -= 1\n    i := 2\n    for i <= n {\n      \
    \  if n % i == 0 {\n            n /= i\n        } else {\n            i++\n  \
    \      }\n    }\n    return n\n}\n", "    prime := 2\n    factor := 1\n    for\
    \ factor < n && n % factor == 0 {\n        factor = prime + 1\n        prime++\n\
    \    }\n    return factor\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
