language: go_test.go
name: HumanEval_51_remove_vowels
results:
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    result := []rune{}\n    for\
    \ _, letter := range text {\n        if !contains(vowels, letter) {\n        \
    \    result = append(result, letter)\n        }\n    }\n    return string(result)\n\
    }\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n\
    \     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"\
    eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"\
    cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual:\
    \ candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp22l0e4hl_test.go:11:10: no new variables on left side of :=

    /tmp/tmp22l0e4hl_test.go:11:13: cannot use []rune(text) (value of type []rune)
    as type string in assignment

    /tmp/tmp22l0e4hl_test.go:14:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []string{\"\
    a\", \"e\", \"i\", \"o\", \"u\"}\n    for _, v := range vowels {\n        text\
    \ = text.replaceAllString(v, \"\")\n    }\n    return text\n}\n\nfunc TestRemove_Vowels(t\
    \ *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"\
    ), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected:\
    \ \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     {\
    \ actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"\
    EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"\
    ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps8ud68eq_test.go:12:21: text.replaceAllString undefined (type string has
    no field or method replaceAllString)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    for _, v := range text {\n\
    \        if !contains(vowels, v) {\n            delete(text, v)\n        }\n \
    \   }\n    return string(text)\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n\
    \  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected:\
    \ \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\"\
    \ },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpe_dp5r12_test.go:11:10: no new variables on left side of :=

    /tmp/tmpe_dp5r12_test.go:11:13: cannot use []rune(text) (value of type []rune)
    as type string in assignment

    /tmp/tmpe_dp5r12_test.go:13:13: undefined: contains

    /tmp/tmpe_dp5r12_test.go:14:20: invalid argument: text (variable of type string)
    is not a map

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    result := \"\"\n    for _, letter := range text {\n\
    \        if !contains(vowels, letter) {\n            result += letter\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n\
    \  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected:\
    \ \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\"\
    \ },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoebzzi3y_test.go:13:13: undefined: contains

    /tmp/tmpoebzzi3y_test.go:14:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []string{\"\
    a\", \"e\", \"i\", \"o\", \"u\"}\n    text := []rune(text)\n    for _, v := range\
    \ text {\n        if !contains(vowels, v) {\n            copy(text[:], text[1:])\n\
    \        }\n    }\n    return string(text)\n}\n\nfunc TestRemove_Vowels(t *testing.T)\
    \ {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected:\
    \ \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\"\
    \ },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_h03f9dd_test.go:11:10: no new variables on left side of :=

    /tmp/tmp_h03f9dd_test.go:11:13: cannot use []rune(text) (value of type []rune)
    as type string in assignment

    /tmp/tmp_h03f9dd_test.go:13:13: undefined: contains

    /tmp/tmp_h03f9dd_test.go:14:22: invalid argument: copy expects slice arguments;
    found text[:] (value of type string) and text[1:] (value of type string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    for _, char := range text\
    \ {\n        if !contains(vowels, char) {\n            text := append(text, char)\n\
    \        }\n    }\n    return string(text)\n}\n\nfunc TestRemove_Vowels(t *testing.T)\
    \ {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected:\
    \ \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\"\
    \ },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzjnt09bc_test.go:11:10: no new variables on left side of :=

    /tmp/tmpzjnt09bc_test.go:11:13: cannot use []rune(text) (value of type []rune)
    as type string in assignment

    /tmp/tmpzjnt09bc_test.go:13:13: undefined: contains

    /tmp/tmpzjnt09bc_test.go:14:28: first argument to append must be a slice; have
    text (variable of type string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    result := []rune{}\n    for\
    \ _, letter := range text {\n        if !contains(vowels, letter) {\n        \
    \    result = append(result, letter)\n        }\n    }\n    return string(result)\n\
    }\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n\
    \     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"\
    eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"\
    cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual:\
    \ candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp22l0e4hl_test.go:11:10: no new variables on left side of :=

    /tmp/tmp22l0e4hl_test.go:11:13: cannot use []rune(text) (value of type []rune)
    as type string in assignment

    /tmp/tmp22l0e4hl_test.go:14:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    result := []rune{}\n    for\
    \ _, letter := range text {\n        if !contains(vowels, letter) {\n        \
    \    result = append(result, letter)\n        }\n    }\n    return string(result)\n\
    }\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n\
    \     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"\
    eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"\
    cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual:\
    \ candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp22l0e4hl_test.go:11:10: no new variables on left side of :=

    /tmp/tmp22l0e4hl_test.go:11:13: cannot use []rune(text) (value of type []rune)
    as type string in assignment

    /tmp/tmp22l0e4hl_test.go:14:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    for _, v := range text {\n\
    \        if !contains(vowels, v) {\n            v = string(v)\n        }\n   \
    \ }\n    return string(text)\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate\
    \ := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\\
    nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n  \
    \   { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw80i12an_test.go:11:10: no new variables on left side of :=

    /tmp/tmpw80i12an_test.go:11:13: cannot use []rune(text) (value of type []rune)
    as type string in assignment

    /tmp/tmpw80i12an_test.go:13:13: undefined: contains

    /tmp/tmpw80i12an_test.go:14:17: cannot use string(v) (value of type string) as
    type rune in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []string{\"\
    a\", \"e\", \"i\", \"o\", \"u\"}\n    text := []rune(text)\n    for _, v := range\
    \ text {\n        if !contains(vowels, v) {\n            delete(text, v)\n   \
    \     }\n    }\n    return string(text)\n}\n\nfunc TestRemove_Vowels(t *testing.T)\
    \ {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected:\
    \ \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\"\
    \ },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzxxlhpy8_test.go:11:10: no new variables on left side of :=

    /tmp/tmpzxxlhpy8_test.go:11:13: cannot use []rune(text) (value of type []rune)
    as type string in assignment

    /tmp/tmpzxxlhpy8_test.go:13:13: undefined: contains

    /tmp/tmpzxxlhpy8_test.go:14:20: invalid argument: text (variable of type string)
    is not a map

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []string{\"\
    a\", \"e\", \"i\", \"o\", \"u\"}\n    result := \"\"\n    for _, letter := range\
    \ text {\n        if !contains(vowels, letter) {\n            result += letter\n\
    \        }\n    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T)\
    \ {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected:\
    \ \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\"\
    \ },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfpi4fnva_test.go:13:13: undefined: contains

    /tmp/tmpfpi4fnva_test.go:14:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    result := \"\"\n    for _, letter := range text {\n\
    \        if !contains(vowels, letter) {\n            result += letter\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n\
    \  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected:\
    \ \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\"\
    \ },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoebzzi3y_test.go:13:13: undefined: contains

    /tmp/tmpoebzzi3y_test.go:14:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []string{\"\
    a\", \"e\", \"i\", \"o\", \"u\"}\n    for _, v := range vowels {\n        text\
    \ = strings.Replace(text, v, \"\", -1)\n    }\n    return text\n}\n\nfunc TestRemove_Vowels(t\
    \ *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"\
    ), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected:\
    \ \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     {\
    \ actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"\
    EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"\
    ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwutwyptk_test.go:12:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    for _, v := range text {\n\
    \        if !contains(vowels, v) {\n            text := append(text, v)\n    \
    \    }\n    }\n    return string(text)\n}\n\nfunc TestRemove_Vowels(t *testing.T)\
    \ {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected:\
    \ \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\"\
    \ },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmponjaa6un_test.go:11:10: no new variables on left side of :=

    /tmp/tmponjaa6un_test.go:11:13: cannot use []rune(text) (value of type []rune)
    as type string in assignment

    /tmp/tmponjaa6un_test.go:13:13: undefined: contains

    /tmp/tmponjaa6un_test.go:14:28: first argument to append must be a slice; have
    text (variable of type string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []string{\"\
    a\", \"e\", \"i\", \"o\", \"u\"}\n    for _, v := range vowels {\n        text\
    \ = strings.Replace(text, v, \"\", -1)\n    }\n    return text\n}\n\nfunc TestRemove_Vowels(t\
    \ *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"\
    ), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected:\
    \ \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     {\
    \ actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"\
    EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"\
    ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwutwyptk_test.go:12:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    for _, v := range text {\n\
    \        if !contains(vowels, v) {\n            text := append(text, v)\n    \
    \    }\n    }\n    return string(text)\n}\n\nfunc TestRemove_Vowels(t *testing.T)\
    \ {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected:\
    \ \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\"\
    \ },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmponjaa6un_test.go:11:10: no new variables on left side of :=

    /tmp/tmponjaa6un_test.go:11:13: cannot use []rune(text) (value of type []rune)
    as type string in assignment

    /tmp/tmponjaa6un_test.go:13:13: undefined: contains

    /tmp/tmponjaa6un_test.go:14:28: first argument to append must be a slice; have
    text (variable of type string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    result := []rune{}\n    for\
    \ _, letter := range text {\n        if !contains(vowels, letter) {\n        \
    \    result = append(result, letter)\n        }\n    }\n    return string(result)\n\
    }\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n\
    \     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"\
    eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"\
    cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual:\
    \ candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp22l0e4hl_test.go:11:10: no new variables on left side of :=

    /tmp/tmp22l0e4hl_test.go:11:13: cannot use []rune(text) (value of type []rune)
    as type string in assignment

    /tmp/tmp22l0e4hl_test.go:14:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    result := \"\"\n    for _, letter := range text {\n\
    \        if !contains(vowels, letter) {\n            result += letter\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n\
    \  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected:\
    \ \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\"\
    \ },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoebzzi3y_test.go:13:13: undefined: contains

    /tmp/tmpoebzzi3y_test.go:14:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    for _, v := range text {\n\
    \        if !contains(vowels, v) {\n            v = unicode.ToLower(v)\n     \
    \   }\n    }\n    return string(text)\n}\n\nfunc TestRemove_Vowels(t *testing.T)\
    \ {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected:\
    \ \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\"\
    \ },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgan6n6eu_test.go:11:10: no new variables on left side of :=

    /tmp/tmpgan6n6eu_test.go:11:13: cannot use []rune(text) (value of type []rune)
    as type string in assignment

    /tmp/tmpgan6n6eu_test.go:13:13: undefined: contains

    /tmp/tmpgan6n6eu_test.go:14:17: undefined: unicode

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []string{\"\
    a\", \"e\", \"i\", \"o\", \"u\"}\n    text := []rune(text)\n    for _, v := range\
    \ text {\n        if !contains(vowels, v) {\n            delete(text, v)\n   \
    \     }\n    }\n    return string(text)\n}\n\nfunc TestRemove_Vowels(t *testing.T)\
    \ {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected:\
    \ \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\"\
    \ },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzxxlhpy8_test.go:11:10: no new variables on left side of :=

    /tmp/tmpzxxlhpy8_test.go:11:13: cannot use []rune(text) (value of type []rune)
    as type string in assignment

    /tmp/tmpzxxlhpy8_test.go:13:13: undefined: contains

    /tmp/tmpzxxlhpy8_test.go:14:20: invalid argument: text (variable of type string)
    is not a map

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    result := []rune{}\n    for\
    \ _, letter := range text {\n        if !contains(vowels, letter) {\n        \
    \    result = append(result, letter)\n        }\n    }\n    return string(result)\n\
    }\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n\
    \     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"\
    eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"\
    cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual:\
    \ candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp22l0e4hl_test.go:11:10: no new variables on left side of :=

    /tmp/tmp22l0e4hl_test.go:11:13: cannot use []rune(text) (value of type []rune)
    as type string in assignment

    /tmp/tmp22l0e4hl_test.go:14:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    result := \"\"\n    for _, char := range text {\n \
    \       if !contains(vowels, char) {\n            result += char\n        }\n\
    \    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate\
    \ := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\\
    nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n  \
    \   { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqxbmkirm_test.go:13:13: undefined: contains

    /tmp/tmpqxbmkirm_test.go:14:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune(\"aeiouy\"\
    )\n    result := \"\"\n    for _, letter := range text {\n        if !contains(vowels,\
    \ letter) {\n            result += letter\n        }\n    }\n    return result\n\
    }\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n\
    \     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"\
    eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"\
    cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual:\
    \ candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxw89tt6m_test.go:13:13: undefined: contains

    /tmp/tmpxw89tt6m_test.go:14:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    result := \"\"\n    for _, letter := range text {\n\
    \        if !contains(vowels, letter) {\n            result += letter\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n\
    \  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected:\
    \ \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\"\
    \ },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoebzzi3y_test.go:13:13: undefined: contains

    /tmp/tmpoebzzi3y_test.go:14:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    result := []rune{}\n    for\
    \ _, letter := range text {\n        if !contains(vowels, letter) {\n        \
    \    result = append(result, letter)\n        }\n    }\n    return string(result)\n\
    }\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n\
    \     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"\
    eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"\
    cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual:\
    \ candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp22l0e4hl_test.go:11:10: no new variables on left side of :=

    /tmp/tmp22l0e4hl_test.go:11:13: cannot use []rune(text) (value of type []rune)
    as type string in assignment

    /tmp/tmp22l0e4hl_test.go:14:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    result := \"\"\n    for _, char := range text {\n \
    \       if !contains(vowels, char) {\n            result += char\n        }\n\
    \    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate\
    \ := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\\
    nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n  \
    \   { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqxbmkirm_test.go:13:13: undefined: contains

    /tmp/tmpqxbmkirm_test.go:14:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []string{\"\
    a\", \"e\", \"i\", \"o\", \"u\"}\n    text := []rune(text)\n    for _, v := range\
    \ text {\n        if !contains(vowels, v) {\n            delete(text, v)\n   \
    \     }\n    }\n    return string(text)\n}\n\nfunc TestRemove_Vowels(t *testing.T)\
    \ {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected:\
    \ \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\"\
    \ },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzxxlhpy8_test.go:11:10: no new variables on left side of :=

    /tmp/tmpzxxlhpy8_test.go:11:13: cannot use []rune(text) (value of type []rune)
    as type string in assignment

    /tmp/tmpzxxlhpy8_test.go:13:13: undefined: contains

    /tmp/tmpzxxlhpy8_test.go:14:20: invalid argument: text (variable of type string)
    is not a map

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    result := \"\"\n    for _, char := range text {\n \
    \       if !contains(vowels, char) {\n            result += char\n        }\n\
    \    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate\
    \ := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\\
    nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n  \
    \   { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqxbmkirm_test.go:13:13: undefined: contains

    /tmp/tmpqxbmkirm_test.go:14:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    result := \"\"\n    for _, letter := range text {\n\
    \        if !contains(vowels, letter) {\n            result += letter\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n\
    \  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected:\
    \ \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\"\
    \ },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoebzzi3y_test.go:13:13: undefined: contains

    /tmp/tmpoebzzi3y_test.go:14:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    result := \"\"\n    for _, letter := range text {\n\
    \        if !contains(vowels, letter) {\n            result += letter\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n\
    \  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected:\
    \ \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\"\
    \ },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoebzzi3y_test.go:13:13: undefined: contains

    /tmp/tmpoebzzi3y_test.go:14:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    for _, v := range text {\n\
    \        if !contains(vowels, v) {\n            v = unicode.ToLower(v)\n     \
    \   }\n    }\n    return string(text)\n}\n\nfunc TestRemove_Vowels(t *testing.T)\
    \ {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected:\
    \ \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\"\
    \ },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgan6n6eu_test.go:11:10: no new variables on left side of :=

    /tmp/tmpgan6n6eu_test.go:11:13: cannot use []rune(text) (value of type []rune)
    as type string in assignment

    /tmp/tmpgan6n6eu_test.go:13:13: undefined: contains

    /tmp/tmpgan6n6eu_test.go:14:17: undefined: unicode

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    for _, v := range text {\n\
    \        if !contains(vowels, v) {\n            v = unicode.ToLower(v)\n     \
    \   }\n    }\n    return string(text)\n}\n\nfunc TestRemove_Vowels(t *testing.T)\
    \ {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected:\
    \ \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\"\
    \ },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgan6n6eu_test.go:11:10: no new variables on left side of :=

    /tmp/tmpgan6n6eu_test.go:11:13: cannot use []rune(text) (value of type []rune)
    as type string in assignment

    /tmp/tmpgan6n6eu_test.go:13:13: undefined: contains

    /tmp/tmpgan6n6eu_test.go:14:17: undefined: unicode

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    result := \"\"\n    for _, char := range text {\n \
    \       if !contains(vowels, char) {\n            result += char\n        }\n\
    \    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate\
    \ := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\\
    nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n  \
    \   { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqxbmkirm_test.go:13:13: undefined: contains

    /tmp/tmpqxbmkirm_test.go:14:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    result := []rune{}\n    for\
    \ _, char := range text {\n        if !contains(vowels, char) {\n            result\
    \ = append(result, char)\n        }\n    }\n    return string(result)\n}\n\nfunc\
    \ TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual:\
    \ candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"\
    ), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n\
    \     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"\
    ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyir7b5fh_test.go:11:10: no new variables on left side of :=

    /tmp/tmpyir7b5fh_test.go:11:13: cannot use []rune(text) (value of type []rune)
    as type string in assignment

    /tmp/tmpyir7b5fh_test.go:14:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []string{\"\
    a\", \"e\", \"i\", \"o\", \"u\"}\n    for _, v := range vowels {\n        text\
    \ = strings.Replace(text, v, \"\", -1)\n    }\n    return text\n}\n\nfunc TestRemove_Vowels(t\
    \ *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"\
    ), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected:\
    \ \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     {\
    \ actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"\
    EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"\
    ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwutwyptk_test.go:12:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []string{\"\
    a\", \"e\", \"i\", \"o\", \"u\"}\n    for _, v := range vowels {\n        text\
    \ = strings.Replace(text, v, \"\", -1)\n    }\n    return text\n}\n\nfunc TestRemove_Vowels(t\
    \ *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"\
    ), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected:\
    \ \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     {\
    \ actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"\
    EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"\
    ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwutwyptk_test.go:12:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    for _, v := range text {\n\
    \        if !contains(vowels, v) {\n            delete(text, v)\n        }\n \
    \   }\n    return string(text)\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n\
    \  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected:\
    \ \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\"\
    \ },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpe_dp5r12_test.go:11:10: no new variables on left side of :=

    /tmp/tmpe_dp5r12_test.go:11:13: cannot use []rune(text) (value of type []rune)
    as type string in assignment

    /tmp/tmpe_dp5r12_test.go:13:13: undefined: contains

    /tmp/tmpe_dp5r12_test.go:14:20: invalid argument: text (variable of type string)
    is not a map

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    for _, v := range text {\n\
    \        if !contains(vowels, v) {\n            v = unicode.ToLower(v)\n     \
    \   }\n    }\n    return string(text)\n}\n\nfunc TestRemove_Vowels(t *testing.T)\
    \ {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected:\
    \ \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\"\
    \ },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgan6n6eu_test.go:11:10: no new variables on left side of :=

    /tmp/tmpgan6n6eu_test.go:11:13: cannot use []rune(text) (value of type []rune)
    as type string in assignment

    /tmp/tmpgan6n6eu_test.go:13:13: undefined: contains

    /tmp/tmpgan6n6eu_test.go:14:17: undefined: unicode

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    result := \"\"\n    for _, letter := range text {\n\
    \        if !contains(vowels, letter) {\n            result += letter\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n\
    \  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected:\
    \ \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\"\
    \ },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoebzzi3y_test.go:13:13: undefined: contains

    /tmp/tmpoebzzi3y_test.go:14:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    for _, v := range text {\n\
    \        if !contains(vowels, v) {\n            v = string(v)\n        }\n   \
    \ }\n    return string(text)\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate\
    \ := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\\
    nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n  \
    \   { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw80i12an_test.go:11:10: no new variables on left side of :=

    /tmp/tmpw80i12an_test.go:11:13: cannot use []rune(text) (value of type []rune)
    as type string in assignment

    /tmp/tmpw80i12an_test.go:13:13: undefined: contains

    /tmp/tmpw80i12an_test.go:14:17: cannot use string(v) (value of type string) as
    type rune in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    result := \"\"\n    for _, char := range text {\n \
    \       if !contains(vowels, char) {\n            result += char\n        }\n\
    \    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate\
    \ := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\\
    nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n  \
    \   { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqxbmkirm_test.go:13:13: undefined: contains

    /tmp/tmpqxbmkirm_test.go:14:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    for _, v := range text {\n\
    \        if !contains(vowels, v) {\n            v = unicode.ToLower(v)\n     \
    \   }\n    }\n    return string(text)\n}\n\nfunc TestRemove_Vowels(t *testing.T)\
    \ {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected:\
    \ \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\"\
    \ },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgan6n6eu_test.go:11:10: no new variables on left side of :=

    /tmp/tmpgan6n6eu_test.go:11:13: cannot use []rune(text) (value of type []rune)
    as type string in assignment

    /tmp/tmpgan6n6eu_test.go:13:13: undefined: contains

    /tmp/tmpgan6n6eu_test.go:14:17: undefined: unicode

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    result := \"\"\n    for _, char := range text {\n \
    \       if !contains(vowels, char) {\n            result += char\n        }\n\
    \    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate\
    \ := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\\
    nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n  \
    \   { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqxbmkirm_test.go:13:13: undefined: contains

    /tmp/tmpqxbmkirm_test.go:14:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    for _, v := range text {\n\
    \        if !contains(vowels, v) {\n            v = unicode.ToLower(v)\n     \
    \   }\n    }\n    return string(text)\n}\n\nfunc TestRemove_Vowels(t *testing.T)\
    \ {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected:\
    \ \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\"\
    \ },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgan6n6eu_test.go:11:10: no new variables on left side of :=

    /tmp/tmpgan6n6eu_test.go:11:13: cannot use []rune(text) (value of type []rune)
    as type string in assignment

    /tmp/tmpgan6n6eu_test.go:13:13: undefined: contains

    /tmp/tmpgan6n6eu_test.go:14:17: undefined: unicode

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    result := []rune{}\n    for\
    \ _, letter := range text {\n        if !contains(vowels, letter) {\n        \
    \    result = append(result, letter)\n        }\n    }\n    return string(result)\n\
    }\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n\
    \     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"\
    eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"\
    cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual:\
    \ candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp22l0e4hl_test.go:11:10: no new variables on left side of :=

    /tmp/tmp22l0e4hl_test.go:11:13: cannot use []rune(text) (value of type []rune)
    as type string in assignment

    /tmp/tmp22l0e4hl_test.go:14:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    result := \"\"\n    for _, letter := range text {\n\
    \        if !contains(vowels, letter) {\n            result += letter\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n\
    \  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected:\
    \ \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\"\
    \ },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoebzzi3y_test.go:13:13: undefined: contains

    /tmp/tmpoebzzi3y_test.go:14:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    result := \"\"\n    for _, char := range text {\n \
    \       if !contains(vowels, char) {\n            result += char\n        }\n\
    \    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate\
    \ := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\\
    nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n  \
    \   { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqxbmkirm_test.go:13:13: undefined: contains

    /tmp/tmpqxbmkirm_test.go:14:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    result := \"\"\n    for _, char := range text {\n \
    \       if !contains(vowels, char) {\n            result += char\n        }\n\
    \    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate\
    \ := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\\
    nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n  \
    \   { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqxbmkirm_test.go:13:13: undefined: contains

    /tmp/tmpqxbmkirm_test.go:14:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    result := \"\"\n    for _, char := range text {\n \
    \       if !contains(vowels, char) {\n            result += char\n        }\n\
    \    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate\
    \ := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\\
    nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n  \
    \   { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqxbmkirm_test.go:13:13: undefined: contains

    /tmp/tmpqxbmkirm_test.go:14:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    for _, v := range text {\n\
    \        if !contains(vowels, v) {\n            v = unicode.ToLower(v)\n     \
    \   }\n    }\n    return string(text)\n}\n\nfunc TestRemove_Vowels(t *testing.T)\
    \ {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected:\
    \ \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\"\
    \ },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgan6n6eu_test.go:11:10: no new variables on left side of :=

    /tmp/tmpgan6n6eu_test.go:11:13: cannot use []rune(text) (value of type []rune)
    as type string in assignment

    /tmp/tmpgan6n6eu_test.go:13:13: undefined: contains

    /tmp/tmpgan6n6eu_test.go:14:17: undefined: unicode

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    result := \"\"\n    for _, char := range text {\n \
    \       if !contains(vowels, char) {\n            result += char\n        }\n\
    \    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate\
    \ := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\\
    nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n  \
    \   { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqxbmkirm_test.go:13:13: undefined: contains

    /tmp/tmpqxbmkirm_test.go:14:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    result := []rune{}\n    for\
    \ _, letter := range text {\n        if !contains(vowels, letter) {\n        \
    \    result = append(result, letter)\n        }\n    }\n    return string(result)\n\
    }\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n\
    \     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"\
    eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"\
    cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual:\
    \ candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp22l0e4hl_test.go:11:10: no new variables on left side of :=

    /tmp/tmp22l0e4hl_test.go:11:13: cannot use []rune(text) (value of type []rune)
    as type string in assignment

    /tmp/tmp22l0e4hl_test.go:14:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    result := []rune{}\n    for\
    \ _, letter := range text {\n        if !contains(vowels, letter) {\n        \
    \    result = append(result, letter)\n        }\n    }\n    return string(result)\n\
    }\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n\
    \     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"\
    eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"\
    cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual:\
    \ candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp22l0e4hl_test.go:11:10: no new variables on left side of :=

    /tmp/tmp22l0e4hl_test.go:11:13: cannot use []rune(text) (value of type []rune)
    as type string in assignment

    /tmp/tmp22l0e4hl_test.go:14:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []string{\"\
    a\", \"e\", \"i\", \"o\", \"u\"}\n    for _, v := range vowels {\n        text\
    \ = text.replaceAllString(v, \"\")\n    }\n    return text\n}\n\nfunc TestRemove_Vowels(t\
    \ *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"\
    ), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected:\
    \ \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     {\
    \ actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"\
    EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"\
    ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps8ud68eq_test.go:12:21: text.replaceAllString undefined (type string has
    no field or method replaceAllString)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune(\"aeiou\"\
    )\n    result := \"\"\n    for _, letter := range text {\n        if !contains(vowels,\
    \ letter) {\n            result += letter\n        }\n    }\n    return result\n\
    }\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n\
    \     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"\
    eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"\
    cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual:\
    \ candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpltgv0dgm_test.go:13:13: undefined: contains

    /tmp/tmpltgv0dgm_test.go:14:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune(\"aeiou\"\
    )\n    result := \"\"\n    for _, char := range text {\n        if !contains(vowels,\
    \ char) {\n            result += char\n        }\n    }\n    return result\n}\n\
    \nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual:\
    \ candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"\
    ), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n\
    \     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"\
    ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsknfgm4u_test.go:13:13: undefined: contains

    /tmp/tmpsknfgm4u_test.go:14:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []string{\"\
    a\", \"e\", \"i\", \"o\", \"u\"}\n    result := \"\"\n    for _, letter := range\
    \ text {\n        if !contains(vowels, letter) {\n            result += letter\n\
    \        }\n    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T)\
    \ {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected:\
    \ \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\"\
    \ },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfpi4fnva_test.go:13:13: undefined: contains

    /tmp/tmpfpi4fnva_test.go:14:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []string{\"\
    a\", \"e\", \"i\", \"o\", \"u\"}\n    text := strings.Replace(text, vowels, \"\
    \", -1)\n    return text\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate\
    \ := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\\
    nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n  \
    \   { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyxffxkse_test.go:11:10: no new variables on left side of :=

    /tmp/tmpyxffxkse_test.go:11:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    result := \"\"\n    for _, r := range text {\n    \
    \    if !contains(vowels, r) {\n            result += string(r)\n        }\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate\
    \ := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\\
    nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n  \
    \   { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw0hgv4tr_test.go:13:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    for _, v := range text {\n\
    \        if !contains(vowels, v) {\n            v = unicode.ToLower(v)\n     \
    \   }\n    }\n    return string(text)\n}\n\nfunc TestRemove_Vowels(t *testing.T)\
    \ {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected:\
    \ \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\"\
    \ },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgan6n6eu_test.go:11:10: no new variables on left side of :=

    /tmp/tmpgan6n6eu_test.go:11:13: cannot use []rune(text) (value of type []rune)
    as type string in assignment

    /tmp/tmpgan6n6eu_test.go:13:13: undefined: contains

    /tmp/tmpgan6n6eu_test.go:14:17: undefined: unicode

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    result := \"\"\n    for _, char := range text {\n \
    \       if !contains(vowels, char) {\n            result += char\n        }\n\
    \    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate\
    \ := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\\
    nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n  \
    \   { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqxbmkirm_test.go:13:13: undefined: contains

    /tmp/tmpqxbmkirm_test.go:14:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    for _, v := range text {\n\
    \        if !contains(vowels, v) {\n            delete(text, v)\n        }\n \
    \   }\n    return string(text)\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n\
    \  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected:\
    \ \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\"\
    \ },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpe_dp5r12_test.go:11:10: no new variables on left side of :=

    /tmp/tmpe_dp5r12_test.go:11:13: cannot use []rune(text) (value of type []rune)
    as type string in assignment

    /tmp/tmpe_dp5r12_test.go:13:13: undefined: contains

    /tmp/tmpe_dp5r12_test.go:14:20: invalid argument: text (variable of type string)
    is not a map

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    for _, char := range text\
    \ {\n        if !contains(vowels, char) {\n            delete(text, char)\n  \
    \      }\n    }\n    return string(text)\n}\n\nfunc TestRemove_Vowels(t *testing.T)\
    \ {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected:\
    \ \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\"\
    \ },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvooita2j_test.go:11:10: no new variables on left side of :=

    /tmp/tmpvooita2j_test.go:11:13: cannot use []rune(text) (value of type []rune)
    as type string in assignment

    /tmp/tmpvooita2j_test.go:13:13: undefined: contains

    /tmp/tmpvooita2j_test.go:14:20: invalid argument: text (variable of type string)
    is not a map

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    for _, v := range text {\n\
    \        if !contains(vowels, v) {\n            delete(text, v)\n        }\n \
    \   }\n    return string(text)\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n\
    \  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected:\
    \ \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\"\
    \ },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpe_dp5r12_test.go:11:10: no new variables on left side of :=

    /tmp/tmpe_dp5r12_test.go:11:13: cannot use []rune(text) (value of type []rune)
    as type string in assignment

    /tmp/tmpe_dp5r12_test.go:13:13: undefined: contains

    /tmp/tmpe_dp5r12_test.go:14:20: invalid argument: text (variable of type string)
    is not a map

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    result := \"\"\n    for _, char := range text {\n \
    \       if !contains(vowels, char) {\n            result += char\n        }\n\
    \    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate\
    \ := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\\
    nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n  \
    \   { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqxbmkirm_test.go:13:13: undefined: contains

    /tmp/tmpqxbmkirm_test.go:14:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    result := \"\"\n    for _, letter := range text {\n\
    \        if !contains(vowels, letter) {\n            result += letter\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n\
    \  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected:\
    \ \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\"\
    \ },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoebzzi3y_test.go:13:13: undefined: contains

    /tmp/tmpoebzzi3y_test.go:14:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    for _, v := range text {\n\
    \        if !contains(vowels, v) {\n            v = unicode.ToLower(v)\n     \
    \   }\n    }\n    return string(text)\n}\n\nfunc TestRemove_Vowels(t *testing.T)\
    \ {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected:\
    \ \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\"\
    \ },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgan6n6eu_test.go:11:10: no new variables on left side of :=

    /tmp/tmpgan6n6eu_test.go:11:13: cannot use []rune(text) (value of type []rune)
    as type string in assignment

    /tmp/tmpgan6n6eu_test.go:13:13: undefined: contains

    /tmp/tmpgan6n6eu_test.go:14:17: undefined: unicode

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []string{\"\
    a\", \"e\", \"i\", \"o\", \"u\"}\n    for _, v := range vowels {\n        text\
    \ = text.replaceAllString(v, \"\")\n    }\n    return text\n}\n\nfunc TestRemove_Vowels(t\
    \ *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"\
    ), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected:\
    \ \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     {\
    \ actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"\
    EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"\
    ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps8ud68eq_test.go:12:21: text.replaceAllString undefined (type string has
    no field or method replaceAllString)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    for _, v := range text {\n\
    \        if !contains(vowels, v) {\n            v = unicode.ToLower(v)\n     \
    \   }\n    }\n    return string(text)\n}\n\nfunc TestRemove_Vowels(t *testing.T)\
    \ {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected:\
    \ \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\"\
    \ },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgan6n6eu_test.go:11:10: no new variables on left side of :=

    /tmp/tmpgan6n6eu_test.go:11:13: cannot use []rune(text) (value of type []rune)
    as type string in assignment

    /tmp/tmpgan6n6eu_test.go:13:13: undefined: contains

    /tmp/tmpgan6n6eu_test.go:14:17: undefined: unicode

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    for _, v := range text {\n\
    \        if !contains(vowels, v) {\n            v = unicode.ToLower(v)\n     \
    \   }\n    }\n    return string(text)\n}\n\nfunc TestRemove_Vowels(t *testing.T)\
    \ {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected:\
    \ \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\"\
    \ },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgan6n6eu_test.go:11:10: no new variables on left side of :=

    /tmp/tmpgan6n6eu_test.go:11:13: cannot use []rune(text) (value of type []rune)
    as type string in assignment

    /tmp/tmpgan6n6eu_test.go:13:13: undefined: contains

    /tmp/tmpgan6n6eu_test.go:14:17: undefined: unicode

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    result := \"\"\n    for _, letter := range text {\n\
    \        if !contains(vowels, letter) {\n            result += letter\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n\
    \  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected:\
    \ \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\"\
    \ },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoebzzi3y_test.go:13:13: undefined: contains

    /tmp/tmpoebzzi3y_test.go:14:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []string{\"\
    a\", \"e\", \"i\", \"o\", \"u\"}\n    for _, v := range vowels {\n        text\
    \ = strings.Replace(text, v, \"\", -1)\n    }\n    return text\n}\n\nfunc TestRemove_Vowels(t\
    \ *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"\
    ), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected:\
    \ \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     {\
    \ actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"\
    EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"\
    ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwutwyptk_test.go:12:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    result := \"\"\n    for _, letter := range text {\n\
    \        if !contains(vowels, letter) {\n            result += letter\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n\
    \  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected:\
    \ \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\"\
    \ },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoebzzi3y_test.go:13:13: undefined: contains

    /tmp/tmpoebzzi3y_test.go:14:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    for _, v := range text {\n\
    \        if !contains(vowels, v) {\n            v = unicode.ToLower(v)\n     \
    \   }\n    }\n    return string(text)\n}\n\nfunc TestRemove_Vowels(t *testing.T)\
    \ {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected:\
    \ \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\"\
    \ },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgan6n6eu_test.go:11:10: no new variables on left side of :=

    /tmp/tmpgan6n6eu_test.go:11:13: cannot use []rune(text) (value of type []rune)
    as type string in assignment

    /tmp/tmpgan6n6eu_test.go:13:13: undefined: contains

    /tmp/tmpgan6n6eu_test.go:14:17: undefined: unicode

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    result := \"\"\n    for _, letter := range text {\n\
    \        if !contains(vowels, letter) {\n            result += letter\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n\
    \  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected:\
    \ \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\"\
    \ },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoebzzi3y_test.go:13:13: undefined: contains

    /tmp/tmpoebzzi3y_test.go:14:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    result := \"\"\n    for _, char := range text {\n \
    \       if !contains(vowels, char) {\n            result += char\n        }\n\
    \    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate\
    \ := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\\
    nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n  \
    \   { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqxbmkirm_test.go:13:13: undefined: contains

    /tmp/tmpqxbmkirm_test.go:14:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    result := \"\"\n    for _, letter := range text {\n\
    \        if !contains(vowels, letter) {\n            result += letter\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n\
    \  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected:\
    \ \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\"\
    \ },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoebzzi3y_test.go:13:13: undefined: contains

    /tmp/tmpoebzzi3y_test.go:14:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    for _, v := range text {\n\
    \        if !contains(vowels, v) {\n            text := append(text, v)\n    \
    \    }\n    }\n    return string(text)\n}\n\nfunc TestRemove_Vowels(t *testing.T)\
    \ {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected:\
    \ \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\"\
    \ },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmponjaa6un_test.go:11:10: no new variables on left side of :=

    /tmp/tmponjaa6un_test.go:11:13: cannot use []rune(text) (value of type []rune)
    as type string in assignment

    /tmp/tmponjaa6un_test.go:13:13: undefined: contains

    /tmp/tmponjaa6un_test.go:14:28: first argument to append must be a slice; have
    text (variable of type string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    for _, v := range text {\n\
    \        if !contains(vowels, v) {\n            text := append(text, v)\n    \
    \    }\n    }\n    return string(text)\n}\n\nfunc TestRemove_Vowels(t *testing.T)\
    \ {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected:\
    \ \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\"\
    \ },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmponjaa6un_test.go:11:10: no new variables on left side of :=

    /tmp/tmponjaa6un_test.go:11:13: cannot use []rune(text) (value of type []rune)
    as type string in assignment

    /tmp/tmponjaa6un_test.go:13:13: undefined: contains

    /tmp/tmponjaa6un_test.go:14:28: first argument to append must be a slice; have
    text (variable of type string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    for _, v := range text {\n\
    \        if !contains(vowels, v) {\n            v = unicode.ToLower(v)\n     \
    \   }\n    }\n    return string(text)\n}\n\nfunc TestRemove_Vowels(t *testing.T)\
    \ {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected:\
    \ \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\"\
    \ },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgan6n6eu_test.go:11:10: no new variables on left side of :=

    /tmp/tmpgan6n6eu_test.go:11:13: cannot use []rune(text) (value of type []rune)
    as type string in assignment

    /tmp/tmpgan6n6eu_test.go:13:13: undefined: contains

    /tmp/tmpgan6n6eu_test.go:14:17: undefined: unicode

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    for _, v := range text {\n\
    \        if !contains(vowels, v) {\n            v = unicode.ToLower(v)\n     \
    \   }\n    }\n    return string(text)\n}\n\nfunc TestRemove_Vowels(t *testing.T)\
    \ {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected:\
    \ \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\"\
    \ },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgan6n6eu_test.go:11:10: no new variables on left side of :=

    /tmp/tmpgan6n6eu_test.go:11:13: cannot use []rune(text) (value of type []rune)
    as type string in assignment

    /tmp/tmpgan6n6eu_test.go:13:13: undefined: contains

    /tmp/tmpgan6n6eu_test.go:14:17: undefined: unicode

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune(\"aeiouy\"\
    )\n    for _, v := range vowels {\n        text = strings.Replace(text, v, \"\"\
    , -1)\n    }\n    return text\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n \
    \ candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected:\
    \ \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\"\
    \ },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgb_n588i_test.go:12:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    result := \"\"\n    for _, letter := range text {\n\
    \        if !contains(vowels, letter) {\n            result += letter\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n\
    \  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected:\
    \ \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\"\
    \ },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoebzzi3y_test.go:13:13: undefined: contains

    /tmp/tmpoebzzi3y_test.go:14:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    result := \"\"\n    for _, char := range text {\n \
    \       if !contains(vowels, char) {\n            result += char\n        }\n\
    \    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate\
    \ := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\\
    nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n  \
    \   { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqxbmkirm_test.go:13:13: undefined: contains

    /tmp/tmpqxbmkirm_test.go:14:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    result := \"\"\n    for _, letter := range text {\n\
    \        if !contains(vowels, letter) {\n            result += letter\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n\
    \  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected:\
    \ \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\"\
    \ },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoebzzi3y_test.go:13:13: undefined: contains

    /tmp/tmpoebzzi3y_test.go:14:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    for _, v := range text {\n\
    \        if !contains(vowels, v) {\n            delete(text, v)\n        }\n \
    \   }\n    return string(text)\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n\
    \  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected:\
    \ \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\"\
    \ },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpe_dp5r12_test.go:11:10: no new variables on left side of :=

    /tmp/tmpe_dp5r12_test.go:11:13: cannot use []rune(text) (value of type []rune)
    as type string in assignment

    /tmp/tmpe_dp5r12_test.go:13:13: undefined: contains

    /tmp/tmpe_dp5r12_test.go:14:20: invalid argument: text (variable of type string)
    is not a map

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []string{\"\
    a\", \"e\", \"i\", \"o\", \"u\"}\n    text := []rune(text)\n    for _, vowel :=\
    \ range vowels {\n        i := 0\n        for _, char := range text {\n      \
    \      if char == vowel {\n                text[i] = char\n                i++\n\
    \            }\n        }\n    }\n    return string(text)\n}\n\nfunc TestRemove_Vowels(t\
    \ *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"\
    ), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected:\
    \ \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     {\
    \ actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"\
    EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"\
    ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzsutgcsm_test.go:11:10: no new variables on left side of :=

    /tmp/tmpzsutgcsm_test.go:11:13: cannot use []rune(text) (value of type []rune)
    as type string in assignment

    /tmp/tmpzsutgcsm_test.go:15:24: invalid operation: char == vowel (mismatched types
    rune and string)

    /tmp/tmpzsutgcsm_test.go:16:17: cannot assign to text[i] (value of type byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    result := \"\"\n    for _, char := range text {\n \
    \       if !contains(vowels, char) {\n            result += char\n        }\n\
    \    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate\
    \ := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\\
    nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n  \
    \   { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqxbmkirm_test.go:13:13: undefined: contains

    /tmp/tmpqxbmkirm_test.go:14:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    for _, v := range text {\n\
    \        if !contains(vowels, v) {\n            delete(text, v)\n        }\n \
    \   }\n    return string(text)\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n\
    \  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected:\
    \ \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\"\
    \ },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpe_dp5r12_test.go:11:10: no new variables on left side of :=

    /tmp/tmpe_dp5r12_test.go:11:13: cannot use []rune(text) (value of type []rune)
    as type string in assignment

    /tmp/tmpe_dp5r12_test.go:13:13: undefined: contains

    /tmp/tmpe_dp5r12_test.go:14:20: invalid argument: text (variable of type string)
    is not a map

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []string{\"\
    a\", \"e\", \"i\", \"o\", \"u\"}\n    for _, v := range vowels {\n        text\
    \ = text.replaceAllString(v, \"\")\n    }\n    return text\n}\n\nfunc TestRemove_Vowels(t\
    \ *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"\
    ), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected:\
    \ \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     {\
    \ actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"\
    EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"\
    ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps8ud68eq_test.go:12:21: text.replaceAllString undefined (type string has
    no field or method replaceAllString)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    result := \"\"\n    for _, letter := range text {\n\
    \        if !contains(vowels, letter) {\n            result += letter\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n\
    \  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected:\
    \ \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\"\
    \ },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoebzzi3y_test.go:13:13: undefined: contains

    /tmp/tmpoebzzi3y_test.go:14:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    result := []rune{}\n    for\
    \ _, letter := range text {\n        if !contains(vowels, letter) {\n        \
    \    result = append(result, letter)\n        }\n    }\n    return string(result)\n\
    }\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n\
    \     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"\
    eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"\
    cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual:\
    \ candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp22l0e4hl_test.go:11:10: no new variables on left side of :=

    /tmp/tmp22l0e4hl_test.go:11:13: cannot use []rune(text) (value of type []rune)
    as type string in assignment

    /tmp/tmp22l0e4hl_test.go:14:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    result := \"\"\n    for _, letter := range text {\n\
    \        if !contains(vowels, letter) {\n            result += letter\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n\
    \  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected:\
    \ \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\"\
    \ },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoebzzi3y_test.go:13:13: undefined: contains

    /tmp/tmpoebzzi3y_test.go:14:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    result := \"\"\n    for _, char := range text {\n \
    \       if !contains(vowels, char) {\n            result += char\n        }\n\
    \    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate\
    \ := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\\
    nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n  \
    \   { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqxbmkirm_test.go:13:13: undefined: contains

    /tmp/tmpqxbmkirm_test.go:14:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    for _, v := range text {\n\
    \        if !contains(vowels, v) {\n            v = unicode.ToLower(v)\n     \
    \   }\n    }\n    return string(text)\n}\n\nfunc TestRemove_Vowels(t *testing.T)\
    \ {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected:\
    \ \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\"\
    \ },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgan6n6eu_test.go:11:10: no new variables on left side of :=

    /tmp/tmpgan6n6eu_test.go:11:13: cannot use []rune(text) (value of type []rune)
    as type string in assignment

    /tmp/tmpgan6n6eu_test.go:13:13: undefined: contains

    /tmp/tmpgan6n6eu_test.go:14:17: undefined: unicode

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []string{\"\
    a\", \"e\", \"i\", \"o\", \"u\"}\n    text := []rune(text)\n    result := []rune{}\n\
    \    for _, char := range text {\n        if !contains(vowels, char) {\n     \
    \       result = append(result, char)\n        }\n    }\n    return string(result)\n\
    }\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n\
    \     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"\
    eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"\
    cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual:\
    \ candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx1y62381_test.go:11:10: no new variables on left side of :=

    /tmp/tmpx1y62381_test.go:11:13: cannot use []rune(text) (value of type []rune)
    as type string in assignment

    /tmp/tmpx1y62381_test.go:14:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    for _, vowel := range vowels\
    \ {\n        i := 0\n        for _, char := range text {\n            if char\
    \ == vowel {\n                text[i] = char\n                i++\n          \
    \  }\n        }\n    }\n    return string(text)\n}\n\nfunc TestRemove_Vowels(t\
    \ *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"\
    ), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected:\
    \ \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     {\
    \ actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"\
    EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"\
    ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqe5oo4ex_test.go:11:10: no new variables on left side of :=

    /tmp/tmpqe5oo4ex_test.go:11:13: cannot use []rune(text) (value of type []rune)
    as type string in assignment

    /tmp/tmpqe5oo4ex_test.go:16:17: cannot assign to text[i] (value of type byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073417
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    result := \"\"\n    for _, char := range text {\n \
    \       if !contains(vowels, char) {\n            result += char\n        }\n\
    \    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate\
    \ := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\\
    nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n  \
    \   { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqxbmkirm_test.go:13:13: undefined: contains

    /tmp/tmpqxbmkirm_test.go:14:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    for _, v := range text {\n\
    \        if !contains(vowels, v) {\n            v = rune(0)\n        }\n    }\n\
    \    return string(text)\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate\
    \ := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\\
    nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n  \
    \   { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgwktojyc_test.go:11:10: no new variables on left side of :=

    /tmp/tmpgwktojyc_test.go:11:13: cannot use []rune(text) (value of type []rune)
    as type string in assignment

    /tmp/tmpgwktojyc_test.go:13:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073417
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    result := []rune{}\n    for\
    \ _, letter := range text {\n        if !contains(vowels, letter) {\n        \
    \    result = append(result, letter)\n        }\n    }\n    return string(result)\n\
    }\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n\
    \     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"\
    eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"\
    cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual:\
    \ candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp22l0e4hl_test.go:11:10: no new variables on left side of :=

    /tmp/tmp22l0e4hl_test.go:11:13: cannot use []rune(text) (value of type []rune)
    as type string in assignment

    /tmp/tmp22l0e4hl_test.go:14:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []string{\"\
    a\", \"e\", \"i\", \"o\", \"u\"}\n    for _, v := range vowels {\n        text\
    \ = strings.Replace(text, v, \"\", -1)\n    }\n    return text\n}\n\nfunc TestRemove_Vowels(t\
    \ *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"\
    ), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected:\
    \ \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     {\
    \ actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"\
    EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"\
    ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwutwyptk_test.go:12:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []string{\"\
    a\", \"e\", \"i\", \"o\", \"u\"}\n    result := \"\"\n    for _, letter := range\
    \ text {\n        if !contains(vowels, letter) {\n            result += letter\n\
    \        }\n    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T)\
    \ {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected:\
    \ \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\"\
    \ },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfpi4fnva_test.go:13:13: undefined: contains

    /tmp/tmpfpi4fnva_test.go:14:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    for _, v := range text {\n\
    \        if !contains(vowels, v) {\n            text := append(text, v)\n    \
    \    }\n    }\n    return string(text)\n}\n\nfunc TestRemove_Vowels(t *testing.T)\
    \ {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected:\
    \ \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\"\
    \ },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmponjaa6un_test.go:11:10: no new variables on left side of :=

    /tmp/tmponjaa6un_test.go:11:13: cannot use []rune(text) (value of type []rune)
    as type string in assignment

    /tmp/tmponjaa6un_test.go:13:13: undefined: contains

    /tmp/tmponjaa6un_test.go:14:28: first argument to append must be a slice; have
    text (variable of type string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    result := []rune{}\n    for\
    \ _, letter := range text {\n        if !contains(vowels, letter) {\n        \
    \    result = append(result, letter)\n        }\n    }\n    return string(result)\n\
    }\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n\
    \     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"\
    eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"\
    cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual:\
    \ candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp22l0e4hl_test.go:11:10: no new variables on left side of :=

    /tmp/tmp22l0e4hl_test.go:11:13: cannot use []rune(text) (value of type []rune)
    as type string in assignment

    /tmp/tmp22l0e4hl_test.go:14:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    result := \"\"\n    for _, char := range text {\n \
    \       if !contains(vowels, char) {\n            result += char\n        }\n\
    \    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate\
    \ := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\\
    nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n  \
    \   { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqxbmkirm_test.go:13:13: undefined: contains

    /tmp/tmpqxbmkirm_test.go:14:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune(\"aeiou\"\
    )\n    result := \"\"\n    for _, char := range text {\n        if !contains(vowels,\
    \ char) {\n            result += char\n        }\n    }\n    return result\n}\n\
    \nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual:\
    \ candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"\
    ), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n\
    \     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"\
    ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsknfgm4u_test.go:13:13: undefined: contains

    /tmp/tmpsknfgm4u_test.go:14:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    result := \"\"\n    for _, char := range text {\n \
    \       if !contains(vowels, char) {\n            result += char\n        }\n\
    \    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate\
    \ := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\\
    nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n  \
    \   { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqxbmkirm_test.go:13:13: undefined: contains

    /tmp/tmpqxbmkirm_test.go:14:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []string{\"\
    a\", \"e\", \"i\", \"o\", \"u\"}\n    text := []rune(text)\n    result := \"\"\
    \n    for _, char := range text {\n        if !contains(vowels, char) {\n    \
    \        result = append(result, char)\n        }\n    }\n    return string(result)\n\
    }\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n\
    \     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"\
    eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"\
    cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual:\
    \ candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdxe20xxa_test.go:11:10: no new variables on left side of :=

    /tmp/tmpdxe20xxa_test.go:11:13: cannot use []rune(text) (value of type []rune)
    as type string in assignment

    /tmp/tmpdxe20xxa_test.go:14:13: undefined: contains

    /tmp/tmpdxe20xxa_test.go:15:29: first argument to append must be a slice; have
    result (variable of type string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073417
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []string{\"\
    a\", \"e\", \"i\", \"o\", \"u\"}\n    for _, v := range vowels {\n        text\
    \ = text.replaceAllString(v, \"\")\n    }\n    return text\n}\n\nfunc TestRemove_Vowels(t\
    \ *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"\
    ), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected:\
    \ \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     {\
    \ actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"\
    EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"\
    ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps8ud68eq_test.go:12:21: text.replaceAllString undefined (type string has
    no field or method replaceAllString)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    result := \"\"\n    for _, letter := range text {\n\
    \        if !contains(vowels, letter) {\n            result += letter\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n\
    \  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected:\
    \ \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\"\
    \ },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoebzzi3y_test.go:13:13: undefined: contains

    /tmp/tmpoebzzi3y_test.go:14:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    for _, v := range text {\n\
    \        if !contains(vowels, v) {\n            v = unicode.ToLower(v)\n     \
    \   }\n    }\n    return string(text)\n}\n\nfunc TestRemove_Vowels(t *testing.T)\
    \ {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected:\
    \ \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\"\
    \ },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgan6n6eu_test.go:11:10: no new variables on left side of :=

    /tmp/tmpgan6n6eu_test.go:11:13: cannot use []rune(text) (value of type []rune)
    as type string in assignment

    /tmp/tmpgan6n6eu_test.go:13:13: undefined: contains

    /tmp/tmpgan6n6eu_test.go:14:17: undefined: unicode

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    result := \"\"\n    for _, letter := range text {\n\
    \        if !contains(vowels, letter) {\n            result += letter\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n\
    \  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected:\
    \ \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\"\
    \ },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoebzzi3y_test.go:13:13: undefined: contains

    /tmp/tmpoebzzi3y_test.go:14:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    result := \"\"\n    for _, letter := range text {\n\
    \        if !contains(vowels, letter) {\n            result += letter\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n\
    \  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected:\
    \ \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\"\
    \ },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoebzzi3y_test.go:13:13: undefined: contains

    /tmp/tmpoebzzi3y_test.go:14:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    result := \"\"\n    for _, letter := range text {\n\
    \        if !contains(vowels, letter) {\n            result += letter\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n\
    \  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected:\
    \ \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\"\
    \ },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoebzzi3y_test.go:13:13: undefined: contains

    /tmp/tmpoebzzi3y_test.go:14:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    for _, v := range text {\n\
    \        if !contains(vowels, v) {\n            v = unicode.ToLower(v)\n     \
    \   }\n    }\n    return string(text)\n}\n\nfunc TestRemove_Vowels(t *testing.T)\
    \ {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected:\
    \ \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\"\
    \ },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgan6n6eu_test.go:11:10: no new variables on left side of :=

    /tmp/tmpgan6n6eu_test.go:11:13: cannot use []rune(text) (value of type []rune)
    as type string in assignment

    /tmp/tmpgan6n6eu_test.go:13:13: undefined: contains

    /tmp/tmpgan6n6eu_test.go:14:17: undefined: unicode

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune(\"aeiou\"\
    )\n    result := \"\"\n    for _, char := range text {\n        if !contains(vowels,\
    \ char) {\n            result += char\n        }\n    }\n    return result\n}\n\
    \nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual:\
    \ candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"\
    ), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n\
    \     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"\
    ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsknfgm4u_test.go:13:13: undefined: contains

    /tmp/tmpsknfgm4u_test.go:14:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    for _, v := range text {\n\
    \        if !contains(vowels, v) {\n            v = unicode.ToLower(v)\n     \
    \   }\n    }\n    return string(text)\n}\n\nfunc TestRemove_Vowels(t *testing.T)\
    \ {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected:\
    \ \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\"\
    \ },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgan6n6eu_test.go:11:10: no new variables on left side of :=

    /tmp/tmpgan6n6eu_test.go:11:13: cannot use []rune(text) (value of type []rune)
    as type string in assignment

    /tmp/tmpgan6n6eu_test.go:13:13: undefined: contains

    /tmp/tmpgan6n6eu_test.go:14:17: undefined: unicode

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    result := []rune{}\n    for\
    \ _, char := range text {\n        if !contains(vowels, char) {\n            result\
    \ = append(result, char)\n        }\n    }\n    return string(result)\n}\n\nfunc\
    \ TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual:\
    \ candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"\
    ), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n\
    \     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"\
    ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyir7b5fh_test.go:11:10: no new variables on left side of :=

    /tmp/tmpyir7b5fh_test.go:11:13: cannot use []rune(text) (value of type []rune)
    as type string in assignment

    /tmp/tmpyir7b5fh_test.go:14:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    for _, v := range text {\n\
    \        if !contains(vowels, v) {\n            v = string(v)\n        }\n   \
    \ }\n    return string(text)\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate\
    \ := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\\
    nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n  \
    \   { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw80i12an_test.go:11:10: no new variables on left side of :=

    /tmp/tmpw80i12an_test.go:11:13: cannot use []rune(text) (value of type []rune)
    as type string in assignment

    /tmp/tmpw80i12an_test.go:13:13: undefined: contains

    /tmp/tmpw80i12an_test.go:14:17: cannot use string(v) (value of type string) as
    type rune in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    result := \"\"\n    for _, char := range text {\n \
    \       if !contains(vowels, char) {\n            result += char\n        }\n\
    \    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate\
    \ := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\\
    nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n  \
    \   { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqxbmkirm_test.go:13:13: undefined: contains

    /tmp/tmpqxbmkirm_test.go:14:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    result := \"\"\n    for _, letter := range text {\n\
    \        if !contains(vowels, letter) {\n            result += letter\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n\
    \  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected:\
    \ \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\"\
    \ },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoebzzi3y_test.go:13:13: undefined: contains

    /tmp/tmpoebzzi3y_test.go:14:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    result := []rune{}\n    for\
    \ _, char := range text {\n        if !contains(vowels, char) {\n            result\
    \ = append(result, char)\n        }\n    }\n    return string(result)\n}\n\nfunc\
    \ TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual:\
    \ candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"\
    ), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n\
    \     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"\
    ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyir7b5fh_test.go:11:10: no new variables on left side of :=

    /tmp/tmpyir7b5fh_test.go:11:13: cannot use []rune(text) (value of type []rune)
    as type string in assignment

    /tmp/tmpyir7b5fh_test.go:14:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []string{\"\
    a\", \"e\", \"i\", \"o\", \"u\"}\n    for _, v := range vowels {\n        text\
    \ = strings.Replace(text, v, \"\", -1)\n    }\n    return text\n}\n\nfunc TestRemove_Vowels(t\
    \ *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"\
    ), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected:\
    \ \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     {\
    \ actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"\
    EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"\
    ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwutwyptk_test.go:12:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    result := []rune{}\n    for\
    \ _, letter := range text {\n        if !contains(vowels, letter) {\n        \
    \    result = append(result, letter)\n        }\n    }\n    return string(result)\n\
    }\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n\
    \     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"\
    eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"\
    cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual:\
    \ candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp22l0e4hl_test.go:11:10: no new variables on left side of :=

    /tmp/tmp22l0e4hl_test.go:11:13: cannot use []rune(text) (value of type []rune)
    as type string in assignment

    /tmp/tmp22l0e4hl_test.go:14:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    result := []rune{}\n    for\
    \ _, letter := range text {\n        if !contains(vowels, letter) {\n        \
    \    result = append(result, letter)\n        }\n    }\n    return string(result)\n\
    }\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n\
    \     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"\
    eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"\
    cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual:\
    \ candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp22l0e4hl_test.go:11:10: no new variables on left side of :=

    /tmp/tmp22l0e4hl_test.go:11:13: cannot use []rune(text) (value of type []rune)
    as type string in assignment

    /tmp/tmp22l0e4hl_test.go:14:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    result := \"\"\n    for _, letter := range text {\n\
    \        if !contains(vowels, letter) {\n            result += letter\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n\
    \  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected:\
    \ \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\"\
    \ },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoebzzi3y_test.go:13:13: undefined: contains

    /tmp/tmpoebzzi3y_test.go:14:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    for _, v := range text {\n\
    \        if !contains(vowels, v) {\n            v = unicode.ToLower(v)\n     \
    \   }\n    }\n    return string(text)\n}\n\nfunc TestRemove_Vowels(t *testing.T)\
    \ {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected:\
    \ \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\"\
    \ },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgan6n6eu_test.go:11:10: no new variables on left side of :=

    /tmp/tmpgan6n6eu_test.go:11:13: cannot use []rune(text) (value of type []rune)
    as type string in assignment

    /tmp/tmpgan6n6eu_test.go:13:13: undefined: contains

    /tmp/tmpgan6n6eu_test.go:14:17: undefined: unicode

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    result := []rune{}\n    for\
    \ _, letter := range text {\n        if !contains(vowels, letter) {\n        \
    \    result = append(result, letter)\n        }\n    }\n    return string(result)\n\
    }\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n\
    \     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"\
    eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"\
    cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual:\
    \ candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp22l0e4hl_test.go:11:10: no new variables on left side of :=

    /tmp/tmp22l0e4hl_test.go:11:13: cannot use []rune(text) (value of type []rune)
    as type string in assignment

    /tmp/tmp22l0e4hl_test.go:14:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    for _, v := range text {\n\
    \        if !contains(vowels, v) {\n            v = unicode.ToLower(v)\n     \
    \   }\n    }\n    return string(text)\n}\n\nfunc TestRemove_Vowels(t *testing.T)\
    \ {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected:\
    \ \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\"\
    \ },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgan6n6eu_test.go:11:10: no new variables on left side of :=

    /tmp/tmpgan6n6eu_test.go:11:13: cannot use []rune(text) (value of type []rune)
    as type string in assignment

    /tmp/tmpgan6n6eu_test.go:13:13: undefined: contains

    /tmp/tmpgan6n6eu_test.go:14:17: undefined: unicode

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    for _, vowel := range vowels\
    \ {\n        i := 0\n        for _, char := range text {\n            if char\
    \ == vowel {\n                text[i] = char\n                i++\n          \
    \  }\n        }\n    }\n    return string(text)\n}\n\nfunc TestRemove_Vowels(t\
    \ *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"\
    ), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected:\
    \ \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     {\
    \ actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"\
    EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"\
    ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqe5oo4ex_test.go:11:10: no new variables on left side of :=

    /tmp/tmpqe5oo4ex_test.go:11:13: cannot use []rune(text) (value of type []rune)
    as type string in assignment

    /tmp/tmpqe5oo4ex_test.go:16:17: cannot assign to text[i] (value of type byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073417
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    result := \"\"\n    for _, char := range text {\n \
    \       if !contains(vowels, char) {\n            result += char\n        }\n\
    \    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate\
    \ := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\\
    nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n  \
    \   { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqxbmkirm_test.go:13:13: undefined: contains

    /tmp/tmpqxbmkirm_test.go:14:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    result := \"\"\n    for _, char := range text {\n \
    \       if !contains(vowels, char) {\n            result += char\n        }\n\
    \    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate\
    \ := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\\
    nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n  \
    \   { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqxbmkirm_test.go:13:13: undefined: contains

    /tmp/tmpqxbmkirm_test.go:14:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    result := \"\"\n    for _, letter := range text {\n\
    \        if !contains(vowels, letter) {\n            result += letter\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n\
    \  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected:\
    \ \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\"\
    \ },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoebzzi3y_test.go:13:13: undefined: contains

    /tmp/tmpoebzzi3y_test.go:14:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    result := \"\"\n    for _, r := range text {\n    \
    \    if !contains(vowels, r) {\n            result += string(r)\n        }\n \
    \   }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate\
    \ := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\\
    nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n  \
    \   { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw0hgv4tr_test.go:13:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    result := \"\"\n    for _, letter := range text {\n\
    \        if !contains(vowels, letter) {\n            result += letter\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n\
    \  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected:\
    \ \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\"\
    \ },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoebzzi3y_test.go:13:13: undefined: contains

    /tmp/tmpoebzzi3y_test.go:14:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    for _, v := range text {\n\
    \        if !contains(vowels, v) {\n            v = unicode.ToLower(v)\n     \
    \   }\n    }\n    return string(text)\n}\n\nfunc TestRemove_Vowels(t *testing.T)\
    \ {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected:\
    \ \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\"\
    \ },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgan6n6eu_test.go:11:10: no new variables on left side of :=

    /tmp/tmpgan6n6eu_test.go:11:13: cannot use []rune(text) (value of type []rune)
    as type string in assignment

    /tmp/tmpgan6n6eu_test.go:13:13: undefined: contains

    /tmp/tmpgan6n6eu_test.go:14:17: undefined: unicode

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    for _, v := range text {\n\
    \        if !contains(vowels, v) {\n            delete(text, v)\n        }\n \
    \   }\n    return string(text)\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n\
    \  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected:\
    \ \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\"\
    \ },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpe_dp5r12_test.go:11:10: no new variables on left side of :=

    /tmp/tmpe_dp5r12_test.go:11:13: cannot use []rune(text) (value of type []rune)
    as type string in assignment

    /tmp/tmpe_dp5r12_test.go:13:13: undefined: contains

    /tmp/tmpe_dp5r12_test.go:14:20: invalid argument: text (variable of type string)
    is not a map

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    for _, v := range text {\n\
    \        if !contains(vowels, v) {\n            v = unicode.ToLower(v)\n     \
    \   }\n    }\n    return string(text)\n}\n\nfunc TestRemove_Vowels(t *testing.T)\
    \ {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected:\
    \ \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\"\
    \ },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgan6n6eu_test.go:11:10: no new variables on left side of :=

    /tmp/tmpgan6n6eu_test.go:11:13: cannot use []rune(text) (value of type []rune)
    as type string in assignment

    /tmp/tmpgan6n6eu_test.go:13:13: undefined: contains

    /tmp/tmpgan6n6eu_test.go:14:17: undefined: unicode

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    for _, v := range text {\n\
    \        if !contains(vowels, v) {\n            delete(text, v)\n        }\n \
    \   }\n    return string(text)\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n\
    \  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected:\
    \ \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\"\
    \ },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpe_dp5r12_test.go:11:10: no new variables on left side of :=

    /tmp/tmpe_dp5r12_test.go:11:13: cannot use []rune(text) (value of type []rune)
    as type string in assignment

    /tmp/tmpe_dp5r12_test.go:13:13: undefined: contains

    /tmp/tmpe_dp5r12_test.go:14:20: invalid argument: text (variable of type string)
    is not a map

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []string{\"\
    a\", \"e\", \"i\", \"o\", \"u\"}\n    text := []rune(text)\n    for _, v := range\
    \ text {\n        if !contains(vowels, v) {\n            delete(text, v)\n   \
    \     }\n    }\n    return string(text)\n}\n\nfunc TestRemove_Vowels(t *testing.T)\
    \ {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected:\
    \ \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\"\
    \ },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzxxlhpy8_test.go:11:10: no new variables on left side of :=

    /tmp/tmpzxxlhpy8_test.go:11:13: cannot use []rune(text) (value of type []rune)
    as type string in assignment

    /tmp/tmpzxxlhpy8_test.go:13:13: undefined: contains

    /tmp/tmpzxxlhpy8_test.go:14:20: invalid argument: text (variable of type string)
    is not a map

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    result := []rune{}\n    for\
    \ _, char := range text {\n        if !contains(vowels, char) {\n            result\
    \ = append(result, char)\n        }\n    }\n    return string(result)\n}\n\nfunc\
    \ TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual:\
    \ candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"\
    ), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n\
    \     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"\
    ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyir7b5fh_test.go:11:10: no new variables on left side of :=

    /tmp/tmpyir7b5fh_test.go:11:13: cannot use []rune(text) (value of type []rune)
    as type string in assignment

    /tmp/tmpyir7b5fh_test.go:14:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    result := []rune{}\n    for\
    \ _, char := range text {\n        if !contains(vowels, char) {\n            result\
    \ = append(result, char)\n        }\n    }\n    return string(result)\n}\n\nfunc\
    \ TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual:\
    \ candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"\
    ), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n\
    \     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"\
    ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyir7b5fh_test.go:11:10: no new variables on left side of :=

    /tmp/tmpyir7b5fh_test.go:11:13: cannot use []rune(text) (value of type []rune)
    as type string in assignment

    /tmp/tmpyir7b5fh_test.go:14:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []string{\"\
    a\", \"e\", \"i\", \"o\", \"u\"}\n    for _, v := range vowels {\n        text\
    \ = text.replaceAllString(v, \"\")\n    }\n    return text\n}\n\nfunc TestRemove_Vowels(t\
    \ *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"\
    ), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected:\
    \ \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     {\
    \ actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"\
    EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"\
    ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps8ud68eq_test.go:12:21: text.replaceAllString undefined (type string has
    no field or method replaceAllString)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []string{\"\
    a\", \"e\", \"i\", \"o\", \"u\"}\n    result := \"\"\n    for _, letter := range\
    \ text {\n        if !contains(vowels, letter) {\n            result += letter\n\
    \        }\n    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T)\
    \ {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected:\
    \ \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\"\
    \ },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfpi4fnva_test.go:13:13: undefined: contains

    /tmp/tmpfpi4fnva_test.go:14:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    result := \"\"\n    for _, char := range text {\n \
    \       if !contains(vowels, char) {\n            result += char\n        }\n\
    \    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate\
    \ := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\\
    nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n  \
    \   { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqxbmkirm_test.go:13:13: undefined: contains

    /tmp/tmpqxbmkirm_test.go:14:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    result := []rune{}\n    for\
    \ _, char := range text {\n        if !contains(vowels, char) {\n            result\
    \ = append(result, char)\n        }\n    }\n    return string(result)\n}\n\nfunc\
    \ TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual:\
    \ candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"\
    ), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n\
    \     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"\
    ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyir7b5fh_test.go:11:10: no new variables on left side of :=

    /tmp/tmpyir7b5fh_test.go:11:13: cannot use []rune(text) (value of type []rune)
    as type string in assignment

    /tmp/tmpyir7b5fh_test.go:14:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    result := []rune{}\n    for\
    \ _, letter := range text {\n        if !contains(vowels, letter) {\n        \
    \    result = append(result, letter)\n        }\n    }\n    return string(result)\n\
    }\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n\
    \     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"\
    eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"\
    cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual:\
    \ candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp22l0e4hl_test.go:11:10: no new variables on left side of :=

    /tmp/tmp22l0e4hl_test.go:11:13: cannot use []rune(text) (value of type []rune)
    as type string in assignment

    /tmp/tmp22l0e4hl_test.go:14:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    result := []rune{}\n    for\
    \ _, letter := range text {\n        if !contains(vowels, letter) {\n        \
    \    result = append(result, letter)\n        }\n    }\n    return string(result)\n\
    }\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n\
    \     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"\
    eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"\
    cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual:\
    \ candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp22l0e4hl_test.go:11:10: no new variables on left side of :=

    /tmp/tmp22l0e4hl_test.go:11:13: cannot use []rune(text) (value of type []rune)
    as type string in assignment

    /tmp/tmp22l0e4hl_test.go:14:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []string{\"\
    a\", \"e\", \"i\", \"o\", \"u\"}\n    text := strings.ToLower(text)\n    for _,\
    \ v := range vowels {\n        text = strings.Replace(text, v, \"\", -1)\n   \
    \ }\n    return text\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate\
    \ := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\\
    nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n  \
    \   { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxn3ukpqe_test.go:11:10: no new variables on left side of :=

    /tmp/tmpxn3ukpqe_test.go:11:13: undefined: strings

    /tmp/tmpxn3ukpqe_test.go:13:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073417
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    result := \"\"\n    for _, char := range text {\n \
    \       if !contains(vowels, char) {\n            result += char\n        }\n\
    \    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate\
    \ := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\\
    nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n  \
    \   { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqxbmkirm_test.go:13:13: undefined: contains

    /tmp/tmpqxbmkirm_test.go:14:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    result := []rune{}\n    for\
    \ _, char := range text {\n        if !contains(vowels, char) {\n            result\
    \ = append(result, char)\n        }\n    }\n    return string(result)\n}\n\nfunc\
    \ TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual:\
    \ candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"\
    ), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n\
    \     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"\
    ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyir7b5fh_test.go:11:10: no new variables on left side of :=

    /tmp/tmpyir7b5fh_test.go:11:13: cannot use []rune(text) (value of type []rune)
    as type string in assignment

    /tmp/tmpyir7b5fh_test.go:14:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    result := \"\"\n    for _, char := range text {\n \
    \       if !contains(vowels, char) {\n            result += char\n        }\n\
    \    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate\
    \ := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\\
    nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n  \
    \   { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqxbmkirm_test.go:13:13: undefined: contains

    /tmp/tmpqxbmkirm_test.go:14:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    result := \"\"\n    for _, char := range text {\n \
    \       if !contains(vowels, char) {\n            result += char\n        }\n\
    \    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate\
    \ := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\\
    nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n  \
    \   { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqxbmkirm_test.go:13:13: undefined: contains

    /tmp/tmpqxbmkirm_test.go:14:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    for _, v := range text {\n\
    \        if !contains(vowels, v) {\n            v = unicode.ToLower(v)\n     \
    \   }\n    }\n    return string(text)\n}\n\nfunc TestRemove_Vowels(t *testing.T)\
    \ {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected:\
    \ \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\"\
    \ },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgan6n6eu_test.go:11:10: no new variables on left side of :=

    /tmp/tmpgan6n6eu_test.go:11:13: cannot use []rune(text) (value of type []rune)
    as type string in assignment

    /tmp/tmpgan6n6eu_test.go:13:13: undefined: contains

    /tmp/tmpgan6n6eu_test.go:14:17: undefined: unicode

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    result := \"\"\n    for _, char := range text {\n \
    \       if !contains(vowels, char) {\n            result += char\n        }\n\
    \    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate\
    \ := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\\
    nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n  \
    \   { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqxbmkirm_test.go:13:13: undefined: contains

    /tmp/tmpqxbmkirm_test.go:14:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune(\"aeiou\"\
    )\n    text := []rune(text)\n    result := []rune{}\n    for _, letter := range\
    \ text {\n        if !contains(vowels, letter) {\n            result = append(result,\
    \ letter)\n        }\n    }\n    return string(result)\n}\n\nfunc TestRemove_Vowels(t\
    \ *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"\
    ), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected:\
    \ \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     {\
    \ actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"\
    EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"\
    ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5usktmdm_test.go:11:10: no new variables on left side of :=

    /tmp/tmp5usktmdm_test.go:11:13: cannot use []rune(text) (value of type []rune)
    as type string in assignment

    /tmp/tmp5usktmdm_test.go:14:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073417
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    result := \"\"\n    for _, char := range text {\n \
    \       if !contains(vowels, char) {\n            result += char\n        }\n\
    \    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate\
    \ := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\\
    nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n  \
    \   { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqxbmkirm_test.go:13:13: undefined: contains

    /tmp/tmpqxbmkirm_test.go:14:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    result := []rune{}\n    for\
    \ _, letter := range text {\n        if !contains(vowels, letter) {\n        \
    \    result = append(result, letter)\n        }\n    }\n    return string(result)\n\
    }\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n\
    \     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"\
    eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"\
    cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual:\
    \ candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp22l0e4hl_test.go:11:10: no new variables on left side of :=

    /tmp/tmp22l0e4hl_test.go:11:13: cannot use []rune(text) (value of type []rune)
    as type string in assignment

    /tmp/tmp22l0e4hl_test.go:14:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    for _, v := range text {\n\
    \        if !contains(vowels, v) {\n            v = unicode.ToLower(v)\n     \
    \   }\n    }\n    return string(text)\n}\n\nfunc TestRemove_Vowels(t *testing.T)\
    \ {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected:\
    \ \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\"\
    \ },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgan6n6eu_test.go:11:10: no new variables on left side of :=

    /tmp/tmpgan6n6eu_test.go:11:13: cannot use []rune(text) (value of type []rune)
    as type string in assignment

    /tmp/tmpgan6n6eu_test.go:13:13: undefined: contains

    /tmp/tmpgan6n6eu_test.go:14:17: undefined: unicode

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    result := \"\"\n    for _, letter := range text {\n\
    \        if !contains(vowels, letter) {\n            result += letter\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n\
    \  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected:\
    \ \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\"\
    \ },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoebzzi3y_test.go:13:13: undefined: contains

    /tmp/tmpoebzzi3y_test.go:14:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    result := \"\"\n    for _, letter := range text {\n\
    \        if !contains(vowels, letter) {\n            result += letter\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n\
    \  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected:\
    \ \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\"\
    \ },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoebzzi3y_test.go:13:13: undefined: contains

    /tmp/tmpoebzzi3y_test.go:14:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []string{\"\
    a\", \"e\", \"i\", \"o\", \"u\"}\n    result := \"\"\n    for _, letter := range\
    \ text {\n        if !contains(vowels, letter) {\n            result += letter\n\
    \        }\n    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T)\
    \ {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected:\
    \ \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\"\
    \ },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfpi4fnva_test.go:13:13: undefined: contains

    /tmp/tmpfpi4fnva_test.go:14:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []string{\"\
    a\", \"e\", \"i\", \"o\", \"u\"}\n    text := []rune(text)\n    for _, v := range\
    \ text {\n        if !contains(vowels, v) {\n            delete(text, v)\n   \
    \     }\n    }\n    return string(text)\n}\n\nfunc TestRemove_Vowels(t *testing.T)\
    \ {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected:\
    \ \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\"\
    \ },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzxxlhpy8_test.go:11:10: no new variables on left side of :=

    /tmp/tmpzxxlhpy8_test.go:11:13: cannot use []rune(text) (value of type []rune)
    as type string in assignment

    /tmp/tmpzxxlhpy8_test.go:13:13: undefined: contains

    /tmp/tmpzxxlhpy8_test.go:14:20: invalid argument: text (variable of type string)
    is not a map

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    result := \"\"\n    for _, char := range text {\n \
    \       if !contains(vowels, char) {\n            result += char\n        }\n\
    \    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate\
    \ := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\\
    nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n  \
    \   { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqxbmkirm_test.go:13:13: undefined: contains

    /tmp/tmpqxbmkirm_test.go:14:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []string{\"\
    a\", \"e\", \"i\", \"o\", \"u\"}\n    text := strings.Replace(text, \" \", \"\"\
    , -1)\n    for _, v := range vowels {\n        text = strings.Replace(text, v,\
    \ \"\", -1)\n    }\n    return text\n}\n\nfunc TestRemove_Vowels(t *testing.T)\
    \ {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected:\
    \ \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\"\
    \ },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp33eqs718_test.go:11:10: no new variables on left side of :=

    /tmp/tmp33eqs718_test.go:11:13: undefined: strings

    /tmp/tmp33eqs718_test.go:13:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073417
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    result := \"\"\n    for _, char := range text {\n \
    \       if !contains(vowels, char) {\n            result += char\n        }\n\
    \    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate\
    \ := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\\
    nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n  \
    \   { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqxbmkirm_test.go:13:13: undefined: contains

    /tmp/tmpqxbmkirm_test.go:14:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    result := \"\"\n    for _, letter := range text {\n\
    \        if !contains(vowels, letter) {\n            result += letter\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n\
    \  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected:\
    \ \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\"\
    \ },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoebzzi3y_test.go:13:13: undefined: contains

    /tmp/tmpoebzzi3y_test.go:14:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []string{\"\
    a\", \"e\", \"i\", \"o\", \"u\"}\n    for _, vowel := range vowels {\n       \
    \ text = strings.Replace(text, vowel, \"\", -1)\n    }\n    return text\n}\n\n\
    func TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual:\
    \ candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"\
    ), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n\
    \     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"\
    ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppyo3ttf1_test.go:12:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073417
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    result := \"\"\n    for _, letter := range text {\n\
    \        if !contains(vowels, letter) {\n            result += letter\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n\
    \  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected:\
    \ \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\"\
    \ },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoebzzi3y_test.go:13:13: undefined: contains

    /tmp/tmpoebzzi3y_test.go:14:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    result := \"\"\n    for _, char := range text {\n \
    \       if !contains(vowels, char) {\n            result += char\n        }\n\
    \    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate\
    \ := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\\
    nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n  \
    \   { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqxbmkirm_test.go:13:13: undefined: contains

    /tmp/tmpqxbmkirm_test.go:14:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []string{\"\
    a\", \"e\", \"i\", \"o\", \"u\"}\n    text := []rune(text)\n    for _, v := range\
    \ text {\n        if !contains(vowels, v) {\n            v = unicode.ToLower(v)\n\
    \        }\n    }\n    return string(text)\n}\n\nfunc TestRemove_Vowels(t *testing.T)\
    \ {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected:\
    \ \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\"\
    \ },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_m3fllug_test.go:11:10: no new variables on left side of :=

    /tmp/tmp_m3fllug_test.go:11:13: cannot use []rune(text) (value of type []rune)
    as type string in assignment

    /tmp/tmp_m3fllug_test.go:13:13: undefined: contains

    /tmp/tmp_m3fllug_test.go:14:17: undefined: unicode

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073417
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    for _, v := range text {\n\
    \        if !contains(vowels, v) {\n            v = unicode.ToLower(v)\n     \
    \   }\n    }\n    return string(text)\n}\n\nfunc TestRemove_Vowels(t *testing.T)\
    \ {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected:\
    \ \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\"\
    \ },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgan6n6eu_test.go:11:10: no new variables on left side of :=

    /tmp/tmpgan6n6eu_test.go:11:13: cannot use []rune(text) (value of type []rune)
    as type string in assignment

    /tmp/tmpgan6n6eu_test.go:13:13: undefined: contains

    /tmp/tmpgan6n6eu_test.go:14:17: undefined: unicode

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    for _, v := range text {\n\
    \        if !contains(vowels, v) {\n            v = rune(0)\n        }\n    }\n\
    \    return string(text)\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate\
    \ := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\\
    nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n  \
    \   { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgwktojyc_test.go:11:10: no new variables on left side of :=

    /tmp/tmpgwktojyc_test.go:11:13: cannot use []rune(text) (value of type []rune)
    as type string in assignment

    /tmp/tmpgwktojyc_test.go:13:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073417
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    for _, v := range text {\n\
    \        if !contains(vowels, v) {\n            v = unicode.ToLower(v)\n     \
    \   }\n    }\n    return string(text)\n}\n\nfunc TestRemove_Vowels(t *testing.T)\
    \ {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected:\
    \ \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\"\
    \ },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgan6n6eu_test.go:11:10: no new variables on left side of :=

    /tmp/tmpgan6n6eu_test.go:11:13: cannot use []rune(text) (value of type []rune)
    as type string in assignment

    /tmp/tmpgan6n6eu_test.go:13:13: undefined: contains

    /tmp/tmpgan6n6eu_test.go:14:17: undefined: unicode

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    for _, v := range text {\n\
    \        if !contains(vowels, v) {\n            v = string(v)\n        }\n   \
    \ }\n    return string(text)\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate\
    \ := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\\
    nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n  \
    \   { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw80i12an_test.go:11:10: no new variables on left side of :=

    /tmp/tmpw80i12an_test.go:11:13: cannot use []rune(text) (value of type []rune)
    as type string in assignment

    /tmp/tmpw80i12an_test.go:13:13: undefined: contains

    /tmp/tmpw80i12an_test.go:14:17: cannot use string(v) (value of type string) as
    type rune in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    for _, v := range text {\n\
    \        if !contains(vowels, v) {\n            text := append(text, v)\n    \
    \    }\n    }\n    return string(text)\n}\n\nfunc TestRemove_Vowels(t *testing.T)\
    \ {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected:\
    \ \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\"\
    \ },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmponjaa6un_test.go:11:10: no new variables on left side of :=

    /tmp/tmponjaa6un_test.go:11:13: cannot use []rune(text) (value of type []rune)
    as type string in assignment

    /tmp/tmponjaa6un_test.go:13:13: undefined: contains

    /tmp/tmponjaa6un_test.go:14:28: first argument to append must be a slice; have
    text (variable of type string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    result := []rune{}\n    for\
    \ _, letter := range text {\n        if !contains(vowels, letter) {\n        \
    \    result = append(result, letter)\n        }\n    }\n    return string(result)\n\
    }\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n\
    \     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"\
    eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"\
    cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual:\
    \ candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp22l0e4hl_test.go:11:10: no new variables on left side of :=

    /tmp/tmp22l0e4hl_test.go:11:13: cannot use []rune(text) (value of type []rune)
    as type string in assignment

    /tmp/tmp22l0e4hl_test.go:14:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []string{\"\
    a\", \"e\", \"i\", \"o\", \"u\"}\n    result := \"\"\n    for _, char := range\
    \ text {\n        if !contains(vowels, char) {\n            result += char\n \
    \       }\n    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T)\
    \ {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected:\
    \ \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\"\
    \ },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4e9gj28q_test.go:13:13: undefined: contains

    /tmp/tmp4e9gj28q_test.go:14:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073417
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    for _, v := range text {\n\
    \        if !contains(vowels, v) {\n            v = unicode.ToLower(v)\n     \
    \   }\n    }\n    return string(text)\n}\n\nfunc TestRemove_Vowels(t *testing.T)\
    \ {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected:\
    \ \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\"\
    \ },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgan6n6eu_test.go:11:10: no new variables on left side of :=

    /tmp/tmpgan6n6eu_test.go:11:13: cannot use []rune(text) (value of type []rune)
    as type string in assignment

    /tmp/tmpgan6n6eu_test.go:13:13: undefined: contains

    /tmp/tmpgan6n6eu_test.go:14:17: undefined: unicode

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    for _, v := range text {\n\
    \        if !contains(vowels, v) {\n            delete(text, v)\n        }\n \
    \   }\n    return string(text)\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n\
    \  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected:\
    \ \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\"\
    \ },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpe_dp5r12_test.go:11:10: no new variables on left side of :=

    /tmp/tmpe_dp5r12_test.go:11:13: cannot use []rune(text) (value of type []rune)
    as type string in assignment

    /tmp/tmpe_dp5r12_test.go:13:13: undefined: contains

    /tmp/tmpe_dp5r12_test.go:14:20: invalid argument: text (variable of type string)
    is not a map

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    result := []rune{}\n    for\
    \ _, letter := range text {\n        if !contains(vowels, letter) {\n        \
    \    result = append(result, letter)\n        }\n    }\n    return string(result)\n\
    }\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n\
    \     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"\
    eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"\
    cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual:\
    \ candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp22l0e4hl_test.go:11:10: no new variables on left side of :=

    /tmp/tmp22l0e4hl_test.go:11:13: cannot use []rune(text) (value of type []rune)
    as type string in assignment

    /tmp/tmp22l0e4hl_test.go:14:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []string{\"\
    a\", \"e\", \"i\", \"o\", \"u\"}\n    text := []rune(text)\n    result := []rune{}\n\
    \    for _, letter := range text {\n        if !contains(vowels, letter) {\n \
    \           result = append(result, letter)\n        }\n    }\n    return string(result)\n\
    }\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n\
    \     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"\
    eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"\
    cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual:\
    \ candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp98mjk08f_test.go:11:10: no new variables on left side of :=

    /tmp/tmp98mjk08f_test.go:11:13: cannot use []rune(text) (value of type []rune)
    as type string in assignment

    /tmp/tmp98mjk08f_test.go:14:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073417
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    for _, v := range text {\n\
    \        if !contains(vowels, v) {\n            v = string(v)\n        }\n   \
    \ }\n    return string(text)\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate\
    \ := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\\
    nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n  \
    \   { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw80i12an_test.go:11:10: no new variables on left side of :=

    /tmp/tmpw80i12an_test.go:11:13: cannot use []rune(text) (value of type []rune)
    as type string in assignment

    /tmp/tmpw80i12an_test.go:13:13: undefined: contains

    /tmp/tmpw80i12an_test.go:14:17: cannot use string(v) (value of type string) as
    type rune in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune(\"aeiou\"\
    )\n    result := \"\"\n    for _, char := range text {\n        if !contains(vowels,\
    \ char) {\n            result += char\n        }\n    }\n    return result\n}\n\
    \nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual:\
    \ candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"\
    ), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n\
    \     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"\
    ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsknfgm4u_test.go:13:13: undefined: contains

    /tmp/tmpsknfgm4u_test.go:14:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune(\"aeiou\"\
    )\n    for _, v := range vowels {\n        text = strings.Replace(text, v, \"\"\
    , -1)\n    }\n    return text\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n \
    \ candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected:\
    \ \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\"\
    \ },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprres73t8_test.go:12:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073417
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []string{\"\
    a\", \"e\", \"i\", \"o\", \"u\"}\n    result := \"\"\n    for _, char := range\
    \ text {\n        if !vowels[char] {\n            result += char\n        }\n\
    \    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate\
    \ := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\\
    nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n  \
    \   { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb3o1yj2v_test.go:13:13: invalid operation: operator ! not defined on vowels[char]
    (variable of type string)

    /tmp/tmpb3o1yj2v_test.go:14:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073417
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    for _, v := range text {\n\
    \        if !contains(vowels, v) {\n            text := append(text, v)\n    \
    \    }\n    }\n    return string(text)\n}\n\nfunc TestRemove_Vowels(t *testing.T)\
    \ {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected:\
    \ \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\"\
    \ },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmponjaa6un_test.go:11:10: no new variables on left side of :=

    /tmp/tmponjaa6un_test.go:11:13: cannot use []rune(text) (value of type []rune)
    as type string in assignment

    /tmp/tmponjaa6un_test.go:13:13: undefined: contains

    /tmp/tmponjaa6un_test.go:14:28: first argument to append must be a slice; have
    text (variable of type string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    result := []rune{}\n    for\
    \ _, letter := range text {\n        if !contains(vowels, letter) {\n        \
    \    result = append(result, letter)\n        }\n    }\n    return string(result)\n\
    }\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n\
    \     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"\
    eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"\
    cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual:\
    \ candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp22l0e4hl_test.go:11:10: no new variables on left side of :=

    /tmp/tmp22l0e4hl_test.go:11:13: cannot use []rune(text) (value of type []rune)
    as type string in assignment

    /tmp/tmp22l0e4hl_test.go:14:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []string{\"\
    a\", \"e\", \"i\", \"o\", \"u\"}\n    text := []rune(text)\n    for _, v := range\
    \ text {\n        if !contains(vowels, v) {\n            text := append(text,\
    \ v)\n        }\n    }\n    return string(text)\n}\n\nfunc TestRemove_Vowels(t\
    \ *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"\
    ), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected:\
    \ \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     {\
    \ actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"\
    EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"\
    ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp34xzi4od_test.go:11:10: no new variables on left side of :=

    /tmp/tmp34xzi4od_test.go:11:13: cannot use []rune(text) (value of type []rune)
    as type string in assignment

    /tmp/tmp34xzi4od_test.go:13:13: undefined: contains

    /tmp/tmp34xzi4od_test.go:14:28: first argument to append must be a slice; have
    text (variable of type string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073417
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune(\"aeiou\"\
    )\n    result := \"\"\n    for _, char := range text {\n        if !contains(vowels,\
    \ char) {\n            result += char\n        }\n    }\n    return result\n}\n\
    \nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n     { actual:\
    \ candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"eeeee\"\
    ), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"cB\" },\n\
    \     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"\
    ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsknfgm4u_test.go:13:13: undefined: contains

    /tmp/tmpsknfgm4u_test.go:14:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    result := []rune{}\n    for\
    \ _, letter := range text {\n        if !contains(vowels, letter) {\n        \
    \    result = append(result, letter)\n        }\n    }\n    return string(result)\n\
    }\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n\
    \     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"\
    eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"\
    cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual:\
    \ candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp22l0e4hl_test.go:11:10: no new variables on left side of :=

    /tmp/tmp22l0e4hl_test.go:11:13: cannot use []rune(text) (value of type []rune)
    as type string in assignment

    /tmp/tmp22l0e4hl_test.go:14:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    for _, v := range text {\n\
    \        if !contains(vowels, v) {\n            v = unicode.ToLower(v)\n     \
    \   }\n    }\n    return string(text)\n}\n\nfunc TestRemove_Vowels(t *testing.T)\
    \ {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected:\
    \ \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\"\
    \ },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgan6n6eu_test.go:11:10: no new variables on left side of :=

    /tmp/tmpgan6n6eu_test.go:11:13: cannot use []rune(text) (value of type []rune)
    as type string in assignment

    /tmp/tmpgan6n6eu_test.go:13:13: undefined: contains

    /tmp/tmpgan6n6eu_test.go:14:17: undefined: unicode

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    result := []rune{}\n    for\
    \ _, letter := range text {\n        if !contains(vowels, letter) {\n        \
    \    result = append(result, letter)\n        }\n    }\n    return string(result)\n\
    }\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate := remove_vowels\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\nghjklm\" },\n\
    \     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n     { actual: candidate(\"\
    eeeee\"), expected: \"\" },\n     { actual: candidate(\"acBAA\"), expected: \"\
    cB\" },\n     { actual: candidate(\"EcBOO\"), expected: \"cB\" },\n     { actual:\
    \ candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp22l0e4hl_test.go:11:10: no new variables on left side of :=

    /tmp/tmp22l0e4hl_test.go:11:13: cannot use []rune(text) (value of type []rune)
    as type string in assignment

    /tmp/tmp22l0e4hl_test.go:14:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    for _, v := range text {\n\
    \        if !contains(vowels, v) {\n            v = unicode.ToLower(v)\n     \
    \   }\n    }\n    return string(text)\n}\n\nfunc TestRemove_Vowels(t *testing.T)\
    \ {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected:\
    \ \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\"\
    \ },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgan6n6eu_test.go:11:10: no new variables on left side of :=

    /tmp/tmpgan6n6eu_test.go:11:13: cannot use []rune(text) (value of type []rune)
    as type string in assignment

    /tmp/tmpgan6n6eu_test.go:13:13: undefined: contains

    /tmp/tmpgan6n6eu_test.go:14:17: undefined: unicode

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    for _, v := range text {\n\
    \        if !contains(vowels, v) {\n            text := append(text, v)\n    \
    \    }\n    }\n    return string(text)\n}\n\nfunc TestRemove_Vowels(t *testing.T)\
    \ {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected:\
    \ \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\"\
    \ },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmponjaa6un_test.go:11:10: no new variables on left side of :=

    /tmp/tmponjaa6un_test.go:11:13: cannot use []rune(text) (value of type []rune)
    as type string in assignment

    /tmp/tmponjaa6un_test.go:13:13: undefined: contains

    /tmp/tmponjaa6un_test.go:14:28: first argument to append must be a slice; have
    text (variable of type string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []string{\"\
    a\", \"e\", \"i\", \"o\", \"u\"}\n    result := \"\"\n    for _, letter := range\
    \ text {\n        if !contains(vowels, letter) {\n            result += letter\n\
    \        }\n    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T)\
    \ {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected:\
    \ \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\"\
    \ },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfpi4fnva_test.go:13:13: undefined: contains

    /tmp/tmpfpi4fnva_test.go:14:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []string{\"\
    a\", \"e\", \"i\", \"o\", \"u\"}\n    for _, v := range vowels {\n        text\
    \ = text.replaceAllString(v, \"\")\n    }\n    return text\n}\n\nfunc TestRemove_Vowels(t\
    \ *testing.T) {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"\
    ), expected: \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected:\
    \ \"fdcb\" },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     {\
    \ actual: candidate(\"acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"\
    EcBOO\"), expected: \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"\
    ybcd\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps8ud68eq_test.go:12:21: text.replaceAllString undefined (type string has
    no field or method replaceAllString)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    result := \"\"\n    for _, letter := range text {\n\
    \        if !contains(vowels, letter) {\n            result += letter\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n\
    \  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected:\
    \ \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\"\
    \ },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoebzzi3y_test.go:13:13: undefined: contains

    /tmp/tmpoebzzi3y_test.go:14:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    result := \"\"\n    for _, char := range text {\n \
    \       if !contains(vowels, char) {\n            result += char\n        }\n\
    \    }\n    return result\n}\n\nfunc TestRemove_Vowels(t *testing.T) {\n  candidate\
    \ := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected: \"bcdf\\\
    nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\" },\n  \
    \   { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqxbmkirm_test.go:13:13: undefined: contains

    /tmp/tmpqxbmkirm_test.go:14:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
- exit_code: 2
  program: "package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// remove_vowels is a function that takes string and returns string without\
    \ vowels.\nfunc remove_vowels(text string) string {\n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    text := []rune(text)\n    for _, v := range text {\n\
    \        if !contains(vowels, v) {\n            v = unicode.ToLower(v)\n     \
    \   }\n    }\n    return string(text)\n}\n\nfunc TestRemove_Vowels(t *testing.T)\
    \ {\n  candidate := remove_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"abcdef\\nghijklm\"), expected:\
    \ \"bcdf\\nghjklm\" },\n     { actual: candidate(\"fedcba\"), expected: \"fdcb\"\
    \ },\n     { actual: candidate(\"eeeee\"), expected: \"\" },\n     { actual: candidate(\"\
    acBAA\"), expected: \"cB\" },\n     { actual: candidate(\"EcBOO\"), expected:\
    \ \"cB\" },\n     { actual: candidate(\"ybcd\"), expected: \"ybcd\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgan6n6eu_test.go:11:10: no new variables on left side of :=

    /tmp/tmpgan6n6eu_test.go:11:13: cannot use []rune(text) (value of type []rune)
    as type string in assignment

    /tmp/tmpgan6n6eu_test.go:13:13: undefined: contains

    /tmp/tmpgan6n6eu_test.go:14:17: undefined: unicode

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073416
